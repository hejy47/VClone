{"Source Block": ["verilog-ethernet/rtl/ip_eth_tx_64.v@244:501@HdlStmProcess", "        shift_ip_payload_axis_tuser = (s_ip_payload_axis_tuser && (s_ip_payload_axis_tkeep[7:4] == 0));\n        shift_ip_payload_s_tready = !(s_ip_payload_axis_tlast && s_ip_payload_axis_tvalid && transfer_in_save) && !save_ip_payload_axis_tlast_reg;\n    end\nend\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    s_ip_hdr_ready_next = 1'b0;\n    s_ip_payload_axis_tready_next = 1'b0;\n\n    store_ip_hdr = 1'b0;\n\n    store_last_word = 1'b0;\n\n    flush_save = 1'b0;\n    transfer_in_save = 1'b0;\n\n    hdr_ptr_next = hdr_ptr_reg;\n    word_count_next = word_count_reg;\n\n    hdr_sum_temp = 20'd0;\n    hdr_sum_next = hdr_sum_reg;\n\n    m_eth_hdr_valid_next = m_eth_hdr_valid_reg && !m_eth_hdr_ready;\n\n    error_payload_early_termination_next = 1'b0;\n\n    m_eth_payload_axis_tdata_int = 1'b0;\n    m_eth_payload_axis_tkeep_int = 1'b0;\n    m_eth_payload_axis_tvalid_int = 1'b0;\n    m_eth_payload_axis_tlast_int = 1'b0;\n    m_eth_payload_axis_tuser_int = 1'b0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            hdr_ptr_next = 6'd0;\n            flush_save = 1'b1;\n            s_ip_hdr_ready_next = !m_eth_hdr_valid_next;\n\n            if (s_ip_hdr_ready && s_ip_hdr_valid) begin\n                store_ip_hdr = 1'b1;\n                hdr_sum_next = {4'd4, 4'd5, s_ip_dscp, s_ip_ecn} +\n                               s_ip_length +\n                               s_ip_identification +\n                               {s_ip_flags, s_ip_fragment_offset} +\n                               {s_ip_ttl, s_ip_protocol} +\n                               s_ip_source_ip[31:16] +\n                               s_ip_source_ip[15: 0] +\n                               s_ip_dest_ip[31:16] +\n                               s_ip_dest_ip[15: 0];\n                s_ip_hdr_ready_next = 1'b0;\n                m_eth_hdr_valid_next = 1'b1;\n                if (m_eth_payload_axis_tready_int_reg) begin\n                    m_eth_payload_axis_tvalid_int = 1'b1;\n                    m_eth_payload_axis_tdata_int[ 7: 0] = {4'd4, 4'd5}; // ip_version, ip_ihl\n                    m_eth_payload_axis_tdata_int[15: 8] = {s_ip_dscp, s_ip_ecn};\n                    m_eth_payload_axis_tdata_int[23:16] = s_ip_length[15: 8];\n                    m_eth_payload_axis_tdata_int[31:24] = s_ip_length[ 7: 0];\n                    m_eth_payload_axis_tdata_int[39:32] = s_ip_identification[15: 8];\n                    m_eth_payload_axis_tdata_int[47:40] = s_ip_identification[ 7: 0];\n                    m_eth_payload_axis_tdata_int[55:48] = {s_ip_flags, s_ip_fragment_offset[12: 8]};\n                    m_eth_payload_axis_tdata_int[63:56] = s_ip_fragment_offset[ 7: 0];\n                    m_eth_payload_axis_tkeep_int = 8'hff;\n                    hdr_ptr_next = 6'd8;\n                end\n                state_next = STATE_WRITE_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_WRITE_HEADER: begin\n            // write header\n            word_count_next = ip_length_reg - 5*4 + 4;\n\n            if (m_eth_payload_axis_tready_int_reg) begin\n                hdr_ptr_next = hdr_ptr_reg + 6'd8;\n                m_eth_payload_axis_tvalid_int = 1'b1;\n                state_next = STATE_WRITE_HEADER;\n                case (hdr_ptr_reg)\n                    6'h00: begin\n                        m_eth_payload_axis_tdata_int[ 7: 0] = {4'd4, 4'd5}; // ip_version, ip_ihl\n                        m_eth_payload_axis_tdata_int[15: 8] = {ip_dscp_reg, ip_ecn_reg};\n                        m_eth_payload_axis_tdata_int[23:16] = ip_length_reg[15: 8];\n                        m_eth_payload_axis_tdata_int[31:24] = ip_length_reg[ 7: 0];\n                        m_eth_payload_axis_tdata_int[39:32] = ip_identification_reg[15: 8];\n                        m_eth_payload_axis_tdata_int[47:40] = ip_identification_reg[ 7: 0];\n                        m_eth_payload_axis_tdata_int[55:48] = {ip_flags_reg, ip_fragment_offset_reg[12: 8]};\n                        m_eth_payload_axis_tdata_int[63:56] = ip_fragment_offset_reg[ 7: 0];\n                        m_eth_payload_axis_tkeep_int = 8'hff;\n                    end\n                    6'h08: begin\n                        hdr_sum_temp = hdr_sum_reg[15:0] + hdr_sum_reg[19:16];\n                        hdr_sum_temp = hdr_sum_temp[15:0] + hdr_sum_temp[16];\n                        m_eth_payload_axis_tdata_int[ 7: 0] = ip_ttl_reg;\n                        m_eth_payload_axis_tdata_int[15: 8] = ip_protocol_reg;\n                        m_eth_payload_axis_tdata_int[23:16] = ~hdr_sum_temp[15: 8];\n                        m_eth_payload_axis_tdata_int[31:24] = ~hdr_sum_temp[ 7: 0];\n                        m_eth_payload_axis_tdata_int[39:32] = ip_source_ip_reg[31:24];\n                        m_eth_payload_axis_tdata_int[47:40] = ip_source_ip_reg[23:16];\n                        m_eth_payload_axis_tdata_int[55:48] = ip_source_ip_reg[15: 8];\n                        m_eth_payload_axis_tdata_int[63:56] = ip_source_ip_reg[ 7: 0];\n                        m_eth_payload_axis_tkeep_int = 8'hff;\n                        s_ip_payload_axis_tready_next = m_eth_payload_axis_tready_int_early;\n                        state_next = STATE_WRITE_HEADER_LAST;\n                    end\n                endcase\n            end else begin\n                state_next = STATE_WRITE_HEADER;\n            end\n        end\n        STATE_WRITE_HEADER_LAST: begin\n            // last header word requires first payload word; process accordingly\n            s_ip_payload_axis_tready_next = m_eth_payload_axis_tready_int_early && shift_ip_payload_s_tready;\n\n            if (s_ip_payload_axis_tready && s_ip_payload_axis_tvalid) begin\n                m_eth_payload_axis_tvalid_int = 1'b1;\n                transfer_in_save = 1'b1;\n\n                m_eth_payload_axis_tdata_int[ 7: 0] = ip_dest_ip_reg[31:24];\n                m_eth_payload_axis_tdata_int[15: 8] = ip_dest_ip_reg[23:16];\n                m_eth_payload_axis_tdata_int[23:16] = ip_dest_ip_reg[15: 8];\n                m_eth_payload_axis_tdata_int[31:24] = ip_dest_ip_reg[ 7: 0];\n                m_eth_payload_axis_tdata_int[39:32] = shift_ip_payload_axis_tdata[39:32];\n                m_eth_payload_axis_tdata_int[47:40] = shift_ip_payload_axis_tdata[47:40];\n                m_eth_payload_axis_tdata_int[55:48] = shift_ip_payload_axis_tdata[55:48];\n                m_eth_payload_axis_tdata_int[63:56] = shift_ip_payload_axis_tdata[63:56];\n                m_eth_payload_axis_tkeep_int = {shift_ip_payload_axis_tkeep[7:4], 4'hF};\n                m_eth_payload_axis_tlast_int = shift_ip_payload_axis_tlast;\n                m_eth_payload_axis_tuser_int = shift_ip_payload_axis_tuser;\n                word_count_next = word_count_reg - 16'd8;\n\n                if (keep2count(m_eth_payload_axis_tkeep_int) >= word_count_reg) begin\n                    // have entire payload\n                    m_eth_payload_axis_tkeep_int = count2keep(word_count_reg);\n                    if (shift_ip_payload_axis_tlast) begin\n                        s_ip_hdr_ready_next = !m_eth_hdr_valid_next;\n                        s_ip_payload_axis_tready_next = 1'b0;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        store_last_word = 1'b1;\n                        s_ip_payload_axis_tready_next = shift_ip_payload_s_tready;\n                        m_eth_payload_axis_tvalid_int = 1'b0;\n                        state_next = STATE_WRITE_PAYLOAD_LAST;\n                    end\n                end else begin\n                    if (shift_ip_payload_axis_tlast) begin\n                        // end of frame, but length does not match\n                        error_payload_early_termination_next = 1'b1;\n                        s_ip_payload_axis_tready_next = shift_ip_payload_s_tready;\n                        m_eth_payload_axis_tuser_int = 1'b1;\n                        state_next = STATE_WAIT_LAST;\n                    end else begin\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                end\n            end else begin\n                state_next = STATE_WRITE_HEADER_LAST;\n            end\n        end\n        STATE_WRITE_PAYLOAD: begin\n            // write payload\n            s_ip_payload_axis_tready_next = m_eth_payload_axis_tready_int_early && shift_ip_payload_s_tready;\n\n            m_eth_payload_axis_tdata_int = shift_ip_payload_axis_tdata;\n            m_eth_payload_axis_tkeep_int = shift_ip_payload_axis_tkeep;\n            m_eth_payload_axis_tvalid_int = shift_ip_payload_axis_tvalid;\n            m_eth_payload_axis_tlast_int = shift_ip_payload_axis_tlast;\n            m_eth_payload_axis_tuser_int = shift_ip_payload_axis_tuser;\n\n            store_last_word = 1'b1;\n\n            if (m_eth_payload_axis_tready_int_reg && shift_ip_payload_axis_tvalid) begin\n                // word transfer through\n                word_count_next = word_count_reg - 16'd8;\n                transfer_in_save = 1'b1;\n                if (word_count_reg <= 8) begin\n                    // have entire payload\n                    m_eth_payload_axis_tkeep_int = count2keep(word_count_reg);\n                    if (shift_ip_payload_axis_tlast) begin\n                        if (keep2count(shift_ip_payload_axis_tkeep) < word_count_reg[4:0]) begin\n                            // end of frame, but length does not match\n                            error_payload_early_termination_next = 1'b1;\n                            m_eth_payload_axis_tuser_int = 1'b1;\n                        end\n                        s_ip_payload_axis_tready_next = 1'b0;\n                        flush_save = 1'b1;\n                        s_ip_hdr_ready_next = !m_eth_hdr_valid_next;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        m_eth_payload_axis_tvalid_int = 1'b0;\n                        state_next = STATE_WRITE_PAYLOAD_LAST;\n                    end\n                end else begin\n                    if (shift_ip_payload_axis_tlast) begin\n                        // end of frame, but length does not match\n                        error_payload_early_termination_next = 1'b1;\n                        m_eth_payload_axis_tuser_int = 1'b1;\n                        s_ip_payload_axis_tready_next = 1'b0;\n                        flush_save = 1'b1;\n                        s_ip_hdr_ready_next = !m_eth_hdr_valid_next;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD;\n            end\n        end\n        STATE_WRITE_PAYLOAD_LAST: begin\n            // read and discard until end of frame\n            s_ip_payload_axis_tready_next = m_eth_payload_axis_tready_int_early && shift_ip_payload_s_tready;\n\n            m_eth_payload_axis_tdata_int = last_word_data_reg;\n            m_eth_payload_axis_tkeep_int = last_word_keep_reg;\n            m_eth_payload_axis_tvalid_int = shift_ip_payload_axis_tvalid && shift_ip_payload_axis_tlast;\n            m_eth_payload_axis_tlast_int = shift_ip_payload_axis_tlast;\n            m_eth_payload_axis_tuser_int = shift_ip_payload_axis_tuser;\n\n            if (m_eth_payload_axis_tready_int_reg && shift_ip_payload_axis_tvalid) begin\n                transfer_in_save = 1'b1;\n                if (shift_ip_payload_axis_tlast) begin\n                    s_ip_hdr_ready_next = !m_eth_hdr_valid_next;\n                    s_ip_payload_axis_tready_next = 1'b0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WRITE_PAYLOAD_LAST;\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD_LAST;\n            end\n        end\n        STATE_WAIT_LAST: begin\n            // read and discard until end of frame\n            s_ip_payload_axis_tready_next = shift_ip_payload_s_tready;\n\n            if (shift_ip_payload_axis_tvalid) begin\n                transfer_in_save = 1'b1;\n                if (shift_ip_payload_axis_tlast) begin\n                    s_ip_hdr_ready_next = !m_eth_hdr_valid_next;\n                    s_ip_payload_axis_tready_next = 1'b0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WAIT_LAST;\n                end\n            end else begin\n                state_next = STATE_WAIT_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        s_ip_hdr_ready_reg <= 1'b0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[411, "            m_eth_payload_axis_tvalid_int = shift_ip_payload_axis_tvalid;\n"], [461, "            m_eth_payload_axis_tvalid_int = shift_ip_payload_axis_tvalid && shift_ip_payload_axis_tlast;\n"]], "Add": [[420, "                m_eth_payload_axis_tvalid_int = 1'b1;\n"], [469, "                    m_eth_payload_axis_tvalid_int = 1'b1;\n"]]}}