{"Source Block": ["verilog-ethernet/rtl/ip_eth_tx.v@180:373@HdlStmProcess", "        t = a+b;\n        add1c16b = t[15:0] + t[16];\n    end\nendfunction\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    s_ip_hdr_ready_next = 1'b0;\n    s_ip_payload_axis_tready_next = 1'b0;\n\n    store_ip_hdr = 1'b0;\n\n    store_last_word = 1'b0;\n\n    hdr_ptr_next = hdr_ptr_reg;\n    word_count_next = word_count_reg;\n\n    hdr_sum_next = hdr_sum_reg;\n\n    m_eth_hdr_valid_next = m_eth_hdr_valid_reg && !m_eth_hdr_ready;\n\n    error_payload_early_termination_next = 1'b0;\n\n    m_eth_payload_axis_tdata_int = 8'd0;\n    m_eth_payload_axis_tvalid_int = 1'b0;\n    m_eth_payload_axis_tlast_int = 1'b0;\n    m_eth_payload_axis_tuser_int = 1'b0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            hdr_ptr_next = 6'd0;\n            s_ip_hdr_ready_next = !m_eth_hdr_valid_next;\n\n            if (s_ip_hdr_ready && s_ip_hdr_valid) begin\n                store_ip_hdr = 1'b1;\n                s_ip_hdr_ready_next = 1'b0;\n                m_eth_hdr_valid_next = 1'b1;\n                if (m_eth_payload_axis_tready_int_reg) begin\n                    m_eth_payload_axis_tvalid_int = 1'b1;\n                    m_eth_payload_axis_tdata_int = {4'd4, 4'd5}; // ip_version, ip_ihl\n                    hdr_ptr_next = 6'd1;\n                end\n                state_next = STATE_WRITE_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_WRITE_HEADER: begin\n            // write header\n            word_count_next = ip_length_reg - 5*4;\n\n            if (m_eth_payload_axis_tready_int_reg) begin\n                hdr_ptr_next = hdr_ptr_reg + 6'd1;\n                m_eth_payload_axis_tvalid_int = 1;\n                state_next = STATE_WRITE_HEADER;\n                case (hdr_ptr_reg)\n                    6'h00: begin\n                        m_eth_payload_axis_tdata_int = {4'd4, 4'd5}; // ip_version, ip_ihl\n                    end\n                    6'h01: begin\n                        m_eth_payload_axis_tdata_int = {ip_dscp_reg, ip_ecn_reg};\n                        hdr_sum_next = {4'd4, 4'd5, ip_dscp_reg, ip_ecn_reg};\n                    end\n                    6'h02: begin\n                        m_eth_payload_axis_tdata_int = ip_length_reg[15: 8];\n                        hdr_sum_next = add1c16b(hdr_sum_reg, ip_length_reg);\n                    end\n                    6'h03: begin\n                        m_eth_payload_axis_tdata_int = ip_length_reg[ 7: 0];\n                        hdr_sum_next = add1c16b(hdr_sum_reg, ip_identification_reg);\n                    end\n                    6'h04: begin\n                        m_eth_payload_axis_tdata_int = ip_identification_reg[15: 8];\n                        hdr_sum_next = add1c16b(hdr_sum_reg, {ip_flags_reg, ip_fragment_offset_reg});\n                    end\n                    6'h05: begin\n                        m_eth_payload_axis_tdata_int = ip_identification_reg[ 7: 0];\n                        hdr_sum_next = add1c16b(hdr_sum_reg, {ip_ttl_reg, ip_protocol_reg});\n                    end\n                    6'h06: begin\n                        m_eth_payload_axis_tdata_int = {ip_flags_reg, ip_fragment_offset_reg[12:8]};\n                        hdr_sum_next = add1c16b(hdr_sum_reg, ip_source_ip_reg[31:16]);\n                    end\n                    6'h07: begin\n                        m_eth_payload_axis_tdata_int = ip_fragment_offset_reg[ 7: 0];\n                        hdr_sum_next = add1c16b(hdr_sum_reg, ip_source_ip_reg[15:0]);\n                    end\n                    6'h08: begin\n                        m_eth_payload_axis_tdata_int = ip_ttl_reg;\n                        hdr_sum_next = add1c16b(hdr_sum_reg, ip_dest_ip_reg[31:16]);\n                    end\n                    6'h09: begin\n                        m_eth_payload_axis_tdata_int = ip_protocol_reg;\n                        hdr_sum_next = add1c16b(hdr_sum_reg, ip_dest_ip_reg[15:0]);\n                    end\n                    6'h0A: m_eth_payload_axis_tdata_int = ~hdr_sum_reg[15: 8];\n                    6'h0B: m_eth_payload_axis_tdata_int = ~hdr_sum_reg[ 7: 0];\n                    6'h0C: m_eth_payload_axis_tdata_int = ip_source_ip_reg[31:24];\n                    6'h0D: m_eth_payload_axis_tdata_int = ip_source_ip_reg[23:16];\n                    6'h0E: m_eth_payload_axis_tdata_int = ip_source_ip_reg[15: 8];\n                    6'h0F: m_eth_payload_axis_tdata_int = ip_source_ip_reg[ 7: 0];\n                    6'h10: m_eth_payload_axis_tdata_int = ip_dest_ip_reg[31:24];\n                    6'h11: m_eth_payload_axis_tdata_int = ip_dest_ip_reg[23:16];\n                    6'h12: m_eth_payload_axis_tdata_int = ip_dest_ip_reg[15: 8];\n                    6'h13: begin\n                        m_eth_payload_axis_tdata_int = ip_dest_ip_reg[ 7: 0];\n                        s_ip_payload_axis_tready_next = m_eth_payload_axis_tready_int_early;\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                endcase\n            end else begin\n                state_next = STATE_WRITE_HEADER;\n            end\n        end\n        STATE_WRITE_PAYLOAD: begin\n            // write payload\n            s_ip_payload_axis_tready_next = m_eth_payload_axis_tready_int_early;\n\n            m_eth_payload_axis_tdata_int = s_ip_payload_axis_tdata;\n            m_eth_payload_axis_tvalid_int = s_ip_payload_axis_tvalid;\n            m_eth_payload_axis_tlast_int = s_ip_payload_axis_tlast;\n            m_eth_payload_axis_tuser_int = s_ip_payload_axis_tuser;\n\n            if (s_ip_payload_axis_tready && s_ip_payload_axis_tvalid) begin\n                // word transfer through\n                word_count_next = word_count_reg - 6'd1;\n                if (s_ip_payload_axis_tlast) begin\n                    if (word_count_reg != 16'd1) begin\n                        // end of frame, but length does not match\n                        m_eth_payload_axis_tuser_int = 1'b1;\n                        error_payload_early_termination_next = 1'b1;\n                    end\n                    s_ip_hdr_ready_next = !m_eth_hdr_valid_next;\n                    s_ip_payload_axis_tready_next = 1'b0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    if (word_count_reg == 16'd1) begin\n                        store_last_word = 1'b1;\n                        m_eth_payload_axis_tvalid_int = 1'b0;\n                        state_next = STATE_WRITE_PAYLOAD_LAST;\n                    end else begin\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD;\n            end\n        end\n        STATE_WRITE_PAYLOAD_LAST: begin\n            // read and discard until end of frame\n            s_ip_payload_axis_tready_next = m_eth_payload_axis_tready_int_early;\n\n            m_eth_payload_axis_tdata_int = last_word_data_reg;\n            m_eth_payload_axis_tvalid_int = s_ip_payload_axis_tvalid && s_ip_payload_axis_tlast;\n            m_eth_payload_axis_tlast_int = s_ip_payload_axis_tlast;\n            m_eth_payload_axis_tuser_int = s_ip_payload_axis_tuser;\n\n            if (s_ip_payload_axis_tready && s_ip_payload_axis_tvalid) begin\n                if (s_ip_payload_axis_tlast) begin\n                    s_ip_hdr_ready_next = !m_eth_hdr_valid_next;\n                    s_ip_payload_axis_tready_next = 1'b0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WRITE_PAYLOAD_LAST;\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD_LAST;\n            end\n        end\n        STATE_WAIT_LAST: begin\n            // read and discard until end of frame\n            s_ip_payload_axis_tready_next = 1'b1;\n\n            if (s_ip_payload_axis_tready && s_ip_payload_axis_tvalid) begin\n                if (s_ip_payload_axis_tlast) begin\n                    s_ip_hdr_ready_next = !m_eth_hdr_valid_next;\n                    s_ip_payload_axis_tready_next = 1'b0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WAIT_LAST;\n                end\n            end else begin\n                state_next = STATE_WAIT_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        s_ip_hdr_ready_reg <= 1'b0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[301, "            m_eth_payload_axis_tvalid_int = s_ip_payload_axis_tvalid;\n"], [335, "            m_eth_payload_axis_tvalid_int = s_ip_payload_axis_tvalid && s_ip_payload_axis_tlast;\n"]], "Add": [[307, "                m_eth_payload_axis_tvalid_int = 1'b1;\n"], [342, "                    m_eth_payload_axis_tvalid_int = 1'b1;\n"]]}}