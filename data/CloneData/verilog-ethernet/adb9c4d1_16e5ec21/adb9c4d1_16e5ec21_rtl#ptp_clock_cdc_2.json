{"Source Block": ["verilog-ethernet/rtl/ptp_clock_cdc.v@333:454@HdlStmProcess", "reg [TS_NS_WIDTH+1-1:0] ts_ns_diff_reg = 31'd0;\nreg [FNS_WIDTH-1:0] ts_fns_diff_reg = 16'd0;\n\nreg [48:0] time_err_int_reg = 32'd0;\n\nalways @(posedge output_clk) begin\n    ts_step_reg <= 0;\n\n    diff_valid_reg <= 1'b0;\n    diff_offset_valid_reg <= 1'b0;\n\n    // 96 bit timestamp\n    if (TS_WIDTH == 96) begin\n        if (!ts_ns_ovf_reg[30]) begin\n            // if the overflow lookahead did not borrow, one second has elapsed\n            // increment seconds field, pre-compute both normal increment and overflow values\n            {ts_ns_inc_reg, ts_fns_inc_reg} <= {ts_ns_ovf_reg, ts_fns_ovf_reg} + {period_ns_reg, period_fns_reg};\n            {ts_ns_ovf_reg, ts_fns_ovf_reg} <= {ts_ns_ovf_reg, ts_fns_ovf_reg} + {period_ns_reg, period_fns_reg} - {31'd1_000_000_000, {FNS_WIDTH{1'b0}}};\n            {ts_ns_reg, ts_fns_reg} <= {ts_ns_ovf_reg, ts_fns_ovf_reg};\n            ts_s_reg <= ts_s_reg + 1;\n        end else begin\n            // no increment seconds field, pre-compute both normal increment and overflow values\n            {ts_ns_inc_reg, ts_fns_inc_reg} <= {ts_ns_inc_reg, ts_fns_inc_reg} + {period_ns_reg, period_fns_reg};\n            {ts_ns_ovf_reg, ts_fns_ovf_reg} <= {ts_ns_inc_reg, ts_fns_inc_reg} + {period_ns_reg, period_fns_reg} - {31'd1_000_000_000, {FNS_WIDTH{1'b0}}};\n            {ts_ns_reg, ts_fns_reg} <= {ts_ns_inc_reg, ts_fns_inc_reg};\n            ts_s_reg <= ts_s_reg;\n        end\n    end else if (TS_WIDTH == 64) begin\n        {ts_ns_reg, ts_fns_reg} <= {ts_ns_reg, ts_fns_reg} + {period_ns_reg, period_fns_reg};\n    end\n\n    // FIFO dequeue\n    if (read) begin\n        // dequeue from FIFO\n        if (TS_WIDTH == 96) begin\n            if (mem_read_data_reg[95:48] != ts_s_reg) begin\n                // seconds field doesn't match\n                if (!sec_mismatch_reg) begin\n                    // ignore the first time\n                    sec_mismatch_reg <= 1'b1;\n                end else begin\n                    // two seconds mismatches in a row; step the clock\n                    sec_mismatch_reg <= 1'b0;\n\n                    {ts_ns_inc_reg, ts_fns_inc_reg} <= (FNS_WIDTH > 16 ? mem_read_data_reg[45:0] << (FNS_WIDTH-16) : mem_read_data_reg[45:0] >> (16-FNS_WIDTH)) + {period_ns_reg, period_fns_reg};\n                    {ts_ns_ovf_reg, ts_fns_ovf_reg} <= (FNS_WIDTH > 16 ? mem_read_data_reg[45:0] << (FNS_WIDTH-16) : mem_read_data_reg[45:0] >> (16-FNS_WIDTH)) + {period_ns_reg, period_fns_reg} - {31'd1_000_000_000, {FNS_WIDTH{1'b0}}};\n                    ts_s_reg <= mem_read_data_reg[95:48];\n                    ts_ns_reg <= mem_read_data_reg[45:16];\n                    ts_fns_reg <= FNS_WIDTH > 16 ? mem_read_data_reg[15:0] << (FNS_WIDTH-16) : mem_read_data_reg[15:0] >> (16-FNS_WIDTH);\n                    ts_step_reg <= 1;\n                end\n            end else begin\n                // compute difference\n                sec_mismatch_reg <= 1'b0;\n                diff_valid_reg <= 1'b1;\n                {ts_ns_diff_reg, ts_fns_diff_reg} <= {ts_ns_reg, ts_fns_reg} - (FNS_WIDTH > 16 ? mem_read_data_reg[45:0] << (FNS_WIDTH-16) : mem_read_data_reg[45:0] >> (16-FNS_WIDTH));\n            end\n        end else if (TS_WIDTH == 64) begin\n            if (mem_read_data_reg[63:48] != ts_ns_reg[47:32]) begin\n                // high-order bits don't match\n                if (!sec_mismatch_reg) begin\n                    // ignore the first time\n                    sec_mismatch_reg <= 1'b1;\n                end else begin\n                    // two seconds mismatches in a row; step the clock\n                    sec_mismatch_reg <= 1'b0;\n\n                    ts_ns_reg <= mem_read_data_reg[63:16];\n                    ts_fns_reg <= FNS_WIDTH > 16 ? mem_read_data_reg[15:0] << (FNS_WIDTH-16) : mem_read_data_reg[15:0] >> (16-FNS_WIDTH);\n                    ts_step_reg <= 1;\n                end\n            end else begin\n                // compute difference\n                sec_mismatch_reg <= 1'b0;\n                diff_valid_reg <= 1'b1;\n                {ts_ns_diff_reg, ts_fns_diff_reg} <= {ts_ns_reg, ts_fns_reg} - (FNS_WIDTH > 16 ? mem_read_data_reg[63:0] << (FNS_WIDTH-16) : mem_read_data_reg[63:0] >> (16-FNS_WIDTH));\n            end\n        end\n    end else if (diff_valid_reg) begin\n        // offset difference by FIFO delay\n        diff_offset_valid_reg <= 1'b1;\n        diff_valid_reg <= 1'b0;\n        {ts_ns_diff_reg, ts_fns_diff_reg} <= {ts_ns_diff_reg, ts_fns_diff_reg} - ({period_ns_reg, period_fns_reg} * 2**(LOG_RATE + LOG_FIFO_DEPTH));\n    end else if (diff_offset_valid_reg) begin\n        // PI control\n        diff_offset_valid_reg <= 1'b0;\n        if (($signed({ts_ns_diff_reg, ts_fns_diff_reg}) / 2**10) + ($signed(time_err_int_reg) / 2**16) > 4*2**16) begin\n            // limit positive adjustment\n            time_err_int_reg <= 0;\n            {period_ns_reg, period_fns_reg} <= $signed(OUTPUT_PERIOD_NS*2**16 + OUTPUT_PERIOD_FNS) - ({4'd4, {FNS_WIDTH{1'b0}}});\n        end else if (($signed({ts_ns_diff_reg, ts_fns_diff_reg}) / 2**10) + ($signed(time_err_int_reg) / 2**16) < -8*2**16) begin\n            // limit negative adjustment\n            time_err_int_reg <= 0;\n            {period_ns_reg, period_fns_reg} <= $signed(OUTPUT_PERIOD_NS*2**16 + OUTPUT_PERIOD_FNS) + ({4'd8, {FNS_WIDTH{1'b0}}});\n        end else begin\n            time_err_int_reg <= $signed(time_err_int_reg) + $signed({ts_ns_diff_reg, ts_fns_diff_reg});\n            {period_ns_reg, period_fns_reg} <= $signed(OUTPUT_PERIOD_NS*2**16 + OUTPUT_PERIOD_FNS) - ($signed({ts_ns_diff_reg, ts_fns_diff_reg}) / 2**10) - ($signed(time_err_int_reg) / 2**16);\n        end\n    end\n\n    if (TS_WIDTH == 96) begin\n        pps_reg <= !ts_ns_ovf_reg[30];\n    end else if (TS_WIDTH == 64) begin\n        pps_reg <= 1'b0; // not currently implemented for 64 bit timestamp format\n    end\n\n    if (output_rst) begin\n        period_ns_reg <= OUTPUT_PERIOD_NS;\n        period_fns_reg <= OUTPUT_PERIOD_FNS;\n        ts_s_reg <= 0;\n        ts_ns_reg <= 0;\n        ts_fns_reg <= 0;\n        ts_ns_inc_reg <= 0;\n        ts_fns_inc_reg <= 0;\n        ts_ns_ovf_reg <= {TS_NS_WIDTH{1'b1}};\n        ts_fns_ovf_reg <= {FNS_WIDTH{1'b1}};\n        ts_step_reg <= 0;\n        pps_reg <= 0;\n    end\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[447, "        ts_ns_ovf_reg <= {TS_NS_WIDTH{1'b1}};\n"]], "Add": [[447, "        ts_ns_ovf_reg <= {TS_NS_WIDTH+1{1'b1}};\n"]]}}