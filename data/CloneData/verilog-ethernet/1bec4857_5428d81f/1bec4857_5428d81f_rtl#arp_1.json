{"Source Block": ["verilog-ethernet/rtl/arp.v@239:386@HdlStmProcess", "\nassign arp_response_valid = arp_response_valid_reg;\nassign arp_response_error = arp_response_error_reg;\nassign arp_response_mac = arp_response_mac_reg;\n\nalways @* begin\n    incoming_frame_ready = 1'b0;\n\n    outgoing_frame_valid_next = outgoing_frame_valid_reg && !outgoing_frame_ready;\n    outgoing_eth_dest_mac_next = outgoing_eth_dest_mac_reg;\n    outgoing_arp_oper_next = outgoing_arp_oper_reg;\n    outgoing_arp_tha_next = outgoing_arp_tha_reg;\n    outgoing_arp_tpa_next = outgoing_arp_tpa_reg;\n\n    cache_query_request_valid_next = 1'b0;\n    cache_query_request_ip_next = cache_query_request_ip_reg;\n\n    cache_write_request_valid_next = 1'b0;\n    cache_write_request_mac_next = cache_write_request_mac_reg;\n    cache_write_request_ip_next = cache_write_request_ip_reg;\n\n    arp_request_ready_next = 1'b0;\n    arp_request_ip_next = arp_request_ip_reg;\n    arp_request_operation_next = arp_request_operation_reg;\n    arp_request_retry_cnt_next = arp_request_retry_cnt_reg;\n    arp_request_timer_next = arp_request_timer_reg;\n    arp_response_valid_next = arp_response_valid_reg && !arp_response_ready;\n    arp_response_error_next = 1'b0;\n    arp_response_mac_next = 48'd0;\n\n    // manage incoming frames\n    incoming_frame_ready = outgoing_frame_ready;\n    if (incoming_frame_valid && incoming_frame_ready) begin\n        if (incoming_eth_type == 16'h0806 && incoming_arp_htype == 16'h0001 && incoming_arp_ptype == 16'h0800) begin\n            // store sender addresses in cache\n            cache_write_request_valid_next = 1'b1;\n            cache_write_request_ip_next = incoming_arp_spa;\n            cache_write_request_mac_next = incoming_arp_sha;\n            if (incoming_arp_oper == ARP_OPER_ARP_REQUEST) begin\n                // ARP request\n                if (incoming_arp_tpa == local_ip) begin\n                    // send reply frame to valid incoming request\n                    outgoing_frame_valid_next = 1'b1;\n                    outgoing_eth_dest_mac_next = incoming_eth_src_mac;\n                    outgoing_arp_oper_next = ARP_OPER_ARP_REPLY;\n                    outgoing_arp_tha_next = incoming_arp_sha;\n                    outgoing_arp_tpa_next = incoming_arp_spa;\n                end\n            end else if (incoming_arp_oper == ARP_OPER_INARP_REPLY) begin\n                // INARP request\n                if (incoming_arp_tha == local_mac) begin\n                    // send reply frame to valid incoming request\n                    outgoing_frame_valid_next = 1'b1;\n                    outgoing_eth_dest_mac_next = incoming_eth_src_mac;\n                    outgoing_arp_oper_next = ARP_OPER_INARP_REPLY;\n                    outgoing_arp_tha_next = incoming_arp_sha;\n                    outgoing_arp_tpa_next = incoming_arp_spa;\n                end \n            end\n        end\n    end\n\n    // manage ARP lookup requests\n    if (arp_request_operation_reg) begin\n        arp_request_ready_next = 1'b0;\n        cache_query_request_valid_next = 1'b1;\n        arp_request_timer_next = arp_request_timer_reg - 1;\n        // if we got a response, it will go in the cache, so when the query succeds, we're done\n        if (cache_query_response_valid && !cache_query_response_error) begin\n            arp_request_operation_next = 1'b0;\n            cache_query_request_valid_next = 1'b0;\n            arp_response_valid_next = 1'b1;\n            arp_response_error_next = 1'b0;\n            arp_response_mac_next = cache_query_response_mac;\n        end\n        // timer timeout\n        if (arp_request_timer_reg == 0) begin\n            if (arp_request_retry_cnt_reg > 0) begin\n                // have more retries\n                // send ARP request frame\n                outgoing_frame_valid_next = 1'b1;\n                outgoing_eth_dest_mac_next = 48'hffffffffffff;\n                outgoing_arp_oper_next = ARP_OPER_ARP_REQUEST;\n                outgoing_arp_tha_next = 48'h000000000000;\n                outgoing_arp_tpa_next = arp_request_ip_reg;\n                arp_request_retry_cnt_next = arp_request_retry_cnt_reg - 1;\n                if (arp_request_retry_cnt_reg > 1) begin\n                    arp_request_timer_next = REQUEST_RETRY_INTERVAL;\n                end else begin\n                    arp_request_timer_next = REQUEST_TIMEOUT;\n                end\n            end else begin\n                // out of retries\n                arp_request_operation_next = 1'b0;\n                arp_response_valid_next = 1'b1;\n                arp_response_error_next = 1'b1;\n                cache_query_request_valid_next = 1'b0;\n            end\n        end\n    end else begin\n        arp_request_ready_next = !arp_response_valid_next;\n        if (cache_query_request_valid_reg) begin\n            cache_query_request_valid_next = 1'b1;\n            if (cache_query_response_valid) begin\n                if (cache_query_response_error) begin\n                    arp_request_operation_next = 1'b1;\n                    // send ARP request frame\n                    outgoing_frame_valid_next = 1'b1;\n                    outgoing_eth_dest_mac_next = 48'hffffffffffff;\n                    outgoing_arp_oper_next = ARP_OPER_ARP_REQUEST;\n                    outgoing_arp_tha_next = 48'h000000000000;\n                    outgoing_arp_tpa_next = arp_request_ip_reg;\n                    arp_request_retry_cnt_next = REQUEST_RETRY_COUNT-1;\n                    arp_request_timer_next = REQUEST_RETRY_INTERVAL;\n                end else begin\n                    cache_query_request_valid_next = 1'b0;\n                    arp_response_valid_next = 1'b1;\n                    arp_response_error_next = 1'b0;\n                    arp_response_mac_next = cache_query_response_mac;\n                end\n            end\n        end else if (arp_request_valid && arp_request_ready) begin\n            if (~(arp_request_ip | subnet_mask) == 0) begin\n                // broadcast address\n                // (all bits in request IP set where subnet mask is clear)\n                arp_response_valid_next = 1'b1;\n                arp_response_error_next = 1'b0;\n                arp_response_mac_next = 48'hffffffffffff;\n            end else if (((arp_request_ip ^ gateway_ip) & subnet_mask) == 0) begin\n                // within subnet, look up IP directly\n                // (no bits differ between request IP and gateway IP where subnet mask is set)\n                cache_query_request_valid_next = 1'b1;\n                cache_query_request_ip_next = arp_request_ip;\n                arp_request_ip_next = arp_request_ip;\n            end else begin\n                // outside of subnet, so look up gateway address\n                cache_query_request_valid_next = 1'b1;\n                cache_query_request_ip_next = gateway_ip;\n                arp_request_ip_next = gateway_ip;\n            end\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        outgoing_frame_valid_reg <= 1'b0;\n        cache_query_request_valid_reg <= 1'b0;\n"], "Clone Blocks": [["verilog-ethernet/rtl/arp_64.v@243:390", "\nassign arp_response_valid = arp_response_valid_reg;\nassign arp_response_error = arp_response_error_reg;\nassign arp_response_mac = arp_response_mac_reg;\n\nalways @* begin\n    incoming_frame_ready = 1'b0;\n\n    outgoing_frame_valid_next = outgoing_frame_valid_reg && !outgoing_frame_ready;\n    outgoing_eth_dest_mac_next = outgoing_eth_dest_mac_reg;\n    outgoing_arp_oper_next = outgoing_arp_oper_reg;\n    outgoing_arp_tha_next = outgoing_arp_tha_reg;\n    outgoing_arp_tpa_next = outgoing_arp_tpa_reg;\n\n    cache_query_request_valid_next = 1'b0;\n    cache_query_request_ip_next = cache_query_request_ip_reg;\n\n    cache_write_request_valid_next = 1'b0;\n    cache_write_request_mac_next = cache_write_request_mac_reg;\n    cache_write_request_ip_next = cache_write_request_ip_reg;\n\n    arp_request_ready_next = 1'b0;\n    arp_request_ip_next = arp_request_ip_reg;\n    arp_request_operation_next = arp_request_operation_reg;\n    arp_request_retry_cnt_next = arp_request_retry_cnt_reg;\n    arp_request_timer_next = arp_request_timer_reg;\n    arp_response_valid_next = arp_response_valid_reg && !arp_response_ready;\n    arp_response_error_next = 1'b0;\n    arp_response_mac_next = 48'd0;\n\n    // manage incoming frames\n    incoming_frame_ready = outgoing_frame_ready;\n    if (incoming_frame_valid && incoming_frame_ready) begin\n        if (incoming_eth_type == 16'h0806 && incoming_arp_htype == 16'h0001 && incoming_arp_ptype == 16'h0800) begin\n            // store sender addresses in cache\n            cache_write_request_valid_next = 1'b1;\n            cache_write_request_ip_next = incoming_arp_spa;\n            cache_write_request_mac_next = incoming_arp_sha;\n            if (incoming_arp_oper == ARP_OPER_ARP_REQUEST) begin\n                // ARP request\n                if (incoming_arp_tpa == local_ip) begin\n                    // send reply frame to valid incoming request\n                    outgoing_frame_valid_next = 1'b1;\n                    outgoing_eth_dest_mac_next = incoming_eth_src_mac;\n                    outgoing_arp_oper_next = ARP_OPER_ARP_REPLY;\n                    outgoing_arp_tha_next = incoming_arp_sha;\n                    outgoing_arp_tpa_next = incoming_arp_spa;\n                end\n            end else if (incoming_arp_oper == ARP_OPER_INARP_REPLY) begin\n                // INARP request\n                if (incoming_arp_tha == local_mac) begin\n                    // send reply frame to valid incoming request\n                    outgoing_frame_valid_next = 1'b1;\n                    outgoing_eth_dest_mac_next = incoming_eth_src_mac;\n                    outgoing_arp_oper_next = ARP_OPER_INARP_REPLY;\n                    outgoing_arp_tha_next = incoming_arp_sha;\n                    outgoing_arp_tpa_next = incoming_arp_spa;\n                end \n            end\n        end\n    end\n\n    // manage ARP lookup requests\n    if (arp_request_operation_reg) begin\n        arp_request_ready_next = 1'b0;\n        cache_query_request_valid_next = 1'b1;\n        arp_request_timer_next = arp_request_timer_reg - 1;\n        // if we got a response, it will go in the cache, so when the query succeds, we're done\n        if (cache_query_response_valid && !cache_query_response_error) begin\n            arp_request_operation_next = 1'b0;\n            cache_query_request_valid_next = 1'b0;\n            arp_response_valid_next = 1'b1;\n            arp_response_error_next = 1'b0;\n            arp_response_mac_next = cache_query_response_mac;\n        end\n        // timer timeout\n        if (arp_request_timer_reg == 0) begin\n            if (arp_request_retry_cnt_reg > 0) begin\n                // have more retries\n                // send ARP request frame\n                outgoing_frame_valid_next = 1'b1;\n                outgoing_eth_dest_mac_next = 48'hffffffffffff;\n                outgoing_arp_oper_next = ARP_OPER_ARP_REQUEST;\n                outgoing_arp_tha_next = 48'h000000000000;\n                outgoing_arp_tpa_next = arp_request_ip_reg;\n                arp_request_retry_cnt_next = arp_request_retry_cnt_reg - 1;\n                if (arp_request_retry_cnt_reg > 1) begin\n                    arp_request_timer_next = REQUEST_RETRY_INTERVAL;\n                end else begin\n                    arp_request_timer_next = REQUEST_TIMEOUT;\n                end\n            end else begin\n                // out of retries\n                arp_request_operation_next = 1'b0;\n                arp_response_valid_next = 1'b1;\n                arp_response_error_next = 1'b1;\n                cache_query_request_valid_next = 1'b0;\n            end\n        end\n    end else begin\n        arp_request_ready_next = !arp_response_valid_next;\n        if (cache_query_request_valid_reg) begin\n            cache_query_request_valid_next = 1'b1;\n            if (cache_query_response_valid) begin\n                if (cache_query_response_error) begin\n                    arp_request_operation_next = 1'b1;\n                    // send ARP request frame\n                    outgoing_frame_valid_next = 1'b1;\n                    outgoing_eth_dest_mac_next = 48'hffffffffffff;\n                    outgoing_arp_oper_next = ARP_OPER_ARP_REQUEST;\n                    outgoing_arp_tha_next = 48'h000000000000;\n                    outgoing_arp_tpa_next = arp_request_ip_reg;\n                    arp_request_retry_cnt_next = REQUEST_RETRY_COUNT-1;\n                    arp_request_timer_next = REQUEST_RETRY_INTERVAL;\n                end else begin\n                    cache_query_request_valid_next = 1'b0;\n                    arp_response_valid_next = 1'b1;\n                    arp_response_error_next = 1'b0;\n                    arp_response_mac_next = cache_query_response_mac;\n                end\n            end\n        end else if (arp_request_valid && arp_request_ready) begin\n            if (~(arp_request_ip | subnet_mask) == 0) begin\n                // broadcast address\n                // (all bits in request IP set where subnet mask is clear)\n                arp_response_valid_next = 1'b1;\n                arp_response_error_next = 1'b0;\n                arp_response_mac_next = 48'hffffffffffff;\n            end else if (((arp_request_ip ^ gateway_ip) & subnet_mask) == 0) begin\n                // within subnet, look up IP directly\n                // (no bits differ between request IP and gateway IP where subnet mask is set)\n                cache_query_request_valid_next = 1'b1;\n                cache_query_request_ip_next = arp_request_ip;\n                arp_request_ip_next = arp_request_ip;\n            end else begin\n                // outside of subnet, so look up gateway address\n                cache_query_request_valid_next = 1'b1;\n                cache_query_request_ip_next = gateway_ip;\n                arp_request_ip_next = gateway_ip;\n            end\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        outgoing_frame_valid_reg <= 1'b0;\n        cache_query_request_valid_reg <= 1'b0;\n"]], "Diff Content": {"Delete": [[287, "            end else if (incoming_arp_oper == ARP_OPER_INARP_REPLY) begin\n"]], "Add": [[287, "            end else if (incoming_arp_oper == ARP_OPER_INARP_REQUEST) begin\n"]]}}