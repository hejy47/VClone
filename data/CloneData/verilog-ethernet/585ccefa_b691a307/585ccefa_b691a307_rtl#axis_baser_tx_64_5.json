{"Source Block": ["verilog-ethernet/rtl/axis_baser_tx_64.v@707:852@HdlStmProcess", "            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n\n        frame_ptr_reg <= 16'd0;\n\n        ifg_count_reg <= 8'd0;\n        deficit_idle_count_reg <= 2'd0;\n\n        s_axis_tready_reg <= 1'b0;\n\n        encoded_tx_data_reg <= {{8{CTRL_IDLE}}, BLOCK_TYPE_CTRL};\n        encoded_tx_hdr_reg <= SYNC_CTRL;\n\n        output_data_reg <= {DATA_WIDTH{1'b0}};\n        output_type_reg <= OUTPUT_TYPE_IDLE;\n\n        start_packet_0_reg <= 1'b0;\n        start_packet_4_reg <= 1'b0;\n\n        crc_state <= 32'hFFFFFFFF;\n\n        lanes_swapped <= 1'b0;\n\n        delay_type_valid <= 1'b0;\n        delay_type <= OUTPUT_TYPE_IDLE;\n    end else begin\n        state_reg <= state_next;\n\n        frame_ptr_reg <= frame_ptr_next;\n\n        ifg_count_reg <= ifg_count_next;\n        deficit_idle_count_reg <= deficit_idle_count_next;\n\n        s_axis_tready_reg <= s_axis_tready_next;\n\n        start_packet_0_reg <= start_packet_0_next;\n        start_packet_4_reg <= start_packet_4_next;\n\n        delay_type_valid <= 1'b0;\n\n        if (swap_lanes || (lanes_swapped && !unswap_lanes)) begin\n            lanes_swapped <= 1'b1;\n            output_data_reg <= {output_data_next[31:0], swap_data};\n            if (delay_type_valid) begin\n                output_type_reg <= delay_type;\n            end else if (output_type_next == OUTPUT_TYPE_START_0) begin\n                output_type_reg <= OUTPUT_TYPE_START_4;\n            end else if (output_type_next[3]) begin\n                // OUTPUT_TYPE_TERM_*\n                if (output_type_next[2]) begin\n                    delay_type_valid <= 1'b1;\n                    output_type_reg <= OUTPUT_TYPE_DATA;\n                end else begin\n                    output_type_reg <= output_type_next ^ 4'd4;\n                end\n            end else begin\n                output_type_reg <= output_type_next;\n            end\n        end else begin\n            lanes_swapped <= 1'b0;\n            output_data_reg <= output_data_next;\n            output_type_reg <= output_type_next;\n        end\n\n        case (output_type_reg)\n            OUTPUT_TYPE_IDLE: begin\n                encoded_tx_data_reg <= {{8{CTRL_IDLE}}, BLOCK_TYPE_CTRL};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_ERROR: begin\n                encoded_tx_data_reg <= {{8{CTRL_ERROR}}, BLOCK_TYPE_CTRL};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_START_0: begin\n                encoded_tx_data_reg <= {output_data_reg[63:8], BLOCK_TYPE_START_0};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_START_4: begin\n                encoded_tx_data_reg <= {output_data_reg[63:40], 4'd0, {4{CTRL_IDLE}}, BLOCK_TYPE_START_4};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_DATA: begin\n                encoded_tx_data_reg <= output_data_reg;\n                encoded_tx_hdr_reg <= SYNC_DATA;\n            end\n            OUTPUT_TYPE_TERM_0: begin\n                encoded_tx_data_reg <= {{7{CTRL_IDLE}}, 7'd0, BLOCK_TYPE_TERM_0};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_TERM_1: begin\n                encoded_tx_data_reg <= {{6{CTRL_IDLE}}, 6'd0, output_data_reg[7:0], BLOCK_TYPE_TERM_1};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_TERM_2: begin\n                encoded_tx_data_reg <= {{5{CTRL_IDLE}}, 5'd0, output_data_reg[15:0], BLOCK_TYPE_TERM_2};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_TERM_3: begin\n                encoded_tx_data_reg <= {{4{CTRL_IDLE}}, 4'd0, output_data_reg[23:0], BLOCK_TYPE_TERM_3};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_TERM_4: begin\n                encoded_tx_data_reg <= {{3{CTRL_IDLE}}, 3'd0, output_data_reg[31:0], BLOCK_TYPE_TERM_4};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_TERM_5: begin\n                encoded_tx_data_reg <= {{2{CTRL_IDLE}}, 2'd0, output_data_reg[39:0], BLOCK_TYPE_TERM_5};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_TERM_6: begin\n                encoded_tx_data_reg <= {{1{CTRL_IDLE}}, 1'd0, output_data_reg[47:0], BLOCK_TYPE_TERM_6};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            OUTPUT_TYPE_TERM_7: begin\n                encoded_tx_data_reg <= {output_data_reg[55:0], BLOCK_TYPE_TERM_7};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n            default: begin\n                encoded_tx_data_reg <= {{8{CTRL_ERROR}}, BLOCK_TYPE_CTRL};\n                encoded_tx_hdr_reg <= SYNC_CTRL;\n            end\n        endcase\n\n        // datapath\n        if (reset_crc) begin\n            crc_state <= 32'hFFFFFFFF;\n        end else if (update_crc) begin\n            crc_state <= crc_next7;\n        end\n    end\n\n    s_tdata_reg <= s_tdata_next;\n    s_tkeep_reg <= s_tkeep_next;\n\n    swap_data <= output_data_next[63:32];\n\n    delay_type <= output_type_next ^ 4'd4;\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [], "Add": [[730, "        error_underflow_reg <= 1'b0;\n"], [749, "        error_underflow_reg <= error_underflow_next;\n"]]}}