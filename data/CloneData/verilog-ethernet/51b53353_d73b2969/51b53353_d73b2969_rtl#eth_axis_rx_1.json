{"Source Block": ["verilog-ethernet/rtl/eth_axis_rx.v@130:253@HdlStmProcess", "assign output_eth_type = output_eth_type_reg;\n\nassign busy = busy_reg;\nassign error_header_early_termination = error_header_early_termination_reg;\n\nalways @* begin\n    state_next = 2'bz;\n\n    input_axis_tready_next = 0;\n\n    store_eth_dest_mac_0 = 0;\n    store_eth_dest_mac_1 = 0;\n    store_eth_dest_mac_2 = 0;\n    store_eth_dest_mac_3 = 0;\n    store_eth_dest_mac_4 = 0;\n    store_eth_dest_mac_5 = 0;\n    store_eth_src_mac_0 = 0;\n    store_eth_src_mac_1 = 0;\n    store_eth_src_mac_2 = 0;\n    store_eth_src_mac_3 = 0;\n    store_eth_src_mac_4 = 0;\n    store_eth_src_mac_5 = 0;\n    store_eth_type_0 = 0;\n    store_eth_type_1 = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;\n\n    error_header_early_termination_next = 0;\n\n    output_eth_payload_tdata_int = 0;\n    output_eth_payload_tvalid_int = 0;\n    output_eth_payload_tlast_int = 0;\n    output_eth_payload_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 0;\n            input_axis_tready_next = ~output_eth_hdr_valid_reg;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                // got first word of packet\n                if (input_axis_tlast) begin\n                    // tlast asserted on first word\n                    error_header_early_termination_next = 1;\n                    state_next = STATE_IDLE;\n                end else begin\n                    // move to read header state\n                    frame_ptr_next = 1;\n                    store_eth_dest_mac_5 = 1;\n                    state_next = STATE_READ_HEADER;\n                end\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_READ_HEADER: begin\n            // read header\n            input_axis_tready_next = 1;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                // word transfer in - store it\n                frame_ptr_next = frame_ptr_reg+1;\n                state_next = STATE_READ_HEADER;\n                case (frame_ptr_reg)\n                    8'h00: store_eth_dest_mac_5 = 1;\n                    8'h01: store_eth_dest_mac_4 = 1;\n                    8'h02: store_eth_dest_mac_3 = 1;\n                    8'h03: store_eth_dest_mac_2 = 1;\n                    8'h04: store_eth_dest_mac_1 = 1;\n                    8'h05: store_eth_dest_mac_0 = 1;\n                    8'h06: store_eth_src_mac_5 = 1;\n                    8'h07: store_eth_src_mac_4 = 1;\n                    8'h08: store_eth_src_mac_3 = 1;\n                    8'h09: store_eth_src_mac_2 = 1;\n                    8'h0A: store_eth_src_mac_1 = 1;\n                    8'h0B: store_eth_src_mac_0 = 1;\n                    8'h0C: store_eth_type_1 = 1;\n                    8'h0D: begin\n                        store_eth_type_0 = 1;\n                        output_eth_hdr_valid_next = 1;\n                        input_axis_tready_next = output_eth_payload_tready_int_early;\n                        state_next = STATE_READ_PAYLOAD;\n                    end\n                endcase\n                if (input_axis_tlast) begin\n                    error_header_early_termination_next = 1;\n                    input_axis_tready_next = ~output_eth_hdr_valid_reg;\n                    state_next = STATE_IDLE;\n                end\n            end else begin\n                state_next = STATE_READ_HEADER;\n            end\n        end\n        STATE_READ_PAYLOAD: begin\n            // read payload\n            input_axis_tready_next = output_eth_payload_tready_int_early;\n\n            output_eth_payload_tdata_int = input_axis_tdata;\n            output_eth_payload_tvalid_int = input_axis_tvalid;\n            output_eth_payload_tlast_int = input_axis_tlast;\n            output_eth_payload_tuser_int = input_axis_tuser;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                // word transfer through\n                if (input_axis_tlast) begin\n                    input_axis_tready_next = ~output_eth_hdr_valid_reg;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD;\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[136, "    state_next = 2'bz;\n"]], "Add": [[136, "    state_next = STATE_IDLE;\n"]]}}