{"Source Block": ["verilog-ethernet/rtl/eth_axis_tx_64.v@152:295@HdlStmProcess", "        shift_eth_payload_tuser = (input_eth_payload_tuser & (input_eth_payload_tkeep[7:2] == 0));\n        shift_eth_payload_input_tready = ~(input_eth_payload_tlast & input_eth_payload_tvalid & transfer_in_save);\n    end\nend\n\nalways @* begin\n    state_next = 2'bz;\n\n    input_eth_hdr_ready_next = 0;\n    input_eth_payload_tready_next = 0;\n\n    store_eth_hdr = 0;\n\n    flush_save = 0;\n    transfer_in_save = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    output_axis_tdata_int = 0;\n    output_axis_tkeep_int = 0;\n    output_axis_tvalid_int = 0;\n    output_axis_tlast_int = 0;\n    output_axis_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 0;\n            flush_save = 1;\n            input_eth_hdr_ready_next = 1;\n\n            if (input_eth_hdr_ready & input_eth_hdr_valid) begin\n                store_eth_hdr = 1;\n                input_eth_hdr_ready_next = 0;\n                state_next = STATE_WRITE_HEADER;\n                if (output_axis_tready_int) begin\n                    output_axis_tvalid_int = 1;\n                    output_axis_tdata_int[ 7: 0] = input_eth_dest_mac[47:40];\n                    output_axis_tdata_int[15: 8] = input_eth_dest_mac[39:32];\n                    output_axis_tdata_int[23:16] = input_eth_dest_mac[31:24];\n                    output_axis_tdata_int[31:24] = input_eth_dest_mac[23:16];\n                    output_axis_tdata_int[39:32] = input_eth_dest_mac[15: 8];\n                    output_axis_tdata_int[47:40] = input_eth_dest_mac[ 7: 0];\n                    output_axis_tdata_int[55:48] = input_eth_src_mac[47:40];\n                    output_axis_tdata_int[63:56] = input_eth_src_mac[39:32];\n                    output_axis_tkeep_int = 8'hff;\n                    frame_ptr_next = 8;\n                    input_eth_payload_tready_next = output_axis_tready_int_early;\n                    state_next = STATE_WRITE_HEADER_LAST;\n                end\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_WRITE_HEADER: begin\n            // write header\n            if (output_axis_tready_int) begin\n                frame_ptr_next = frame_ptr_reg + 8;\n                output_axis_tvalid_int = 1;\n                state_next = STATE_WRITE_HEADER;\n                case (frame_ptr_reg)\n                    5'd00: begin\n                        output_axis_tdata_int[ 7: 0] = input_eth_dest_mac[47:40];\n                        output_axis_tdata_int[15: 8] = input_eth_dest_mac[39:32];\n                        output_axis_tdata_int[23:16] = input_eth_dest_mac[31:24];\n                        output_axis_tdata_int[31:24] = input_eth_dest_mac[23:16];\n                        output_axis_tdata_int[39:32] = input_eth_dest_mac[15: 8];\n                        output_axis_tdata_int[47:40] = input_eth_dest_mac[ 7: 0];\n                        output_axis_tdata_int[55:48] = input_eth_src_mac[47:40];\n                        output_axis_tdata_int[63:56] = input_eth_src_mac[39:32];\n                        output_axis_tkeep_int = 8'hff;\n                        input_eth_payload_tready_next = output_axis_tready_int_early & shift_eth_payload_input_tready;\n                        state_next = STATE_WRITE_HEADER_LAST;\n                    end\n                endcase\n            end else begin\n                state_next = STATE_WRITE_HEADER;\n            end\n        end\n        STATE_WRITE_HEADER_LAST: begin\n            // last header word requires first payload word; process accordingly\n            input_eth_payload_tready_next = output_axis_tready_int_early & shift_eth_payload_input_tready;\n\n            if (input_eth_payload_tready & shift_eth_payload_tvalid) begin\n                frame_ptr_next = frame_ptr_reg + 8;\n                output_axis_tvalid_int = 1;\n                transfer_in_save = 1;   \n                \n                output_axis_tdata_int[ 7: 0] = eth_src_mac_reg[31:24];\n                output_axis_tdata_int[15: 8] = eth_src_mac_reg[23:16];\n                output_axis_tdata_int[23:16] = eth_src_mac_reg[15: 8];\n                output_axis_tdata_int[31:24] = eth_src_mac_reg[ 7: 0];\n                output_axis_tdata_int[39:32] = eth_type_reg[15: 8];\n                output_axis_tdata_int[47:40] = eth_type_reg[ 7: 0];\n                output_axis_tdata_int[55:48] = shift_eth_payload_tdata[55:48];\n                output_axis_tdata_int[63:56] = shift_eth_payload_tdata[63:56];\n                output_axis_tkeep_int = {shift_eth_payload_tkeep[7:6], 6'h3F};\n                output_axis_tlast_int = shift_eth_payload_tlast;\n                output_axis_tuser_int = shift_eth_payload_tuser;\n\n                if (shift_eth_payload_tlast) begin\n                    input_eth_payload_tready_next = 0;\n                    flush_save = 1;\n                    input_eth_hdr_ready_next = 1;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WRITE_PAYLOAD;\n                end\n            end else begin\n                state_next = STATE_WRITE_HEADER_LAST;\n            end\n        end\n        STATE_WRITE_PAYLOAD: begin\n            // write payload\n            input_eth_payload_tready_next = output_axis_tready_int_early & shift_eth_payload_input_tready;\n\n            output_axis_tdata_int = shift_eth_payload_tdata;\n            output_axis_tkeep_int = shift_eth_payload_tkeep;\n            output_axis_tvalid_int = shift_eth_payload_tvalid;\n            output_axis_tlast_int = shift_eth_payload_tlast;\n            output_axis_tuser_int = shift_eth_payload_tuser;\n\n            if (output_axis_tready_int & shift_eth_payload_tvalid) begin\n                // word transfer through\n                transfer_in_save = 1;\n                if (shift_eth_payload_tlast) begin\n                    input_eth_payload_tready_next = 0;\n                    flush_save = 1;\n                    input_eth_hdr_ready_next = 1;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WRITE_PAYLOAD;\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[158, "    state_next = 2'bz;\n"]], "Add": [[158, "    state_next = STATE_IDLE;\n"]]}}