{"Source Block": ["verilog-ethernet/rtl/eth_axis_tx.v@110:207@HdlStmProcess", "assign input_eth_hdr_ready = input_eth_hdr_ready_reg;\nassign input_eth_payload_tready = input_eth_payload_tready_reg;\n\nassign busy = busy_reg;\n\nalways @* begin\n    state_next = 2'bz;\n\n    input_eth_hdr_ready_next = 0;\n    input_eth_payload_tready_next = 0;\n\n    store_eth_hdr = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    output_axis_tdata_int = 0;\n    output_axis_tvalid_int = 0;\n    output_axis_tlast_int = 0;\n    output_axis_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 0;\n            input_eth_hdr_ready_next = 1;\n\n            if (input_eth_hdr_ready & input_eth_hdr_valid) begin\n                store_eth_hdr = 1;\n                input_eth_hdr_ready_next = 0;\n                if (output_axis_tready_int) begin\n                    output_axis_tvalid_int = 1;\n                    output_axis_tdata_int = input_eth_dest_mac[47:40];\n                    frame_ptr_next = 1;\n                end\n                state_next = STATE_WRITE_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_WRITE_HEADER: begin\n            // write header\n            if (output_axis_tready_int) begin\n                frame_ptr_next = frame_ptr_reg+1;\n                output_axis_tvalid_int = 1;\n                state_next = STATE_WRITE_HEADER;\n                case (frame_ptr_reg)\n                    8'h00: output_axis_tdata_int = eth_dest_mac_reg[47:40];\n                    8'h01: output_axis_tdata_int = eth_dest_mac_reg[39:32];\n                    8'h02: output_axis_tdata_int = eth_dest_mac_reg[31:24];\n                    8'h03: output_axis_tdata_int = eth_dest_mac_reg[23:16];\n                    8'h04: output_axis_tdata_int = eth_dest_mac_reg[15: 8];\n                    8'h05: output_axis_tdata_int = eth_dest_mac_reg[ 7: 0];\n                    8'h06: output_axis_tdata_int = eth_src_mac_reg[47:40];\n                    8'h07: output_axis_tdata_int = eth_src_mac_reg[39:32];\n                    8'h08: output_axis_tdata_int = eth_src_mac_reg[31:24];\n                    8'h09: output_axis_tdata_int = eth_src_mac_reg[23:16];\n                    8'h0A: output_axis_tdata_int = eth_src_mac_reg[15: 8];\n                    8'h0B: output_axis_tdata_int = eth_src_mac_reg[ 7: 0];\n                    8'h0C: output_axis_tdata_int = eth_type_reg[15: 8];\n                    8'h0D: begin\n                        output_axis_tdata_int = eth_type_reg[ 7: 0];\n                        input_eth_payload_tready_next = output_axis_tready_int_early;\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                endcase\n            end else begin\n                state_next = STATE_WRITE_HEADER;\n            end\n        end\n        STATE_WRITE_PAYLOAD: begin\n            // write payload\n            input_eth_payload_tready_next = output_axis_tready_int_early;\n\n            output_axis_tdata_int = input_eth_payload_tdata;\n            output_axis_tvalid_int = input_eth_payload_tvalid;\n            output_axis_tlast_int = input_eth_payload_tlast;\n            output_axis_tuser_int = input_eth_payload_tuser;\n\n            if (input_eth_payload_tready & input_eth_payload_tvalid) begin\n                // word transfer through\n                if (input_eth_payload_tlast) begin\n                    input_eth_payload_tready_next = 0;\n                    input_eth_hdr_ready_next = 1;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WRITE_PAYLOAD;\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[116, "    state_next = 2'bz;\n"]], "Add": [[116, "    state_next = STATE_IDLE;\n"]]}}