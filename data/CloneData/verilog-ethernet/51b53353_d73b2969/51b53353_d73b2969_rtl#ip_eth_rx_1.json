{"Source Block": ["verilog-ethernet/rtl/ip_eth_rx.v@224:431@HdlStmProcess", "        t = a+b;\n        add1c16b = t[15:0] + t[16];\n    end\nendfunction\n\nalways @* begin\n    state_next = 2'bz;\n\n    input_eth_hdr_ready_next = 0;\n    input_eth_payload_tready_next = 0;\n\n    store_eth_hdr = 0;\n    store_ip_version_ihl = 0;\n    store_ip_dscp_ecn = 0;\n    store_ip_length_0 = 0;\n    store_ip_length_1 = 0;\n    store_ip_identification_0 = 0;\n    store_ip_identification_1 = 0;\n    store_ip_flags_fragment_offset_0 = 0;\n    store_ip_flags_fragment_offset_1 = 0;\n    store_ip_ttl = 0;\n    store_ip_protocol = 0;\n    store_ip_header_checksum_0 = 0;\n    store_ip_header_checksum_1 = 0;\n    store_ip_source_ip_0 = 0;\n    store_ip_source_ip_1 = 0;\n    store_ip_source_ip_2 = 0;\n    store_ip_source_ip_3 = 0;\n    store_ip_dest_ip_0 = 0;\n    store_ip_dest_ip_1 = 0;\n    store_ip_dest_ip_2 = 0;\n    store_ip_dest_ip_3 = 0;\n\n    store_last_word = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    hdr_sum_next = hdr_sum_reg;\n\n    output_ip_hdr_valid_next = output_ip_hdr_valid_reg & ~output_ip_hdr_ready;\n\n    error_header_early_termination_next = 0;\n    error_payload_early_termination_next = 0;\n    error_invalid_header_next = 0;\n    error_invalid_checksum_next = 0;\n\n    output_ip_payload_tdata_int = 0;\n    output_ip_payload_tvalid_int = 0;\n    output_ip_payload_tlast_int = 0;\n    output_ip_payload_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for header\n            frame_ptr_next = 0;\n            hdr_sum_next = 0;\n            input_eth_hdr_ready_next = ~output_ip_hdr_valid_reg;\n\n            if (input_eth_hdr_ready & input_eth_hdr_valid) begin\n                input_eth_hdr_ready_next = 0;\n                input_eth_payload_tready_next = 1;\n                store_eth_hdr = 1;\n                state_next = STATE_READ_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_READ_HEADER: begin\n            // read header\n            input_eth_payload_tready_next = 1;\n\n            if (input_eth_payload_tready & input_eth_payload_tvalid) begin\n                // word transfer in - store it\n                frame_ptr_next = frame_ptr_reg+1;\n                state_next = STATE_READ_HEADER;\n\n                if (frame_ptr_reg[0]) begin\n                    hdr_sum_next = add1c16b(hdr_sum_reg, {8'd0, input_eth_payload_tdata});\n                end else begin\n                    hdr_sum_next = add1c16b(hdr_sum_reg, {input_eth_payload_tdata, 8'd0});\n                end\n\n                case (frame_ptr_reg)\n                    8'h00: store_ip_version_ihl = 1;\n                    8'h01: store_ip_dscp_ecn = 1;\n                    8'h02: store_ip_length_1 = 1;\n                    8'h03: store_ip_length_0 = 1;\n                    8'h04: store_ip_identification_1 = 1;\n                    8'h05: store_ip_identification_0 = 1;\n                    8'h06: store_ip_flags_fragment_offset_1 = 1;\n                    8'h07: store_ip_flags_fragment_offset_0 = 1;\n                    8'h08: store_ip_ttl = 1;\n                    8'h09: store_ip_protocol = 1;\n                    8'h0A: store_ip_header_checksum_1 = 1;\n                    8'h0B: store_ip_header_checksum_0 = 1;\n                    8'h0C: store_ip_source_ip_3 = 1;\n                    8'h0D: store_ip_source_ip_2 = 1;\n                    8'h0E: store_ip_source_ip_1 = 1;\n                    8'h0F: store_ip_source_ip_0 = 1;\n                    8'h10: store_ip_dest_ip_3 = 1;\n                    8'h11: store_ip_dest_ip_2 = 1;\n                    8'h12: store_ip_dest_ip_1 = 1;\n                    8'h13: begin\n                        store_ip_dest_ip_0 = 1;\n                        if (output_ip_version_reg != 4 || output_ip_ihl_reg != 5) begin\n                            error_invalid_header_next = 1;\n                            state_next = STATE_WAIT_LAST;\n                        end else if (hdr_sum_next != 16'hffff) begin\n                            error_invalid_checksum_next = 1;\n                            state_next = STATE_WAIT_LAST;\n                        end else begin\n                            output_ip_hdr_valid_next = 1;\n                            input_eth_payload_tready_next = output_ip_payload_tready_int_early;\n                            state_next = STATE_READ_PAYLOAD;\n                        end\n                    end\n                endcase\n\n                if (input_eth_payload_tlast) begin\n                    error_header_early_termination_next = 1;\n                    output_ip_hdr_valid_next = 0;\n                    input_eth_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                    input_eth_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end\n\n            end else begin\n                state_next = STATE_READ_HEADER;\n            end\n        end\n        STATE_READ_PAYLOAD: begin\n            // read payload\n            input_eth_payload_tready_next = output_ip_payload_tready_int_early;\n\n            output_ip_payload_tdata_int = input_eth_payload_tdata;\n            output_ip_payload_tvalid_int = input_eth_payload_tvalid;\n            output_ip_payload_tlast_int = input_eth_payload_tlast;\n            output_ip_payload_tuser_int = input_eth_payload_tuser;\n\n            if (input_eth_payload_tready & input_eth_payload_tvalid) begin\n                // word transfer through\n                frame_ptr_next = frame_ptr_reg+1;\n                if (input_eth_payload_tlast) begin\n                    if (frame_ptr_next != output_ip_length_reg) begin\n                        // end of frame, but length does not match\n                        output_ip_payload_tuser_int = 1;\n                        error_payload_early_termination_next = 1;\n                    end\n                    input_eth_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                    input_eth_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    if (frame_ptr_next == output_ip_length_reg) begin\n                        store_last_word = 1;\n                        output_ip_payload_tvalid_int = 0;\n                        state_next = STATE_READ_PAYLOAD_LAST;\n                    end else begin\n                        state_next = STATE_READ_PAYLOAD;\n                    end\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD;\n            end\n        end\n        STATE_READ_PAYLOAD_LAST: begin\n            // read and discard until end of frame\n            input_eth_payload_tready_next = output_ip_payload_tready_int_early;\n\n            output_ip_payload_tdata_int = last_word_data_reg;\n            output_ip_payload_tvalid_int = input_eth_payload_tvalid & input_eth_payload_tlast;\n            output_ip_payload_tlast_int = input_eth_payload_tlast;\n            output_ip_payload_tuser_int = input_eth_payload_tuser;\n\n            if (input_eth_payload_tready & input_eth_payload_tvalid) begin\n                if (input_eth_payload_tlast) begin\n                    input_eth_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                    input_eth_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD_LAST;\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD_LAST;\n            end\n        end\n        STATE_WAIT_LAST: begin\n            // read and discard until end of frame\n            input_eth_payload_tready_next = 1;\n\n            if (input_eth_payload_tready & input_eth_payload_tvalid) begin\n                if (input_eth_payload_tlast) begin\n                    input_eth_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                    input_eth_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WAIT_LAST;\n                end\n            end else begin\n                state_next = STATE_WAIT_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[230, "    state_next = 2'bz;\n"]], "Add": [[230, "    state_next = STATE_IDLE;\n"]]}}