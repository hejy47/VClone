{"Source Block": ["verilog-ethernet/rtl/xgmii_baser_dec_64.v@139:346@HdlStmProcess", "\nassign rx_bad_block = rx_bad_block_reg;\n\ninteger i;\n\nalways @* begin\n    xgmii_rxd_next = {8{XGMII_ERROR}};\n    xgmii_rxc_next = 8'hff;\n    rx_bad_block_next = 1'b0;\n\n    for (i = 0; i < CTRL_WIDTH; i = i + 1) begin\n        case (encoded_rx_data[7*i+8 +: 7])\n            CTRL_IDLE: begin\n                decoded_ctrl[8*i +: 8] = XGMII_IDLE;\n                decode_err[i] = 1'b0;\n            end\n            CTRL_LPI: begin\n                decoded_ctrl[8*i +: 8] = XGMII_LPI;\n                decode_err[i] = 1'b0;\n            end\n            CTRL_ERROR: begin\n                decoded_ctrl[8*i +: 8] = XGMII_ERROR;\n                decode_err[i] = 1'b0;\n            end\n            CTRL_RES_0: begin\n                decoded_ctrl[8*i +: 8] = XGMII_RES_0;\n                decode_err[i] = 1'b0;\n            end\n            CTRL_RES_1: begin\n                decoded_ctrl[8*i +: 8] = XGMII_RES_1;\n                decode_err[i] = 1'b0;\n            end\n            CTRL_RES_2: begin\n                decoded_ctrl[8*i +: 8] = XGMII_RES_2;\n                decode_err[i] = 1'b0;\n            end\n            CTRL_RES_3: begin\n                decoded_ctrl[8*i +: 8] = XGMII_RES_3;\n                decode_err[i] = 1'b0;\n            end\n            CTRL_RES_4: begin\n                decoded_ctrl[8*i +: 8] = XGMII_RES_4;\n                decode_err[i] = 1'b0;\n            end\n            CTRL_RES_5: begin\n                decoded_ctrl[8*i +: 8] = XGMII_RES_5;\n                decode_err[i] = 1'b0;\n            end\n            default: begin\n                decoded_ctrl[8*i +: 8] = XGMII_ERROR;\n                decode_err[i] = 1'b1;\n            end\n        endcase\n    end\n\n    if (encoded_rx_hdr == SYNC_DATA) begin\n        xgmii_rxd_next = encoded_rx_data;\n        xgmii_rxc_next = 8'h00;\n        rx_bad_block_next = 1'b0;\n    end else if (encoded_rx_hdr == SYNC_CTRL) begin\n        case (encoded_rx_data[7:0])\n            BLOCK_TYPE_CTRL: begin\n                // C7 C6 C5 C4 C3 C2 C1 C0 BT\n                xgmii_rxd_next = decoded_ctrl;\n                xgmii_rxc_next = 8'hff;\n                rx_bad_block_next = decode_err != 0;\n            end\n            BLOCK_TYPE_OS_4: begin\n                // D7 D6 D5 O4 C3 C2 C1 C0 BT\n                xgmii_rxd_next[31:0] = decoded_ctrl[31:0];\n                xgmii_rxc_next[3:0] = 4'hf;\n                if (encoded_rx_data[39:36] == O_SEQ_OS) begin\n                    xgmii_rxd_next[63:32] = {encoded_rx_data[63:40], XGMII_SEQ_OS};\n                    xgmii_rxc_next[7:4] = 4'h1;\n                    rx_bad_block_next = decode_err[3:0] != 0;\n                end else begin\n                    xgmii_rxd_next[63:32] = {4{XGMII_ERROR}};\n                    xgmii_rxc_next[7:4] = 4'hf;\n                    rx_bad_block_next = 1'b1;\n                end\n            end\n            BLOCK_TYPE_START_4: begin\n                // D7 D6 D5    C3 C2 C1 C0 BT\n                xgmii_rxd_next = {encoded_rx_data[63:40], XGMII_START, decoded_ctrl[31:0]};\n                xgmii_rxc_next = 8'h1f;\n                rx_bad_block_next = decode_err[3:0] != 0;\n            end\n            BLOCK_TYPE_OS_START: begin\n                // D7 D6 D5    O0 D3 D2 D1 BT\n                if (encoded_rx_data[35:32] == O_SEQ_OS) begin\n                    xgmii_rxd_next[31:0] = {encoded_rx_data[31:8], XGMII_SEQ_OS};\n                    xgmii_rxc_next[3:0] = 4'h1;\n                    rx_bad_block_next = 1'b0;\n                end else begin\n                    xgmii_rxd_next[31:0] = {4{XGMII_ERROR}};\n                    xgmii_rxc_next[3:0] = 4'hf;\n                    rx_bad_block_next = 1'b1;\n                end\n                xgmii_rxd_next[63:32] = {encoded_rx_data[63:40], XGMII_START};\n                xgmii_rxc_next[7:4] = 4'h1;\n            end\n            BLOCK_TYPE_OS_04: begin\n                // D7 D6 D5 O4 O0 D3 D2 D1 BT\n                rx_bad_block_next = 1'b0;\n                if (encoded_rx_data[35:32] == O_SEQ_OS) begin\n                    xgmii_rxd_next[31:0] = {encoded_rx_data[31:8], XGMII_SEQ_OS};\n                    xgmii_rxc_next[3:0] = 4'h1;\n                end else begin\n                    xgmii_rxd_next[31:0] = {4{XGMII_ERROR}};\n                    xgmii_rxc_next[3:0] = 4'hf;\n                    rx_bad_block_next = 1'b1;\n                end\n                if (encoded_rx_data[39:36] == O_SEQ_OS) begin\n                    xgmii_rxd_next[63:32] = {encoded_rx_data[63:40], XGMII_SEQ_OS};\n                    xgmii_rxc_next[7:4] = 4'h1;\n                end else begin\n                    xgmii_rxd_next[63:32] = {4{XGMII_ERROR}};\n                    xgmii_rxc_next[7:4] = 4'hf;\n                    rx_bad_block_next = 1'b1;\n                end\n            end\n            BLOCK_TYPE_START_0: begin\n                // D7 D6 D5 D4 D3 D2 D1    BT\n                xgmii_rxd_next = {encoded_rx_data[63:8], XGMII_START};\n                xgmii_rxc_next = 8'h01;\n                rx_bad_block_next = 1'b0;\n            end\n            BLOCK_TYPE_OS_0: begin\n                // C7 C6 C5 C4 O0 D3 D2 D1 BT\n                if (encoded_rx_data[35:32] == O_SEQ_OS) begin\n                    xgmii_rxd_next[31:0] = {encoded_rx_data[31:8], XGMII_SEQ_OS};\n                    xgmii_rxc_next[3:0] = 4'h1;\n                    rx_bad_block_next = decode_err[7:4] != 0;\n                end else begin\n                    xgmii_rxd_next[31:0] = {4{XGMII_ERROR}};\n                    xgmii_rxc_next[3:0] = 4'hf;\n                    rx_bad_block_next = 1'b1;\n                end\n                xgmii_rxd_next[63:32] = decoded_ctrl[63:32];\n                xgmii_rxc_next[7:4] = 4'hf;\n            end\n            BLOCK_TYPE_TERM_0: begin\n                // C7 C6 C5 C4 C3 C2 C1    BT\n                xgmii_rxd_next = {decoded_ctrl[63:8], XGMII_TERM};\n                xgmii_rxc_next = 8'hff;\n                rx_bad_block_next = decode_err[7:1] != 0;\n            end\n            BLOCK_TYPE_TERM_1: begin\n                // C7 C6 C5 C4 C3 C2    D0 BT\n                xgmii_rxd_next = {decoded_ctrl[63:16], XGMII_TERM, encoded_rx_data[15:8]};\n                xgmii_rxc_next = 8'hfe;\n                rx_bad_block_next = decode_err[7:2] != 0;\n            end\n            BLOCK_TYPE_TERM_2: begin\n                // C7 C6 C5 C4 C3    D1 D0 BT\n                xgmii_rxd_next = {decoded_ctrl[63:24], XGMII_TERM, encoded_rx_data[23:8]};\n                xgmii_rxc_next = 8'hfc;\n                rx_bad_block_next = decode_err[7:3] != 0;\n            end\n            BLOCK_TYPE_TERM_3: begin\n                // C7 C6 C5 C4    D2 D1 D0 BT\n                xgmii_rxd_next = {decoded_ctrl[63:32], XGMII_TERM, encoded_rx_data[31:8]};\n                xgmii_rxc_next = 8'hf8;\n                rx_bad_block_next = decode_err[7:4] != 0;\n            end\n            BLOCK_TYPE_TERM_4: begin\n                // C7 C6 C5    D3 D2 D1 D0 BT\n                xgmii_rxd_next = {decoded_ctrl[63:40], XGMII_TERM, encoded_rx_data[39:8]};\n                xgmii_rxc_next = 8'hf0;\n                rx_bad_block_next = decode_err[7:5] != 0;\n            end\n            BLOCK_TYPE_TERM_5: begin\n                // C7 C6    D4 D3 D2 D1 D0 BT\n                xgmii_rxd_next = {decoded_ctrl[63:48], XGMII_TERM, encoded_rx_data[47:8]};\n                xgmii_rxc_next = 8'he0;\n                rx_bad_block_next = decode_err[7:6] != 0;\n            end\n            BLOCK_TYPE_TERM_6: begin\n                // C7    D5 D4 D3 D2 D1 D0 BT\n                xgmii_rxd_next = {decoded_ctrl[63:56], XGMII_TERM, encoded_rx_data[55:8]};\n                xgmii_rxc_next = 8'hc0;\n                rx_bad_block_next = decode_err[7] != 0;\n            end\n            BLOCK_TYPE_TERM_7: begin\n                //    D6 D5 D4 D3 D2 D1 D0 BT\n                xgmii_rxd_next = {XGMII_TERM, encoded_rx_data[63:8]};\n                xgmii_rxc_next = 8'h80;\n                rx_bad_block_next = 1'b0;\n            end\n            default: begin\n                // invalid block type\n                xgmii_rxd_next = {8{XGMII_ERROR}};\n                xgmii_rxc_next = 8'hff;\n                rx_bad_block_next = 1'b1;\n            end\n        endcase\n    end else begin\n        // invalid header\n        xgmii_rxd_next = {8{XGMII_ERROR}};\n        xgmii_rxc_next = 8'hff;\n        rx_bad_block_next = 1'b1;\n    end\nend\n\nalways @(posedge clk) begin\n    xgmii_rxd_reg <= xgmii_rxd_next;\n    xgmii_rxc_reg <= xgmii_rxc_next;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [], "Add": [[147, "    rx_sequence_error_next = 1'b0;\n"], [147, "    frame_next = frame_reg;\n"], [224, "                rx_sequence_error_next = frame_reg;\n"], [224, "                frame_next = 1'b1;\n"], [238, "                rx_sequence_error_next = frame_reg;\n"], [238, "                frame_next = 1'b1;\n"], [264, "                rx_sequence_error_next = frame_reg;\n"], [264, "                frame_next = 1'b1;\n"], [284, "                rx_sequence_error_next = !frame_reg;\n"], [284, "                frame_next = 1'b0;\n"], [290, "                rx_sequence_error_next = !frame_reg;\n"], [290, "                frame_next = 1'b0;\n"], [296, "                rx_sequence_error_next = !frame_reg;\n"], [296, "                frame_next = 1'b0;\n"], [302, "                rx_sequence_error_next = !frame_reg;\n"], [302, "                frame_next = 1'b0;\n"], [308, "                rx_sequence_error_next = !frame_reg;\n"], [308, "                frame_next = 1'b0;\n"], [314, "                rx_sequence_error_next = !frame_reg;\n"], [314, "                frame_next = 1'b0;\n"], [320, "                rx_sequence_error_next = !frame_reg;\n"], [320, "                frame_next = 1'b0;\n"], [326, "                rx_sequence_error_next = !frame_reg;\n"], [326, "                frame_next = 1'b0;\n"]]}}