{"Source Block": ["verilog-ethernet/rtl/axis_async_fifo.v@236:296@HdlStmProcess", "        m_rst_sync3_reg <= m_rst_sync2_reg;\n    end\nend\n\n// Write logic\nalways @* begin\n    write = 1'b0;\n\n    drop_frame_next = 1'b0;\n    overflow_next = 1'b0;\n    bad_frame_next = 1'b0;\n    good_frame_next = 1'b0;\n\n    wr_ptr_next = wr_ptr_reg;\n    wr_ptr_cur_next = wr_ptr_cur_reg;\n    wr_ptr_gray_next = wr_ptr_gray_reg;\n\n    if (s_axis_tvalid) begin\n        // input data valid\n        if (!full || DROP_WHEN_FULL) begin\n            // not full, perform write\n            if (!FRAME_FIFO) begin\n                // normal FIFO mode\n                write = 1'b1;\n                wr_ptr_next = wr_ptr_reg + 1;\n                wr_ptr_gray_next = wr_ptr_next ^ (wr_ptr_next >> 1);\n            end else if (full || full_cur || drop_frame_reg) begin\n                // full, packet overflow, or currently dropping frame\n                // drop frame\n                drop_frame_next = 1'b1;\n                if (s_axis_tlast) begin\n                    // end of frame, reset write pointer\n                    wr_ptr_cur_next = wr_ptr_reg;\n                    drop_frame_next = 1'b0;\n                    overflow_next = 1'b1;\n                end\n            end else begin\n                write = 1'b1;\n                wr_ptr_cur_next = wr_ptr_cur_reg + 1;\n                if (s_axis_tlast) begin\n                    // end of frame\n                    if (DROP_BAD_FRAME && (USER_BAD_FRAME_MASK & s_axis_tuser == USER_BAD_FRAME_VALUE)) begin\n                        // bad packet, reset write pointer\n                        wr_ptr_cur_next = wr_ptr_reg;\n                        bad_frame_next = 1'b1;\n                    end else begin\n                        // good packet, update write pointer\n                        wr_ptr_next = wr_ptr_cur_reg + 1;\n                        wr_ptr_gray_next = wr_ptr_next ^ (wr_ptr_next >> 1);\n                        good_frame_next = 1'b1;\n                    end\n                end\n            end\n        end\n    end\nend\n\nalways @(posedge s_clk) begin\n    if (s_rst_sync3_reg) begin\n        wr_ptr_reg <= {ADDR_WIDTH+1{1'b0}};\n        wr_ptr_cur_reg <= {ADDR_WIDTH+1{1'b0}};\n"], "Clone Blocks": [["verilog-ethernet/rtl/axis_fifo.v@171:228", "assign status_overflow = overflow_reg;\nassign status_bad_frame = bad_frame_reg;\nassign status_good_frame = good_frame_reg;\n\n// Write logic\nalways @* begin\n    write = 1'b0;\n\n    drop_frame_next = 1'b0;\n    overflow_next = 1'b0;\n    bad_frame_next = 1'b0;\n    good_frame_next = 1'b0;\n\n    wr_ptr_next = wr_ptr_reg;\n    wr_ptr_cur_next = wr_ptr_cur_reg;\n\n    if (s_axis_tvalid) begin\n        // input data valid\n        if (!full || DROP_WHEN_FULL) begin\n            // not full, perform write\n            if (!FRAME_FIFO) begin\n                // normal FIFO mode\n                write = 1'b1;\n                wr_ptr_next = wr_ptr_reg + 1;\n            end else if (full || full_cur || drop_frame_reg) begin\n                // full, packet overflow, or currently dropping frame\n                // drop frame\n                drop_frame_next = 1'b1;\n                if (s_axis_tlast) begin\n                    // end of frame, reset write pointer\n                    wr_ptr_cur_next = wr_ptr_reg;\n                    drop_frame_next = 1'b0;\n                    overflow_next = 1'b1;\n                end\n            end else begin\n                write = 1'b1;\n                wr_ptr_cur_next = wr_ptr_cur_reg + 1;\n                if (s_axis_tlast) begin\n                    // end of frame\n                    if (DROP_BAD_FRAME && (USER_BAD_FRAME_MASK & s_axis_tuser == USER_BAD_FRAME_VALUE)) begin\n                        // bad packet, reset write pointer\n                        wr_ptr_cur_next = wr_ptr_reg;\n                        bad_frame_next = 1'b1;\n                    end else begin\n                        // good packet, update write pointer\n                        wr_ptr_next = wr_ptr_cur_reg + 1;\n                        good_frame_next = 1'b1;\n                    end\n                end\n            end\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        wr_ptr_reg <= {ADDR_WIDTH+1{1'b0}};\n        wr_ptr_cur_reg <= {ADDR_WIDTH+1{1'b0}};\n"]], "Diff Content": {"Delete": [[253, "    if (s_axis_tvalid) begin\n"], [255, "        if (!full || DROP_WHEN_FULL) begin\n"], [257, "            if (!FRAME_FIFO) begin\n"], [259, "                write = 1'b1;\n"], [260, "                wr_ptr_next = wr_ptr_reg + 1;\n"], [261, "                wr_ptr_gray_next = wr_ptr_next ^ (wr_ptr_next >> 1);\n"], [262, "            end else if (full || full_cur || drop_frame_reg) begin\n"], [265, "                drop_frame_next = 1'b1;\n"], [266, "                if (s_axis_tlast) begin\n"], [269, "                    drop_frame_next = 1'b0;\n"], [270, "                    overflow_next = 1'b1;\n"], [271, "                end\n"], [272, "            end else begin\n"], [273, "                write = 1'b1;\n"], [274, "                wr_ptr_cur_next = wr_ptr_cur_reg + 1;\n"], [275, "                if (s_axis_tlast) begin\n"], [277, "                    if (DROP_BAD_FRAME && (USER_BAD_FRAME_MASK & s_axis_tuser == USER_BAD_FRAME_VALUE)) begin\n"], [279, "                        wr_ptr_cur_next = wr_ptr_reg;\n"], [280, "                        bad_frame_next = 1'b1;\n"], [281, "                    end else begin\n"], [283, "                        wr_ptr_next = wr_ptr_cur_reg + 1;\n"], [284, "                        wr_ptr_gray_next = wr_ptr_next ^ (wr_ptr_next >> 1);\n"], [285, "                        good_frame_next = 1'b1;\n"], [286, "                    end\n"]], "Add": [[266, "    wr_ptr_cur_gray_next = wr_ptr_cur_gray_reg;\n"], [266, "    if (s_axis_tready && s_axis_tvalid) begin\n"], [266, "        if (!FRAME_FIFO) begin\n"], [266, "            write = 1'b1;\n"], [266, "            wr_ptr_next = wr_ptr_reg + 1;\n"], [266, "            wr_ptr_gray_next = wr_ptr_next ^ (wr_ptr_next >> 1);\n"], [266, "        end else if (full_cur || full_wr || drop_frame_reg) begin\n"], [266, "            drop_frame_next = 1'b1;\n"], [266, "            if (s_axis_tlast) begin\n"], [266, "                wr_ptr_cur_next = wr_ptr_reg;\n"], [266, "                wr_ptr_cur_gray_next = wr_ptr_cur_next ^ (wr_ptr_cur_next >> 1);\n"], [266, "                drop_frame_next = 1'b0;\n"], [266, "                overflow_next = 1'b1;\n"], [266, "            end\n"], [266, "        end else begin\n"], [266, "            write = 1'b1;\n"], [266, "            wr_ptr_cur_next = wr_ptr_cur_reg + 1;\n"], [266, "            wr_ptr_cur_gray_next = wr_ptr_cur_next ^ (wr_ptr_cur_next >> 1);\n"], [266, "            if (s_axis_tlast) begin\n"], [266, "                if (DROP_BAD_FRAME && (USER_BAD_FRAME_MASK & s_axis_tuser == USER_BAD_FRAME_VALUE)) begin\n"], [286, "                    wr_ptr_cur_gray_next = wr_ptr_cur_next ^ (wr_ptr_cur_next >> 1);\n"], [286, "                    bad_frame_next = 1'b1;\n"], [286, "                end else begin\n"], [286, "                    wr_ptr_next = wr_ptr_cur_reg + 1;\n"], [286, "                    wr_ptr_gray_next = wr_ptr_next ^ (wr_ptr_next >> 1);\n"], [286, "                    good_frame_next = 1'b1;\n"]]}}