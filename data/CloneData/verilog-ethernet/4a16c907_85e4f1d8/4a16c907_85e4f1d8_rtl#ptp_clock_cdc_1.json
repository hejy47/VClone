{"Source Block": ["verilog-ethernet/rtl/ptp_clock_cdc.v@155:234@HdlStmIf", "reg sample_update_sync2_reg = 1'b0;\nreg sample_update_sync3_reg = 1'b0;\n\ngenerate\n\nif (PIPELINE_OUTPUT > 0) begin\n\n    // pipeline\n    (* shreg_extract = \"no\" *)\n    reg [TS_WIDTH-1:0]  output_ts_reg[0:PIPELINE_OUTPUT-1];\n    (* shreg_extract = \"no\" *)\n    reg                 output_ts_step_reg[0:PIPELINE_OUTPUT-1];\n    (* shreg_extract = \"no\" *)\n    reg                 output_pps_reg[0:PIPELINE_OUTPUT-1];\n\n    assign output_ts = output_ts_reg[PIPELINE_OUTPUT-1];\n    assign output_ts_step = output_ts_step_reg[PIPELINE_OUTPUT-1];\n    assign output_pps = output_pps_reg[PIPELINE_OUTPUT-1];\n\n    integer i;\n\n    initial begin\n        for (i = 0; i < PIPELINE_OUTPUT; i = i + 1) begin\n            output_ts_reg[i] = 0;\n            output_ts_step_reg[i] = 1'b0;\n            output_pps_reg[i] = 1'b0;\n        end\n    end\n\n    always @(posedge output_clk) begin\n        if (TS_WIDTH == 96) begin\n            output_ts_reg[0][95:48] <= ts_s_reg;\n            output_ts_reg[0][47:46] <= 2'b00;\n            output_ts_reg[0][45:16] <= ts_ns_reg;\n            output_ts_reg[0][15:0]  <= {ts_fns_reg, 16'd0} >> FNS_WIDTH;\n        end else if (TS_WIDTH == 64) begin\n            output_ts_reg[0][63:16] <= ts_ns_reg;\n            output_ts_reg[0][15:0]  <= {ts_fns_reg, 16'd0} >> FNS_WIDTH;\n        end\n\n        output_ts_step_reg[0] <= ts_step_reg;\n        output_pps_reg[0] <= pps_reg;\n\n        for (i = 0; i < PIPELINE_OUTPUT-1; i = i + 1) begin\n            output_ts_reg[i+1] <= output_ts_reg[i];\n            output_ts_step_reg[i+1] <= output_ts_step_reg[i];\n            output_pps_reg[i+1] <= output_pps_reg[i];\n        end\n\n        if (output_rst) begin\n            for (i = 0; i < PIPELINE_OUTPUT; i = i + 1) begin\n                output_ts_reg[i] = 0;\n                output_ts_step_reg[i] = 1'b0;\n                output_pps_reg[i] = 1'b0;\n            end\n        end\n    end\n\nend else begin\n\n    if (TS_WIDTH == 96) begin\n        assign output_ts[95:48] = ts_s_reg;\n        assign output_ts[47:46] = 2'b00;\n        assign output_ts[45:16] = ts_ns_reg;\n        assign output_ts[15:0]  = {ts_fns_reg, 16'd0} >> FNS_WIDTH;\n    end else if (TS_WIDTH == 64) begin\n        assign output_ts[63:16] = ts_ns_reg;\n        assign output_ts[15:0]  = {ts_fns_reg, 16'd0} >> FNS_WIDTH;\n    end\n\n    assign output_ts_step = ts_step_reg;\n\n    assign output_pps = pps_reg;\n\nend\n\nendgenerate\n\ninteger i;\n\n"], "Clone Blocks": [["verilog-ethernet/rtl/ptp_clock.v@132:209", "\nassign input_adj_active = adj_active_reg;\n\ngenerate\n\nif (PIPELINE_OUTPUT > 0) begin\n\n    // pipeline\n    (* shreg_extract = \"no\" *)\n    reg [95:0]  output_ts_96_reg[0:PIPELINE_OUTPUT-1];\n    (* shreg_extract = \"no\" *)\n    reg [63:0]  output_ts_64_reg[0:PIPELINE_OUTPUT-1];\n    (* shreg_extract = \"no\" *)\n    reg         output_ts_step_reg[0:PIPELINE_OUTPUT-1];\n    (* shreg_extract = \"no\" *)\n    reg         output_pps_reg[0:PIPELINE_OUTPUT-1];\n\n    assign output_ts_96 = output_ts_96_reg[PIPELINE_OUTPUT-1];\n    assign output_ts_64 = output_ts_64_reg[PIPELINE_OUTPUT-1];\n    assign output_ts_step = output_ts_step_reg[PIPELINE_OUTPUT-1];\n    assign output_pps = output_pps_reg[PIPELINE_OUTPUT-1];\n\n    integer i;\n\n    initial begin\n        for (i = 0; i < PIPELINE_OUTPUT; i = i + 1) begin\n            output_ts_96_reg[i] = 96'd0;\n            output_ts_64_reg[i] = 64'd0;\n            output_ts_step_reg[i] = 1'b0;\n            output_pps_reg[i] = 1'b0;\n        end\n    end\n\n    always @(posedge clk) begin\n        output_ts_96_reg[0][95:48] <= ts_96_s_reg;\n        output_ts_96_reg[0][47:46] <= 2'b00;\n        output_ts_96_reg[0][45:16] <= ts_96_ns_reg;\n        output_ts_96_reg[0][15:0]  <= {ts_96_fns_reg, 16'd0} >> FNS_WIDTH;\n        output_ts_64_reg[0][63:16] <= ts_64_ns_reg;\n        output_ts_64_reg[0][15:0]  <= {ts_64_fns_reg, 16'd0} >> FNS_WIDTH;\n        output_ts_step_reg[0] <= ts_step_reg;\n        output_pps_reg[0] <= pps_reg;\n\n        for (i = 0; i < PIPELINE_OUTPUT-1; i = i + 1) begin\n            output_ts_96_reg[i+1] <= output_ts_96_reg[i];\n            output_ts_64_reg[i+1] <= output_ts_64_reg[i];\n            output_ts_step_reg[i+1] <= output_ts_step_reg[i];\n            output_pps_reg[i+1] <= output_pps_reg[i];\n        end\n\n        if (rst) begin\n            for (i = 0; i < PIPELINE_OUTPUT; i = i + 1) begin\n                output_ts_96_reg[i] = 96'd0;\n                output_ts_64_reg[i] = 64'd0;\n                output_ts_step_reg[i] = 1'b0;\n                output_pps_reg[i] = 1'b0;\n            end\n        end\n    end\n\nend else begin\n\n    assign output_ts_96[95:48] = ts_96_s_reg;\n    assign output_ts_96[47:46] = 2'b00;\n    assign output_ts_96[45:16] = ts_96_ns_reg;\n    assign output_ts_96[15:0]  = {ts_96_fns_reg, 16'd0} >> FNS_WIDTH;\n    assign output_ts_64[63:16] = ts_64_ns_reg;\n    assign output_ts_64[15:0]  = {ts_64_fns_reg, 16'd0} >> FNS_WIDTH;\n    assign output_ts_step = ts_step_reg;\n\n    assign output_pps = pps_reg;\n\nend\n\nendgenerate\n\nalways @(posedge clk) begin\n    ts_step_reg <= 0;\n"]], "Diff Content": {"Delete": [[206, "                output_ts_reg[i] = 0;\n"], [207, "                output_ts_step_reg[i] = 1'b0;\n"], [208, "                output_pps_reg[i] = 1'b0;\n"]], "Add": [[208, "                output_ts_reg[i] <= 0;\n"], [208, "                output_ts_step_reg[i] <= 1'b0;\n"], [208, "                output_pps_reg[i] <= 1'b0;\n"]]}}