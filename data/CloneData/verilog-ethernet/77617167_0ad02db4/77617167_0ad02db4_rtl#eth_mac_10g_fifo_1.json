{"Source Block": ["verilog-ethernet/rtl/eth_mac_10g_fifo.v@219:304@HdlStmIf", "end\n\n// PTP timestamping\ngenerate\n\nif (TX_PTP_TS_ENABLE) begin\n    \n    ptp_clock_cdc #(\n        .TS_WIDTH(PTP_TS_WIDTH),\n        .NS_WIDTH(4),\n        .FNS_WIDTH(16),\n        .USE_SAMPLE_CLOCK(PTP_USE_SAMPLE_CLOCK)\n    )\n    tx_ptp_cdc (\n        .input_clk(logic_clk),\n        .input_rst(logic_rst),\n        .output_clk(tx_clk),\n        .output_rst(tx_rst),\n        .sample_clk(ptp_sample_clk),\n        .input_ts(ptp_ts_96),\n        .input_ts_step(ptp_ts_step),\n        .output_ts(tx_ptp_ts_96),\n        .output_ts_step(),\n        .output_pps(),\n        .locked()\n    );\n\n    axis_async_fifo #(\n        .DEPTH(TX_PTP_TS_FIFO_DEPTH),\n        .DATA_WIDTH(PTP_TS_WIDTH),\n        .KEEP_ENABLE(0),\n        .LAST_ENABLE(0),\n        .ID_ENABLE(TX_PTP_TAG_ENABLE),\n        .ID_WIDTH(PTP_TAG_WIDTH),\n        .DEST_ENABLE(0),\n        .USER_ENABLE(0),\n        .FRAME_FIFO(0)\n    )\n    tx_ptp_ts_fifo (\n        .async_rst(logic_rst | tx_rst),\n\n        // AXI input\n        .s_clk(tx_clk),\n        .s_axis_tdata(tx_axis_ptp_ts_96),\n        .s_axis_tkeep(0),\n        .s_axis_tvalid(tx_axis_ptp_ts_valid),\n        .s_axis_tready(),\n        .s_axis_tlast(0),\n        .s_axis_tid(tx_axis_ptp_ts_tag),\n        .s_axis_tdest(0),\n        .s_axis_tuser(0),\n\n        // AXI output\n        .m_clk(logic_clk),\n        .m_axis_tdata(m_axis_tx_ptp_ts_96),\n        .m_axis_tkeep(),\n        .m_axis_tvalid(m_axis_tx_ptp_ts_valid),\n        .m_axis_tready(m_axis_tx_ptp_ts_ready),\n        .m_axis_tlast(),\n        .m_axis_tid(m_axis_tx_ptp_ts_tag),\n        .m_axis_tdest(),\n        .m_axis_tuser(),\n\n        // Status\n        .s_status_overflow(),\n        .s_status_bad_frame(),\n        .s_status_good_frame(),\n        .m_status_overflow(),\n        .m_status_bad_frame(),\n        .m_status_good_frame()\n    );\n\nend else begin\n\n    assign m_axis_tx_ptp_ts_96 = {PTP_TS_WIDTH{1'b0}};\n    assign m_axis_tx_ptp_ts_tag = {PTP_TAG_WIDTH{1'b0}};\n    assign m_axis_tx_ptp_ts_valid = 1'b0;\n\n    assign tx_ptp_ts_96 = {PTP_TS_WIDTH{1'b0}};\n\nend\n\nif (RX_PTP_TS_ENABLE) begin\n\n    ptp_clock_cdc #(\n        .TS_WIDTH(PTP_TS_WIDTH),\n"], "Clone Blocks": [["verilog-ethernet/rtl/eth_mac_phy_10g_fifo.v@239:324", "end\n\n// PTP timestamping\ngenerate\n\nif (TX_PTP_TS_ENABLE) begin\n    \n    ptp_clock_cdc #(\n        .TS_WIDTH(PTP_TS_WIDTH),\n        .NS_WIDTH(4),\n        .FNS_WIDTH(16),\n        .USE_SAMPLE_CLOCK(PTP_USE_SAMPLE_CLOCK)\n    )\n    tx_ptp_cdc (\n        .input_clk(logic_clk),\n        .input_rst(logic_rst),\n        .output_clk(tx_clk),\n        .output_rst(tx_rst),\n        .sample_clk(ptp_sample_clk),\n        .input_ts(ptp_ts_96),\n        .input_ts_step(ptp_ts_step),\n        .output_ts(tx_ptp_ts_96),\n        .output_ts_step(),\n        .output_pps(),\n        .locked()\n    );\n\n    axis_async_fifo #(\n        .DEPTH(TX_PTP_TS_FIFO_DEPTH),\n        .DATA_WIDTH(PTP_TS_WIDTH),\n        .KEEP_ENABLE(0),\n        .LAST_ENABLE(0),\n        .ID_ENABLE(TX_PTP_TAG_ENABLE),\n        .ID_WIDTH(PTP_TAG_WIDTH),\n        .DEST_ENABLE(0),\n        .USER_ENABLE(0),\n        .FRAME_FIFO(0)\n    )\n    tx_ptp_ts_fifo (\n        .async_rst(logic_rst | tx_rst),\n\n        // AXI input\n        .s_clk(tx_clk),\n        .s_axis_tdata(tx_axis_ptp_ts_96),\n        .s_axis_tkeep(0),\n        .s_axis_tvalid(tx_axis_ptp_ts_valid),\n        .s_axis_tready(),\n        .s_axis_tlast(0),\n        .s_axis_tid(tx_axis_ptp_ts_tag),\n        .s_axis_tdest(0),\n        .s_axis_tuser(0),\n\n        // AXI output\n        .m_clk(logic_clk),\n        .m_axis_tdata(m_axis_tx_ptp_ts_96),\n        .m_axis_tkeep(),\n        .m_axis_tvalid(m_axis_tx_ptp_ts_valid),\n        .m_axis_tready(m_axis_tx_ptp_ts_ready),\n        .m_axis_tlast(),\n        .m_axis_tid(m_axis_tx_ptp_ts_tag),\n        .m_axis_tdest(),\n        .m_axis_tuser(),\n\n        // Status\n        .s_status_overflow(),\n        .s_status_bad_frame(),\n        .s_status_good_frame(),\n        .m_status_overflow(),\n        .m_status_bad_frame(),\n        .m_status_good_frame()\n    );\n\nend else begin\n\n    assign m_axis_tx_ptp_ts_96 = {PTP_TS_WIDTH{1'b0}};\n    assign m_axis_tx_ptp_ts_tag = {PTP_TAG_WIDTH{1'b0}};\n    assign m_axis_tx_ptp_ts_valid = 1'b0;\n\n    assign tx_ptp_ts_96 = {PTP_TS_WIDTH{1'b0}};\n\nend\n\nif (RX_PTP_TS_ENABLE) begin\n\n    ptp_clock_cdc #(\n        .TS_WIDTH(PTP_TS_WIDTH),\n"]], "Diff Content": {"Delete": [[258, "        .async_rst(logic_rst | tx_rst),\n"]], "Add": [[261, "        .s_rst(tx_rst),\n"], [272, "        .m_rst(logic_rst),\n"]]}}