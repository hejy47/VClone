{"Source Block": ["verilog-ethernet/rtl/ptp_perout.v@121:252@HdlStmProcess", "\nassign locked = locked_reg;\nassign error = error_reg;\nassign output_pulse = output_reg;\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    next_rise_s_next = next_rise_s_reg;\n    next_rise_ns_next = next_rise_ns_reg;\n    next_rise_fns_next = next_rise_fns_reg;\n\n    next_fall_s_next = next_fall_s_reg;\n    next_fall_ns_next = next_fall_ns_reg;\n    next_fall_fns_next = next_fall_fns_reg;\n\n    ts_96_ns_inc_next = ts_96_ns_inc_reg;\n    ts_96_fns_inc_next = ts_96_fns_inc_reg;\n\n    ts_96_ns_ovf_next = ts_96_ns_ovf_reg;\n    ts_96_fns_ovf_next = ts_96_fns_ovf_reg;\n\n    locked_next = locked_reg;\n    level_next = level_reg;\n    output_next = output_reg;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // set next rise to start time\n            next_rise_s_next = start_s_reg;\n            next_rise_ns_next = start_ns_reg;\n            if (FNS_ENABLE) begin\n                next_rise_fns_next = start_fns_reg;\n            end\n            locked_next = 1'b0;\n            level_next = 1'b0;\n            output_next = 1'b0;\n            if (input_start_valid || input_period_valid) begin\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_UPDATE_FALL_1;\n            end\n        end\n        STATE_UPDATE_RISE_1: begin\n            // set next rise time to next rise time plus period\n            {ts_96_ns_inc_next, ts_96_fns_inc_next} = {next_rise_ns_reg, next_rise_fns_reg} + {period_ns_reg, period_fns_reg};\n            {ts_96_ns_ovf_next, ts_96_fns_ovf_next} = {next_rise_ns_reg, next_rise_fns_reg} + {period_ns_reg, period_fns_reg} - {31'd1_000_000_000, 16'd0};\n            if (input_start_valid || input_period_valid) begin\n                level_next = 1'b0;\n                output_next = 1'b0;\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_UPDATE_RISE_2;\n            end\n        end\n        STATE_UPDATE_RISE_2: begin\n            if (!ts_96_ns_ovf_reg[30]) begin\n                // if the overflow lookahead did not borrow, one second has elapsed\n                next_rise_s_next = next_rise_s_reg + period_s_reg + 1;\n                next_rise_ns_next = ts_96_ns_ovf_reg;\n                next_rise_fns_next = ts_96_fns_ovf_reg;\n            end else begin\n                // no increment seconds field\n                next_rise_s_next = next_rise_s_reg + period_s_reg;\n                next_rise_ns_next = ts_96_ns_inc_reg;\n                next_rise_fns_next = ts_96_fns_inc_reg;\n            end\n            if (input_start_valid || input_period_valid) begin\n                level_next = 1'b0;\n                output_next = 1'b0;\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_WAIT_EDGE;\n            end\n        end\n        STATE_UPDATE_FALL_1: begin\n            // set next fall time to next rise time plus width\n            {ts_96_ns_inc_next, ts_96_fns_inc_next} = {next_rise_ns_reg, next_rise_fns_reg} + {width_ns_reg, width_fns_reg};\n            {ts_96_ns_ovf_next, ts_96_fns_ovf_next} = {next_rise_ns_reg, next_rise_fns_reg} + {width_ns_reg, width_fns_reg} - {31'd1_000_000_000, 16'd0};\n            if (input_start_valid || input_period_valid) begin\n                level_next = 1'b0;\n                output_next = 1'b0;\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_UPDATE_FALL_2;\n            end\n        end\n        STATE_UPDATE_FALL_2: begin\n            if (!ts_96_ns_ovf_reg[30]) begin\n                // if the overflow lookahead did not borrow, one second has elapsed\n                next_fall_s_next = next_rise_s_reg + width_s_reg + 1;\n                next_fall_ns_next = ts_96_ns_ovf_reg;\n                next_fall_fns_next = ts_96_fns_ovf_reg;\n            end else begin\n                // no increment seconds field\n                next_fall_s_next = next_rise_s_reg + width_s_reg;\n                next_fall_ns_next = ts_96_ns_inc_reg;\n                next_fall_fns_next = ts_96_fns_inc_reg;\n            end\n            if (input_start_valid || input_period_valid) begin\n                level_next = 1'b0;\n                output_next = 1'b0;\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_WAIT_EDGE;\n            end\n        end\n        STATE_WAIT_EDGE: begin\n            if (input_start_valid || input_period_valid) begin\n                state_next = STATE_IDLE;\n            end else if ((time_s_reg > next_rise_s_reg) || (time_s_reg == next_rise_s_reg && {time_ns_reg, time_fns_reg} > {next_rise_ns_reg, next_rise_fns_reg})) begin\n                // rising edge\n                level_next = 1'b1;\n                output_next = enable && locked_reg;\n                state_next = STATE_UPDATE_RISE_1;\n            end else if ((time_s_reg > next_fall_s_reg) || (time_s_reg == next_fall_s_reg && {time_ns_reg, time_fns_reg} > {next_fall_ns_reg, next_fall_fns_reg})) begin\n                // falling edge\n                level_next = 1'b0;\n                output_next = 1'b0;\n                state_next = STATE_UPDATE_FALL_1;\n            end else begin\n                locked_next = locked_reg || level_reg;\n                state_next = STATE_WAIT_EDGE;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    state_reg <= state_next;\n\n    time_s_reg <= input_ts_96[95:48];\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[147, "    case (state_reg)\n"], [148, "        STATE_IDLE: begin\n"], [150, "            next_rise_s_next = start_s_reg;\n"], [151, "            next_rise_ns_next = start_ns_reg;\n"], [152, "            if (FNS_ENABLE) begin\n"], [153, "                next_rise_fns_next = start_fns_reg;\n"], [154, "            end\n"], [155, "            locked_next = 1'b0;\n"], [156, "            level_next = 1'b0;\n"], [157, "            output_next = 1'b0;\n"], [158, "            if (input_start_valid || input_period_valid) begin\n"], [159, "                state_next = STATE_IDLE;\n"], [160, "            end else begin\n"], [161, "                state_next = STATE_UPDATE_FALL_1;\n"], [162, "            end\n"], [163, "        end\n"], [164, "        STATE_UPDATE_RISE_1: begin\n"], [166, "            {ts_96_ns_inc_next, ts_96_fns_inc_next} = {next_rise_ns_reg, next_rise_fns_reg} + {period_ns_reg, period_fns_reg};\n"], [167, "            {ts_96_ns_ovf_next, ts_96_fns_ovf_next} = {next_rise_ns_reg, next_rise_fns_reg} + {period_ns_reg, period_fns_reg} - {31'd1_000_000_000, 16'd0};\n"], [168, "            if (input_start_valid || input_period_valid) begin\n"], [171, "                state_next = STATE_IDLE;\n"], [172, "            end else begin\n"], [173, "                state_next = STATE_UPDATE_RISE_2;\n"], [175, "        end\n"], [176, "        STATE_UPDATE_RISE_2: begin\n"], [177, "            if (!ts_96_ns_ovf_reg[30]) begin\n"], [179, "                next_rise_s_next = next_rise_s_reg + period_s_reg + 1;\n"], [180, "                next_rise_ns_next = ts_96_ns_ovf_reg;\n"], [181, "                next_rise_fns_next = ts_96_fns_ovf_reg;\n"], [182, "            end else begin\n"], [184, "                next_rise_s_next = next_rise_s_reg + period_s_reg;\n"], [185, "                next_rise_ns_next = ts_96_ns_inc_reg;\n"], [186, "                next_rise_fns_next = ts_96_fns_inc_reg;\n"], [188, "            if (input_start_valid || input_period_valid) begin\n"], [189, "                level_next = 1'b0;\n"], [190, "                output_next = 1'b0;\n"], [191, "                state_next = STATE_IDLE;\n"], [192, "            end else begin\n"], [195, "        end\n"], [196, "        STATE_UPDATE_FALL_1: begin\n"], [198, "            {ts_96_ns_inc_next, ts_96_fns_inc_next} = {next_rise_ns_reg, next_rise_fns_reg} + {width_ns_reg, width_fns_reg};\n"], [199, "            {ts_96_ns_ovf_next, ts_96_fns_ovf_next} = {next_rise_ns_reg, next_rise_fns_reg} + {width_ns_reg, width_fns_reg} - {31'd1_000_000_000, 16'd0};\n"], [200, "            if (input_start_valid || input_period_valid) begin\n"], [201, "                level_next = 1'b0;\n"], [202, "                output_next = 1'b0;\n"], [203, "                state_next = STATE_IDLE;\n"], [204, "            end else begin\n"], [207, "        end\n"], [208, "        STATE_UPDATE_FALL_2: begin\n"], [209, "            if (!ts_96_ns_ovf_reg[30]) begin\n"], [211, "                next_fall_s_next = next_rise_s_reg + width_s_reg + 1;\n"], [212, "                next_fall_ns_next = ts_96_ns_ovf_reg;\n"], [213, "                next_fall_fns_next = ts_96_fns_ovf_reg;\n"], [214, "            end else begin\n"], [216, "                next_fall_s_next = next_rise_s_reg + width_s_reg;\n"], [217, "                next_fall_ns_next = ts_96_ns_inc_reg;\n"], [218, "                next_fall_fns_next = ts_96_fns_inc_reg;\n"], [219, "            end\n"], [220, "            if (input_start_valid || input_period_valid) begin\n"], [221, "                level_next = 1'b0;\n"], [222, "                output_next = 1'b0;\n"], [223, "                state_next = STATE_IDLE;\n"], [224, "            end else begin\n"], [227, "        end\n"], [228, "        STATE_WAIT_EDGE: begin\n"], [229, "            if (input_start_valid || input_period_valid) begin\n"], [230, "                state_next = STATE_IDLE;\n"], [231, "            end else if ((time_s_reg > next_rise_s_reg) || (time_s_reg == next_rise_s_reg && {time_ns_reg, time_fns_reg} > {next_rise_ns_reg, next_rise_fns_reg})) begin\n"], [233, "                level_next = 1'b1;\n"], [234, "                output_next = enable && locked_reg;\n"], [235, "                state_next = STATE_UPDATE_RISE_1;\n"], [236, "            end else if ((time_s_reg > next_fall_s_reg) || (time_s_reg == next_fall_s_reg && {time_ns_reg, time_fns_reg} > {next_fall_ns_reg, next_fall_fns_reg})) begin\n"], [238, "                level_next = 1'b0;\n"], [239, "                output_next = 1'b0;\n"], [240, "                state_next = STATE_UPDATE_FALL_1;\n"], [241, "            end else begin\n"], [242, "                locked_next = locked_reg || level_reg;\n"], [243, "                state_next = STATE_WAIT_EDGE;\n"], [245, "        end\n"], [246, "    endcase\n"]], "Add": [[143, "    error_next = error_reg;\n"], [168, "    if (input_start_valid || input_period_valid || input_ts_step) begin\n"], [168, "        locked_next = 1'b0;\n"], [168, "        level_next = 1'b0;\n"], [168, "        output_next = 1'b0;\n"], [168, "        error_next = input_ts_step;\n"], [168, "        state_next = STATE_IDLE;\n"], [168, "    end else begin\n"], [168, "        case (state_reg)\n"], [168, "            STATE_IDLE: begin\n"], [168, "                next_rise_s_next = start_s_reg;\n"], [168, "                next_rise_ns_next = start_ns_reg;\n"], [168, "                if (FNS_ENABLE) begin\n"], [168, "                    next_rise_fns_next = start_fns_reg;\n"], [168, "                end\n"], [168, "                locked_next = 1'b0;\n"], [173, "                state_next = STATE_UPDATE_FALL_1;\n"], [186, "            STATE_UPDATE_RISE_1: begin\n"], [186, "                {ts_96_ns_inc_next, ts_96_fns_inc_next} = {next_rise_ns_reg, next_rise_fns_reg} + {period_ns_reg, period_fns_reg};\n"], [186, "                {ts_96_ns_ovf_next, ts_96_fns_ovf_next} = {next_rise_ns_reg, next_rise_fns_reg} + {period_ns_reg, period_fns_reg} - {31'd1_000_000_000, 16'd0};\n"], [186, "                state_next = STATE_UPDATE_RISE_2;\n"], [192, "            STATE_UPDATE_RISE_2: begin\n"], [192, "                if (!ts_96_ns_ovf_reg[30]) begin\n"], [192, "                    next_rise_s_next = next_rise_s_reg + period_s_reg + 1;\n"], [192, "                    next_rise_ns_next = ts_96_ns_ovf_reg;\n"], [192, "                    next_rise_fns_next = ts_96_fns_ovf_reg;\n"], [192, "                end else begin\n"], [192, "                    next_rise_s_next = next_rise_s_reg + period_s_reg;\n"], [192, "                    next_rise_ns_next = ts_96_ns_inc_reg;\n"], [192, "                    next_rise_fns_next = ts_96_fns_inc_reg;\n"], [192, "                end\n"], [204, "            STATE_UPDATE_FALL_1: begin\n"], [204, "                {ts_96_ns_inc_next, ts_96_fns_inc_next} = {next_rise_ns_reg, next_rise_fns_reg} + {width_ns_reg, width_fns_reg};\n"], [204, "                {ts_96_ns_ovf_next, ts_96_fns_ovf_next} = {next_rise_ns_reg, next_rise_fns_reg} + {width_ns_reg, width_fns_reg} - {31'd1_000_000_000, 16'd0};\n"], [224, "            STATE_UPDATE_FALL_2: begin\n"], [224, "                if (!ts_96_ns_ovf_reg[30]) begin\n"], [224, "                    next_fall_s_next = next_rise_s_reg + width_s_reg + 1;\n"], [224, "                    next_fall_ns_next = ts_96_ns_ovf_reg;\n"], [224, "                    next_fall_fns_next = ts_96_fns_ovf_reg;\n"], [224, "                end else begin\n"], [224, "                    next_fall_s_next = next_rise_s_reg + width_s_reg;\n"], [224, "                    next_fall_ns_next = ts_96_ns_inc_reg;\n"], [224, "                    next_fall_fns_next = ts_96_fns_inc_reg;\n"], [224, "                end\n"], [243, "            STATE_WAIT_EDGE: begin\n"], [243, "                if ((time_s_reg > next_rise_s_reg) || (time_s_reg == next_rise_s_reg && {time_ns_reg, time_fns_reg} > {next_rise_ns_reg, next_rise_fns_reg})) begin\n"], [243, "                    level_next = 1'b1;\n"], [243, "                    output_next = enable && locked_reg;\n"], [243, "                    state_next = STATE_UPDATE_RISE_1;\n"], [243, "                end else if ((time_s_reg > next_fall_s_reg) || (time_s_reg == next_fall_s_reg && {time_ns_reg, time_fns_reg} > {next_fall_ns_reg, next_fall_fns_reg})) begin\n"], [243, "                    level_next = 1'b0;\n"], [243, "                    output_next = 1'b0;\n"], [243, "                    state_next = STATE_UPDATE_FALL_1;\n"], [243, "                end else begin\n"], [243, "                    locked_next = locked_reg || level_reg;\n"], [243, "                    error_next = error_reg && !(locked_reg || level_reg);\n"], [243, "                    state_next = STATE_WAIT_EDGE;\n"], [243, "                end\n"], [246, "        endcase\n"], [246, "    end\n"]]}}