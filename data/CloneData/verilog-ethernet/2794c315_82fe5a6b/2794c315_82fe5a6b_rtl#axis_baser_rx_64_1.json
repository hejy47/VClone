{"Source Block": ["verilog-ethernet/rtl/axis_baser_rx_64.v@407:616@HdlStmProcess", "            state_next = STATE_IDLE;\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n\n        m_axis_tvalid_reg <= 1'b0;\n\n        start_packet_reg <= 2'b00;\n        error_bad_frame_reg <= 1'b0;\n        error_bad_fcs_reg <= 1'b0;\n        rx_bad_block_reg <= 1'b0;\n\n        crc_state <= 32'hFFFFFFFF;\n        crc_state3 <= 32'hFFFFFFFF;\n        crc_valid7_save <= 1'b0;\n\n        input_type_d0 <= INPUT_TYPE_IDLE;\n        input_type_d1 <= INPUT_TYPE_IDLE;\n\n        lanes_swapped <= 1'b0;\n\n        delay_type_valid <= 1'b0;\n        delay_type <= INPUT_TYPE_IDLE;\n    end else begin\n        state_reg <= state_next;\n\n        m_axis_tvalid_reg <= m_axis_tvalid_next;\n\n        start_packet_reg <= 2'b00;\n        error_bad_frame_reg <= error_bad_frame_next;\n        error_bad_fcs_reg <= error_bad_fcs_next;\n        rx_bad_block_reg <= 1'b0;\n\n        delay_type_valid <= 1'b0;\n\n        if (encoded_rx_hdr == SYNC_CTRL && encoded_rx_data[7:0] == BLOCK_TYPE_START_0) begin\n            lanes_swapped <= 1'b0;\n            start_packet_reg <= 2'b01;\n            input_type_d0 <= INPUT_TYPE_START_0;\n        end else if (encoded_rx_hdr == SYNC_CTRL && (encoded_rx_data[7:0] == BLOCK_TYPE_START_4 || encoded_rx_data[7:0] == BLOCK_TYPE_OS_START)) begin\n            lanes_swapped <= 1'b1;\n            start_packet_reg <= 2'b10;\n            delay_type_valid <= 1'b1;\n            if (delay_type_valid) begin\n                input_type_d0 <= delay_type;\n            end else begin\n                input_type_d0 <= INPUT_TYPE_IDLE;\n            end\n        end else if (lanes_swapped) begin\n            if (delay_type_valid) begin\n                input_type_d0 <= delay_type;\n            end else if (encoded_rx_hdr == SYNC_DATA) begin\n                input_type_d0 <= INPUT_TYPE_DATA;\n            end else if (encoded_rx_hdr == SYNC_CTRL) begin\n                case (encoded_rx_data[7:0])\n                    BLOCK_TYPE_TERM_0: input_type_d0 <= INPUT_TYPE_TERM_4;\n                    BLOCK_TYPE_TERM_1: input_type_d0 <= INPUT_TYPE_TERM_5;\n                    BLOCK_TYPE_TERM_2: input_type_d0 <= INPUT_TYPE_TERM_6;\n                    BLOCK_TYPE_TERM_3: input_type_d0 <= INPUT_TYPE_TERM_7;\n                    BLOCK_TYPE_TERM_4: begin\n                        delay_type_valid <= 1'b1;\n                        input_type_d0 <= INPUT_TYPE_DATA;\n                    end\n                    BLOCK_TYPE_TERM_5: begin\n                        delay_type_valid <= 1'b1;\n                        input_type_d0 <= INPUT_TYPE_DATA;\n                    end\n                    BLOCK_TYPE_TERM_6: begin\n                        delay_type_valid <= 1'b1;\n                        input_type_d0 <= INPUT_TYPE_DATA;\n                    end\n                    BLOCK_TYPE_TERM_7: begin\n                        delay_type_valid <= 1'b1;\n                        input_type_d0 <= INPUT_TYPE_DATA;\n                    end\n                    default: begin\n                        rx_bad_block_reg <= 1'b1;\n                        input_type_d0 <= INPUT_TYPE_ERROR;\n                    end\n                endcase\n            end else begin\n                rx_bad_block_reg <= 1'b1;\n                input_type_d0 <= INPUT_TYPE_ERROR;\n            end\n        end else begin\n            if (encoded_rx_hdr == SYNC_DATA) begin\n                input_type_d0 <= INPUT_TYPE_DATA;\n            end else if (encoded_rx_hdr == SYNC_CTRL) begin\n                case (encoded_rx_data[7:0])\n                    BLOCK_TYPE_TERM_0: input_type_d0 <= INPUT_TYPE_TERM_0;\n                    BLOCK_TYPE_TERM_1: input_type_d0 <= INPUT_TYPE_TERM_1;\n                    BLOCK_TYPE_TERM_2: input_type_d0 <= INPUT_TYPE_TERM_2;\n                    BLOCK_TYPE_TERM_3: input_type_d0 <= INPUT_TYPE_TERM_3;\n                    BLOCK_TYPE_TERM_4: input_type_d0 <= INPUT_TYPE_TERM_4;\n                    BLOCK_TYPE_TERM_5: input_type_d0 <= INPUT_TYPE_TERM_5;\n                    BLOCK_TYPE_TERM_6: input_type_d0 <= INPUT_TYPE_TERM_6;\n                    BLOCK_TYPE_TERM_7: input_type_d0 <= INPUT_TYPE_TERM_7;\n                    default: begin\n                        rx_bad_block_reg <= 1'b1;\n                        input_type_d0 <= INPUT_TYPE_ERROR;\n                    end\n                endcase\n            end else begin\n                rx_bad_block_reg <= 1'b1;\n                input_type_d0 <= INPUT_TYPE_ERROR;\n            end\n        end\n\n        input_type_d1 <= input_type_d0;\n\n        // datapath\n        if (reset_crc) begin\n            crc_state <= 32'hFFFFFFFF;\n            crc_state3 <= 32'hFFFFFFFF;\n            crc_valid7_save <= 1'b0;\n        end else if (update_crc) begin\n            crc_state <= crc_next7;\n            crc_state3 <= crc_next3;\n            crc_valid7_save <= crc_valid7;\n        end\n    end\n\n    if (PTP_TS_WIDTH == 96 && $signed({1'b0, ptp_ts_reg[45:16]}) - $signed(31'd1000000000) > 0) begin\n        // ns field rollover\n        ptp_ts_reg[45:16] <= $signed({1'b0, ptp_ts_reg[45:16]}) - $signed(31'd1000000000);\n        ptp_ts_reg[95:48] <= ptp_ts_reg[95:48] + 1;\n    end\n\n    if (encoded_rx_hdr == SYNC_CTRL && encoded_rx_data[7:0] == BLOCK_TYPE_START_0) begin\n        if (PTP_TS_WIDTH == 96) begin\n            ptp_ts_reg[45:0] <= ptp_ts[45:0] + (PTP_PERIOD_NS * 2**16 + PTP_PERIOD_FNS);\n            ptp_ts_reg[95:48] <= ptp_ts[95:48];\n        end else begin\n            ptp_ts_reg <= ptp_ts + (PTP_PERIOD_NS * 2**16 + PTP_PERIOD_FNS);\n        end\n    end else if (encoded_rx_hdr == SYNC_CTRL && (encoded_rx_data[7:0] == BLOCK_TYPE_START_4 || encoded_rx_data[7:0] == BLOCK_TYPE_OS_START)) begin\n        if (PTP_TS_WIDTH == 96) begin\n            ptp_ts_reg[45:0] <= ptp_ts[45:0] + (PTP_PERIOD_NS * 2**16 + PTP_PERIOD_FNS) * 1.5;\n            ptp_ts_reg[95:48] <= ptp_ts[95:48];\n        end else begin\n            ptp_ts_reg <= ptp_ts + (PTP_PERIOD_NS * 2**16 + PTP_PERIOD_FNS) * 1.5;\n        end\n    end\n\n    m_axis_tdata_reg <= m_axis_tdata_next;\n    m_axis_tkeep_reg <= m_axis_tkeep_next;\n    m_axis_tlast_reg <= m_axis_tlast_next;\n    m_axis_tuser_reg <= m_axis_tuser_next;\n\n    if (encoded_rx_hdr == SYNC_DATA) begin\n        swap_data <= encoded_rx_data[63:32];\n    end else begin\n        swap_data <= {8'd0, encoded_rx_data[63:40]};\n    end\n\n    if (encoded_rx_hdr == SYNC_CTRL && encoded_rx_data[7:0] == BLOCK_TYPE_START_0) begin\n        input_data_d0 <= encoded_rx_data;\n        input_data_crc <= encoded_rx_data;\n    end else if (encoded_rx_hdr == SYNC_CTRL && (encoded_rx_data[7:0] == BLOCK_TYPE_START_4 || encoded_rx_data[7:0] == BLOCK_TYPE_OS_START)) begin\n        input_data_d0 <= {encoded_rx_data[31:0], swap_data};\n        input_data_crc <= {encoded_rx_data[31:0], swap_data};\n    end else if (lanes_swapped) begin\n        if (encoded_rx_hdr == SYNC_DATA) begin\n            input_data_d0 <= {encoded_rx_data[31:0], swap_data};\n            input_data_crc <= {encoded_rx_data[31:0], swap_data};\n        end else begin\n            input_data_d0 <= {encoded_rx_data[39:8], swap_data};\n            input_data_crc <= {encoded_rx_data[39:8], swap_data};\n        end\n    end else begin\n        if (encoded_rx_hdr == SYNC_DATA) begin\n            input_data_d0 <= encoded_rx_data;\n            input_data_crc <= encoded_rx_data;\n        end else begin\n            input_data_d0 <= {8'd0, encoded_rx_data[63:8]};\n            input_data_crc <= {8'd0, encoded_rx_data[63:8]};\n        end\n    end\n\n    if (state_next == STATE_LAST) begin\n        input_data_crc[31:0] <= input_data_crc[63:32];\n    end\n\n    input_data_d1 <= input_data_d0;\n\n    if (encoded_rx_hdr == SYNC_DATA) begin\n        delay_type <= INPUT_TYPE_DATA;\n    end else if (encoded_rx_hdr == SYNC_CTRL) begin\n        case (encoded_rx_data[7:0])\n            BLOCK_TYPE_START_4: delay_type <= INPUT_TYPE_START_0;\n            BLOCK_TYPE_TERM_0: delay_type <= INPUT_TYPE_TERM_4;\n            BLOCK_TYPE_TERM_1: delay_type <= INPUT_TYPE_TERM_5;\n            BLOCK_TYPE_TERM_2: delay_type <= INPUT_TYPE_TERM_6;\n            BLOCK_TYPE_TERM_3: delay_type <= INPUT_TYPE_TERM_7;\n            BLOCK_TYPE_TERM_4: delay_type <= INPUT_TYPE_TERM_0;\n            BLOCK_TYPE_TERM_5: delay_type <= INPUT_TYPE_TERM_1;\n            BLOCK_TYPE_TERM_6: delay_type <= INPUT_TYPE_TERM_2;\n            BLOCK_TYPE_TERM_7: delay_type <= INPUT_TYPE_TERM_3;\n            default: delay_type <= INPUT_TYPE_ERROR;\n        endcase\n    end else begin\n        delay_type <= INPUT_TYPE_ERROR;\n    end\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[548, "            ptp_ts_reg[45:0] <= ptp_ts[45:0] + (PTP_PERIOD_NS * 2**16 + PTP_PERIOD_FNS) * 1.5;\n"], [551, "            ptp_ts_reg <= ptp_ts + (PTP_PERIOD_NS * 2**16 + PTP_PERIOD_FNS) * 1.5;\n"]], "Add": [[548, "            ptp_ts_reg[45:0] <= ptp_ts[45:0] + (((PTP_PERIOD_NS * 2**16 + PTP_PERIOD_FNS) * 3) >> 1);\n"], [551, "            ptp_ts_reg <= ptp_ts + (((PTP_PERIOD_NS * 2**16 + PTP_PERIOD_FNS) * 3) >> 1);\n"]]}}