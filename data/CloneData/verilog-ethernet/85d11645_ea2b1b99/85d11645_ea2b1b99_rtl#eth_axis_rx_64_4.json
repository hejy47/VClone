{"Source Block": ["verilog-ethernet/rtl/eth_axis_rx_64.v@141:275@HdlStmProcess", "assign output_eth_payload_tuser = output_eth_payload_tuser_reg;\n\nassign busy = busy_reg;\nassign frame_error = frame_error_reg;\n\nalways @* begin\n    state_next = 2'bz;\n\n    transfer_in_save = 0;\n    transfer_save_out = 0;\n    transfer_in_out = 0;\n    transfer_in_temp = 0;\n    transfer_temp_out = 0;\n\n    store_hdr_word_0 = 0;\n    store_hdr_word_1 = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;\n\n    frame_error_next = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 0;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                frame_ptr_next = 8;\n                store_hdr_word_0 = 1;\n                transfer_in_save = 1;\n                state_next = STATE_READ_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_READ_HEADER: begin\n            // read header state\n            if (input_axis_tvalid) begin\n                // word transfer in - store it\n                frame_ptr_next = frame_ptr_reg+8;\n                transfer_in_save = 1;\n                state_next = STATE_READ_HEADER;\n                case (frame_ptr_reg)\n                    8'h00: store_hdr_word_0 = 1;\n                    8'h08: begin\n                        store_hdr_word_1 = 1;\n                        output_eth_hdr_valid_next = 1;\n                        state_next = STATE_READ_PAYLOAD_IDLE;\n                    end\n                endcase\n                if (input_axis_tlast) begin\n                    state_next = STATE_IDLE;\n                    frame_error_next = 1;\n                end\n            end else begin\n                state_next = STATE_READ_HEADER;\n            end\n        end\n        STATE_READ_PAYLOAD_IDLE: begin\n            // idle; no data in registers\n            if (input_axis_tvalid) begin\n                // word transfer in - store it in output register\n                transfer_in_out = 1;\n                transfer_in_save = 1;\n                if (input_axis_tlast) begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER_LAST;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER;\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD_IDLE;\n            end\n        end\n        STATE_READ_PAYLOAD_TRANSFER: begin\n            // read payload; data in output register\n            if (input_axis_tvalid & output_eth_payload_tready) begin\n                // word transfer through - update output register\n                transfer_in_out = 1;\n                transfer_in_save = 1;\n                if (input_axis_tlast) begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER_LAST;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER;\n                end\n            end else if (~input_axis_tvalid & output_eth_payload_tready) begin\n                // word transfer out - go back to idle\n                state_next = STATE_READ_PAYLOAD_IDLE;\n            end else if (input_axis_tvalid & ~output_eth_payload_tready) begin\n                // word transfer in - store in temp\n                transfer_in_temp = 1;\n                transfer_in_save = 1;\n                state_next = STATE_READ_PAYLOAD_TRANSFER_WAIT;\n            end else begin\n                state_next = STATE_READ_PAYLOAD_TRANSFER;\n            end\n        end\n        STATE_READ_PAYLOAD_TRANSFER_WAIT: begin\n            // read payload; data in both output and temp registers\n            if (output_eth_payload_tready) begin\n                // transfer out - move temp to output\n                transfer_temp_out = 1;\n                if (temp_eth_payload_tlast_reg | (save_axis_tlast_reg & save_axis_tkeep_reg[7:6] != 0)) begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER_LAST;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER;\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD_TRANSFER_WAIT;\n            end\n        end\n        STATE_READ_PAYLOAD_TRANSFER_LAST: begin\n            // read last payload word; data in output register; do not accept new data\n            if (output_eth_payload_tready) begin\n                // word transfer out\n                if (save_axis_tkeep_reg[7:6]) begin\n                    // part of word in save register\n                    transfer_save_out = 1;\n                    state_next = STATE_READ_PAYLOAD_TRANSFER_LAST;\n                end else begin\n                    // nothing in save register; done\n                    state_next = STATE_IDLE;\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD_TRANSFER_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], "Clone Blocks": [["verilog-ethernet/rtl/eth_axis_rx.v@141:285", "assign output_eth_payload_tuser = output_eth_payload_tuser_reg;\n\nassign busy = busy_reg;\nassign frame_error = frame_error_reg;\n\nalways @* begin\n    state_next = 2'bz;\n\n    transfer_in_out = 0;\n    transfer_in_temp = 0;\n    transfer_temp_out = 0;\n\n    store_eth_dest_mac_0 = 0;\n    store_eth_dest_mac_1 = 0;\n    store_eth_dest_mac_2 = 0;\n    store_eth_dest_mac_3 = 0;\n    store_eth_dest_mac_4 = 0;\n    store_eth_dest_mac_5 = 0;\n    store_eth_src_mac_0 = 0;\n    store_eth_src_mac_1 = 0;\n    store_eth_src_mac_2 = 0;\n    store_eth_src_mac_3 = 0;\n    store_eth_src_mac_4 = 0;\n    store_eth_src_mac_5 = 0;\n    store_eth_type_0 = 0;\n    store_eth_type_1 = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;\n\n    frame_error_next = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 0;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                frame_ptr_next = 1;\n                store_eth_dest_mac_5 = 1;\n                state_next = STATE_READ_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_READ_HEADER: begin\n            // read header state\n            if (input_axis_tvalid) begin\n                // word transfer in - store it\n                frame_ptr_next = frame_ptr_reg+1;\n                state_next = STATE_READ_HEADER;\n                case (frame_ptr_reg)\n                    8'h00: store_eth_dest_mac_5 = 1;\n                    8'h01: store_eth_dest_mac_4 = 1;\n                    8'h02: store_eth_dest_mac_3 = 1;\n                    8'h03: store_eth_dest_mac_2 = 1;\n                    8'h04: store_eth_dest_mac_1 = 1;\n                    8'h05: store_eth_dest_mac_0 = 1;\n                    8'h06: store_eth_src_mac_5 = 1;\n                    8'h07: store_eth_src_mac_4 = 1;\n                    8'h08: store_eth_src_mac_3 = 1;\n                    8'h09: store_eth_src_mac_2 = 1;\n                    8'h0A: store_eth_src_mac_1 = 1;\n                    8'h0B: store_eth_src_mac_0 = 1;\n                    8'h0C: store_eth_type_1 = 1;\n                    8'h0D: begin\n                        store_eth_type_0 = 1;\n                        output_eth_hdr_valid_next = 1;\n                        state_next = STATE_READ_PAYLOAD_IDLE;\n                    end\n                endcase\n                if (input_axis_tlast) begin\n                    state_next = STATE_IDLE;\n                    frame_error_next = 1;\n                end\n            end else begin\n                state_next = STATE_READ_HEADER;\n            end\n        end\n        STATE_READ_PAYLOAD_IDLE: begin\n            // idle; no data in registers\n            if (input_axis_tvalid) begin\n                // word transfer in - store it in output register\n                transfer_in_out = 1;\n                if (input_axis_tlast) begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER_LAST;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER;\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD_IDLE;\n            end\n        end\n        STATE_READ_PAYLOAD_TRANSFER: begin\n            // read payload; data in output register\n            if (input_axis_tvalid & output_eth_payload_tready) begin\n                // word transfer through - update output register\n                transfer_in_out = 1;\n                if (input_axis_tlast) begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER_LAST;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER;\n                end\n            end else if (~input_axis_tvalid & output_eth_payload_tready) begin\n                // word transfer out - go back to idle\n                state_next = STATE_READ_PAYLOAD_IDLE;\n            end else if (input_axis_tvalid & ~output_eth_payload_tready) begin\n                // word transfer in - store in temp\n                transfer_in_temp = 1;\n                state_next = STATE_READ_PAYLOAD_TRANSFER_WAIT;\n            end else begin\n                state_next = STATE_READ_PAYLOAD_TRANSFER;\n            end\n        end\n        STATE_READ_PAYLOAD_TRANSFER_WAIT: begin\n            // read payload; data in both output and temp registers\n            if (output_eth_payload_tready) begin\n                // transfer out - move temp to output\n                transfer_temp_out = 1;\n                if (temp_eth_payload_tlast_reg) begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER_LAST;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD_TRANSFER;\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD_TRANSFER_WAIT;\n            end\n        end\n        STATE_READ_PAYLOAD_TRANSFER_LAST: begin\n            // read last payload word; data in output register; do not accept new data\n            if (output_eth_payload_tready) begin\n                // word transfer out - done\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_READ_PAYLOAD_TRANSFER_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"]], "Diff Content": {"Delete": [[162, "    frame_error_next = 0;\n"], [195, "                    frame_error_next = 1;\n"]], "Add": [[162, "    error_header_early_termination_next = 0;\n"], [195, "                    error_header_early_termination_next = 1;\n"]]}}