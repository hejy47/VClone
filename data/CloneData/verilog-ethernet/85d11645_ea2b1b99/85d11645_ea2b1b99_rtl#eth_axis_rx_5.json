{"Source Block": ["verilog-ethernet/rtl/eth_axis_rx.v@277:377@HdlStmProcess", "            end\n        end\n    endcase\nend\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n        input_axis_tready_reg <= 0;\n        output_eth_hdr_valid_reg <= 0;\n        output_eth_dest_mac_reg <= 0;\n        output_eth_src_mac_reg <= 0;\n        output_eth_type_reg <= 0;\n        output_eth_payload_tdata_reg <= 0;\n        output_eth_payload_tvalid_reg <= 0;\n        output_eth_payload_tlast_reg <= 0;\n        output_eth_payload_tuser_reg <= 0;\n        temp_eth_payload_tdata_reg <= 0;\n        temp_eth_payload_tlast_reg <= 0;\n        temp_eth_payload_tuser_reg <= 0;\n        busy_reg <= 0;\n        frame_error_reg <= 0;\n    end else begin\n        state_reg <= state_next;\n\n        frame_ptr_reg <= frame_ptr_next;\n\n        output_eth_hdr_valid_reg <= output_eth_hdr_valid_next;\n\n        frame_error_reg <= frame_error_next;\n\n        busy_reg <= state_next != STATE_IDLE;\n\n        // generate valid outputs\n        case (state_next)\n            STATE_IDLE: begin\n                // idle; accept new data\n                input_axis_tready_reg <= ~output_eth_hdr_valid;\n                output_eth_payload_tvalid_reg <= 0;\n            end\n            STATE_READ_HEADER: begin\n                // read header; accept new data\n                input_axis_tready_reg <= 1;\n                output_eth_payload_tvalid_reg <= 0;\n            end\n            STATE_READ_PAYLOAD_IDLE: begin\n                // read payload; no data in registers; accept new data\n                input_axis_tready_reg <= 1;\n                output_eth_payload_tvalid_reg <= 0;\n            end\n            STATE_READ_PAYLOAD_TRANSFER: begin\n                // read payload; data in output register; accept new data\n                input_axis_tready_reg <= 1;\n                output_eth_payload_tvalid_reg <= 1;\n            end\n            STATE_READ_PAYLOAD_TRANSFER_WAIT: begin\n                // read payload; data in output and temp registers; do not accept new data\n                input_axis_tready_reg <= 0;\n                output_eth_payload_tvalid_reg <= 1;\n            end\n            STATE_READ_PAYLOAD_TRANSFER_LAST: begin\n                // read last payload word; data in output register; do not accept new data\n                input_axis_tready_reg <= 0;\n                output_eth_payload_tvalid_reg <= 1;\n            end\n        endcase\n\n        // datapath\n        if (store_eth_dest_mac_0) output_eth_dest_mac_reg[ 7: 0] <= input_axis_tdata;\n        if (store_eth_dest_mac_1) output_eth_dest_mac_reg[15: 8] <= input_axis_tdata;\n        if (store_eth_dest_mac_2) output_eth_dest_mac_reg[23:16] <= input_axis_tdata;\n        if (store_eth_dest_mac_3) output_eth_dest_mac_reg[31:24] <= input_axis_tdata;\n        if (store_eth_dest_mac_4) output_eth_dest_mac_reg[39:32] <= input_axis_tdata;\n        if (store_eth_dest_mac_5) output_eth_dest_mac_reg[47:40] <= input_axis_tdata;\n        if (store_eth_src_mac_0) output_eth_src_mac_reg[ 7: 0] <= input_axis_tdata;\n        if (store_eth_src_mac_1) output_eth_src_mac_reg[15: 8] <= input_axis_tdata;\n        if (store_eth_src_mac_2) output_eth_src_mac_reg[23:16] <= input_axis_tdata;\n        if (store_eth_src_mac_3) output_eth_src_mac_reg[31:24] <= input_axis_tdata;\n        if (store_eth_src_mac_4) output_eth_src_mac_reg[39:32] <= input_axis_tdata;\n        if (store_eth_src_mac_5) output_eth_src_mac_reg[47:40] <= input_axis_tdata;\n        if (store_eth_type_0) output_eth_type_reg[ 7: 0] <= input_axis_tdata;\n        if (store_eth_type_1) output_eth_type_reg[15: 8] <= input_axis_tdata;\n\n        if (transfer_in_out) begin\n            output_eth_payload_tdata_reg <= input_axis_tdata;\n            output_eth_payload_tlast_reg <= input_axis_tlast;\n            output_eth_payload_tuser_reg <= input_axis_tuser;\n        end else if (transfer_in_temp) begin\n            temp_eth_payload_tdata_reg <= input_axis_tdata;\n            temp_eth_payload_tlast_reg <= input_axis_tlast;\n            temp_eth_payload_tuser_reg <= input_axis_tuser;\n        end else if (transfer_temp_out) begin\n            output_eth_payload_tdata_reg <= temp_eth_payload_tdata_reg;\n            output_eth_payload_tlast_reg <= temp_eth_payload_tlast_reg;\n            output_eth_payload_tuser_reg <= temp_eth_payload_tuser_reg;\n        end\n    end\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[299, "        frame_error_reg <= 0;\n"], [307, "        frame_error_reg <= frame_error_next;\n"]], "Add": [[299, "        error_header_early_termination_reg <= 0;\n"], [307, "        error_header_early_termination_reg <= error_header_early_termination_next;\n"]]}}