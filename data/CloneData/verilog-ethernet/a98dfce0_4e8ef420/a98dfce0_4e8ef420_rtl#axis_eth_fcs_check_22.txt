Source Block: verilog-ethernet/rtl/axis_eth_fcs_check.v@109:210@HdlStmProcess
    .data_in(input_axis_tdata_d3),
    .crc_state(crc_state),
    .crc_next(crc_next)
);

always @* begin
    state_next = STATE_IDLE;

    reset_crc = 0;
    update_crc = 0;
    shift_in = 0;
    shift_reset = 0;

    frame_ptr_next = frame_ptr_reg;

    input_axis_tready_next = 0;

    output_axis_tdata_int = 0;
    output_axis_tvalid_int = 0;
    output_axis_tlast_int = 0;
    output_axis_tuser_int = 0;

    error_bad_fcs_next = 0;

    case (state_reg)
        STATE_IDLE: begin
            // idle state - wait for data
            input_axis_tready_next = output_axis_tready_int_early;
            frame_ptr_next = 0;
            reset_crc = 1;

            output_axis_tdata_int = input_axis_tdata_d3;
            output_axis_tvalid_int = input_axis_tvalid_d3 & input_axis_tvalid;
            output_axis_tlast_int = 0;
            output_axis_tuser_int = 0;

            if (input_axis_tready & input_axis_tvalid) begin
                shift_in = 1;

                if (input_axis_tvalid_d3) begin
                    frame_ptr_next = 1;
                    reset_crc = 0;
                    update_crc = 1;
                    if (input_axis_tlast) begin
                        shift_reset = 1;
                        reset_crc = 1;
                        output_axis_tlast_int = 1;
                        output_axis_tuser_int = input_axis_tuser;
                        if ({input_axis_tdata, input_axis_tdata_d0, input_axis_tdata_d1, input_axis_tdata_d2} != ~crc_next) begin
                            output_axis_tuser_int = 1;
                            error_bad_fcs_next = 1;
                        end
                        input_axis_tready_next = output_axis_tready_int_early;
                        state_next = STATE_IDLE;
                    end else begin
                        state_next = STATE_PAYLOAD;
                    end
                end else begin
                    state_next = STATE_IDLE;
                end
            end else begin
                state_next = STATE_IDLE;
            end
        end
        STATE_PAYLOAD: begin
            // transfer payload
            input_axis_tready_next = output_axis_tready_int_early;

            output_axis_tdata_int = input_axis_tdata_d3;
            output_axis_tvalid_int = input_axis_tvalid_d3 & input_axis_tvalid;
            output_axis_tlast_int = 0;
            output_axis_tuser_int = 0;

            if (input_axis_tready & input_axis_tvalid) begin
                frame_ptr_next = frame_ptr_reg + 1;
                shift_in = 1;
                update_crc = 1;
                if (input_axis_tlast) begin
                    shift_reset = 1;
                    reset_crc = 1;
                    output_axis_tlast_int = 1;
                    output_axis_tuser_int = input_axis_tuser;
                    if ({input_axis_tdata, input_axis_tdata_d0, input_axis_tdata_d1, input_axis_tdata_d2} != ~crc_next) begin
                        output_axis_tuser_int = 1;
                        error_bad_fcs_next = 1;
                    end
                    input_axis_tready_next = output_axis_tready_int_early;
                    state_next = STATE_IDLE;
                end else begin
                    state_next = STATE_PAYLOAD;
                end
            end else begin
                state_next = STATE_PAYLOAD;
            end
        end
    endcase
end

always @(posedge clk) begin
    if (rst) begin
        state_reg <= STATE_IDLE;
        

Diff Content:
- 117     reset_crc = 0;
- 118     update_crc = 0;
- 119     shift_in = 0;
- 120     shift_reset = 0;
- 122     frame_ptr_next = frame_ptr_reg;
- 124     input_axis_tready_next = 0;
- 126     output_axis_tdata_int = 0;
- 127     output_axis_tvalid_int = 0;
- 128     output_axis_tlast_int = 0;
- 129     output_axis_tuser_int = 0;
- 131     error_bad_fcs_next = 0;
- 137             frame_ptr_next = 0;
- 138             reset_crc = 1;
- 142             output_axis_tlast_int = 0;
- 143             output_axis_tuser_int = 0;
- 146                 shift_in = 1;
- 149                     frame_ptr_next = 1;
- 150                     reset_crc = 0;
- 151                     update_crc = 1;
- 153                         shift_reset = 1;
- 154                         reset_crc = 1;
- 155                         output_axis_tlast_int = 1;
- 158                             output_axis_tuser_int = 1;
- 159                             error_bad_fcs_next = 1;
- 179             output_axis_tlast_int = 0;
- 180             output_axis_tuser_int = 0;
- 183                 frame_ptr_next = frame_ptr_reg + 1;
- 184                 shift_in = 1;
- 185                 update_crc = 1;
- 187                     shift_reset = 1;
- 188                     reset_crc = 1;
- 189                     output_axis_tlast_int = 1;
- 192                         output_axis_tuser_int = 1;
- 193                         error_bad_fcs_next = 1;
+ 122     reset_crc = 1'b0;
+ 122     update_crc = 1'b0;
+ 122     shift_in = 1'b0;
+ 122     shift_reset = 1'b0;
+ 124     input_axis_tready_next = 1'b0;
+ 129     output_axis_tdata_int = 8'd0;
+ 129     output_axis_tvalid_int = 1'b0;
+ 129     output_axis_tlast_int = 1'b0;
+ 129     output_axis_tuser_int = 1'b0;
+ 131     error_bad_fcs_next = 1'b0;
+ 138             reset_crc = 1'b1;
+ 143             output_axis_tlast_int = 1'b0;
+ 143             output_axis_tuser_int = 1'b0;
+ 146                 shift_in = 1'b1;
+ 151                     reset_crc = 1'b0;
+ 151                     update_crc = 1'b1;
+ 155                         shift_reset = 1'b1;
+ 155                         reset_crc = 1'b1;
+ 155                         output_axis_tlast_int = 1'b1;
+ 159                             output_axis_tuser_int = 1'b1;
+ 159                             error_bad_fcs_next = 1'b1;
+ 180             output_axis_tlast_int = 1'b0;
+ 180             output_axis_tuser_int = 1'b0;
+ 185                 shift_in = 1'b1;
+ 185                 update_crc = 1'b1;
+ 189                     shift_reset = 1'b1;
+ 189                     reset_crc = 1'b1;
+ 189                     output_axis_tlast_int = 1'b1;
+ 193                         output_axis_tuser_int = 1'b1;
+ 193                         error_bad_fcs_next = 1'b1;

Clone Blocks:
