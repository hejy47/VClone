{"Source Block": ["verilog-ethernet/rtl/arp_eth_tx.v@220:270@HdlStmProcess", "            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n        input_frame_ready_reg <= 0;\n        output_eth_dest_mac_reg <= 0;\n        output_eth_src_mac_reg <= 0;\n        output_eth_type_reg <= 0;\n        arp_htype_reg <= 0;\n        arp_ptype_reg <= 0;\n        arp_oper_reg <= 0;\n        arp_sha_reg <= 0;\n        arp_spa_reg <= 0;\n        arp_tha_reg <= 0;\n        arp_tpa_reg <= 0;\n        busy_reg <= 0;\n    end else begin\n        state_reg <= state_next;\n\n        frame_ptr_reg <= frame_ptr_next;\n\n        input_frame_ready_reg <= input_frame_ready_next;\n\n        output_eth_hdr_valid_reg <= output_eth_hdr_valid_next;\n\n        busy_reg <= state_next != STATE_IDLE;\n\n        if (store_frame) begin\n            output_eth_dest_mac_reg <= input_eth_dest_mac;\n            output_eth_src_mac_reg <= input_eth_src_mac;\n            output_eth_type_reg <= input_eth_type;\n            arp_htype_reg <= input_arp_htype;\n            arp_ptype_reg <= input_arp_ptype;\n            arp_oper_reg <= input_arp_oper;\n            arp_sha_reg <= input_arp_sha;\n            arp_spa_reg <= input_arp_spa;\n            arp_tha_reg <= input_arp_tha;\n            arp_tpa_reg <= input_arp_tpa;\n        end\n    end\nend\n\n// output datapath logic\nreg [7:0]  output_eth_payload_tdata_reg = 0;\nreg        output_eth_payload_tvalid_reg = 0;\nreg        output_eth_payload_tlast_reg = 0;\n"], "Clone Blocks": [["verilog-ethernet/rtl/arp_eth_tx_64.v@246:296", "            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n        input_frame_ready_reg <= 0;\n        output_eth_dest_mac_reg <= 0;\n        output_eth_src_mac_reg <= 0;\n        output_eth_type_reg <= 0;\n        arp_htype_reg <= 0;\n        arp_ptype_reg <= 0;\n        arp_oper_reg <= 0;\n        arp_sha_reg <= 0;\n        arp_spa_reg <= 0;\n        arp_tha_reg <= 0;\n        arp_tpa_reg <= 0;\n        busy_reg <= 0;\n    end else begin\n        state_reg <= state_next;\n\n        frame_ptr_reg <= frame_ptr_next;\n\n        input_frame_ready_reg <= input_frame_ready_next;\n\n        output_eth_hdr_valid_reg <= output_eth_hdr_valid_next;\n\n        busy_reg <= state_next != STATE_IDLE;\n\n        if (store_frame) begin\n            output_eth_dest_mac_reg <= input_eth_dest_mac;\n            output_eth_src_mac_reg <= input_eth_src_mac;\n            output_eth_type_reg <= input_eth_type;\n            arp_htype_reg <= input_arp_htype;\n            arp_ptype_reg <= input_arp_ptype;\n            arp_oper_reg <= input_arp_oper;\n            arp_sha_reg <= input_arp_sha;\n            arp_spa_reg <= input_arp_spa;\n            arp_tha_reg <= input_arp_tha;\n            arp_tpa_reg <= input_arp_tpa;\n        end\n    end\nend\n\n// output datapath logic\nreg [63:0] output_eth_payload_tdata_reg = 0;\nreg [7:0]  output_eth_payload_tkeep_reg = 0;\nreg        output_eth_payload_tvalid_reg = 0;\n"]], "Diff Content": {"Delete": [[228, "        frame_ptr_reg <= 0;\n"], [229, "        input_frame_ready_reg <= 0;\n"], [230, "        output_eth_dest_mac_reg <= 0;\n"], [231, "        output_eth_src_mac_reg <= 0;\n"], [232, "        output_eth_type_reg <= 0;\n"], [233, "        arp_htype_reg <= 0;\n"], [234, "        arp_ptype_reg <= 0;\n"], [235, "        arp_oper_reg <= 0;\n"], [236, "        arp_sha_reg <= 0;\n"], [237, "        arp_spa_reg <= 0;\n"], [238, "        arp_tha_reg <= 0;\n"], [239, "        arp_tpa_reg <= 0;\n"], [240, "        busy_reg <= 0;\n"], [252, "        if (store_frame) begin\n"], [253, "            output_eth_dest_mac_reg <= input_eth_dest_mac;\n"], [254, "            output_eth_src_mac_reg <= input_eth_src_mac;\n"], [255, "            output_eth_type_reg <= input_eth_type;\n"], [256, "            arp_htype_reg <= input_arp_htype;\n"], [257, "            arp_ptype_reg <= input_arp_ptype;\n"], [258, "            arp_oper_reg <= input_arp_oper;\n"], [259, "            arp_sha_reg <= input_arp_sha;\n"], [260, "            arp_spa_reg <= input_arp_spa;\n"], [261, "            arp_tha_reg <= input_arp_tha;\n"], [262, "            arp_tpa_reg <= input_arp_tpa;\n"], [263, "        end\n"]], "Add": [[240, "        frame_ptr_reg <= 8'd0;\n"], [240, "        input_frame_ready_reg <= 1'b0;\n"], [240, "        output_eth_hdr_valid_reg <= 1'b0;\n"], [240, "        busy_reg <= 1'b0;\n"], [250, "    end\n"], [263, "    if (store_frame) begin\n"], [263, "        output_eth_dest_mac_reg <= input_eth_dest_mac;\n"], [263, "        output_eth_src_mac_reg <= input_eth_src_mac;\n"], [263, "        output_eth_type_reg <= input_eth_type;\n"], [263, "        arp_htype_reg <= input_arp_htype;\n"], [263, "        arp_ptype_reg <= input_arp_ptype;\n"], [263, "        arp_oper_reg <= input_arp_oper;\n"], [263, "        arp_sha_reg <= input_arp_sha;\n"], [263, "        arp_spa_reg <= input_arp_spa;\n"], [263, "        arp_tha_reg <= input_arp_tha;\n"], [263, "        arp_tpa_reg <= input_arp_tpa;\n"]]}}