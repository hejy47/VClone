Source Block: verilog-ethernet/rtl/eth_axis_tx_64.v@353:363@HdlStmAssign

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;

always @(posedge clk) begin
    if (rst) begin
        output_axis_tdata_reg <= 0;
        output_axis_tkeep_reg <= 0;

Diff Content:
+ 358 assign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & (~output_axis_tvalid_reg | ~output_axis_tvalid_int));
+ 358 always @* begin
+ 358     output_axis_tvalid_next = output_axis_tvalid_reg;
+ 358     temp_axis_tvalid_next = temp_axis_tvalid_reg;
+ 358     store_axis_int_to_output = 1'b0;
+ 358     store_axis_int_to_temp = 1'b0;
+ 358     store_axis_temp_to_output = 1'b0;
+ 358     if (output_axis_tready_int_reg) begin
+ 358         if (output_axis_tready | ~output_axis_tvalid_reg) begin
+ 358             output_axis_tvalid_next = output_axis_tvalid_int;
+ 358             store_axis_int_to_output = 1'b1;
+ 358         end else begin
+ 358             temp_axis_tvalid_next = output_axis_tvalid_int;
+ 358             store_axis_int_to_temp = 1'b1;
+ 358         end
+ 358     end else if (output_axis_tready) begin
+ 358         output_axis_tvalid_next = temp_axis_tvalid_reg;
+ 358         temp_axis_tvalid_next = 1'b0;
+ 358         store_axis_temp_to_output = 1'b1;
+ 358     end
+ 358 end

Clone Blocks:
Clone Blocks 1:
verilog-ethernet/lib/axis/rtl/axis_fifo_64.v@82:92
reg read;

assign input_axis_tready = ~full;

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;

// FIFO write logic

Clone Blocks 2:
verilog-ethernet/lib/axis/rtl/axis_async_fifo_64.v@105:115

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;

// reset synchronization
always @(posedge input_clk or posedge async_rst) begin
    if (async_rst) begin
        input_rst_sync1_reg <= 1'b1;

Clone Blocks 3:
verilog-ethernet/lib/axis/rtl/axis_fifo_64.v@83:93

assign input_axis_tready = ~full;

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;

// FIFO write logic
always @* begin

Clone Blocks 4:
verilog-ethernet/lib/axis/rtl/axis_fifo_64.v@85:95

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;

// FIFO write logic
always @* begin
    write = 1'b0;


Clone Blocks 5:
verilog-ethernet/lib/axis/rtl/axis_fifo_64.v@81:91
reg write;
reg read;

assign input_axis_tready = ~full;

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;


Clone Blocks 6:
verilog-ethernet/lib/axis/rtl/axis_async_fifo_64.v@104:114
assign input_axis_tready = ~full & ~input_rst_sync3_reg;

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;

// reset synchronization
always @(posedge input_clk or posedge async_rst) begin
    if (async_rst) begin

Clone Blocks 7:
verilog-ethernet/lib/axis/rtl/axis_fifo_64.v@84:94
assign input_axis_tready = ~full;

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;

// FIFO write logic
always @* begin
    write = 1'b0;

Clone Blocks 8:
verilog-ethernet/lib/axis/rtl/axis_async_fifo_64.v@102:112
reg read;

assign input_axis_tready = ~full & ~input_rst_sync3_reg;

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;

// reset synchronization

Clone Blocks 9:
verilog-ethernet/lib/axis/rtl/axis_register_64.v@80:90
reg store_axis_temp_to_output;

assign input_axis_tready = input_axis_tready_reg;

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;

// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)

Clone Blocks 10:
verilog-ethernet/lib/axis/rtl/axis_async_fifo_64.v@103:113

assign input_axis_tready = ~full & ~input_rst_sync3_reg;

assign output_axis_tdata = output_axis_tdata_reg;
assign output_axis_tkeep = output_axis_tkeep_reg;
assign output_axis_tvalid = output_axis_tvalid_reg;
assign output_axis_tlast = output_axis_tlast_reg;
assign output_axis_tuser = output_axis_tuser_reg;

// reset synchronization
always @(posedge input_clk or posedge async_rst) begin

