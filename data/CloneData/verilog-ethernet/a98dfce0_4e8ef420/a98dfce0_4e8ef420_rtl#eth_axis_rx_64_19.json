{"Source Block": ["verilog-ethernet/rtl/eth_axis_rx_64.v@159:275@HdlStmProcess", "        shift_axis_tuser = (input_axis_tuser & (input_axis_tkeep[7:6] == 0));\n        shift_axis_input_tready = ~(input_axis_tlast & input_axis_tvalid & transfer_in_save);\n    end\nend\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    input_axis_tready_next = 0;\n\n    flush_save = 0;\n    transfer_in_save = 0;\n\n    store_hdr_word_0 = 0;\n    store_hdr_word_1 = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;\n\n    error_header_early_termination_next = 0;\n\n    output_eth_payload_tdata_int = 0;\n    output_eth_payload_tkeep_int = 0;\n    output_eth_payload_tvalid_int = 0;\n    output_eth_payload_tlast_int = 0;\n    output_eth_payload_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 0;\n            flush_save = 1;\n            input_axis_tready_next = ~output_eth_hdr_valid_reg;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                // got first word of packet\n                if (input_axis_tlast) begin\n                    // tlast asserted on first word\n                    error_header_early_termination_next = 1;\n                    state_next = STATE_IDLE;\n                end else begin\n                    // move to read header state\n                    frame_ptr_next = 8;\n                    store_hdr_word_0 = 1;\n                    transfer_in_save = 1;\n                    state_next = STATE_READ_HEADER;\n                end\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_READ_HEADER: begin\n            // read header state\n            input_axis_tready_next = 1;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                // word transfer in - store it\n                frame_ptr_next = frame_ptr_reg+8;\n                transfer_in_save = 1;\n                state_next = STATE_READ_HEADER;\n                case (frame_ptr_reg)\n                    8'h00: store_hdr_word_0 = 1;\n                    8'h08: begin\n                        store_hdr_word_1 = 1;\n                        output_eth_hdr_valid_next = 1;\n                        input_axis_tready_next = output_eth_payload_tready_int_early;\n                        state_next = STATE_READ_PAYLOAD;\n                    end\n                endcase\n                if (input_axis_tlast) begin\n                    if (input_axis_tkeep[7:6] != 0) begin\n                        input_axis_tready_next = 0;\n                        state_next = STATE_READ_PAYLOAD;\n                    end else begin\n                        flush_save = 1;\n                        output_eth_hdr_valid_next = 0;\n                        error_header_early_termination_next = 1;\n                        input_axis_tready_next = ~output_eth_hdr_valid_reg;\n                        state_next = STATE_IDLE;\n                    end\n                end\n            end else begin\n                state_next = STATE_READ_HEADER;\n            end\n        end\n        STATE_READ_PAYLOAD: begin\n            // read payload\n            input_axis_tready_next = output_eth_payload_tready_int_early & shift_axis_input_tready;\n\n            output_eth_payload_tdata_int = shift_axis_tdata;\n            output_eth_payload_tkeep_int = shift_axis_tkeep;\n            output_eth_payload_tvalid_int = shift_axis_tvalid;\n            output_eth_payload_tlast_int = shift_axis_tlast;\n            output_eth_payload_tuser_int = shift_axis_tuser;\n\n            if (output_eth_payload_tready_int & shift_axis_tvalid) begin\n                // word transfer through\n                transfer_in_save = 1;\n                if (shift_axis_tlast) begin\n                    flush_save = 1;\n                    input_axis_tready_next = ~output_eth_hdr_valid_reg;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD;\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[167, "    input_axis_tready_next = 0;\n"], [169, "    flush_save = 0;\n"], [170, "    transfer_in_save = 0;\n"], [172, "    store_hdr_word_0 = 0;\n"], [173, "    store_hdr_word_1 = 0;\n"], [179, "    error_header_early_termination_next = 0;\n"], [181, "    output_eth_payload_tdata_int = 0;\n"], [182, "    output_eth_payload_tkeep_int = 0;\n"], [183, "    output_eth_payload_tvalid_int = 0;\n"], [184, "    output_eth_payload_tlast_int = 0;\n"], [185, "    output_eth_payload_tuser_int = 0;\n"], [190, "            frame_ptr_next = 0;\n"], [191, "            flush_save = 1;\n"], [198, "                    error_header_early_termination_next = 1;\n"], [202, "                    frame_ptr_next = 8;\n"], [203, "                    store_hdr_word_0 = 1;\n"], [204, "                    transfer_in_save = 1;\n"], [213, "            input_axis_tready_next = 1;\n"], [217, "                frame_ptr_next = frame_ptr_reg+8;\n"], [218, "                transfer_in_save = 1;\n"], [221, "                    8'h00: store_hdr_word_0 = 1;\n"], [223, "                        store_hdr_word_1 = 1;\n"], [224, "                        output_eth_hdr_valid_next = 1;\n"], [230, "                    if (input_axis_tkeep[7:6] != 0) begin\n"], [231, "                        input_axis_tready_next = 0;\n"], [234, "                        flush_save = 1;\n"], [235, "                        output_eth_hdr_valid_next = 0;\n"], [236, "                        error_header_early_termination_next = 1;\n"], [255, "            if (output_eth_payload_tready_int & shift_axis_tvalid) begin\n"], [257, "                transfer_in_save = 1;\n"], [259, "                    flush_save = 1;\n"]], "Add": [[167, "    input_axis_tready_next = 1'b0;\n"], [170, "    flush_save = 1'b0;\n"], [170, "    transfer_in_save = 1'b0;\n"], [173, "    store_hdr_word_0 = 1'b0;\n"], [173, "    store_hdr_word_1 = 1'b0;\n"], [179, "    error_header_early_termination_next = 1'b0;\n"], [185, "    output_eth_payload_tdata_int = 64'd0;\n"], [185, "    output_eth_payload_tkeep_int = 8'd0;\n"], [185, "    output_eth_payload_tvalid_int = 1'b0;\n"], [185, "    output_eth_payload_tlast_int = 1'b0;\n"], [185, "    output_eth_payload_tuser_int = 1'b0;\n"], [191, "            frame_ptr_next = 8'd0;\n"], [191, "            flush_save = 1'b1;\n"], [198, "                    error_header_early_termination_next = 1'b1;\n"], [204, "                    frame_ptr_next = 8'd8;\n"], [204, "                    store_hdr_word_0 = 1'b1;\n"], [204, "                    transfer_in_save = 1'b1;\n"], [213, "            input_axis_tready_next = 1'b1;\n"], [218, "                frame_ptr_next = frame_ptr_reg + 8'd8;\n"], [218, "                transfer_in_save = 1'b1;\n"], [221, "                    8'h00: store_hdr_word_0 = 1'b1;\n"], [224, "                        store_hdr_word_1 = 1'b1;\n"], [224, "                        output_eth_hdr_valid_next = 1'b1;\n"], [231, "                    if (input_axis_tkeep[7:6] != 2'd0) begin\n"], [231, "                        input_axis_tready_next = 1'b0;\n"], [236, "                        flush_save = 1'b1;\n"], [236, "                        output_eth_hdr_valid_next = 1'b0;\n"], [236, "                        error_header_early_termination_next = 1'b1;\n"], [255, "            if (output_eth_payload_tready_int_reg & shift_axis_tvalid) begin\n"], [257, "                transfer_in_save = 1'b1;\n"], [259, "                    flush_save = 1'b1;\n"]]}}