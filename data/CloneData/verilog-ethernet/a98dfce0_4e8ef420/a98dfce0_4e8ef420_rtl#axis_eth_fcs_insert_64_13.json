{"Source Block": ["verilog-ethernet/rtl/axis_eth_fcs_insert_64.v@275:532@HdlStmProcess", "            fcs_output_tkeep_1 = 0;\n        end\n    endcase\nend\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    reset_crc = 0;\n    update_crc = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    last_cycle_tdata_next = last_cycle_tdata_reg;\n    last_cycle_tkeep_next = last_cycle_tkeep_reg;\n\n    input_axis_tready_next = 0;\n\n    fcs_input_tdata = 0;\n    fcs_input_tkeep = 0;\n\n    output_axis_tdata_int = 0;\n    output_axis_tkeep_int = 0;\n    output_axis_tvalid_int = 0;\n    output_axis_tlast_int = 0;\n    output_axis_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            input_axis_tready_next = output_axis_tready_int_early;\n            frame_ptr_next = 0;\n            reset_crc = 1;\n\n            output_axis_tdata_int = input_axis_tdata_masked;\n            output_axis_tkeep_int = input_axis_tkeep;\n            output_axis_tvalid_int = input_axis_tvalid;\n            output_axis_tlast_int = 0;\n            output_axis_tuser_int = 0;\n\n            fcs_input_tdata = input_axis_tdata_masked;\n            fcs_input_tkeep = input_axis_tkeep;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                reset_crc = 0;\n                update_crc = 1;\n                frame_ptr_next = keep2count(input_axis_tkeep);\n                if (input_axis_tlast) begin\n                    if (input_axis_tuser) begin\n                        output_axis_tlast_int = 1;\n                        output_axis_tuser_int = 1;\n                        reset_crc = 1;\n                        frame_ptr_next = 0;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        if (ENABLE_PADDING && frame_ptr_next < MIN_FRAME_LENGTH-4) begin\n                            output_axis_tkeep_int = 8'hff;\n                            fcs_input_tkeep = 8'hff;\n                            frame_ptr_next = frame_ptr_reg + 8;\n\n                            if (frame_ptr_next < MIN_FRAME_LENGTH-4) begin\n                                input_axis_tready_next = 0;\n                                state_next = STATE_PAD;\n                            end else begin\n                                output_axis_tkeep_int = 8'hff >> (8-((MIN_FRAME_LENGTH-4) & 7));\n                                fcs_input_tkeep = 8'hff >> (8-((MIN_FRAME_LENGTH-4) & 7));\n\n                                output_axis_tdata_int = fcs_output_tdata_0;\n                                last_cycle_tdata_next = fcs_output_tdata_1;\n                                output_axis_tkeep_int = fcs_output_tkeep_0;\n                                last_cycle_tkeep_next = fcs_output_tkeep_1;\n\n                                reset_crc = 1;\n\n                                if (fcs_output_tkeep_1 == 0) begin\n                                    output_axis_tlast_int = 1;\n                                    input_axis_tready_next = output_axis_tready_int_early;\n                                    frame_ptr_next = 0;\n                                    state_next = STATE_IDLE;\n                                end else begin\n                                    input_axis_tready_next = 0;\n                                    state_next = STATE_FCS;\n                                end\n                            end\n                        end else begin\n                            output_axis_tdata_int = fcs_output_tdata_0;\n                            last_cycle_tdata_next = fcs_output_tdata_1;\n                            output_axis_tkeep_int = fcs_output_tkeep_0;\n                            last_cycle_tkeep_next = fcs_output_tkeep_1;\n\n                            reset_crc = 1;\n\n                            if (fcs_output_tkeep_1 == 0) begin\n                                output_axis_tlast_int = 1;\n                                input_axis_tready_next = output_axis_tready_int_early;\n                                frame_ptr_next = 0;\n                                state_next = STATE_IDLE;\n                            end else begin\n                                input_axis_tready_next = 0;\n                                state_next = STATE_FCS;\n                            end\n                        end\n                    end\n                end else begin\n                    state_next = STATE_PAYLOAD;\n                end\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_PAYLOAD: begin\n            // transfer payload\n            input_axis_tready_next = output_axis_tready_int_early;\n\n            output_axis_tdata_int = input_axis_tdata_masked;\n            output_axis_tkeep_int = input_axis_tkeep;\n            output_axis_tvalid_int = input_axis_tvalid;\n            output_axis_tlast_int = 0;\n            output_axis_tuser_int = 0;\n\n            fcs_input_tdata = input_axis_tdata_masked;\n            fcs_input_tkeep = input_axis_tkeep;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                update_crc = 1;\n                frame_ptr_next = frame_ptr_reg + keep2count(input_axis_tkeep);\n                if (input_axis_tlast) begin\n                    if (input_axis_tuser) begin\n                        output_axis_tlast_int = 1;\n                        output_axis_tuser_int = 1;\n                        reset_crc = 1;\n                        frame_ptr_next = 0;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        if (ENABLE_PADDING && frame_ptr_next < MIN_FRAME_LENGTH-4) begin\n                            output_axis_tkeep_int = 8'hff;\n                            fcs_input_tkeep = 8'hff;\n                            frame_ptr_next = frame_ptr_reg + 8;\n\n                            if (frame_ptr_next < MIN_FRAME_LENGTH-4) begin\n                                input_axis_tready_next = 0;\n                                state_next = STATE_PAD;\n                            end else begin\n                                output_axis_tkeep_int = 8'hff >> (8-((MIN_FRAME_LENGTH-4) & 7));\n                                fcs_input_tkeep = 8'hff >> (8-((MIN_FRAME_LENGTH-4) & 7));\n\n                                output_axis_tdata_int = fcs_output_tdata_0;\n                                last_cycle_tdata_next = fcs_output_tdata_1;\n                                output_axis_tkeep_int = fcs_output_tkeep_0;\n                                last_cycle_tkeep_next = fcs_output_tkeep_1;\n\n                                reset_crc = 1;\n\n                                if (fcs_output_tkeep_1 == 0) begin\n                                    output_axis_tlast_int = 1;\n                                    input_axis_tready_next = output_axis_tready_int_early;\n                                    frame_ptr_next = 0;\n                                    state_next = STATE_IDLE;\n                                end else begin\n                                    input_axis_tready_next = 0;\n                                    state_next = STATE_FCS;\n                                end\n                            end\n                        end else begin\n                            output_axis_tdata_int = fcs_output_tdata_0;\n                            last_cycle_tdata_next = fcs_output_tdata_1;\n                            output_axis_tkeep_int = fcs_output_tkeep_0;\n                            last_cycle_tkeep_next = fcs_output_tkeep_1;\n\n                            reset_crc = 1;\n\n                            if (fcs_output_tkeep_1 == 0) begin\n                                output_axis_tlast_int = 1;\n                                input_axis_tready_next = output_axis_tready_int_early;\n                                frame_ptr_next = 0;\n                                state_next = STATE_IDLE;\n                            end else begin\n                                input_axis_tready_next = 0;\n                                state_next = STATE_FCS;\n                            end\n                        end\n                    end\n                end else begin\n                    state_next = STATE_PAYLOAD;\n                end\n            end else begin\n                state_next = STATE_PAYLOAD;\n            end\n        end\n        STATE_PAD: begin\n            input_axis_tready_next = 0;\n\n            output_axis_tdata_int = 0;\n            output_axis_tkeep_int = 8'hff;\n            output_axis_tvalid_int = 1;\n            output_axis_tlast_int = 0;\n            output_axis_tuser_int = 0;\n\n            fcs_input_tdata = 0;\n            fcs_input_tkeep = 8'hff;\n\n            if (output_axis_tready_int) begin\n                update_crc = 1;\n                frame_ptr_next = frame_ptr_reg + 8;\n\n                if (frame_ptr_next < MIN_FRAME_LENGTH-4) begin\n                    state_next = STATE_PAD;\n                end else begin\n                    output_axis_tkeep_int = 8'hff >> (8-((MIN_FRAME_LENGTH-4) & 7));\n                    fcs_input_tkeep = 8'hff >> (8-((MIN_FRAME_LENGTH-4) & 7));\n\n                    output_axis_tdata_int = fcs_output_tdata_0;\n                    last_cycle_tdata_next = fcs_output_tdata_1;\n                    output_axis_tkeep_int = fcs_output_tkeep_0;\n                    last_cycle_tkeep_next = fcs_output_tkeep_1;\n\n                    reset_crc = 1;\n\n                    if (fcs_output_tkeep_1 == 0) begin\n                        output_axis_tlast_int = 1;\n                        input_axis_tready_next = output_axis_tready_int_early;\n                        frame_ptr_next = 0;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        input_axis_tready_next = 0;\n                        state_next = STATE_FCS;\n                    end\n                end\n            end else begin\n                state_next = STATE_PAD;\n            end\n        end\n        STATE_FCS: begin\n            // last cycle\n            input_axis_tready_next = 0;\n\n            output_axis_tdata_int = last_cycle_tdata_reg;\n            output_axis_tkeep_int = last_cycle_tkeep_reg;\n            output_axis_tvalid_int = 1;\n            output_axis_tlast_int = 1;\n            output_axis_tuser_int = 0;\n\n            if (output_axis_tready_int) begin\n                reset_crc = 1;\n                input_axis_tready_next = output_axis_tready_int_early;\n                frame_ptr_next = 0;\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_FCS;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        \n"], "Clone Blocks": [], "Diff Content": {"Delete": [[283, "    reset_crc = 0;\n"], [284, "    update_crc = 0;\n"], [291, "    input_axis_tready_next = 0;\n"], [293, "    fcs_input_tdata = 0;\n"], [294, "    fcs_input_tkeep = 0;\n"], [296, "    output_axis_tdata_int = 0;\n"], [297, "    output_axis_tkeep_int = 0;\n"], [298, "    output_axis_tvalid_int = 0;\n"], [299, "    output_axis_tlast_int = 0;\n"], [300, "    output_axis_tuser_int = 0;\n"], [306, "            frame_ptr_next = 0;\n"], [307, "            reset_crc = 1;\n"], [312, "            output_axis_tlast_int = 0;\n"], [313, "            output_axis_tuser_int = 0;\n"], [319, "                reset_crc = 0;\n"], [320, "                update_crc = 1;\n"], [324, "                        output_axis_tlast_int = 1;\n"], [325, "                        output_axis_tuser_int = 1;\n"], [326, "                        reset_crc = 1;\n"], [327, "                        frame_ptr_next = 0;\n"], [333, "                            frame_ptr_next = frame_ptr_reg + 8;\n"], [336, "                                input_axis_tready_next = 0;\n"], [347, "                                reset_crc = 1;\n"], [349, "                                if (fcs_output_tkeep_1 == 0) begin\n"], [350, "                                    output_axis_tlast_int = 1;\n"], [352, "                                    frame_ptr_next = 0;\n"], [355, "                                    input_axis_tready_next = 0;\n"], [365, "                            reset_crc = 1;\n"], [367, "                            if (fcs_output_tkeep_1 == 0) begin\n"], [368, "                                output_axis_tlast_int = 1;\n"], [370, "                                frame_ptr_next = 0;\n"], [373, "                                input_axis_tready_next = 0;\n"], [392, "            output_axis_tlast_int = 0;\n"], [393, "            output_axis_tuser_int = 0;\n"], [399, "                update_crc = 1;\n"], [403, "                        output_axis_tlast_int = 1;\n"], [404, "                        output_axis_tuser_int = 1;\n"], [405, "                        reset_crc = 1;\n"], [406, "                        frame_ptr_next = 0;\n"], [412, "                            frame_ptr_next = frame_ptr_reg + 8;\n"], [415, "                                input_axis_tready_next = 0;\n"], [426, "                                reset_crc = 1;\n"], [428, "                                if (fcs_output_tkeep_1 == 0) begin\n"], [429, "                                    output_axis_tlast_int = 1;\n"], [431, "                                    frame_ptr_next = 0;\n"], [434, "                                    input_axis_tready_next = 0;\n"], [444, "                            reset_crc = 1;\n"], [446, "                            if (fcs_output_tkeep_1 == 0) begin\n"], [447, "                                output_axis_tlast_int = 1;\n"], [449, "                                frame_ptr_next = 0;\n"], [452, "                                input_axis_tready_next = 0;\n"], [465, "            input_axis_tready_next = 0;\n"], [467, "            output_axis_tdata_int = 0;\n"], [469, "            output_axis_tvalid_int = 1;\n"], [470, "            output_axis_tlast_int = 0;\n"], [471, "            output_axis_tuser_int = 0;\n"], [473, "            fcs_input_tdata = 0;\n"], [476, "            if (output_axis_tready_int) begin\n"], [477, "                update_crc = 1;\n"], [478, "                frame_ptr_next = frame_ptr_reg + 8;\n"], [491, "                    reset_crc = 1;\n"], [493, "                    if (fcs_output_tkeep_1 == 0) begin\n"], [494, "                        output_axis_tlast_int = 1;\n"], [496, "                        frame_ptr_next = 0;\n"], [499, "                        input_axis_tready_next = 0;\n"], [509, "            input_axis_tready_next = 0;\n"], [513, "            output_axis_tvalid_int = 1;\n"], [514, "            output_axis_tlast_int = 1;\n"], [515, "            output_axis_tuser_int = 0;\n"], [517, "            if (output_axis_tready_int) begin\n"], [518, "                reset_crc = 1;\n"], [520, "                frame_ptr_next = 0;\n"]], "Add": [[284, "    reset_crc = 1'b0;\n"], [284, "    update_crc = 1'b0;\n"], [291, "    input_axis_tready_next = 1'b0;\n"], [294, "    fcs_input_tdata = 64'd0;\n"], [294, "    fcs_input_tkeep = 8'd0;\n"], [300, "    output_axis_tdata_int = 64'd0;\n"], [300, "    output_axis_tkeep_int = 8'd0;\n"], [300, "    output_axis_tvalid_int = 1'b0;\n"], [300, "    output_axis_tlast_int = 1'b0;\n"], [300, "    output_axis_tuser_int = 1'b0;\n"], [307, "            frame_ptr_next = 16'd0;\n"], [307, "            reset_crc = 1'b1;\n"], [313, "            output_axis_tlast_int = 1'b0;\n"], [313, "            output_axis_tuser_int = 1'b0;\n"], [320, "                reset_crc = 1'b0;\n"], [320, "                update_crc = 1'b1;\n"], [327, "                        output_axis_tlast_int = 1'b1;\n"], [327, "                        output_axis_tuser_int = 1'b1;\n"], [327, "                        reset_crc = 1'b1;\n"], [327, "                        frame_ptr_next = 16'd0;\n"], [333, "                            frame_ptr_next = frame_ptr_reg + 16'd8;\n"], [336, "                                input_axis_tready_next = 1'b0;\n"], [347, "                                reset_crc = 1'b1;\n"], [350, "                                if (fcs_output_tkeep_1 == 8'd0) begin\n"], [350, "                                    output_axis_tlast_int = 1'b1;\n"], [352, "                                    frame_ptr_next = 1'b0;\n"], [355, "                                    input_axis_tready_next = 1'b0;\n"], [365, "                            reset_crc = 1'b1;\n"], [368, "                            if (fcs_output_tkeep_1 == 8'd0) begin\n"], [368, "                                output_axis_tlast_int = 1'b1;\n"], [370, "                                frame_ptr_next = 16'd0;\n"], [373, "                                input_axis_tready_next = 1'b0;\n"], [393, "            output_axis_tlast_int = 1'b0;\n"], [393, "            output_axis_tuser_int = 1'b0;\n"], [399, "                update_crc = 1'b1;\n"], [406, "                        output_axis_tlast_int = 1'b1;\n"], [406, "                        output_axis_tuser_int = 1'b1;\n"], [406, "                        reset_crc = 1'b1;\n"], [406, "                        frame_ptr_next = 16'd0;\n"], [412, "                            frame_ptr_next = frame_ptr_reg + 16'd8;\n"], [415, "                                input_axis_tready_next = 1'b0;\n"], [426, "                                reset_crc = 1'b1;\n"], [429, "                                if (fcs_output_tkeep_1 == 8'd0) begin\n"], [429, "                                    output_axis_tlast_int = 1'b1;\n"], [431, "                                    frame_ptr_next = 16'd0;\n"], [434, "                                    input_axis_tready_next = 1'b0;\n"], [444, "                            reset_crc = 1'b1;\n"], [447, "                            if (fcs_output_tkeep_1 == 8'd0) begin\n"], [447, "                                output_axis_tlast_int = 1'b1;\n"], [449, "                                frame_ptr_next = 16'd0;\n"], [452, "                                input_axis_tready_next = 1'b0;\n"], [465, "            input_axis_tready_next = 1'b0;\n"], [467, "            output_axis_tdata_int = 64'd0;\n"], [471, "            output_axis_tvalid_int = 1'b1;\n"], [471, "            output_axis_tlast_int = 1'b0;\n"], [471, "            output_axis_tuser_int = 1'b0;\n"], [473, "            fcs_input_tdata = 64'd0;\n"], [478, "            if (output_axis_tready_int_reg) begin\n"], [478, "                update_crc = 1'b1;\n"], [478, "                frame_ptr_next = frame_ptr_reg + 16'd8;\n"], [491, "                    reset_crc = 1'b1;\n"], [494, "                    if (fcs_output_tkeep_1 == 8'd0) begin\n"], [494, "                        output_axis_tlast_int = 1'b1;\n"], [496, "                        frame_ptr_next = 16'd0;\n"], [499, "                        input_axis_tready_next = 1'b0;\n"], [509, "            input_axis_tready_next = 1'b0;\n"], [515, "            output_axis_tvalid_int = 1'b1;\n"], [515, "            output_axis_tlast_int = 1'b1;\n"], [515, "            output_axis_tuser_int = 1'b0;\n"], [518, "            if (output_axis_tready_int_reg) begin\n"], [518, "                reset_crc = 1'b1;\n"], [520, "                frame_ptr_next = 1'b0;\n"]]}}