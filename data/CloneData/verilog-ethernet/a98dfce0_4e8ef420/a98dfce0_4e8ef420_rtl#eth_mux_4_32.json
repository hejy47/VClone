{"Source Block": ["verilog-ethernet/rtl/eth_mux_4.v@214:279@HdlStmProcess", "            current_input_tuser = input_3_eth_payload_tuser;\n        end\n    endcase\nend\n\nalways @* begin\n    select_next = select_reg;\n    frame_next = frame_reg;\n\n    input_0_eth_hdr_ready_next = input_0_eth_hdr_ready_reg & ~input_0_eth_hdr_valid;\n    input_1_eth_hdr_ready_next = input_1_eth_hdr_ready_reg & ~input_1_eth_hdr_valid;\n    input_2_eth_hdr_ready_next = input_2_eth_hdr_ready_reg & ~input_2_eth_hdr_valid;\n    input_3_eth_hdr_ready_next = input_3_eth_hdr_ready_reg & ~input_3_eth_hdr_valid;\n\n    input_0_eth_payload_tready_next = 0;\n    input_1_eth_payload_tready_next = 0;\n    input_2_eth_payload_tready_next = 0;\n    input_3_eth_payload_tready_next = 0;\n\n    output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;\n    output_eth_dest_mac_next = output_eth_dest_mac_reg;\n    output_eth_src_mac_next = output_eth_src_mac_reg;\n    output_eth_type_next = output_eth_type_reg;\n\n    if (frame_reg) begin\n        if (current_input_tvalid & current_input_tready) begin\n            // end of frame detection\n            frame_next = ~current_input_tlast;\n        end\n    end else if (enable & ~output_eth_hdr_valid & selected_input_eth_hdr_valid) begin\n        // start of frame, grab select value\n        frame_next = 1;\n        select_next = select;\n\n        case (select_next)\n            2'd0: input_0_eth_hdr_ready_next = 1;\n            2'd1: input_1_eth_hdr_ready_next = 1;\n            2'd2: input_2_eth_hdr_ready_next = 1;\n            2'd3: input_3_eth_hdr_ready_next = 1;\n        endcase\n\n        output_eth_hdr_valid_next = 1;\n        output_eth_dest_mac_next = selected_input_eth_dest_mac;\n        output_eth_src_mac_next = selected_input_eth_src_mac;\n        output_eth_type_next = selected_input_eth_type;\n    end\n\n    // generate ready signal on selected port\n    case (select_next)\n        2'd0: input_0_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n        2'd1: input_1_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n        2'd2: input_2_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n        2'd3: input_3_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n    endcase\n\n    // pass through selected packet data\n    output_eth_payload_tdata_int = current_input_tdata;\n    output_eth_payload_tvalid_int = current_input_tvalid & current_input_tready & frame_reg;\n    output_eth_payload_tlast_int = current_input_tlast;\n    output_eth_payload_tuser_int = current_input_tuser;\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        select_reg <= 0;\n        frame_reg <= 0;\n"], "Clone Blocks": [["verilog-ethernet/rtl/eth_mux_64_2.v@165:223", "            current_input_tuser = input_1_eth_payload_tuser;\n        end\n    endcase\nend\n\nalways @* begin\n    select_next = select_reg;\n    frame_next = frame_reg;\n\n    input_0_eth_hdr_ready_next = input_0_eth_hdr_ready_reg & ~input_0_eth_hdr_valid;\n    input_1_eth_hdr_ready_next = input_1_eth_hdr_ready_reg & ~input_1_eth_hdr_valid;\n\n    input_0_eth_payload_tready_next = 0;\n    input_1_eth_payload_tready_next = 0;\n\n    output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;\n    output_eth_dest_mac_next = output_eth_dest_mac_reg;\n    output_eth_src_mac_next = output_eth_src_mac_reg;\n    output_eth_type_next = output_eth_type_reg;\n\n    if (frame_reg) begin\n        if (current_input_tvalid & current_input_tready) begin\n            // end of frame detection\n            frame_next = ~current_input_tlast;\n        end\n    end else if (enable & ~output_eth_hdr_valid & selected_input_eth_hdr_valid) begin\n        // start of frame, grab select value\n        frame_next = 1;\n        select_next = select;\n\n        case (select_next)\n            1'd0: input_0_eth_hdr_ready_next = 1;\n            1'd1: input_1_eth_hdr_ready_next = 1;\n        endcase\n\n        output_eth_hdr_valid_next = 1;\n        output_eth_dest_mac_next = selected_input_eth_dest_mac;\n        output_eth_src_mac_next = selected_input_eth_src_mac;\n        output_eth_type_next = selected_input_eth_type;\n    end\n\n    // generate ready signal on selected port\n    case (select_next)\n        1'd0: input_0_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n        1'd1: input_1_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n    endcase\n\n    // pass through selected packet data\n    output_eth_payload_tdata_int = current_input_tdata;\n    output_eth_payload_tkeep_int = current_input_tkeep;\n    output_eth_payload_tvalid_int = current_input_tvalid & current_input_tready & frame_reg;\n    output_eth_payload_tlast_int = current_input_tlast;\n    output_eth_payload_tuser_int = current_input_tuser;\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        select_reg <= 0;\n        frame_reg <= 0;\n"], ["verilog-ethernet/rtl/eth_mux_2.v@158:215", "            current_input_tuser = input_1_eth_payload_tuser;\n        end\n    endcase\nend\n\nalways @* begin\n    select_next = select_reg;\n    frame_next = frame_reg;\n\n    input_0_eth_hdr_ready_next = input_0_eth_hdr_ready_reg & ~input_0_eth_hdr_valid;\n    input_1_eth_hdr_ready_next = input_1_eth_hdr_ready_reg & ~input_1_eth_hdr_valid;\n\n    input_0_eth_payload_tready_next = 0;\n    input_1_eth_payload_tready_next = 0;\n\n    output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;\n    output_eth_dest_mac_next = output_eth_dest_mac_reg;\n    output_eth_src_mac_next = output_eth_src_mac_reg;\n    output_eth_type_next = output_eth_type_reg;\n\n    if (frame_reg) begin\n        if (current_input_tvalid & current_input_tready) begin\n            // end of frame detection\n            frame_next = ~current_input_tlast;\n        end\n    end else if (enable & ~output_eth_hdr_valid & selected_input_eth_hdr_valid) begin\n        // start of frame, grab select value\n        frame_next = 1;\n        select_next = select;\n\n        case (select_next)\n            1'd0: input_0_eth_hdr_ready_next = 1;\n            1'd1: input_1_eth_hdr_ready_next = 1;\n        endcase\n\n        output_eth_hdr_valid_next = 1;\n        output_eth_dest_mac_next = selected_input_eth_dest_mac;\n        output_eth_src_mac_next = selected_input_eth_src_mac;\n        output_eth_type_next = selected_input_eth_type;\n    end\n\n    // generate ready signal on selected port\n    case (select_next)\n        1'd0: input_0_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n        1'd1: input_1_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n    endcase\n\n    // pass through selected packet data\n    output_eth_payload_tdata_int = current_input_tdata;\n    output_eth_payload_tvalid_int = current_input_tvalid & current_input_tready & frame_reg;\n    output_eth_payload_tlast_int = current_input_tlast;\n    output_eth_payload_tuser_int = current_input_tuser;\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        select_reg <= 0;\n        frame_reg <= 0;\n"], ["verilog-ethernet/rtl/eth_mux_64_4.v@225:291", "            current_input_tuser = input_3_eth_payload_tuser;\n        end\n    endcase\nend\n\nalways @* begin\n    select_next = select_reg;\n    frame_next = frame_reg;\n\n    input_0_eth_hdr_ready_next = input_0_eth_hdr_ready_reg & ~input_0_eth_hdr_valid;\n    input_1_eth_hdr_ready_next = input_1_eth_hdr_ready_reg & ~input_1_eth_hdr_valid;\n    input_2_eth_hdr_ready_next = input_2_eth_hdr_ready_reg & ~input_2_eth_hdr_valid;\n    input_3_eth_hdr_ready_next = input_3_eth_hdr_ready_reg & ~input_3_eth_hdr_valid;\n\n    input_0_eth_payload_tready_next = 0;\n    input_1_eth_payload_tready_next = 0;\n    input_2_eth_payload_tready_next = 0;\n    input_3_eth_payload_tready_next = 0;\n\n    output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;\n    output_eth_dest_mac_next = output_eth_dest_mac_reg;\n    output_eth_src_mac_next = output_eth_src_mac_reg;\n    output_eth_type_next = output_eth_type_reg;\n\n    if (frame_reg) begin\n        if (current_input_tvalid & current_input_tready) begin\n            // end of frame detection\n            frame_next = ~current_input_tlast;\n        end\n    end else if (enable & ~output_eth_hdr_valid & selected_input_eth_hdr_valid) begin\n        // start of frame, grab select value\n        frame_next = 1;\n        select_next = select;\n\n        case (select_next)\n            2'd0: input_0_eth_hdr_ready_next = 1;\n            2'd1: input_1_eth_hdr_ready_next = 1;\n            2'd2: input_2_eth_hdr_ready_next = 1;\n            2'd3: input_3_eth_hdr_ready_next = 1;\n        endcase\n\n        output_eth_hdr_valid_next = 1;\n        output_eth_dest_mac_next = selected_input_eth_dest_mac;\n        output_eth_src_mac_next = selected_input_eth_src_mac;\n        output_eth_type_next = selected_input_eth_type;\n    end\n\n    // generate ready signal on selected port\n    case (select_next)\n        2'd0: input_0_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n        2'd1: input_1_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n        2'd2: input_2_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n        2'd3: input_3_eth_payload_tready_next = output_eth_payload_tready_int_early & frame_next;\n    endcase\n\n    // pass through selected packet data\n    output_eth_payload_tdata_int = current_input_tdata;\n    output_eth_payload_tkeep_int = current_input_tkeep;\n    output_eth_payload_tvalid_int = current_input_tvalid & current_input_tready & frame_reg;\n    output_eth_payload_tlast_int = current_input_tlast;\n    output_eth_payload_tuser_int = current_input_tuser;\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        select_reg <= 0;\n        frame_reg <= 0;\n"]], "Diff Content": {"Delete": [[228, "    input_0_eth_payload_tready_next = 0;\n"], [229, "    input_1_eth_payload_tready_next = 0;\n"], [230, "    input_2_eth_payload_tready_next = 0;\n"], [231, "    input_3_eth_payload_tready_next = 0;\n"], [245, "        frame_next = 1;\n"], [249, "            2'd0: input_0_eth_hdr_ready_next = 1;\n"], [250, "            2'd1: input_1_eth_hdr_ready_next = 1;\n"], [251, "            2'd2: input_2_eth_hdr_ready_next = 1;\n"], [252, "            2'd3: input_3_eth_hdr_ready_next = 1;\n"], [255, "        output_eth_hdr_valid_next = 1;\n"]], "Add": [[231, "    input_0_eth_payload_tready_next = 1'b0;\n"], [231, "    input_1_eth_payload_tready_next = 1'b0;\n"], [231, "    input_2_eth_payload_tready_next = 1'b0;\n"], [231, "    input_3_eth_payload_tready_next = 1'b0;\n"], [245, "        frame_next = 1'b1;\n"], [252, "            2'd0: input_0_eth_hdr_ready_next = 1'b1;\n"], [252, "            2'd1: input_1_eth_hdr_ready_next = 1'b1;\n"], [252, "            2'd2: input_2_eth_hdr_ready_next = 1'b1;\n"], [252, "            2'd3: input_3_eth_hdr_ready_next = 1'b1;\n"], [255, "        output_eth_hdr_valid_next = 1'b1;\n"]]}}