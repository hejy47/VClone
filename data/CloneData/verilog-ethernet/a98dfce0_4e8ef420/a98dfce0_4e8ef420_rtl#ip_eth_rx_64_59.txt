Source Block: verilog-ethernet/rtl/ip_eth_rx_64.v@631:641@HdlStmAssign

assign output_ip_payload_tdata = output_ip_payload_tdata_reg;
assign output_ip_payload_tkeep = output_ip_payload_tkeep_reg;
assign output_ip_payload_tvalid = output_ip_payload_tvalid_reg;
assign output_ip_payload_tlast = output_ip_payload_tlast_reg;
assign output_ip_payload_tuser = output_ip_payload_tuser_reg;

always @(posedge clk) begin
    if (rst) begin
        output_ip_payload_tdata_reg <= 0;
        output_ip_payload_tkeep_reg <= 0;

Diff Content:
+ 636 assign output_ip_payload_tready_int_early = output_ip_payload_tready | (~temp_ip_payload_tvalid_reg & (~output_ip_payload_tvalid_reg | ~output_ip_payload_tvalid_int));
+ 636 always @* begin
+ 636     output_ip_payload_tvalid_next = output_ip_payload_tvalid_reg;
+ 636     temp_ip_payload_tvalid_next = temp_ip_payload_tvalid_reg;
+ 636     store_ip_payload_int_to_output = 1'b0;
+ 636     store_ip_payload_int_to_temp = 1'b0;
+ 636     store_ip_payload_temp_to_output = 1'b0;
+ 636     if (output_ip_payload_tready_int_reg) begin
+ 636         if (output_ip_payload_tready | ~output_ip_payload_tvalid_reg) begin
+ 636             output_ip_payload_tvalid_next = output_ip_payload_tvalid_int;
+ 636             store_ip_payload_int_to_output = 1'b1;
+ 636         end else begin
+ 636             temp_ip_payload_tvalid_next = output_ip_payload_tvalid_int;
+ 636             store_ip_payload_int_to_temp = 1'b1;
+ 636         end
+ 636     end else if (output_ip_payload_tready) begin
+ 636         output_ip_payload_tvalid_next = temp_ip_payload_tvalid_reg;
+ 636         temp_ip_payload_tvalid_next = 1'b0;
+ 636         store_ip_payload_temp_to_output = 1'b1;
+ 636     end
+ 636 end

Clone Blocks:
Clone Blocks 1:
verilog-ethernet/rtl/udp_ip_tx_64.v@501:511

assign output_ip_payload_tdata = output_ip_payload_tdata_reg;
assign output_ip_payload_tkeep = output_ip_payload_tkeep_reg;
assign output_ip_payload_tvalid = output_ip_payload_tvalid_reg;
assign output_ip_payload_tlast = output_ip_payload_tlast_reg;
assign output_ip_payload_tuser = output_ip_payload_tuser_reg;

always @(posedge clk) begin
    if (rst) begin
        output_ip_payload_tdata_reg <= 0;
        output_ip_payload_tkeep_reg <= 0;

Clone Blocks 2:
verilog-ethernet/rtl/ip_mux_64_4.v@539:549
reg        temp_ip_payload_tvalid_reg = 0;
reg        temp_ip_payload_tlast_reg = 0;
reg        temp_ip_payload_tuser_reg = 0;

assign output_ip_payload_tdata = output_ip_payload_tdata_reg;
assign output_ip_payload_tkeep = output_ip_payload_tkeep_reg;
assign output_ip_payload_tvalid = output_ip_payload_tvalid_reg;
assign output_ip_payload_tlast = output_ip_payload_tlast_reg;
assign output_ip_payload_tuser = output_ip_payload_tuser_reg;

// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle

Clone Blocks 3:
verilog-ethernet/rtl/udp_ip_rx_64.v@509:519

assign output_udp_payload_tdata = output_udp_payload_tdata_reg;
assign output_udp_payload_tkeep = output_udp_payload_tkeep_reg;
assign output_udp_payload_tvalid = output_udp_payload_tvalid_reg;
assign output_udp_payload_tlast = output_udp_payload_tlast_reg;
assign output_udp_payload_tuser = output_udp_payload_tuser_reg;

always @(posedge clk) begin
    if (rst) begin
        output_udp_payload_tdata_reg <= 0;
        output_udp_payload_tkeep_reg <= 0;

Clone Blocks 4:
verilog-ethernet/rtl/arp_eth_tx_64.v@308:318

assign output_eth_payload_tdata = output_eth_payload_tdata_reg;
assign output_eth_payload_tkeep = output_eth_payload_tkeep_reg;
assign output_eth_payload_tvalid = output_eth_payload_tvalid_reg;
assign output_eth_payload_tlast = output_eth_payload_tlast_reg;
assign output_eth_payload_tuser = output_eth_payload_tuser_reg;

always @(posedge clk) begin
    if (rst) begin
        output_eth_payload_tdata_reg <= 0;
        output_eth_payload_tkeep_reg <= 0;

Clone Blocks 5:
verilog-ethernet/rtl/ip_mux_64_2.v@411:421
reg        temp_ip_payload_tvalid_reg = 0;
reg        temp_ip_payload_tlast_reg = 0;
reg        temp_ip_payload_tuser_reg = 0;

assign output_ip_payload_tdata = output_ip_payload_tdata_reg;
assign output_ip_payload_tkeep = output_ip_payload_tkeep_reg;
assign output_ip_payload_tvalid = output_ip_payload_tvalid_reg;
assign output_ip_payload_tlast = output_ip_payload_tlast_reg;
assign output_ip_payload_tuser = output_ip_payload_tuser_reg;

// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle

Clone Blocks 6:
verilog-ethernet/rtl/ip_eth_tx_64.v@581:591

assign output_eth_payload_tdata = output_eth_payload_tdata_reg;
assign output_eth_payload_tkeep = output_eth_payload_tkeep_reg;
assign output_eth_payload_tvalid = output_eth_payload_tvalid_reg;
assign output_eth_payload_tlast = output_eth_payload_tlast_reg;
assign output_eth_payload_tuser = output_eth_payload_tuser_reg;

always @(posedge clk) begin
    if (rst) begin
        output_eth_payload_tdata_reg <= 0;
        output_eth_payload_tkeep_reg <= 0;

Clone Blocks 7:
verilog-ethernet/rtl/eth_axis_rx_64.v@349:359

assign output_eth_payload_tdata = output_eth_payload_tdata_reg;
assign output_eth_payload_tkeep = output_eth_payload_tkeep_reg;
assign output_eth_payload_tvalid = output_eth_payload_tvalid_reg;
assign output_eth_payload_tlast = output_eth_payload_tlast_reg;
assign output_eth_payload_tuser = output_eth_payload_tuser_reg;

always @(posedge clk) begin
    if (rst) begin
        output_eth_payload_tdata_reg <= 0;
        output_eth_payload_tkeep_reg <= 0;

