Source Block: verilog-ethernet/rtl/udp_ip_rx_64.v@509:519@HdlStmAssign

assign output_udp_payload_tdata = output_udp_payload_tdata_reg;
assign output_udp_payload_tkeep = output_udp_payload_tkeep_reg;
assign output_udp_payload_tvalid = output_udp_payload_tvalid_reg;
assign output_udp_payload_tlast = output_udp_payload_tlast_reg;
assign output_udp_payload_tuser = output_udp_payload_tuser_reg;

always @(posedge clk) begin
    if (rst) begin
        output_udp_payload_tdata_reg <= 0;
        output_udp_payload_tkeep_reg <= 0;

Diff Content:
+ 514 assign output_udp_payload_tready_int_early = output_udp_payload_tready | (~temp_udp_payload_tvalid_reg & (~output_udp_payload_tvalid_reg | ~output_udp_payload_tvalid_int));
+ 514 always @* begin
+ 514     output_udp_payload_tvalid_next = output_udp_payload_tvalid_reg;
+ 514     temp_udp_payload_tvalid_next = temp_udp_payload_tvalid_reg;
+ 514     store_udp_payload_int_to_output = 1'b0;
+ 514     store_udp_payload_int_to_temp = 1'b0;
+ 514     store_udp_payload_temp_to_output = 1'b0;
+ 514     if (output_udp_payload_tready_int_reg) begin
+ 514         if (output_udp_payload_tready | ~output_udp_payload_tvalid_reg) begin
+ 514             output_udp_payload_tvalid_next = output_udp_payload_tvalid_int;
+ 514             store_udp_payload_int_to_output = 1'b1;
+ 514         end else begin
+ 514             temp_udp_payload_tvalid_next = output_udp_payload_tvalid_int;
+ 514             store_udp_payload_int_to_temp = 1'b1;
+ 514         end
+ 514     end else if (output_udp_payload_tready) begin
+ 514         output_udp_payload_tvalid_next = temp_udp_payload_tvalid_reg;
+ 514         temp_udp_payload_tvalid_next = 1'b0;
+ 514         store_udp_payload_temp_to_output = 1'b1;
+ 514     end
+ 514 end

Clone Blocks:
Clone Blocks 1:
verilog-ethernet/rtl/udp_ip_tx_64.v@501:511

assign output_ip_payload_tdata = output_ip_payload_tdata_reg;
assign output_ip_payload_tkeep = output_ip_payload_tkeep_reg;
assign output_ip_payload_tvalid = output_ip_payload_tvalid_reg;
assign output_ip_payload_tlast = output_ip_payload_tlast_reg;
assign output_ip_payload_tuser = output_ip_payload_tuser_reg;

always @(posedge clk) begin
    if (rst) begin
        output_ip_payload_tdata_reg <= 0;
        output_ip_payload_tkeep_reg <= 0;

Clone Blocks 2:
verilog-ethernet/rtl/udp_mux_64_4.v@603:613
reg        temp_udp_payload_tvalid_reg = 0;
reg        temp_udp_payload_tlast_reg = 0;
reg        temp_udp_payload_tuser_reg = 0;

assign output_udp_payload_tdata = output_udp_payload_tdata_reg;
assign output_udp_payload_tkeep = output_udp_payload_tkeep_reg;
assign output_udp_payload_tvalid = output_udp_payload_tvalid_reg;
assign output_udp_payload_tlast = output_udp_payload_tlast_reg;
assign output_udp_payload_tuser = output_udp_payload_tuser_reg;

// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle

Clone Blocks 3:
verilog-ethernet/rtl/ip_eth_rx_64.v@631:641

assign output_ip_payload_tdata = output_ip_payload_tdata_reg;
assign output_ip_payload_tkeep = output_ip_payload_tkeep_reg;
assign output_ip_payload_tvalid = output_ip_payload_tvalid_reg;
assign output_ip_payload_tlast = output_ip_payload_tlast_reg;
assign output_ip_payload_tuser = output_ip_payload_tuser_reg;

always @(posedge clk) begin
    if (rst) begin
        output_ip_payload_tdata_reg <= 0;
        output_ip_payload_tkeep_reg <= 0;

