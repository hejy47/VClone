{"Source Block": ["verilog-ethernet/rtl/ip_eth_rx_64.v@272:508@HdlStmProcess", "        shift_eth_payload_tuser = (input_eth_payload_tuser & (input_eth_payload_tkeep[7:4] == 0));\n        shift_eth_payload_input_tready = ~(input_eth_payload_tlast & input_eth_payload_tvalid & transfer_in_save);\n    end\nend\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    flush_save = 0;\n    transfer_in_save = 0;\n\n    input_eth_hdr_ready_next = 0;\n    input_eth_payload_tready_next = 0;\n\n    store_eth_hdr = 0;\n    store_hdr_word_0 = 0;\n    store_hdr_word_1 = 0;\n    store_hdr_word_2 = 0;\n\n    store_last_word = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    hdr_sum_temp = 0;\n    hdr_sum_next = hdr_sum_reg;\n    check_hdr_next = check_hdr_reg;\n\n    output_ip_hdr_valid_next = output_ip_hdr_valid_reg & ~output_ip_hdr_ready;\n\n    error_header_early_termination_next = 0;\n    error_payload_early_termination_next = 0;\n    error_invalid_header_next = 0;\n    error_invalid_checksum_next = 0;\n\n    output_ip_payload_tdata_int = 0;\n    output_ip_payload_tkeep_int = 0;\n    output_ip_payload_tvalid_int = 0;\n    output_ip_payload_tlast_int = 0;\n    output_ip_payload_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for header\n            frame_ptr_next = 0;\n            hdr_sum_next = 0;\n            flush_save = 1;\n            input_eth_hdr_ready_next = ~output_ip_hdr_valid_reg;\n\n            if (input_eth_hdr_ready & input_eth_hdr_valid) begin\n                input_eth_hdr_ready_next = 0;\n                input_eth_payload_tready_next = 1;\n                store_eth_hdr = 1;\n                state_next = STATE_READ_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_READ_HEADER: begin\n            // read header\n            input_eth_payload_tready_next = shift_eth_payload_input_tready;\n\n            if (input_eth_payload_tvalid) begin\n                // word transfer in - store it\n                frame_ptr_next = frame_ptr_reg+8;\n                transfer_in_save = 1;\n                state_next = STATE_READ_HEADER;\n\n                case (frame_ptr_reg)\n                    8'h00: begin\n                        store_hdr_word_0 = 1;\n                        hdr_sum_next = input_eth_payload_tdata[15:0] +\n                                       input_eth_payload_tdata[31:16] +\n                                       input_eth_payload_tdata[47:32] +\n                                       input_eth_payload_tdata[63:48];\n                    end\n                    8'h08: begin\n                        store_hdr_word_1 = 1;\n                        hdr_sum_next = hdr_sum_reg +\n                                       input_eth_payload_tdata[15:0] +\n                                       input_eth_payload_tdata[31:16] +\n                                       input_eth_payload_tdata[47:32] +\n                                       input_eth_payload_tdata[63:48];\n                    end\n                    8'h10: begin\n                        store_hdr_word_2 = 1;\n                        hdr_sum_next = hdr_sum_reg +\n                                       input_eth_payload_tdata[15:0] +\n                                       input_eth_payload_tdata[31:16];\n                        frame_ptr_next = frame_ptr_reg+4;\n\n                        // check header checksum on next cycle for improved timing\n                        check_hdr_next = 1;\n\n                        if (output_ip_version_reg != 4 || output_ip_ihl_reg != 5) begin\n                            error_invalid_header_next = 1;\n                            input_eth_payload_tready_next = shift_eth_payload_input_tready;\n                            state_next = STATE_WAIT_LAST;\n                        end else begin\n                            input_eth_payload_tready_next = output_ip_payload_tready_int_early & shift_eth_payload_input_tready;\n                            state_next = STATE_READ_PAYLOAD;\n                        end\n                    end\n                endcase\n\n                if (shift_eth_payload_tlast) begin\n                    error_header_early_termination_next = 1;\n                    error_invalid_header_next = 0;\n                    error_invalid_checksum_next = 0;\n                    output_ip_hdr_valid_next = 0;\n                    input_eth_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                    input_eth_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end\n\n            end else begin\n                state_next = STATE_READ_HEADER;\n            end\n        end\n        STATE_READ_PAYLOAD: begin\n            // read payload\n            input_eth_payload_tready_next = output_ip_payload_tready_int_early & shift_eth_payload_input_tready;\n\n            output_ip_payload_tdata_int = shift_eth_payload_tdata;\n            output_ip_payload_tkeep_int = shift_eth_payload_tkeep;\n            output_ip_payload_tvalid_int = shift_eth_payload_tvalid;\n            output_ip_payload_tlast_int = shift_eth_payload_tlast;\n            output_ip_payload_tuser_int = shift_eth_payload_tuser;\n\n            if (output_ip_payload_tready_int & shift_eth_payload_tvalid) begin\n                // word transfer through\n                frame_ptr_next = frame_ptr_reg+keep2count(shift_eth_payload_tkeep);\n                transfer_in_save = 1;\n                if (frame_ptr_next >= output_ip_length_reg) begin\n                    // have entire payload\n                    frame_ptr_next = output_ip_length_reg;\n                    output_ip_payload_tkeep_int = shift_eth_payload_tkeep & count2keep(output_ip_length_reg - frame_ptr_reg);\n                    if (shift_eth_payload_tlast) begin\n                        input_eth_payload_tready_next = 0;\n                        flush_save = 1;\n                        input_eth_hdr_ready_next = ~output_ip_hdr_valid_reg & ~check_hdr_reg;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        store_last_word = 1;\n                        output_ip_payload_tvalid_int = 0;\n                        state_next = STATE_READ_PAYLOAD_LAST;\n                    end\n                end else begin\n                    if (shift_eth_payload_tlast) begin\n                        // end of frame, but length does not match\n                        error_payload_early_termination_next = 1;\n                        output_ip_payload_tuser_int = 1;\n                        input_eth_payload_tready_next = 0;\n                        flush_save = 1;\n                        input_eth_hdr_ready_next = ~output_ip_hdr_valid_reg & ~check_hdr_reg;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        state_next = STATE_READ_PAYLOAD;\n                    end\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD;\n            end\n\n            if (check_hdr_reg) begin\n                check_hdr_next = 0;\n\n                hdr_sum_temp = hdr_sum_reg[15:0] + hdr_sum_reg[31:16];\n                hdr_sum_temp = hdr_sum_temp[15:0] + hdr_sum_temp[16];\n\n                if (hdr_sum_temp != 16'hffff) begin\n                    // bad checksum\n                    error_invalid_checksum_next = 1;\n                    output_ip_payload_tvalid_int = 0;\n                    if (shift_eth_payload_tlast & shift_eth_payload_tvalid) begin\n                        // only one payload cycle; return to idle now\n                        input_eth_hdr_ready_next = ~output_ip_hdr_valid_reg & ~check_hdr_reg;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        // drop payload\n                        input_eth_payload_tready_next = shift_eth_payload_input_tready;\n                        state_next = STATE_WAIT_LAST;\n                    end\n                end else begin\n                    // good checksum; transfer header\n                    output_ip_hdr_valid_next = 1;\n                end\n            end\n        end\n        STATE_READ_PAYLOAD_LAST: begin\n            // read and discard until end of frame\n            input_eth_payload_tready_next = output_ip_payload_tready_int_early & shift_eth_payload_input_tready;\n\n            output_ip_payload_tdata_int = last_word_data_reg;\n            output_ip_payload_tkeep_int = last_word_keep_reg;\n            output_ip_payload_tvalid_int = shift_eth_payload_tvalid & shift_eth_payload_tlast;\n            output_ip_payload_tlast_int = shift_eth_payload_tlast;\n            output_ip_payload_tuser_int = shift_eth_payload_tuser;\n\n            if (output_ip_payload_tready_int & shift_eth_payload_tvalid) begin\n                transfer_in_save = 1;\n                if (shift_eth_payload_tlast) begin\n                    input_eth_payload_tready_next = 0;\n                    flush_save = 1;\n                    input_eth_hdr_ready_next = 1;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD_LAST;\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD_LAST;\n            end\n        end\n        STATE_WAIT_LAST: begin\n            // read and discard until end of frame\n            input_eth_payload_tready_next = shift_eth_payload_input_tready;\n\n            if (shift_eth_payload_tvalid) begin\n                transfer_in_save = 1;\n                if (shift_eth_payload_tlast) begin\n                    input_eth_payload_tready_next = 0;\n                    flush_save = 1;\n                    input_eth_hdr_ready_next = 1;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WAIT_LAST;\n                end\n            end else begin\n                state_next = STATE_WAIT_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[280, "    flush_save = 0;\n"], [281, "    transfer_in_save = 0;\n"], [283, "    input_eth_hdr_ready_next = 0;\n"], [284, "    input_eth_payload_tready_next = 0;\n"], [286, "    store_eth_hdr = 0;\n"], [287, "    store_hdr_word_0 = 0;\n"], [288, "    store_hdr_word_1 = 0;\n"], [289, "    store_hdr_word_2 = 0;\n"], [291, "    store_last_word = 0;\n"], [295, "    hdr_sum_temp = 0;\n"], [301, "    error_header_early_termination_next = 0;\n"], [302, "    error_payload_early_termination_next = 0;\n"], [303, "    error_invalid_header_next = 0;\n"], [304, "    error_invalid_checksum_next = 0;\n"], [306, "    output_ip_payload_tdata_int = 0;\n"], [307, "    output_ip_payload_tkeep_int = 0;\n"], [308, "    output_ip_payload_tvalid_int = 0;\n"], [309, "    output_ip_payload_tlast_int = 0;\n"], [310, "    output_ip_payload_tuser_int = 0;\n"], [315, "            frame_ptr_next = 0;\n"], [316, "            hdr_sum_next = 0;\n"], [317, "            flush_save = 1;\n"], [321, "                input_eth_hdr_ready_next = 0;\n"], [322, "                input_eth_payload_tready_next = 1;\n"], [323, "                store_eth_hdr = 1;\n"], [335, "                frame_ptr_next = frame_ptr_reg+8;\n"], [336, "                transfer_in_save = 1;\n"], [341, "                        store_hdr_word_0 = 1;\n"], [348, "                        store_hdr_word_1 = 1;\n"], [356, "                        store_hdr_word_2 = 1;\n"], [360, "                        frame_ptr_next = frame_ptr_reg+4;\n"], [363, "                        check_hdr_next = 1;\n"], [365, "                        if (output_ip_version_reg != 4 || output_ip_ihl_reg != 5) begin\n"], [366, "                            error_invalid_header_next = 1;\n"], [377, "                    error_header_early_termination_next = 1;\n"], [378, "                    error_invalid_header_next = 0;\n"], [379, "                    error_invalid_checksum_next = 0;\n"], [380, "                    output_ip_hdr_valid_next = 0;\n"], [382, "                    input_eth_payload_tready_next = 0;\n"], [400, "            if (output_ip_payload_tready_int & shift_eth_payload_tvalid) begin\n"], [403, "                transfer_in_save = 1;\n"], [409, "                        input_eth_payload_tready_next = 0;\n"], [410, "                        flush_save = 1;\n"], [414, "                        store_last_word = 1;\n"], [415, "                        output_ip_payload_tvalid_int = 0;\n"], [421, "                        error_payload_early_termination_next = 1;\n"], [422, "                        output_ip_payload_tuser_int = 1;\n"], [423, "                        input_eth_payload_tready_next = 0;\n"], [424, "                        flush_save = 1;\n"], [436, "                check_hdr_next = 0;\n"], [443, "                    error_invalid_checksum_next = 1;\n"], [444, "                    output_ip_payload_tvalid_int = 0;\n"], [456, "                    output_ip_hdr_valid_next = 1;\n"], [470, "            if (output_ip_payload_tready_int & shift_eth_payload_tvalid) begin\n"], [471, "                transfer_in_save = 1;\n"], [473, "                    input_eth_payload_tready_next = 0;\n"], [474, "                    flush_save = 1;\n"], [475, "                    input_eth_hdr_ready_next = 1;\n"], [489, "                transfer_in_save = 1;\n"], [491, "                    input_eth_payload_tready_next = 0;\n"], [492, "                    flush_save = 1;\n"], [493, "                    input_eth_hdr_ready_next = 1;\n"]], "Add": [[281, "    flush_save = 1'b0;\n"], [281, "    transfer_in_save = 1'b0;\n"], [284, "    input_eth_hdr_ready_next = 1'b0;\n"], [284, "    input_eth_payload_tready_next = 1'b0;\n"], [289, "    store_eth_hdr = 1'b0;\n"], [289, "    store_hdr_word_0 = 1'b0;\n"], [289, "    store_hdr_word_1 = 1'b0;\n"], [289, "    store_hdr_word_2 = 1'b0;\n"], [291, "    store_last_word = 1'b0;\n"], [295, "    hdr_sum_temp = 32'd0;\n"], [304, "    error_header_early_termination_next = 1'b0;\n"], [304, "    error_payload_early_termination_next = 1'b0;\n"], [304, "    error_invalid_header_next = 1'b0;\n"], [304, "    error_invalid_checksum_next = 1'b0;\n"], [310, "    output_ip_payload_tdata_int = 64'd0;\n"], [310, "    output_ip_payload_tkeep_int = 8'd0;\n"], [310, "    output_ip_payload_tvalid_int = 1'b0;\n"], [310, "    output_ip_payload_tlast_int = 1'b0;\n"], [310, "    output_ip_payload_tuser_int = 1'b0;\n"], [317, "            frame_ptr_next = 16'd0;\n"], [317, "            hdr_sum_next = 32'd0;\n"], [317, "            flush_save = 1'b1;\n"], [323, "                input_eth_hdr_ready_next = 1'b0;\n"], [323, "                input_eth_payload_tready_next = 1'b1;\n"], [323, "                store_eth_hdr = 1'b1;\n"], [336, "                frame_ptr_next = frame_ptr_reg + 16'd8;\n"], [336, "                transfer_in_save = 1'b1;\n"], [341, "                        store_hdr_word_0 = 1'b1;\n"], [348, "                        store_hdr_word_1 = 1'b1;\n"], [356, "                        store_hdr_word_2 = 1'b1;\n"], [360, "                        frame_ptr_next = frame_ptr_reg + 16'd4;\n"], [363, "                        check_hdr_next = 1'b1;\n"], [366, "                        if (output_ip_version_reg != 4'd4 || output_ip_ihl_reg != 4'd5) begin\n"], [366, "                            error_invalid_header_next = 1'b1;\n"], [380, "                    error_header_early_termination_next = 1'b1;\n"], [380, "                    error_invalid_header_next = 1'b0;\n"], [380, "                    error_invalid_checksum_next = 1'b0;\n"], [380, "                    output_ip_hdr_valid_next = 1'b0;\n"], [382, "                    input_eth_payload_tready_next = 1'b0;\n"], [400, "            if (output_ip_payload_tready_int_reg & shift_eth_payload_tvalid) begin\n"], [403, "                transfer_in_save = 1'b1;\n"], [410, "                        input_eth_payload_tready_next = 1'b0;\n"], [410, "                        flush_save = 1'b1;\n"], [415, "                        store_last_word = 1'b1;\n"], [415, "                        output_ip_payload_tvalid_int = 1'b0;\n"], [424, "                        error_payload_early_termination_next = 1'b1;\n"], [424, "                        output_ip_payload_tuser_int = 1'b1;\n"], [424, "                        input_eth_payload_tready_next = 1'b0;\n"], [424, "                        flush_save = 1'b1;\n"], [436, "                check_hdr_next = 1'b0;\n"], [444, "                    error_invalid_checksum_next = 1'b1;\n"], [444, "                    output_ip_payload_tvalid_int = 1'b0;\n"], [456, "                    output_ip_hdr_valid_next = 1'b1;\n"], [471, "            if (output_ip_payload_tready_int_reg & shift_eth_payload_tvalid) begin\n"], [471, "                transfer_in_save = 1'b1;\n"], [475, "                    input_eth_payload_tready_next = 1'b0;\n"], [475, "                    flush_save = 1'b1;\n"], [475, "                    input_eth_hdr_ready_next = 1'b1;\n"], [489, "                transfer_in_save = 1'b1;\n"], [493, "                    input_eth_payload_tready_next = 1'b0;\n"], [493, "                    flush_save = 1'b1;\n"], [493, "                    input_eth_hdr_ready_next = 1'b1;\n"]]}}