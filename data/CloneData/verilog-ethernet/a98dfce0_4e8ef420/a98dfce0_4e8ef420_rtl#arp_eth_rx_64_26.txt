Source Block: verilog-ethernet/rtl/arp_eth_rx_64.v@155:257@HdlStmProcess

assign busy = busy_reg;
assign error_header_early_termination = error_header_early_termination_reg;
assign error_invalid_header = error_invalid_header_reg;

always @* begin
    state_next = STATE_IDLE;

    input_eth_hdr_ready_next = 0;
    input_eth_payload_tready_next = 0;

    store_eth_hdr = 0;
    store_arp_hdr_word_0 = 0;
    store_arp_hdr_word_1 = 0;
    store_arp_hdr_word_2 = 0;
    store_arp_hdr_word_3 = 0;

    frame_ptr_next = frame_ptr_reg;

    output_frame_valid_next = output_frame_valid_reg & ~output_frame_ready;

    error_header_early_termination_next = 0;
    error_invalid_header_next = 0;

    case (state_reg)
        STATE_IDLE: begin
            // idle state - wait for data
            frame_ptr_next = 0;
            input_eth_hdr_ready_next = ~output_frame_valid_reg;

            if (input_eth_hdr_ready & input_eth_hdr_valid) begin
                input_eth_hdr_ready_next = 0;
                input_eth_payload_tready_next = 1;
                store_eth_hdr = 1;
                state_next = STATE_READ_HEADER;
            end else begin
                state_next = STATE_IDLE;
            end
        end
        STATE_READ_HEADER: begin
            // read header state
            input_eth_payload_tready_next = 1;

            if (input_eth_payload_tvalid) begin
                // word transfer in - store it
                frame_ptr_next = frame_ptr_reg+1;
                state_next = STATE_READ_HEADER;
                case (frame_ptr_reg)
                    8'h00: store_arp_hdr_word_0 = 1;
                    8'h01: store_arp_hdr_word_1 = 1;
                    8'h02: store_arp_hdr_word_2 = 1;
                    8'h03: begin
                        store_arp_hdr_word_3 = 1;
                        state_next = STATE_WAIT_LAST;
                    end
                endcase
                if (input_eth_payload_tlast) begin
                    if (frame_ptr_reg != 8'h03 | (input_eth_payload_tkeep & 8'h0F) != 8'h0F) begin
                        error_header_early_termination_next = 1;
                    end else if (output_arp_hlen != 6 || output_arp_plen != 4) begin
                        error_invalid_header_next = 1;
                    end else begin
                        output_frame_valid_next = ~input_eth_payload_tuser;
                    end
                    input_eth_hdr_ready_next = ~output_frame_valid_reg;
                    input_eth_payload_tready_next = 0;
                    state_next = STATE_IDLE;
                end
            end else begin
                state_next = STATE_READ_HEADER;
            end
        end
        STATE_WAIT_LAST: begin
            // wait for end of frame; read and discard
            input_eth_payload_tready_next = 1;

            if (input_eth_payload_tvalid) begin
                if (input_eth_payload_tlast) begin
                    if (output_arp_hlen != 6 || output_arp_plen != 4) begin
                        // lengths not valid
                        error_invalid_header_next = 1;
                    end else begin
                        // otherwise, transfer tuser
                        output_frame_valid_next = ~input_eth_payload_tuser;
                    end
                    input_eth_hdr_ready_next = ~output_frame_valid_reg;
                    input_eth_payload_tready_next = 0;
                    state_next = STATE_IDLE;
                end else begin
                    state_next = STATE_WAIT_LAST;
                end
            end else begin
                // wait for end of frame; read and discard
                state_next = STATE_WAIT_LAST;
            end
        end
    endcase
end

always @(posedge clk) begin
    if (rst) begin
        state_reg <= STATE_IDLE;
        frame_ptr_reg <= 0;

Diff Content:
- 163     input_eth_hdr_ready_next = 0;
- 164     input_eth_payload_tready_next = 0;
- 166     store_eth_hdr = 0;
- 167     store_arp_hdr_word_0 = 0;
- 168     store_arp_hdr_word_1 = 0;
- 169     store_arp_hdr_word_2 = 0;
- 170     store_arp_hdr_word_3 = 0;
- 176     error_header_early_termination_next = 0;
- 177     error_invalid_header_next = 0;
- 182             frame_ptr_next = 0;
- 186                 input_eth_hdr_ready_next = 0;
- 187                 input_eth_payload_tready_next = 1;
- 188                 store_eth_hdr = 1;
- 196             input_eth_payload_tready_next = 1;
- 200                 frame_ptr_next = frame_ptr_reg+1;
- 203                     8'h00: store_arp_hdr_word_0 = 1;
- 204                     8'h01: store_arp_hdr_word_1 = 1;
- 205                     8'h02: store_arp_hdr_word_2 = 1;
- 207                         store_arp_hdr_word_3 = 1;
- 213                         error_header_early_termination_next = 1;
- 214                     end else if (output_arp_hlen != 6 || output_arp_plen != 4) begin
- 215                         error_invalid_header_next = 1;
- 220                     input_eth_payload_tready_next = 0;
- 229             input_eth_payload_tready_next = 1;
- 233                     if (output_arp_hlen != 6 || output_arp_plen != 4) begin
- 235                         error_invalid_header_next = 1;
- 241                     input_eth_payload_tready_next = 0;
+ 164     input_eth_hdr_ready_next = 1'b0;
+ 164     input_eth_payload_tready_next = 1'b0;
+ 170     store_eth_hdr = 1'b0;
+ 170     store_arp_hdr_word_0 = 1'b0;
+ 170     store_arp_hdr_word_1 = 1'b0;
+ 170     store_arp_hdr_word_2 = 1'b0;
+ 170     store_arp_hdr_word_3 = 1'b0;
+ 177     error_header_early_termination_next = 1'b0;
+ 177     error_invalid_header_next = 1'b0;
+ 182             frame_ptr_next = 8'd0;
+ 188                 input_eth_hdr_ready_next = 1'b0;
+ 188                 input_eth_payload_tready_next = 1'b1;
+ 188                 store_eth_hdr = 1'b1;
+ 196             input_eth_payload_tready_next = 1'b1;
+ 200                 frame_ptr_next = frame_ptr_reg + 8'd1;
+ 205                     8'h00: store_arp_hdr_word_0 = 1'b1;
+ 205                     8'h01: store_arp_hdr_word_1 = 1'b1;
+ 205                     8'h02: store_arp_hdr_word_2 = 1'b1;
+ 207                         store_arp_hdr_word_3 = 1'b1;
+ 215                         error_header_early_termination_next = 1'b1;
+ 215                     end else if (output_arp_hlen != 4'd6 || output_arp_plen != 4'd4) begin
+ 215                         error_invalid_header_next = 1'b1;
+ 220                     input_eth_payload_tready_next = 1'b0;
+ 229             input_eth_payload_tready_next = 1'b1;
+ 233                     if (output_arp_hlen != 4'd6 || output_arp_plen != 4'd4) begin
+ 235                         error_invalid_header_next = 1'b1;
+ 241                     input_eth_payload_tready_next = 1'b0;

Clone Blocks:
