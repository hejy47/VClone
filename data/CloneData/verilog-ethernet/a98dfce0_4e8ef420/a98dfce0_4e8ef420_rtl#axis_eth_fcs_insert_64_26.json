{"Source Block": ["verilog-ethernet/rtl/axis_eth_fcs_insert_64.v@581:636@HdlStmProcess", "assign output_axis_tuser = output_axis_tuser_reg;\n\n// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle\nassign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & ~output_axis_tvalid_reg) | (~temp_axis_tvalid_reg & ~output_axis_tvalid_int);\n\nalways @(posedge clk) begin\n    if (rst) begin\n        output_axis_tdata_reg <= 0;\n        output_axis_tkeep_reg <= 0;\n        output_axis_tvalid_reg <= 0;\n        output_axis_tlast_reg <= 0;\n        output_axis_tuser_reg <= 0;\n        output_axis_tready_int <= 0;\n        temp_axis_tdata_reg <= 0;\n        temp_axis_tkeep_reg <= 0;\n        temp_axis_tvalid_reg <= 0;\n        temp_axis_tlast_reg <= 0;\n        temp_axis_tuser_reg <= 0;\n    end else begin\n        // transfer sink ready state to source\n        output_axis_tready_int <= output_axis_tready_int_early;\n\n        if (output_axis_tready_int) begin\n            // input is ready\n            if (output_axis_tready | ~output_axis_tvalid_reg) begin\n                // output is ready or currently not valid, transfer data to output\n                output_axis_tdata_reg <= output_axis_tdata_int;\n                output_axis_tkeep_reg <= output_axis_tkeep_int;\n                output_axis_tvalid_reg <= output_axis_tvalid_int;\n                output_axis_tlast_reg <= output_axis_tlast_int;\n                output_axis_tuser_reg <= output_axis_tuser_int;\n            end else begin\n                // output is not ready and currently valid, store input in temp\n                temp_axis_tdata_reg <= output_axis_tdata_int;\n                temp_axis_tkeep_reg <= output_axis_tkeep_int;\n                temp_axis_tvalid_reg <= output_axis_tvalid_int;\n                temp_axis_tlast_reg <= output_axis_tlast_int;\n                temp_axis_tuser_reg <= output_axis_tuser_int;\n            end\n        end else if (output_axis_tready) begin\n            // input is not ready, but output is ready\n            output_axis_tdata_reg <= temp_axis_tdata_reg;\n            output_axis_tkeep_reg <= temp_axis_tkeep_reg;\n            output_axis_tvalid_reg <= temp_axis_tvalid_reg;\n            output_axis_tlast_reg <= temp_axis_tlast_reg;\n            output_axis_tuser_reg <= temp_axis_tuser_reg;\n            temp_axis_tdata_reg <= 0;\n            temp_axis_tkeep_reg <= 0;\n            temp_axis_tvalid_reg <= 0;\n            temp_axis_tlast_reg <= 0;\n            temp_axis_tuser_reg <= 0;\n        end\n    end\nend\n\nendmodule\n"], "Clone Blocks": [["verilog-ethernet/rtl/axis_eth_fcs_insert.v@292:341", "assign output_axis_tuser = output_axis_tuser_reg;\n\n// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle\nassign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & ~output_axis_tvalid_reg) | (~temp_axis_tvalid_reg & ~output_axis_tvalid_int);\n\nalways @(posedge clk) begin\n    if (rst) begin\n        output_axis_tdata_reg <= 0;\n        output_axis_tvalid_reg <= 0;\n        output_axis_tlast_reg <= 0;\n        output_axis_tuser_reg <= 0;\n        output_axis_tready_int <= 0;\n        temp_axis_tdata_reg <= 0;\n        temp_axis_tvalid_reg <= 0;\n        temp_axis_tlast_reg <= 0;\n        temp_axis_tuser_reg <= 0;\n    end else begin\n        // transfer sink ready state to source\n        output_axis_tready_int <= output_axis_tready_int_early;\n\n        if (output_axis_tready_int) begin\n            // input is ready\n            if (output_axis_tready | ~output_axis_tvalid_reg) begin\n                // output is ready or currently not valid, transfer data to output\n                output_axis_tdata_reg <= output_axis_tdata_int;\n                output_axis_tvalid_reg <= output_axis_tvalid_int;\n                output_axis_tlast_reg <= output_axis_tlast_int;\n                output_axis_tuser_reg <= output_axis_tuser_int;\n            end else begin\n                // output is not ready and currently valid, store input in temp\n                temp_axis_tdata_reg <= output_axis_tdata_int;\n                temp_axis_tvalid_reg <= output_axis_tvalid_int;\n                temp_axis_tlast_reg <= output_axis_tlast_int;\n                temp_axis_tuser_reg <= output_axis_tuser_int;\n            end\n        end else if (output_axis_tready) begin\n            // input is not ready, but output is ready\n            output_axis_tdata_reg <= temp_axis_tdata_reg;\n            output_axis_tvalid_reg <= temp_axis_tvalid_reg;\n            output_axis_tlast_reg <= temp_axis_tlast_reg;\n            output_axis_tuser_reg <= temp_axis_tuser_reg;\n            temp_axis_tdata_reg <= 0;\n            temp_axis_tvalid_reg <= 0;\n            temp_axis_tlast_reg <= 0;\n            temp_axis_tuser_reg <= 0;\n        end\n    end\nend\n\nendmodule\n"], ["verilog-ethernet/rtl/eth_axis_tx.v@248:297", "assign output_axis_tuser = output_axis_tuser_reg;\n\n// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle\nassign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & ~output_axis_tvalid_reg) | (~temp_axis_tvalid_reg & ~output_axis_tvalid_int);\n\nalways @(posedge clk) begin\n    if (rst) begin\n        output_axis_tdata_reg <= 0;\n        output_axis_tvalid_reg <= 0;\n        output_axis_tlast_reg <= 0;\n        output_axis_tuser_reg <= 0;\n        output_axis_tready_int <= 0;\n        temp_axis_tdata_reg <= 0;\n        temp_axis_tvalid_reg <= 0;\n        temp_axis_tlast_reg <= 0;\n        temp_axis_tuser_reg <= 0;\n    end else begin\n        // transfer sink ready state to source\n        output_axis_tready_int <= output_axis_tready_int_early;\n\n        if (output_axis_tready_int) begin\n            // input is ready\n            if (output_axis_tready | ~output_axis_tvalid_reg) begin\n                // output is ready or currently not valid, transfer data to output\n                output_axis_tdata_reg <= output_axis_tdata_int;\n                output_axis_tvalid_reg <= output_axis_tvalid_int;\n                output_axis_tlast_reg <= output_axis_tlast_int;\n                output_axis_tuser_reg <= output_axis_tuser_int;\n            end else begin\n                // output is not ready and currently valid, store input in temp\n                temp_axis_tdata_reg <= output_axis_tdata_int;\n                temp_axis_tvalid_reg <= output_axis_tvalid_int;\n                temp_axis_tlast_reg <= output_axis_tlast_int;\n                temp_axis_tuser_reg <= output_axis_tuser_int;\n            end\n        end else if (output_axis_tready) begin\n            // input is not ready, but output is ready\n            output_axis_tdata_reg <= temp_axis_tdata_reg;\n            output_axis_tvalid_reg <= temp_axis_tvalid_reg;\n            output_axis_tlast_reg <= temp_axis_tlast_reg;\n            output_axis_tuser_reg <= temp_axis_tuser_reg;\n            temp_axis_tdata_reg <= 0;\n            temp_axis_tvalid_reg <= 0;\n            temp_axis_tlast_reg <= 0;\n            temp_axis_tuser_reg <= 0;\n        end\n    end\nend\n\nendmodule\n"], ["verilog-ethernet/rtl/axis_eth_fcs_check.v@269:318", "assign output_axis_tuser = output_axis_tuser_reg;\n\n// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle\nassign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & ~output_axis_tvalid_reg) | (~temp_axis_tvalid_reg & ~output_axis_tvalid_int);\n\nalways @(posedge clk) begin\n    if (rst) begin\n        output_axis_tdata_reg <= 0;\n        output_axis_tvalid_reg <= 0;\n        output_axis_tlast_reg <= 0;\n        output_axis_tuser_reg <= 0;\n        output_axis_tready_int <= 0;\n        temp_axis_tdata_reg <= 0;\n        temp_axis_tvalid_reg <= 0;\n        temp_axis_tlast_reg <= 0;\n        temp_axis_tuser_reg <= 0;\n    end else begin\n        // transfer sink ready state to source\n        output_axis_tready_int <= output_axis_tready_int_early;\n\n        if (output_axis_tready_int) begin\n            // input is ready\n            if (output_axis_tready | ~output_axis_tvalid_reg) begin\n                // output is ready or currently not valid, transfer data to output\n                output_axis_tdata_reg <= output_axis_tdata_int;\n                output_axis_tvalid_reg <= output_axis_tvalid_int;\n                output_axis_tlast_reg <= output_axis_tlast_int;\n                output_axis_tuser_reg <= output_axis_tuser_int;\n            end else begin\n                // output is not ready and currently valid, store input in temp\n                temp_axis_tdata_reg <= output_axis_tdata_int;\n                temp_axis_tvalid_reg <= output_axis_tvalid_int;\n                temp_axis_tlast_reg <= output_axis_tlast_int;\n                temp_axis_tuser_reg <= output_axis_tuser_int;\n            end\n        end else if (output_axis_tready) begin\n            // input is not ready, but output is ready\n            output_axis_tdata_reg <= temp_axis_tdata_reg;\n            output_axis_tvalid_reg <= temp_axis_tvalid_reg;\n            output_axis_tlast_reg <= temp_axis_tlast_reg;\n            output_axis_tuser_reg <= temp_axis_tuser_reg;\n            temp_axis_tdata_reg <= 0;\n            temp_axis_tvalid_reg <= 0;\n            temp_axis_tlast_reg <= 0;\n            temp_axis_tuser_reg <= 0;\n        end\n    end\nend\n\nendmodule\n"], ["verilog-ethernet/rtl/eth_axis_tx_64.v@355:410", "assign output_axis_tkeep = output_axis_tkeep_reg;\nassign output_axis_tvalid = output_axis_tvalid_reg;\nassign output_axis_tlast = output_axis_tlast_reg;\nassign output_axis_tuser = output_axis_tuser_reg;\n\nalways @(posedge clk) begin\n    if (rst) begin\n        output_axis_tdata_reg <= 0;\n        output_axis_tkeep_reg <= 0;\n        output_axis_tvalid_reg <= 0;\n        output_axis_tlast_reg <= 0;\n        output_axis_tuser_reg <= 0;\n        output_axis_tready_int <= 0;\n        temp_axis_tdata_reg <= 0;\n        temp_axis_tkeep_reg <= 0;\n        temp_axis_tvalid_reg <= 0;\n        temp_axis_tlast_reg <= 0;\n        temp_axis_tuser_reg <= 0;\n    end else begin\n        // transfer sink ready state to source\n        output_axis_tready_int <= output_axis_tready_int_early;\n\n        if (output_axis_tready_int) begin\n            // input is ready\n            if (output_axis_tready | ~output_axis_tvalid_reg) begin\n                // output is ready or currently not valid, transfer data to output\n                output_axis_tdata_reg <= output_axis_tdata_int;\n                output_axis_tkeep_reg <= output_axis_tkeep_int;\n                output_axis_tvalid_reg <= output_axis_tvalid_int;\n                output_axis_tlast_reg <= output_axis_tlast_int;\n                output_axis_tuser_reg <= output_axis_tuser_int;\n            end else begin\n                // output is not ready and currently valid, store input in temp\n                temp_axis_tdata_reg <= output_axis_tdata_int;\n                temp_axis_tkeep_reg <= output_axis_tkeep_int;\n                temp_axis_tvalid_reg <= output_axis_tvalid_int;\n                temp_axis_tlast_reg <= output_axis_tlast_int;\n                temp_axis_tuser_reg <= output_axis_tuser_int;\n            end\n        end else if (output_axis_tready) begin\n            // input is not ready, but output is ready\n            output_axis_tdata_reg <= temp_axis_tdata_reg;\n            output_axis_tkeep_reg <= temp_axis_tkeep_reg;\n            output_axis_tvalid_reg <= temp_axis_tvalid_reg;\n            output_axis_tlast_reg <= temp_axis_tlast_reg;\n            output_axis_tuser_reg <= temp_axis_tuser_reg;\n            temp_axis_tdata_reg <= 0;\n            temp_axis_tkeep_reg <= 0;\n            temp_axis_tvalid_reg <= 0;\n            temp_axis_tlast_reg <= 0;\n            temp_axis_tuser_reg <= 0;\n        end\n    end\nend\n\nendmodule\n"], ["verilog-ethernet/rtl/axis_eth_fcs_check_64.v@363:418", "assign output_axis_tuser = output_axis_tuser_reg;\n\n// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle\nassign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & ~output_axis_tvalid_reg) | (~temp_axis_tvalid_reg & ~output_axis_tvalid_int);\n\nalways @(posedge clk) begin\n    if (rst) begin\n        output_axis_tdata_reg <= 0;\n        output_axis_tkeep_reg <= 0;\n        output_axis_tvalid_reg <= 0;\n        output_axis_tlast_reg <= 0;\n        output_axis_tuser_reg <= 0;\n        output_axis_tready_int <= 0;\n        temp_axis_tdata_reg <= 0;\n        temp_axis_tkeep_reg <= 0;\n        temp_axis_tvalid_reg <= 0;\n        temp_axis_tlast_reg <= 0;\n        temp_axis_tuser_reg <= 0;\n    end else begin\n        // transfer sink ready state to source\n        output_axis_tready_int <= output_axis_tready_int_early;\n\n        if (output_axis_tready_int) begin\n            // input is ready\n            if (output_axis_tready | ~output_axis_tvalid_reg) begin\n                // output is ready or currently not valid, transfer data to output\n                output_axis_tdata_reg <= output_axis_tdata_int;\n                output_axis_tkeep_reg <= output_axis_tkeep_int;\n                output_axis_tvalid_reg <= output_axis_tvalid_int;\n                output_axis_tlast_reg <= output_axis_tlast_int;\n                output_axis_tuser_reg <= output_axis_tuser_int;\n            end else begin\n                // output is not ready and currently valid, store input in temp\n                temp_axis_tdata_reg <= output_axis_tdata_int;\n                temp_axis_tkeep_reg <= output_axis_tkeep_int;\n                temp_axis_tvalid_reg <= output_axis_tvalid_int;\n                temp_axis_tlast_reg <= output_axis_tlast_int;\n                temp_axis_tuser_reg <= output_axis_tuser_int;\n            end\n        end else if (output_axis_tready) begin\n            // input is not ready, but output is ready\n            output_axis_tdata_reg <= temp_axis_tdata_reg;\n            output_axis_tkeep_reg <= temp_axis_tkeep_reg;\n            output_axis_tvalid_reg <= temp_axis_tvalid_reg;\n            output_axis_tlast_reg <= temp_axis_tlast_reg;\n            output_axis_tuser_reg <= temp_axis_tuser_reg;\n            temp_axis_tdata_reg <= 0;\n            temp_axis_tkeep_reg <= 0;\n            temp_axis_tvalid_reg <= 0;\n            temp_axis_tlast_reg <= 0;\n            temp_axis_tuser_reg <= 0;\n        end\n    end\nend\n\nendmodule\n"]], "Diff Content": {"Delete": [[588, "        output_axis_tdata_reg <= 0;\n"], [589, "        output_axis_tkeep_reg <= 0;\n"], [590, "        output_axis_tvalid_reg <= 0;\n"], [591, "        output_axis_tlast_reg <= 0;\n"], [592, "        output_axis_tuser_reg <= 0;\n"], [593, "        output_axis_tready_int <= 0;\n"], [594, "        temp_axis_tdata_reg <= 0;\n"], [595, "        temp_axis_tkeep_reg <= 0;\n"], [596, "        temp_axis_tvalid_reg <= 0;\n"], [597, "        temp_axis_tlast_reg <= 0;\n"], [598, "        temp_axis_tuser_reg <= 0;\n"], [601, "        output_axis_tready_int <= output_axis_tready_int_early;\n"], [603, "        if (output_axis_tready_int) begin\n"], [605, "            if (output_axis_tready | ~output_axis_tvalid_reg) begin\n"], [607, "                output_axis_tdata_reg <= output_axis_tdata_int;\n"], [608, "                output_axis_tkeep_reg <= output_axis_tkeep_int;\n"], [609, "                output_axis_tvalid_reg <= output_axis_tvalid_int;\n"], [610, "                output_axis_tlast_reg <= output_axis_tlast_int;\n"], [611, "                output_axis_tuser_reg <= output_axis_tuser_int;\n"], [612, "            end else begin\n"], [614, "                temp_axis_tdata_reg <= output_axis_tdata_int;\n"], [615, "                temp_axis_tkeep_reg <= output_axis_tkeep_int;\n"], [616, "                temp_axis_tvalid_reg <= output_axis_tvalid_int;\n"], [617, "                temp_axis_tlast_reg <= output_axis_tlast_int;\n"], [618, "                temp_axis_tuser_reg <= output_axis_tuser_int;\n"], [619, "            end\n"], [620, "        end else if (output_axis_tready) begin\n"], [622, "            output_axis_tdata_reg <= temp_axis_tdata_reg;\n"], [623, "            output_axis_tkeep_reg <= temp_axis_tkeep_reg;\n"], [624, "            output_axis_tvalid_reg <= temp_axis_tvalid_reg;\n"], [625, "            output_axis_tlast_reg <= temp_axis_tlast_reg;\n"], [626, "            output_axis_tuser_reg <= temp_axis_tuser_reg;\n"], [627, "            temp_axis_tdata_reg <= 0;\n"], [628, "            temp_axis_tkeep_reg <= 0;\n"], [629, "            temp_axis_tvalid_reg <= 0;\n"], [630, "            temp_axis_tlast_reg <= 0;\n"], [631, "            temp_axis_tuser_reg <= 0;\n"], [632, "        end\n"]], "Add": [[598, "        output_axis_tvalid_reg <= 1'b0;\n"], [598, "        output_axis_tready_int_reg <= 1'b0;\n"], [598, "        temp_axis_tvalid_reg <= 1'b0;\n"], [632, "        output_axis_tvalid_reg <= output_axis_tvalid_next;\n"], [632, "        output_axis_tready_int_reg <= output_axis_tready_int_early;\n"], [632, "        temp_axis_tvalid_reg <= temp_axis_tvalid_next;\n"], [632, "    end\n"], [632, "    if (store_axis_int_to_output) begin\n"], [632, "        output_axis_tdata_reg <= output_axis_tdata_int;\n"], [632, "        output_axis_tkeep_reg <= output_axis_tkeep_int;\n"], [632, "        output_axis_tlast_reg <= output_axis_tlast_int;\n"], [632, "        output_axis_tuser_reg <= output_axis_tuser_int;\n"], [632, "    end else if (store_axis_temp_to_output) begin\n"], [632, "        output_axis_tdata_reg <= temp_axis_tdata_reg;\n"], [632, "        output_axis_tkeep_reg <= temp_axis_tkeep_reg;\n"], [632, "        output_axis_tlast_reg <= temp_axis_tlast_reg;\n"], [632, "        output_axis_tuser_reg <= temp_axis_tuser_reg;\n"], [632, "    end\n"], [632, "    if (store_axis_int_to_temp) begin\n"], [632, "        temp_axis_tdata_reg <= output_axis_tdata_int;\n"], [632, "        temp_axis_tkeep_reg <= output_axis_tkeep_int;\n"], [632, "        temp_axis_tlast_reg <= output_axis_tlast_int;\n"], [632, "        temp_axis_tuser_reg <= output_axis_tuser_int;\n"]]}}