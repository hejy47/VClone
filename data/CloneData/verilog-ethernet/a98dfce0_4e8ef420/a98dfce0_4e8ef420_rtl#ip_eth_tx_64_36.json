{"Source Block": ["verilog-ethernet/rtl/ip_eth_tx_64.v@484:569@HdlStmProcess", "            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n        hdr_sum_reg <= 0;\n        last_word_data_reg <= 0;\n        last_word_keep_reg <= 0;\n        input_ip_hdr_ready_reg <= 0;\n        input_ip_payload_tready_reg <= 0;\n        ip_dscp_reg <= 0;\n        ip_ecn_reg <= 0;\n        ip_length_reg <= 0;\n        ip_identification_reg <= 0;\n        ip_flags_reg <= 0;\n        ip_fragment_offset_reg <= 0;\n        ip_ttl_reg <= 0;\n        ip_protocol_reg <= 0;\n        ip_source_ip_reg <= 0;\n        ip_dest_ip_reg <= 0;\n        output_eth_hdr_valid_reg <= 0;\n        output_eth_dest_mac_reg <= 0;\n        output_eth_src_mac_reg <= 0;\n        output_eth_type_reg <= 0;\n        busy_reg <= 0;\n        error_payload_early_termination_reg <= 0;\n    end else begin\n        state_reg <= state_next;\n\n        frame_ptr_reg <= frame_ptr_next;\n\n        hdr_sum_reg <= hdr_sum_next;\n\n        input_ip_hdr_ready_reg <= input_ip_hdr_ready_next;\n        input_ip_payload_tready_reg <= input_ip_payload_tready_next;\n\n        output_eth_hdr_valid_reg <= output_eth_hdr_valid_next;\n\n        busy_reg <= state_next != STATE_IDLE;\n\n        error_payload_early_termination_reg <= error_payload_early_termination_next;\n\n        // datapath\n        if (store_ip_hdr) begin\n            output_eth_dest_mac_reg <= input_eth_dest_mac;\n            output_eth_src_mac_reg <= input_eth_src_mac;\n            output_eth_type_reg <= input_eth_type;\n            ip_dscp_reg <= input_ip_dscp;\n            ip_ecn_reg <= input_ip_ecn;\n            ip_length_reg <= input_ip_length;\n            ip_identification_reg <= input_ip_identification;\n            ip_flags_reg <= input_ip_flags;\n            ip_fragment_offset_reg <= input_ip_fragment_offset;\n            ip_ttl_reg <= input_ip_ttl;\n            ip_protocol_reg <= input_ip_protocol;\n            ip_source_ip_reg <= input_ip_source_ip;\n            ip_dest_ip_reg <= input_ip_dest_ip;\n        end\n\n        if (store_last_word) begin\n            last_word_data_reg <= output_eth_payload_tdata_int;\n            last_word_keep_reg <= output_eth_payload_tkeep_int;\n        end\n\n        if (flush_save) begin\n            save_ip_payload_tdata_reg <= 0;\n            save_ip_payload_tkeep_reg <= 0;\n            save_ip_payload_tlast_reg <= 0;\n            save_ip_payload_tuser_reg <= 0;\n        end else if (transfer_in_save) begin\n            save_ip_payload_tdata_reg <= input_ip_payload_tdata;\n            save_ip_payload_tkeep_reg <= input_ip_payload_tkeep;\n            save_ip_payload_tlast_reg <= input_ip_payload_tlast;\n            save_ip_payload_tuser_reg <= input_ip_payload_tuser;\n        end\n    end\nend\n\n// output datapath logic\nreg [63:0] output_eth_payload_tdata_reg = 0;\nreg [7:0]  output_eth_payload_tkeep_reg = 0;\nreg        output_eth_payload_tvalid_reg = 0;\n"], "Clone Blocks": [["verilog-ethernet/rtl/ip_eth_tx.v@359:430", "            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n        hdr_sum_reg <= 0;\n        last_word_data_reg <= 0;\n        input_ip_hdr_ready_reg <= 0;\n        input_ip_payload_tready_reg <= 0;\n        ip_dscp_reg <= 0;\n        ip_ecn_reg <= 0;\n        ip_length_reg <= 0;\n        ip_identification_reg <= 0;\n        ip_flags_reg <= 0;\n        ip_fragment_offset_reg <= 0;\n        ip_ttl_reg <= 0;\n        ip_protocol_reg <= 0;\n        ip_source_ip_reg <= 0;\n        ip_dest_ip_reg <= 0;\n        output_eth_hdr_valid_reg <= 0;\n        output_eth_dest_mac_reg <= 0;\n        output_eth_src_mac_reg <= 0;\n        output_eth_type_reg <= 0;\n        busy_reg <= 0;\n        error_payload_early_termination_reg <= 0;\n    end else begin\n        state_reg <= state_next;\n\n        frame_ptr_reg <= frame_ptr_next;\n\n        hdr_sum_reg <= hdr_sum_next;\n\n        input_ip_hdr_ready_reg <= input_ip_hdr_ready_next;\n        input_ip_payload_tready_reg <= input_ip_payload_tready_next;\n\n        output_eth_hdr_valid_reg <= output_eth_hdr_valid_next;\n\n        busy_reg <= state_next != STATE_IDLE;\n\n        error_payload_early_termination_reg <= error_payload_early_termination_next;\n\n        // datapath\n        if (store_ip_hdr) begin\n            output_eth_dest_mac_reg <= input_eth_dest_mac;\n            output_eth_src_mac_reg <= input_eth_src_mac;\n            output_eth_type_reg <= input_eth_type;\n            ip_dscp_reg <= input_ip_dscp;\n            ip_ecn_reg <= input_ip_ecn;\n            ip_length_reg <= input_ip_length;\n            ip_identification_reg <= input_ip_identification;\n            ip_flags_reg <= input_ip_flags;\n            ip_fragment_offset_reg <= input_ip_fragment_offset;\n            ip_ttl_reg <= input_ip_ttl;\n            ip_protocol_reg <= input_ip_protocol;\n            ip_source_ip_reg <= input_ip_source_ip;\n            ip_dest_ip_reg <= input_ip_dest_ip;\n        end\n\n        if (store_last_word) begin\n            last_word_data_reg <= output_eth_payload_tdata_int;\n        end\n    end\nend\n\n// output datapath logic\nreg [7:0]  output_eth_payload_tdata_reg = 0;\nreg        output_eth_payload_tvalid_reg = 0;\nreg        output_eth_payload_tlast_reg = 0;\n"], ["verilog-ethernet/rtl/udp_ip_tx.v@350:432", "            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n        last_word_data_reg <= 0;\n        input_udp_hdr_ready_reg <= 0;\n        input_udp_payload_tready_reg <= 0;\n        udp_source_port_reg <= 0;\n        udp_dest_port_reg <= 0;\n        udp_length_reg <= 0;\n        udp_checksum_reg <= 0;\n        output_ip_hdr_valid_reg <= 0;\n        output_eth_dest_mac_reg <= 0;\n        output_eth_src_mac_reg <= 0;\n        output_eth_type_reg <= 0;\n        output_ip_version_reg <= 0;\n        output_ip_ihl_reg <= 0;\n        output_ip_dscp_reg <= 0;\n        output_ip_ecn_reg <= 0;\n        output_ip_length_reg <= 0;\n        output_ip_identification_reg <= 0;\n        output_ip_flags_reg <= 0;\n        output_ip_fragment_offset_reg <= 0;\n        output_ip_ttl_reg <= 0;\n        output_ip_protocol_reg <= 0;\n        output_ip_header_checksum_reg <= 0;\n        output_ip_source_ip_reg <= 0;\n        output_ip_dest_ip_reg <= 0;\n        busy_reg <= 0;\n        error_payload_early_termination_reg <= 0;\n    end else begin\n        state_reg <= state_next;\n\n        frame_ptr_reg <= frame_ptr_next;\n\n        input_udp_hdr_ready_reg <= input_udp_hdr_ready_next;\n        input_udp_payload_tready_reg <= input_udp_payload_tready_next;\n\n        output_ip_hdr_valid_reg <= output_ip_hdr_valid_next;\n\n        busy_reg <= state_next != STATE_IDLE;\n\n        error_payload_early_termination_reg <= error_payload_early_termination_next;\n\n        // datapath\n        if (store_udp_hdr) begin\n            output_eth_dest_mac_reg <= input_eth_dest_mac;\n            output_eth_src_mac_reg <= input_eth_src_mac;\n            output_eth_type_reg <= input_eth_type;\n            output_ip_version_reg <= input_ip_version;\n            output_ip_ihl_reg <= input_ip_ihl;\n            output_ip_dscp_reg <= input_ip_dscp;\n            output_ip_ecn_reg <= input_ip_ecn;\n            output_ip_length_reg <= input_udp_length + 20;\n            output_ip_identification_reg <= input_ip_identification;\n            output_ip_flags_reg <= input_ip_flags;\n            output_ip_fragment_offset_reg <= input_ip_fragment_offset;\n            output_ip_ttl_reg <= input_ip_ttl;\n            output_ip_protocol_reg <= input_ip_protocol;\n            output_ip_header_checksum_reg <= input_ip_header_checksum;\n            output_ip_source_ip_reg <= input_ip_source_ip;\n            output_ip_dest_ip_reg <= input_ip_dest_ip;\n            udp_source_port_reg <= input_udp_source_port;\n            udp_dest_port_reg <= input_udp_dest_port;\n            udp_length_reg <= input_udp_length;\n            udp_checksum_reg <= input_udp_checksum;\n        end\n\n        if (store_last_word) begin\n            last_word_data_reg <= output_ip_payload_tdata_int;\n        end\n    end\nend\n\n// output datapath logic\nreg [7:0] output_ip_payload_tdata_reg = 0;\nreg       output_ip_payload_tvalid_reg = 0;\nreg       output_ip_payload_tlast_reg = 0;\n"], ["verilog-ethernet/rtl/udp_ip_tx_64.v@405:489", "            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n        last_word_data_reg <= 0;\n        last_word_keep_reg <= 0;\n        input_udp_hdr_ready_reg <= 0;\n        input_udp_payload_tready_reg <= 0;\n        udp_source_port_reg <= 0;\n        udp_dest_port_reg <= 0;\n        udp_length_reg <= 0;\n        udp_checksum_reg <= 0;\n        output_ip_hdr_valid_reg <= 0;\n        output_eth_dest_mac_reg <= 0;\n        output_eth_src_mac_reg <= 0;\n        output_eth_type_reg <= 0;\n        output_ip_version_reg <= 0;\n        output_ip_ihl_reg <= 0;\n        output_ip_dscp_reg <= 0;\n        output_ip_ecn_reg <= 0;\n        output_ip_length_reg <= 0;\n        output_ip_identification_reg <= 0;\n        output_ip_flags_reg <= 0;\n        output_ip_fragment_offset_reg <= 0;\n        output_ip_ttl_reg <= 0;\n        output_ip_protocol_reg <= 0;\n        output_ip_header_checksum_reg <= 0;\n        output_ip_source_ip_reg <= 0;\n        output_ip_dest_ip_reg <= 0;\n        busy_reg <= 0;\n        error_payload_early_termination_reg <= 0;\n    end else begin\n        state_reg <= state_next;\n\n        frame_ptr_reg <= frame_ptr_next;\n\n        input_udp_hdr_ready_reg <= input_udp_hdr_ready_next;\n        input_udp_payload_tready_reg <= input_udp_payload_tready_next;\n\n        output_ip_hdr_valid_reg <= output_ip_hdr_valid_next;\n\n        busy_reg <= state_next != STATE_IDLE;\n\n        error_payload_early_termination_reg <= error_payload_early_termination_next;\n\n        // datapath\n        if (store_udp_hdr) begin\n            output_eth_dest_mac_reg <= input_eth_dest_mac;\n            output_eth_src_mac_reg <= input_eth_src_mac;\n            output_eth_type_reg <= input_eth_type;\n            output_ip_version_reg <= input_ip_version;\n            output_ip_ihl_reg <= input_ip_ihl;\n            output_ip_dscp_reg <= input_ip_dscp;\n            output_ip_ecn_reg <= input_ip_ecn;\n            output_ip_length_reg <= input_udp_length + 20;\n            output_ip_identification_reg <= input_ip_identification;\n            output_ip_flags_reg <= input_ip_flags;\n            output_ip_fragment_offset_reg <= input_ip_fragment_offset;\n            output_ip_ttl_reg <= input_ip_ttl;\n            output_ip_protocol_reg <= input_ip_protocol;\n            output_ip_header_checksum_reg <= input_ip_header_checksum;\n            output_ip_source_ip_reg <= input_ip_source_ip;\n            output_ip_dest_ip_reg <= input_ip_dest_ip;\n            udp_source_port_reg <= input_udp_source_port;\n            udp_dest_port_reg <= input_udp_dest_port;\n            udp_length_reg <= input_udp_length;\n            udp_checksum_reg <= input_udp_checksum;\n        end\n\n        if (store_last_word) begin\n            last_word_data_reg <= output_ip_payload_tdata_int;\n            last_word_keep_reg <= output_ip_payload_tkeep_int;\n        end\n    end\nend\n\n// output datapath logic\nreg [63:0] output_ip_payload_tdata_reg = 0;\nreg [7:0]  output_ip_payload_tkeep_reg = 0;\nreg        output_ip_payload_tvalid_reg = 0;\n"]], "Diff Content": {"Delete": [[492, "        frame_ptr_reg <= 0;\n"], [493, "        hdr_sum_reg <= 0;\n"], [494, "        last_word_data_reg <= 0;\n"], [495, "        last_word_keep_reg <= 0;\n"], [496, "        input_ip_hdr_ready_reg <= 0;\n"], [497, "        input_ip_payload_tready_reg <= 0;\n"], [498, "        ip_dscp_reg <= 0;\n"], [499, "        ip_ecn_reg <= 0;\n"], [500, "        ip_length_reg <= 0;\n"], [501, "        ip_identification_reg <= 0;\n"], [502, "        ip_flags_reg <= 0;\n"], [503, "        ip_fragment_offset_reg <= 0;\n"], [504, "        ip_ttl_reg <= 0;\n"], [505, "        ip_protocol_reg <= 0;\n"], [506, "        ip_source_ip_reg <= 0;\n"], [507, "        ip_dest_ip_reg <= 0;\n"], [508, "        output_eth_hdr_valid_reg <= 0;\n"], [509, "        output_eth_dest_mac_reg <= 0;\n"], [510, "        output_eth_src_mac_reg <= 0;\n"], [511, "        output_eth_type_reg <= 0;\n"], [512, "        busy_reg <= 0;\n"], [513, "        error_payload_early_termination_reg <= 0;\n"], [531, "        if (store_ip_hdr) begin\n"], [532, "            output_eth_dest_mac_reg <= input_eth_dest_mac;\n"], [533, "            output_eth_src_mac_reg <= input_eth_src_mac;\n"], [534, "            output_eth_type_reg <= input_eth_type;\n"], [535, "            ip_dscp_reg <= input_ip_dscp;\n"], [536, "            ip_ecn_reg <= input_ip_ecn;\n"], [537, "            ip_length_reg <= input_ip_length;\n"], [538, "            ip_identification_reg <= input_ip_identification;\n"], [539, "            ip_flags_reg <= input_ip_flags;\n"], [540, "            ip_fragment_offset_reg <= input_ip_fragment_offset;\n"], [541, "            ip_ttl_reg <= input_ip_ttl;\n"], [542, "            ip_protocol_reg <= input_ip_protocol;\n"], [543, "            ip_source_ip_reg <= input_ip_source_ip;\n"], [544, "            ip_dest_ip_reg <= input_ip_dest_ip;\n"], [545, "        end\n"], [547, "        if (store_last_word) begin\n"], [548, "            last_word_data_reg <= output_eth_payload_tdata_int;\n"], [549, "            last_word_keep_reg <= output_eth_payload_tkeep_int;\n"], [550, "        end\n"], [553, "            save_ip_payload_tdata_reg <= 0;\n"], [554, "            save_ip_payload_tkeep_reg <= 0;\n"], [555, "            save_ip_payload_tlast_reg <= 0;\n"], [556, "            save_ip_payload_tuser_reg <= 0;\n"], [558, "            save_ip_payload_tdata_reg <= input_ip_payload_tdata;\n"], [559, "            save_ip_payload_tkeep_reg <= input_ip_payload_tkeep;\n"], [561, "            save_ip_payload_tuser_reg <= input_ip_payload_tuser;\n"], [564, "end\n"]], "Add": [[513, "        frame_ptr_reg <= 16'd0;\n"], [513, "        hdr_sum_reg <= 16'd0;\n"], [513, "        input_ip_hdr_ready_reg <= 1'b0;\n"], [513, "        input_ip_payload_tready_reg <= 1'b0;\n"], [513, "        output_eth_hdr_valid_reg <= 1'b0;\n"], [513, "        save_ip_payload_tlast_reg <= 1'b0;\n"], [513, "        busy_reg <= 1'b0;\n"], [513, "        error_payload_early_termination_reg <= 1'b0;\n"], [556, "            save_ip_payload_tlast_reg <= 1'b0;\n"]]}}