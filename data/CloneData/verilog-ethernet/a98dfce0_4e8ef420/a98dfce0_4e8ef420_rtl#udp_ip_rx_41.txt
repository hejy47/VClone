Source Block: verilog-ethernet/rtl/udp_ip_rx.v@226:390@HdlStmProcess

assign busy = busy_reg;
assign error_header_early_termination = error_header_early_termination_reg;
assign error_payload_early_termination = error_payload_early_termination_reg;

always @* begin
    state_next = STATE_IDLE;

    input_ip_hdr_ready_next = 0;
    input_ip_payload_tready_next = 0;

    store_ip_hdr = 0;
    store_udp_source_port_0 = 0;
    store_udp_source_port_1 = 0;
    store_udp_dest_port_0 = 0;
    store_udp_dest_port_1 = 0;
    store_udp_length_0 = 0;
    store_udp_length_1 = 0;
    store_udp_checksum_0 = 0;
    store_udp_checksum_1 = 0;

    store_last_word = 0;

    frame_ptr_next = frame_ptr_reg;

    output_udp_hdr_valid_next = output_udp_hdr_valid_reg & ~output_udp_hdr_ready;

    error_header_early_termination_next = 0;
    error_payload_early_termination_next = 0;

    output_udp_payload_tdata_int = 0;
    output_udp_payload_tvalid_int = 0;
    output_udp_payload_tlast_int = 0;
    output_udp_payload_tuser_int = 0;

    case (state_reg)
        STATE_IDLE: begin
            // idle state - wait for header
            frame_ptr_next = 0;
            input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;

            if (input_ip_hdr_ready & input_ip_hdr_valid) begin
                input_ip_hdr_ready_next = 0;
                input_ip_payload_tready_next = 1;
                store_ip_hdr = 1;
                state_next = STATE_READ_HEADER;
            end else begin
                state_next = STATE_IDLE;
            end
        end
        STATE_READ_HEADER: begin
            // read header state
            input_ip_payload_tready_next = 1;

            if (input_ip_payload_tready & input_ip_payload_tvalid) begin
                // word transfer in - store it
                frame_ptr_next = frame_ptr_reg+1;
                state_next = STATE_READ_HEADER;

                case (frame_ptr_reg)
                    8'h00: store_udp_source_port_1 = 1;
                    8'h01: store_udp_source_port_0 = 1;
                    8'h02: store_udp_dest_port_1 = 1;
                    8'h03: store_udp_dest_port_0 = 1;
                    8'h04: store_udp_length_1 = 1;
                    8'h05: store_udp_length_0 = 1;
                    8'h06: store_udp_checksum_1 = 1;
                    8'h07: begin
                        store_udp_checksum_0 = 1;
                        output_udp_hdr_valid_next = 1;
                        input_ip_payload_tready_next = output_udp_payload_tready_int_early;
                        state_next = STATE_READ_PAYLOAD;
                    end
                endcase

                if (input_ip_payload_tlast) begin
                    error_header_early_termination_next = 1;
                    output_udp_hdr_valid_next = 0;
                    input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;
                    input_ip_payload_tready_next = 0;
                    state_next = STATE_IDLE;
                end

            end else begin
                state_next = STATE_READ_HEADER;
            end
        end
        STATE_READ_PAYLOAD: begin
            // read payload
            input_ip_payload_tready_next = output_udp_payload_tready_int_early;

            output_udp_payload_tdata_int = input_ip_payload_tdata;
            output_udp_payload_tvalid_int = input_ip_payload_tvalid;
            output_udp_payload_tlast_int = input_ip_payload_tlast;
            output_udp_payload_tuser_int = input_ip_payload_tuser;

            if (input_ip_payload_tready & input_ip_payload_tvalid) begin
                // word transfer through
                frame_ptr_next = frame_ptr_reg+1;
                if (input_ip_payload_tlast) begin
                    if (frame_ptr_next != output_udp_length_reg) begin
                        // end of frame, but length does not match
                        output_udp_payload_tuser_int = 1;
                        error_payload_early_termination_next = 1;
                    end
                    input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;
                    input_ip_payload_tready_next = 0;
                    state_next = STATE_IDLE;
                end else begin
                    if (frame_ptr_next == output_udp_length_reg) begin
                        store_last_word = 1;
                        output_udp_payload_tvalid_int = 0;
                        state_next = STATE_READ_PAYLOAD_LAST;
                    end else begin
                        state_next = STATE_READ_PAYLOAD;
                    end
                end
            end else begin
                state_next = STATE_READ_PAYLOAD;
            end
        end
        STATE_READ_PAYLOAD_LAST: begin
            // read and discard until end of frame
            input_ip_payload_tready_next = output_udp_payload_tready_int_early;

            output_udp_payload_tdata_int = last_word_data_reg;
            output_udp_payload_tvalid_int = input_ip_payload_tvalid & input_ip_payload_tlast;
            output_udp_payload_tlast_int = input_ip_payload_tlast;
            output_udp_payload_tuser_int = input_ip_payload_tuser;

            if (input_ip_payload_tready & input_ip_payload_tvalid) begin
                if (input_ip_payload_tlast) begin
                    input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;
                    input_ip_payload_tready_next = 0;
                    state_next = STATE_IDLE;
                end else begin
                    state_next = STATE_READ_PAYLOAD_LAST;
                end
            end else begin
                state_next = STATE_READ_PAYLOAD_LAST;
            end
        end
        STATE_WAIT_LAST: begin
            // wait for end of frame; read and discard
            input_ip_payload_tready_next = 1;

            if (input_ip_payload_tready & input_ip_payload_tvalid) begin
                if (input_ip_payload_tlast) begin
                    input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;
                    input_ip_payload_tready_next = 0;
                    state_next = STATE_IDLE;
                end else begin
                    state_next = STATE_WAIT_LAST;
                end
            end else begin
                state_next = STATE_WAIT_LAST;
            end
        end
    endcase
end

always @(posedge clk) begin
    if (rst) begin
        state_reg <= STATE_IDLE;
        frame_ptr_reg <= 0;

Diff Content:
- 234     input_ip_hdr_ready_next = 0;
- 235     input_ip_payload_tready_next = 0;
- 237     store_ip_hdr = 0;
- 238     store_udp_source_port_0 = 0;
- 239     store_udp_source_port_1 = 0;
- 240     store_udp_dest_port_0 = 0;
- 241     store_udp_dest_port_1 = 0;
- 242     store_udp_length_0 = 0;
- 243     store_udp_length_1 = 0;
- 244     store_udp_checksum_0 = 0;
- 245     store_udp_checksum_1 = 0;
- 247     store_last_word = 0;
- 253     error_header_early_termination_next = 0;
- 254     error_payload_early_termination_next = 0;
- 256     output_udp_payload_tdata_int = 0;
- 257     output_udp_payload_tvalid_int = 0;
- 258     output_udp_payload_tlast_int = 0;
- 259     output_udp_payload_tuser_int = 0;
- 264             frame_ptr_next = 0;
- 268                 input_ip_hdr_ready_next = 0;
- 269                 input_ip_payload_tready_next = 1;
- 270                 store_ip_hdr = 1;
- 278             input_ip_payload_tready_next = 1;
- 282                 frame_ptr_next = frame_ptr_reg+1;
- 286                     8'h00: store_udp_source_port_1 = 1;
- 287                     8'h01: store_udp_source_port_0 = 1;
- 288                     8'h02: store_udp_dest_port_1 = 1;
- 289                     8'h03: store_udp_dest_port_0 = 1;
- 290                     8'h04: store_udp_length_1 = 1;
- 291                     8'h05: store_udp_length_0 = 1;
- 292                     8'h06: store_udp_checksum_1 = 1;
- 294                         store_udp_checksum_0 = 1;
- 295                         output_udp_hdr_valid_next = 1;
- 302                     error_header_early_termination_next = 1;
- 303                     output_udp_hdr_valid_next = 0;
- 305                     input_ip_payload_tready_next = 0;
- 324                 frame_ptr_next = frame_ptr_reg+1;
- 328                         output_udp_payload_tuser_int = 1;
- 329                         error_payload_early_termination_next = 1;
- 332                     input_ip_payload_tready_next = 0;
- 336                         store_last_word = 1;
- 337                         output_udp_payload_tvalid_int = 0;
- 359                     input_ip_payload_tready_next = 0;
- 370             input_ip_payload_tready_next = 1;
- 375                     input_ip_payload_tready_next = 0;
+ 235     input_ip_hdr_ready_next = 1'b0;
+ 235     input_ip_payload_tready_next = 1'b0;
+ 245     store_ip_hdr = 1'b0;
+ 245     store_udp_source_port_0 = 1'b0;
+ 245     store_udp_source_port_1 = 1'b0;
+ 245     store_udp_dest_port_0 = 1'b0;
+ 245     store_udp_dest_port_1 = 1'b0;
+ 245     store_udp_length_0 = 1'b0;
+ 245     store_udp_length_1 = 1'b0;
+ 245     store_udp_checksum_0 = 1'b0;
+ 245     store_udp_checksum_1 = 1'b0;
+ 247     store_last_word = 1'b0;
+ 254     error_header_early_termination_next = 1'b0;
+ 254     error_payload_early_termination_next = 1'b0;
+ 259     output_udp_payload_tdata_int = 8'd0;
+ 259     output_udp_payload_tvalid_int = 1'b0;
+ 259     output_udp_payload_tlast_int = 1'b0;
+ 259     output_udp_payload_tuser_int = 1'b0;
+ 264             frame_ptr_next = 16'd0;
+ 270                 input_ip_hdr_ready_next = 1'b0;
+ 270                 input_ip_payload_tready_next = 1'b1;
+ 270                 store_ip_hdr = 1'b1;
+ 278             input_ip_payload_tready_next = 1'b1;
+ 282                 frame_ptr_next = frame_ptr_reg + 16'd1;
+ 292                     8'h00: store_udp_source_port_1 = 1'b1;
+ 292                     8'h01: store_udp_source_port_0 = 1'b1;
+ 292                     8'h02: store_udp_dest_port_1 = 1'b1;
+ 292                     8'h03: store_udp_dest_port_0 = 1'b1;
+ 292                     8'h04: store_udp_length_1 = 1'b1;
+ 292                     8'h05: store_udp_length_0 = 1'b1;
+ 292                     8'h06: store_udp_checksum_1 = 1'b1;
+ 295                         store_udp_checksum_0 = 1'b1;
+ 295                         output_udp_hdr_valid_next = 1'b1;
+ 303                     error_header_early_termination_next = 1'b1;
+ 303                     output_udp_hdr_valid_next = 1'b0;
+ 305                     input_ip_payload_tready_next = 1'b0;
+ 324                 frame_ptr_next = frame_ptr_reg + 16'd1;
+ 329                         output_udp_payload_tuser_int = 1'b1;
+ 329                         error_payload_early_termination_next = 1'b1;
+ 332                     input_ip_payload_tready_next = 1'b0;
+ 337                         store_last_word = 1'b1;
+ 337                         output_udp_payload_tvalid_int = 1'b0;
+ 359                     input_ip_payload_tready_next = 1'b0;
+ 370             input_ip_payload_tready_next = 1'b1;
+ 375                     input_ip_payload_tready_next = 1'b0;

Clone Blocks:
Clone Blocks 1:
verilog-ethernet/rtl/udp_ip_rx_64.v@253:413
        4'd7: count2keep = 8'b01111111;
        4'd8: count2keep = 8'b11111111;
    endcase
endfunction

always @* begin
    state_next = STATE_IDLE;

    input_ip_hdr_ready_next = 0;
    input_ip_payload_tready_next = 0;

    store_ip_hdr = 0;
    store_hdr_word_0 = 0;

    store_last_word = 0;

    frame_ptr_next = frame_ptr_reg;

    output_udp_hdr_valid_next = output_udp_hdr_valid_reg & ~output_udp_hdr_ready;

    error_header_early_termination_next = 0;
    error_payload_early_termination_next = 0;

    output_udp_payload_tdata_int = 0;
    output_udp_payload_tkeep_int = 0;
    output_udp_payload_tvalid_int = 0;
    output_udp_payload_tlast_int = 0;
    output_udp_payload_tuser_int = 0;

    case (state_reg)
        STATE_IDLE: begin
            // idle state - wait for header
            frame_ptr_next = 0;
            input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;

            if (input_ip_hdr_ready & input_ip_hdr_valid) begin
                input_ip_hdr_ready_next = 0;
                input_ip_payload_tready_next = 1;
                store_ip_hdr = 1;
                state_next = STATE_READ_HEADER;
            end else begin
                state_next = STATE_IDLE;
            end
        end
        STATE_READ_HEADER: begin
            // read header state
            input_ip_payload_tready_next = 1;

            if (input_ip_payload_tready & input_ip_payload_tvalid) begin
                // word transfer in - store it
                frame_ptr_next = frame_ptr_reg+8;
                state_next = STATE_READ_HEADER;

                case (frame_ptr_reg)
                    8'h00: begin
                        store_hdr_word_0 = 1;
                        output_udp_hdr_valid_next = 1;
                        input_ip_payload_tready_next = output_udp_payload_tready_int_early;
                        state_next = STATE_READ_PAYLOAD;
                    end
                endcase

                if (input_ip_payload_tlast) begin
                    error_header_early_termination_next = 1;
                    output_udp_hdr_valid_next = 0;
                    input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;
                    input_ip_payload_tready_next = 0;
                    state_next = STATE_IDLE;
                end

            end else begin
                state_next = STATE_READ_HEADER;
            end
        end
        STATE_READ_PAYLOAD: begin
            // read payload
            input_ip_payload_tready_next = output_udp_payload_tready_int_early;

            output_udp_payload_tdata_int = input_ip_payload_tdata;
            output_udp_payload_tkeep_int = input_ip_payload_tkeep;
            output_udp_payload_tvalid_int = input_ip_payload_tvalid;
            output_udp_payload_tlast_int = input_ip_payload_tlast;
            output_udp_payload_tuser_int = input_ip_payload_tuser;

            if (input_ip_payload_tready & input_ip_payload_tvalid) begin
                // word transfer through
                frame_ptr_next = frame_ptr_reg+keep2count(input_ip_payload_tkeep);
                if (frame_ptr_next >= output_udp_length_reg) begin
                    // have entire payload
                    frame_ptr_next = output_udp_length_reg;
                    output_udp_payload_tkeep_int = input_ip_payload_tkeep & count2keep(output_udp_length_reg - frame_ptr_reg);
                    if (input_ip_payload_tlast) begin
                        input_ip_payload_tready_next = 0;
                        input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;
                        state_next = STATE_IDLE;
                    end else begin
                        store_last_word = 1;
                        output_udp_payload_tvalid_int = 0;
                        state_next = STATE_READ_PAYLOAD_LAST;
                    end
                end else begin
                    if (input_ip_payload_tlast) begin
                        // end of frame, but length does not match
                        error_payload_early_termination_next = 1;
                        output_udp_payload_tuser_int = 1;
                        input_ip_payload_tready_next = 0;
                        input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;
                        state_next = STATE_IDLE;
                    end else begin
                        state_next = STATE_READ_PAYLOAD;
                    end
                end
            end else begin
                state_next = STATE_READ_PAYLOAD;
            end
        end
        STATE_READ_PAYLOAD_LAST: begin
            // read and discard until end of frame
            input_ip_payload_tready_next = output_udp_payload_tready_int_early;

            output_udp_payload_tdata_int = last_word_data_reg;
            output_udp_payload_tkeep_int = last_word_keep_reg;
            output_udp_payload_tvalid_int = input_ip_payload_tvalid & input_ip_payload_tlast;
            output_udp_payload_tlast_int = input_ip_payload_tlast;
            output_udp_payload_tuser_int = input_ip_payload_tuser;

            if (input_ip_payload_tready & input_ip_payload_tvalid) begin
                if (input_ip_payload_tlast) begin
                    input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;
                    input_ip_payload_tready_next = 0;
                    state_next = STATE_IDLE;
                end else begin
                    state_next = STATE_READ_PAYLOAD_LAST;
                end
            end else begin
                state_next = STATE_READ_PAYLOAD_LAST;
            end
        end
        STATE_WAIT_LAST: begin
            // wait for end of frame; read and discard
            input_ip_payload_tready_next = 1;

            if (input_ip_payload_tready & input_ip_payload_tvalid) begin
                if (input_ip_payload_tlast) begin
                    input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;
                    input_ip_payload_tready_next = 0;
                    state_next = STATE_IDLE;
                end else begin
                    state_next = STATE_WAIT_LAST;
                end
            end else begin
                state_next = STATE_WAIT_LAST;
            end
        end
    endcase
end

always @(posedge clk) begin
    if (rst) begin
        state_reg <= STATE_IDLE;
        frame_ptr_reg <= 0;

