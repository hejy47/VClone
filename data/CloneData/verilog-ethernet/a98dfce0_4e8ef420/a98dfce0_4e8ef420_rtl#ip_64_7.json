{"Source Block": ["verilog-ethernet/rtl/ip_64.v@259:325@HdlStmProcess", "assign arp_request_valid = arp_request_valid_reg | (input_ip_hdr_valid & ~input_ip_hdr_ready_reg);\nassign arp_request_ip = input_ip_dest_ip;\n\nassign tx_error_arp_failed = arp_response_error;\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    arp_request_valid_next = 0;\n    drop_packet_next = 0;\n\n    input_ip_hdr_ready_next = 0;\n\n    outgoing_ip_hdr_valid_next = outgoing_ip_hdr_valid_reg & ~outgoing_ip_hdr_ready;\n    outgoing_eth_dest_mac_next = outgoing_eth_dest_mac_reg;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // wait for outgoing packet\n            if (input_ip_hdr_valid) begin\n                // initiate ARP request\n                arp_request_valid_next = 1;\n                state_next = STATE_ARP_QUERY;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_ARP_QUERY: begin\n            arp_request_valid_next = 1;\n\n            if (arp_response_valid) begin\n                // wait for ARP reponse\n                if (arp_response_error) begin\n                    // did not get MAC address; drop packet\n                    input_ip_hdr_ready_next = 1;\n                    arp_request_valid_next = 0;\n                    drop_packet_next = 1;\n                    state_next = STATE_WAIT_PACKET;\n                end else begin\n                    // got MAC address; send packet\n                    input_ip_hdr_ready_next = 1;\n                    arp_request_valid_next = 0;\n                    outgoing_ip_hdr_valid_next = 1;\n                    outgoing_eth_dest_mac_next = arp_response_mac;\n                    state_next = STATE_WAIT_PACKET;\n                end\n            end else begin\n                state_next = STATE_ARP_QUERY;\n            end\n        end\n        STATE_WAIT_PACKET: begin\n            drop_packet_next = drop_packet_reg;\n\n            // wait for packet transfer to complete\n            if (input_ip_payload_tlast & input_ip_payload_tready & input_ip_payload_tvalid) begin\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_WAIT_PACKET;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        arp_request_valid_reg <= 0;\n"], "Clone Blocks": [["verilog-ethernet/rtl/ip.v@250:316", "assign arp_request_valid = arp_request_valid_reg | (input_ip_hdr_valid & ~input_ip_hdr_ready_reg);\nassign arp_request_ip = input_ip_dest_ip;\n\nassign tx_error_arp_failed = arp_response_error;\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    arp_request_valid_next = 0;\n    drop_packet_next = 0;\n\n    input_ip_hdr_ready_next = 0;\n\n    outgoing_ip_hdr_valid_next = outgoing_ip_hdr_valid_reg & ~outgoing_ip_hdr_ready;\n    outgoing_eth_dest_mac_next = outgoing_eth_dest_mac_reg;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // wait for outgoing packet\n            if (input_ip_hdr_valid) begin\n                // initiate ARP request\n                arp_request_valid_next = 1;\n                state_next = STATE_ARP_QUERY;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_ARP_QUERY: begin\n            arp_request_valid_next = 1;\n\n            if (arp_response_valid) begin\n                // wait for ARP reponse\n                if (arp_response_error) begin\n                    // did not get MAC address; drop packet\n                    input_ip_hdr_ready_next = 1;\n                    arp_request_valid_next = 0;\n                    drop_packet_next = 1;\n                    state_next = STATE_WAIT_PACKET;\n                end else begin\n                    // got MAC address; send packet\n                    input_ip_hdr_ready_next = 1;\n                    arp_request_valid_next = 0;\n                    outgoing_ip_hdr_valid_next = 1;\n                    outgoing_eth_dest_mac_next = arp_response_mac;\n                    state_next = STATE_WAIT_PACKET;\n                end\n            end else begin\n                state_next = STATE_ARP_QUERY;\n            end\n        end\n        STATE_WAIT_PACKET: begin\n            drop_packet_next = drop_packet_reg;\n\n            // wait for packet transfer to complete\n            if (input_ip_payload_tlast & input_ip_payload_tready & input_ip_payload_tvalid) begin\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_WAIT_PACKET;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        arp_request_valid_reg <= 0;\n"]], "Diff Content": {"Delete": [[267, "    arp_request_valid_next = 0;\n"], [268, "    drop_packet_next = 0;\n"], [270, "    input_ip_hdr_ready_next = 0;\n"], [280, "                arp_request_valid_next = 1;\n"], [287, "            arp_request_valid_next = 1;\n"], [293, "                    input_ip_hdr_ready_next = 1;\n"], [294, "                    arp_request_valid_next = 0;\n"], [295, "                    drop_packet_next = 1;\n"], [299, "                    input_ip_hdr_ready_next = 1;\n"], [300, "                    arp_request_valid_next = 0;\n"], [301, "                    outgoing_ip_hdr_valid_next = 1;\n"]], "Add": [[268, "    arp_request_valid_next = 1'b0;\n"], [268, "    drop_packet_next = 1'b0;\n"], [270, "    input_ip_hdr_ready_next = 1'b0;\n"], [280, "                arp_request_valid_next = 1'b1;\n"], [287, "            arp_request_valid_next = 1'b1;\n"], [295, "                    input_ip_hdr_ready_next = 1'b1;\n"], [295, "                    arp_request_valid_next = 1'b0;\n"], [295, "                    drop_packet_next = 1'b1;\n"], [301, "                    input_ip_hdr_ready_next = 1'b1;\n"], [301, "                    arp_request_valid_next = 1'b0;\n"], [301, "                    outgoing_ip_hdr_valid_next = 1'b1;\n"]]}}