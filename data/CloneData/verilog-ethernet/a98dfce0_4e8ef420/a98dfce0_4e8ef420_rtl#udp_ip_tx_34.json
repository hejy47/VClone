{"Source Block": ["verilog-ethernet/rtl/udp_ip_tx.v@210:358@HdlStmProcess", "assign output_ip_dest_ip = output_ip_dest_ip_reg;\n\nassign busy = busy_reg;\nassign error_payload_early_termination = error_payload_early_termination_reg;\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    input_udp_hdr_ready_next = 0;\n    input_udp_payload_tready_next = 0;\n\n    store_udp_hdr = 0;\n\n    store_last_word = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    output_ip_hdr_valid_next = output_ip_hdr_valid_reg & ~output_ip_hdr_ready;\n\n    error_payload_early_termination_next = 0;\n\n    output_ip_payload_tdata_int = 0;\n    output_ip_payload_tvalid_int = 0;\n    output_ip_payload_tlast_int = 0;\n    output_ip_payload_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 0;\n            input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;\n\n            if (input_udp_hdr_ready & input_udp_hdr_valid) begin\n                store_udp_hdr = 1;\n                input_udp_hdr_ready_next = 0;\n                output_ip_hdr_valid_next = 1;\n                if (output_ip_payload_tready_int) begin\n                    output_ip_payload_tvalid_int = 1;\n                    output_ip_payload_tdata_int = input_udp_source_port[15: 8];\n                    frame_ptr_next = 1;\n                end\n                state_next = STATE_WRITE_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_WRITE_HEADER: begin\n            // write header state\n            if (output_ip_payload_tready_int) begin\n                // word transfer out\n                frame_ptr_next = frame_ptr_reg+1;\n                output_ip_payload_tvalid_int = 1;\n                state_next = STATE_WRITE_HEADER;\n                case (frame_ptr_reg)\n                    8'h00: output_ip_payload_tdata_int = input_udp_source_port[15: 8];\n                    8'h01: output_ip_payload_tdata_int = udp_source_port_reg[ 7: 0];\n                    8'h02: output_ip_payload_tdata_int = udp_dest_port_reg[15: 8];\n                    8'h03: output_ip_payload_tdata_int = udp_dest_port_reg[ 7: 0];\n                    8'h04: output_ip_payload_tdata_int = udp_length_reg[15: 8];\n                    8'h05: output_ip_payload_tdata_int = udp_length_reg[ 7: 0];\n                    8'h06: output_ip_payload_tdata_int = udp_checksum_reg[15: 8];\n                    8'h07: begin\n                        output_ip_payload_tdata_int = udp_checksum_reg[ 7: 0];\n                        input_udp_payload_tready_next = output_ip_payload_tready_int_early;\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                endcase\n            end else begin\n                state_next = STATE_WRITE_HEADER;\n            end\n        end\n        STATE_WRITE_PAYLOAD: begin\n            // write payload\n            input_udp_payload_tready_next = output_ip_payload_tready_int_early;\n\n            output_ip_payload_tdata_int = input_udp_payload_tdata;\n            output_ip_payload_tvalid_int = input_udp_payload_tvalid;\n            output_ip_payload_tlast_int = input_udp_payload_tlast;\n            output_ip_payload_tuser_int = input_udp_payload_tuser;\n\n            if (input_udp_payload_tready & input_udp_payload_tvalid) begin\n                // word transfer through\n                frame_ptr_next = frame_ptr_reg+1;\n                if (input_udp_payload_tlast) begin\n                    if (frame_ptr_next != udp_length_reg) begin\n                        // end of frame, but length does not match\n                        output_ip_payload_tuser_int = 1;\n                        error_payload_early_termination_next = 1;\n                    end\n                    input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                    input_udp_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    if (frame_ptr_next == udp_length_reg) begin\n                        store_last_word = 1;\n                        output_ip_payload_tvalid_int = 0;\n                        state_next = STATE_WRITE_PAYLOAD_LAST;\n                    end else begin\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD;\n            end\n        end\n        STATE_WRITE_PAYLOAD_LAST: begin\n            // read and discard until end of frame\n            input_udp_payload_tready_next = output_ip_payload_tready_int_early;\n\n            output_ip_payload_tdata_int = last_word_data_reg;\n            output_ip_payload_tvalid_int = input_udp_payload_tvalid & input_udp_payload_tlast;\n            output_ip_payload_tlast_int = input_udp_payload_tlast;\n            output_ip_payload_tuser_int = input_udp_payload_tuser;\n\n            if (input_udp_payload_tready & input_udp_payload_tvalid) begin\n                if (input_udp_payload_tlast) begin\n                    input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                    input_udp_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WRITE_PAYLOAD_LAST;\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD_LAST;\n            end\n        end\n        STATE_WAIT_LAST: begin\n            // wait for end of frame; read and discard\n            input_udp_payload_tready_next = 1;\n\n            if (input_udp_payload_tvalid) begin\n                if (input_udp_payload_tlast) begin\n                    input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                    input_udp_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WAIT_LAST;\n                end\n            end else begin\n                state_next = STATE_WAIT_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], "Clone Blocks": [["verilog-ethernet/rtl/udp_ip_rx_64.v@253:413", "        4'd7: count2keep = 8'b01111111;\n        4'd8: count2keep = 8'b11111111;\n    endcase\nendfunction\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    input_ip_hdr_ready_next = 0;\n    input_ip_payload_tready_next = 0;\n\n    store_ip_hdr = 0;\n    store_hdr_word_0 = 0;\n\n    store_last_word = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    output_udp_hdr_valid_next = output_udp_hdr_valid_reg & ~output_udp_hdr_ready;\n\n    error_header_early_termination_next = 0;\n    error_payload_early_termination_next = 0;\n\n    output_udp_payload_tdata_int = 0;\n    output_udp_payload_tkeep_int = 0;\n    output_udp_payload_tvalid_int = 0;\n    output_udp_payload_tlast_int = 0;\n    output_udp_payload_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for header\n            frame_ptr_next = 0;\n            input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;\n\n            if (input_ip_hdr_ready & input_ip_hdr_valid) begin\n                input_ip_hdr_ready_next = 0;\n                input_ip_payload_tready_next = 1;\n                store_ip_hdr = 1;\n                state_next = STATE_READ_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_READ_HEADER: begin\n            // read header state\n            input_ip_payload_tready_next = 1;\n\n            if (input_ip_payload_tready & input_ip_payload_tvalid) begin\n                // word transfer in - store it\n                frame_ptr_next = frame_ptr_reg+8;\n                state_next = STATE_READ_HEADER;\n\n                case (frame_ptr_reg)\n                    8'h00: begin\n                        store_hdr_word_0 = 1;\n                        output_udp_hdr_valid_next = 1;\n                        input_ip_payload_tready_next = output_udp_payload_tready_int_early;\n                        state_next = STATE_READ_PAYLOAD;\n                    end\n                endcase\n\n                if (input_ip_payload_tlast) begin\n                    error_header_early_termination_next = 1;\n                    output_udp_hdr_valid_next = 0;\n                    input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;\n                    input_ip_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end\n\n            end else begin\n                state_next = STATE_READ_HEADER;\n            end\n        end\n        STATE_READ_PAYLOAD: begin\n            // read payload\n            input_ip_payload_tready_next = output_udp_payload_tready_int_early;\n\n            output_udp_payload_tdata_int = input_ip_payload_tdata;\n            output_udp_payload_tkeep_int = input_ip_payload_tkeep;\n            output_udp_payload_tvalid_int = input_ip_payload_tvalid;\n            output_udp_payload_tlast_int = input_ip_payload_tlast;\n            output_udp_payload_tuser_int = input_ip_payload_tuser;\n\n            if (input_ip_payload_tready & input_ip_payload_tvalid) begin\n                // word transfer through\n                frame_ptr_next = frame_ptr_reg+keep2count(input_ip_payload_tkeep);\n                if (frame_ptr_next >= output_udp_length_reg) begin\n                    // have entire payload\n                    frame_ptr_next = output_udp_length_reg;\n                    output_udp_payload_tkeep_int = input_ip_payload_tkeep & count2keep(output_udp_length_reg - frame_ptr_reg);\n                    if (input_ip_payload_tlast) begin\n                        input_ip_payload_tready_next = 0;\n                        input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        store_last_word = 1;\n                        output_udp_payload_tvalid_int = 0;\n                        state_next = STATE_READ_PAYLOAD_LAST;\n                    end\n                end else begin\n                    if (input_ip_payload_tlast) begin\n                        // end of frame, but length does not match\n                        error_payload_early_termination_next = 1;\n                        output_udp_payload_tuser_int = 1;\n                        input_ip_payload_tready_next = 0;\n                        input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        state_next = STATE_READ_PAYLOAD;\n                    end\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD;\n            end\n        end\n        STATE_READ_PAYLOAD_LAST: begin\n            // read and discard until end of frame\n            input_ip_payload_tready_next = output_udp_payload_tready_int_early;\n\n            output_udp_payload_tdata_int = last_word_data_reg;\n            output_udp_payload_tkeep_int = last_word_keep_reg;\n            output_udp_payload_tvalid_int = input_ip_payload_tvalid & input_ip_payload_tlast;\n            output_udp_payload_tlast_int = input_ip_payload_tlast;\n            output_udp_payload_tuser_int = input_ip_payload_tuser;\n\n            if (input_ip_payload_tready & input_ip_payload_tvalid) begin\n                if (input_ip_payload_tlast) begin\n                    input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;\n                    input_ip_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_READ_PAYLOAD_LAST;\n                end\n            end else begin\n                state_next = STATE_READ_PAYLOAD_LAST;\n            end\n        end\n        STATE_WAIT_LAST: begin\n            // wait for end of frame; read and discard\n            input_ip_payload_tready_next = 1;\n\n            if (input_ip_payload_tready & input_ip_payload_tvalid) begin\n                if (input_ip_payload_tlast) begin\n                    input_ip_hdr_ready_next = ~output_udp_hdr_valid_reg;\n                    input_ip_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WAIT_LAST;\n                end\n            end else begin\n                state_next = STATE_WAIT_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], ["verilog-ethernet/rtl/udp_ip_tx_64.v@244:413", "        4'd7: count2keep = 8'b01111111;\n        4'd8: count2keep = 8'b11111111;\n    endcase\nendfunction\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    input_udp_hdr_ready_next = 0;\n    input_udp_payload_tready_next = 0;\n\n    store_udp_hdr = 0;\n\n    store_last_word = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    output_ip_hdr_valid_next = output_ip_hdr_valid_reg & ~output_ip_hdr_ready;\n\n    error_payload_early_termination_next = 0;\n\n    output_ip_payload_tdata_int = 0;\n    output_ip_payload_tkeep_int = 0;\n    output_ip_payload_tvalid_int = 0;\n    output_ip_payload_tlast_int = 0;\n    output_ip_payload_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 0;\n            input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;\n\n            if (input_udp_hdr_ready & input_udp_hdr_valid) begin\n                store_udp_hdr = 1;\n                input_udp_hdr_ready_next = 0;\n                output_ip_hdr_valid_next = 1;\n                state_next = STATE_WRITE_HEADER;\n                if (output_ip_payload_tready_int) begin\n                    output_ip_payload_tvalid_int = 1;\n                    output_ip_payload_tdata_int[ 7: 0] = input_udp_source_port[15: 8];\n                    output_ip_payload_tdata_int[15: 8] = input_udp_source_port[ 7: 0];\n                    output_ip_payload_tdata_int[23:16] = input_udp_dest_port[15: 8];\n                    output_ip_payload_tdata_int[31:24] = input_udp_dest_port[ 7: 0];\n                    output_ip_payload_tdata_int[39:32] = input_udp_length[15: 8];\n                    output_ip_payload_tdata_int[47:40] = input_udp_length[ 7: 0];\n                    output_ip_payload_tdata_int[55:48] = input_udp_checksum[15: 8];\n                    output_ip_payload_tdata_int[63:56] = input_udp_checksum[ 7: 0];\n                    output_ip_payload_tkeep_int = 8'hff;\n                    frame_ptr_next = 8;\n                    input_udp_payload_tready_next = output_ip_payload_tready_int_early;\n                    state_next = STATE_WRITE_PAYLOAD;\n                end\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_WRITE_HEADER: begin\n            // write header state\n            if (output_ip_payload_tready_int) begin\n                // word transfer out\n                frame_ptr_next = frame_ptr_reg+8;\n                output_ip_payload_tvalid_int = 1;\n                state_next = STATE_WRITE_HEADER;\n                case (frame_ptr_reg)\n                    8'h00: begin\n                        output_ip_payload_tdata_int[ 7: 0] = input_udp_source_port[15: 8];\n                        output_ip_payload_tdata_int[15: 8] = input_udp_source_port[ 7: 0];\n                        output_ip_payload_tdata_int[23:16] = input_udp_dest_port[15: 8];\n                        output_ip_payload_tdata_int[31:24] = input_udp_dest_port[ 7: 0];\n                        output_ip_payload_tdata_int[39:32] = input_udp_length[15: 8];\n                        output_ip_payload_tdata_int[47:40] = input_udp_length[ 7: 0];\n                        output_ip_payload_tdata_int[55:48] = input_udp_checksum[15: 8];\n                        output_ip_payload_tdata_int[63:56] = input_udp_checksum[ 7: 0];\n                        output_ip_payload_tkeep_int = 8'hff;\n                        input_udp_payload_tready_next = output_ip_payload_tready_int_early;\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                endcase\n            end else begin\n                state_next = STATE_WRITE_HEADER;\n            end\n        end\n        STATE_WRITE_PAYLOAD: begin\n            // write payload\n            input_udp_payload_tready_next = output_ip_payload_tready_int_early;\n\n            output_ip_payload_tdata_int = input_udp_payload_tdata;\n            output_ip_payload_tkeep_int = input_udp_payload_tkeep;\n            output_ip_payload_tvalid_int = input_udp_payload_tvalid;\n            output_ip_payload_tlast_int = input_udp_payload_tlast;\n            output_ip_payload_tuser_int = input_udp_payload_tuser;\n\n            if (output_ip_payload_tready_int & input_udp_payload_tvalid) begin\n                // word transfer through\n                frame_ptr_next = frame_ptr_reg+keep2count(input_udp_payload_tkeep);\n                if (frame_ptr_next >= udp_length_reg) begin\n                    // have entire payload\n                    frame_ptr_next = udp_length_reg;\n                    output_ip_payload_tkeep_int = count2keep(udp_length_reg - frame_ptr_reg);\n                    if (input_udp_payload_tlast) begin\n                        input_udp_payload_tready_next = 0;\n                        input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        store_last_word = 1;\n                        output_ip_payload_tvalid_int = 0;\n                        state_next = STATE_WRITE_PAYLOAD_LAST;\n                    end\n                end else begin\n                    if (input_udp_payload_tlast) begin\n                        // end of frame, but length does not match\n                        error_payload_early_termination_next = 1;\n                        output_ip_payload_tuser_int = 1;\n                        input_udp_payload_tready_next = 0;\n                        input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD;\n            end\n        end\n        STATE_WRITE_PAYLOAD_LAST: begin\n            // read and discard until end of frame\n            input_udp_payload_tready_next = output_ip_payload_tready_int_early;\n\n            output_ip_payload_tdata_int = last_word_data_reg;\n            output_ip_payload_tkeep_int = last_word_keep_reg;\n            output_ip_payload_tvalid_int = input_udp_payload_tvalid & input_udp_payload_tlast;\n            output_ip_payload_tlast_int = input_udp_payload_tlast;\n            output_ip_payload_tuser_int = input_udp_payload_tuser;\n\n            if (input_udp_payload_tready & input_udp_payload_tvalid) begin\n                if (input_udp_payload_tlast) begin\n                    input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                    input_udp_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WRITE_PAYLOAD_LAST;\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD_LAST;\n            end\n        end\n        STATE_WAIT_LAST: begin\n            // wait for end of frame; read and discard\n            input_udp_payload_tready_next = 1;\n\n            if (input_udp_payload_tvalid) begin\n                if (input_udp_payload_tlast) begin\n                    input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;\n                    input_udp_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WAIT_LAST;\n                end\n            end else begin\n                state_next = STATE_WAIT_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"]], "Diff Content": {"Delete": [[218, "    input_udp_hdr_ready_next = 0;\n"], [219, "    input_udp_payload_tready_next = 0;\n"], [221, "    store_udp_hdr = 0;\n"], [223, "    store_last_word = 0;\n"], [229, "    error_payload_early_termination_next = 0;\n"], [231, "    output_ip_payload_tdata_int = 0;\n"], [232, "    output_ip_payload_tvalid_int = 0;\n"], [233, "    output_ip_payload_tlast_int = 0;\n"], [234, "    output_ip_payload_tuser_int = 0;\n"], [239, "            frame_ptr_next = 0;\n"], [243, "                store_udp_hdr = 1;\n"], [244, "                input_udp_hdr_ready_next = 0;\n"], [245, "                output_ip_hdr_valid_next = 1;\n"], [246, "                if (output_ip_payload_tready_int) begin\n"], [247, "                    output_ip_payload_tvalid_int = 1;\n"], [249, "                    frame_ptr_next = 1;\n"], [258, "            if (output_ip_payload_tready_int) begin\n"], [260, "                frame_ptr_next = frame_ptr_reg+1;\n"], [261, "                output_ip_payload_tvalid_int = 1;\n"], [292, "                frame_ptr_next = frame_ptr_reg+1;\n"], [296, "                        output_ip_payload_tuser_int = 1;\n"], [297, "                        error_payload_early_termination_next = 1;\n"], [300, "                    input_udp_payload_tready_next = 0;\n"], [304, "                        store_last_word = 1;\n"], [305, "                        output_ip_payload_tvalid_int = 0;\n"], [327, "                    input_udp_payload_tready_next = 0;\n"], [338, "            input_udp_payload_tready_next = 1;\n"], [343, "                    input_udp_payload_tready_next = 0;\n"]], "Add": [[219, "    input_udp_hdr_ready_next = 1'b0;\n"], [219, "    input_udp_payload_tready_next = 1'b0;\n"], [221, "    store_udp_hdr = 1'b0;\n"], [223, "    store_last_word = 1'b0;\n"], [229, "    error_payload_early_termination_next = 1'b0;\n"], [234, "    output_ip_payload_tdata_int = 8'd0;\n"], [234, "    output_ip_payload_tvalid_int = 1'b0;\n"], [234, "    output_ip_payload_tlast_int = 1'b0;\n"], [234, "    output_ip_payload_tuser_int = 1'b0;\n"], [239, "            frame_ptr_next = 16'd0;\n"], [247, "                store_udp_hdr = 1'b1;\n"], [247, "                input_udp_hdr_ready_next = 1'b0;\n"], [247, "                output_ip_hdr_valid_next = 1'b1;\n"], [247, "                if (output_ip_payload_tready_int_reg) begin\n"], [247, "                    output_ip_payload_tvalid_int = 1'b1;\n"], [249, "                    frame_ptr_next = 1'b1;\n"], [258, "            if (output_ip_payload_tready_int_reg) begin\n"], [261, "                frame_ptr_next = frame_ptr_reg + 16'd1;\n"], [261, "                output_ip_payload_tvalid_int = 1'b1;\n"], [292, "                frame_ptr_next = frame_ptr_reg + 16'd1;\n"], [297, "                        output_ip_payload_tuser_int = 1'b1;\n"], [297, "                        error_payload_early_termination_next = 1'b1;\n"], [300, "                    input_udp_payload_tready_next = 1'b0;\n"], [305, "                        store_last_word = 1'b1;\n"], [305, "                        output_ip_payload_tvalid_int = 1'b0;\n"], [327, "                    input_udp_payload_tready_next = 1'b0;\n"], [338, "            input_udp_payload_tready_next = 1'b1;\n"], [343, "                    input_udp_payload_tready_next = 1'b0;\n"]]}}