{"Source Block": ["verilog-ethernet/rtl/ip_eth_tx.v@359:430@HdlStmProcess", "            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n        hdr_sum_reg <= 0;\n        last_word_data_reg <= 0;\n        input_ip_hdr_ready_reg <= 0;\n        input_ip_payload_tready_reg <= 0;\n        ip_dscp_reg <= 0;\n        ip_ecn_reg <= 0;\n        ip_length_reg <= 0;\n        ip_identification_reg <= 0;\n        ip_flags_reg <= 0;\n        ip_fragment_offset_reg <= 0;\n        ip_ttl_reg <= 0;\n        ip_protocol_reg <= 0;\n        ip_source_ip_reg <= 0;\n        ip_dest_ip_reg <= 0;\n        output_eth_hdr_valid_reg <= 0;\n        output_eth_dest_mac_reg <= 0;\n        output_eth_src_mac_reg <= 0;\n        output_eth_type_reg <= 0;\n        busy_reg <= 0;\n        error_payload_early_termination_reg <= 0;\n    end else begin\n        state_reg <= state_next;\n\n        frame_ptr_reg <= frame_ptr_next;\n\n        hdr_sum_reg <= hdr_sum_next;\n\n        input_ip_hdr_ready_reg <= input_ip_hdr_ready_next;\n        input_ip_payload_tready_reg <= input_ip_payload_tready_next;\n\n        output_eth_hdr_valid_reg <= output_eth_hdr_valid_next;\n\n        busy_reg <= state_next != STATE_IDLE;\n\n        error_payload_early_termination_reg <= error_payload_early_termination_next;\n\n        // datapath\n        if (store_ip_hdr) begin\n            output_eth_dest_mac_reg <= input_eth_dest_mac;\n            output_eth_src_mac_reg <= input_eth_src_mac;\n            output_eth_type_reg <= input_eth_type;\n            ip_dscp_reg <= input_ip_dscp;\n            ip_ecn_reg <= input_ip_ecn;\n            ip_length_reg <= input_ip_length;\n            ip_identification_reg <= input_ip_identification;\n            ip_flags_reg <= input_ip_flags;\n            ip_fragment_offset_reg <= input_ip_fragment_offset;\n            ip_ttl_reg <= input_ip_ttl;\n            ip_protocol_reg <= input_ip_protocol;\n            ip_source_ip_reg <= input_ip_source_ip;\n            ip_dest_ip_reg <= input_ip_dest_ip;\n        end\n\n        if (store_last_word) begin\n            last_word_data_reg <= output_eth_payload_tdata_int;\n        end\n    end\nend\n\n// output datapath logic\nreg [7:0]  output_eth_payload_tdata_reg = 0;\nreg        output_eth_payload_tvalid_reg = 0;\nreg        output_eth_payload_tlast_reg = 0;\n"], "Clone Blocks": [["verilog-ethernet/rtl/ip_eth_tx_64.v@484:569", "            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n        hdr_sum_reg <= 0;\n        last_word_data_reg <= 0;\n        last_word_keep_reg <= 0;\n        input_ip_hdr_ready_reg <= 0;\n        input_ip_payload_tready_reg <= 0;\n        ip_dscp_reg <= 0;\n        ip_ecn_reg <= 0;\n        ip_length_reg <= 0;\n        ip_identification_reg <= 0;\n        ip_flags_reg <= 0;\n        ip_fragment_offset_reg <= 0;\n        ip_ttl_reg <= 0;\n        ip_protocol_reg <= 0;\n        ip_source_ip_reg <= 0;\n        ip_dest_ip_reg <= 0;\n        output_eth_hdr_valid_reg <= 0;\n        output_eth_dest_mac_reg <= 0;\n        output_eth_src_mac_reg <= 0;\n        output_eth_type_reg <= 0;\n        busy_reg <= 0;\n        error_payload_early_termination_reg <= 0;\n    end else begin\n        state_reg <= state_next;\n\n        frame_ptr_reg <= frame_ptr_next;\n\n        hdr_sum_reg <= hdr_sum_next;\n\n        input_ip_hdr_ready_reg <= input_ip_hdr_ready_next;\n        input_ip_payload_tready_reg <= input_ip_payload_tready_next;\n\n        output_eth_hdr_valid_reg <= output_eth_hdr_valid_next;\n\n        busy_reg <= state_next != STATE_IDLE;\n\n        error_payload_early_termination_reg <= error_payload_early_termination_next;\n\n        // datapath\n        if (store_ip_hdr) begin\n            output_eth_dest_mac_reg <= input_eth_dest_mac;\n            output_eth_src_mac_reg <= input_eth_src_mac;\n            output_eth_type_reg <= input_eth_type;\n            ip_dscp_reg <= input_ip_dscp;\n            ip_ecn_reg <= input_ip_ecn;\n            ip_length_reg <= input_ip_length;\n            ip_identification_reg <= input_ip_identification;\n            ip_flags_reg <= input_ip_flags;\n            ip_fragment_offset_reg <= input_ip_fragment_offset;\n            ip_ttl_reg <= input_ip_ttl;\n            ip_protocol_reg <= input_ip_protocol;\n            ip_source_ip_reg <= input_ip_source_ip;\n            ip_dest_ip_reg <= input_ip_dest_ip;\n        end\n\n        if (store_last_word) begin\n            last_word_data_reg <= output_eth_payload_tdata_int;\n            last_word_keep_reg <= output_eth_payload_tkeep_int;\n        end\n\n        if (flush_save) begin\n            save_ip_payload_tdata_reg <= 0;\n            save_ip_payload_tkeep_reg <= 0;\n            save_ip_payload_tlast_reg <= 0;\n            save_ip_payload_tuser_reg <= 0;\n        end else if (transfer_in_save) begin\n            save_ip_payload_tdata_reg <= input_ip_payload_tdata;\n            save_ip_payload_tkeep_reg <= input_ip_payload_tkeep;\n            save_ip_payload_tlast_reg <= input_ip_payload_tlast;\n            save_ip_payload_tuser_reg <= input_ip_payload_tuser;\n        end\n    end\nend\n\n// output datapath logic\nreg [63:0] output_eth_payload_tdata_reg = 0;\nreg [7:0]  output_eth_payload_tkeep_reg = 0;\nreg        output_eth_payload_tvalid_reg = 0;\n"]], "Diff Content": {"Delete": [[367, "        frame_ptr_reg <= 0;\n"], [368, "        hdr_sum_reg <= 0;\n"], [369, "        last_word_data_reg <= 0;\n"], [370, "        input_ip_hdr_ready_reg <= 0;\n"], [371, "        input_ip_payload_tready_reg <= 0;\n"], [372, "        ip_dscp_reg <= 0;\n"], [373, "        ip_ecn_reg <= 0;\n"], [374, "        ip_length_reg <= 0;\n"], [375, "        ip_identification_reg <= 0;\n"], [376, "        ip_flags_reg <= 0;\n"], [377, "        ip_fragment_offset_reg <= 0;\n"], [378, "        ip_ttl_reg <= 0;\n"], [379, "        ip_protocol_reg <= 0;\n"], [380, "        ip_source_ip_reg <= 0;\n"], [381, "        ip_dest_ip_reg <= 0;\n"], [382, "        output_eth_hdr_valid_reg <= 0;\n"], [383, "        output_eth_dest_mac_reg <= 0;\n"], [384, "        output_eth_src_mac_reg <= 0;\n"], [385, "        output_eth_type_reg <= 0;\n"], [386, "        busy_reg <= 0;\n"], [387, "        error_payload_early_termination_reg <= 0;\n"], [405, "        if (store_ip_hdr) begin\n"], [406, "            output_eth_dest_mac_reg <= input_eth_dest_mac;\n"], [407, "            output_eth_src_mac_reg <= input_eth_src_mac;\n"], [408, "            output_eth_type_reg <= input_eth_type;\n"], [409, "            ip_dscp_reg <= input_ip_dscp;\n"], [410, "            ip_ecn_reg <= input_ip_ecn;\n"], [411, "            ip_length_reg <= input_ip_length;\n"], [412, "            ip_identification_reg <= input_ip_identification;\n"], [413, "            ip_flags_reg <= input_ip_flags;\n"], [414, "            ip_fragment_offset_reg <= input_ip_fragment_offset;\n"], [415, "            ip_ttl_reg <= input_ip_ttl;\n"], [416, "            ip_protocol_reg <= input_ip_protocol;\n"], [417, "            ip_source_ip_reg <= input_ip_source_ip;\n"], [418, "            ip_dest_ip_reg <= input_ip_dest_ip;\n"], [419, "        end\n"], [421, "        if (store_last_word) begin\n"], [422, "            last_word_data_reg <= output_eth_payload_tdata_int;\n"], [423, "        end\n"]], "Add": [[387, "        frame_ptr_reg <= 16'd0;\n"], [387, "        hdr_sum_reg <= 16'd0;\n"], [387, "        input_ip_hdr_ready_reg <= 1'b0;\n"], [387, "        input_ip_payload_tready_reg <= 1'b0;\n"], [387, "        output_eth_hdr_valid_reg <= 1'b0;\n"], [387, "        busy_reg <= 1'b0;\n"], [387, "        error_payload_early_termination_reg <= 1'b0;\n"], [402, "    end\n"], [419, "    if (store_ip_hdr) begin\n"], [419, "        output_eth_dest_mac_reg <= input_eth_dest_mac;\n"], [419, "        output_eth_src_mac_reg <= input_eth_src_mac;\n"], [419, "        output_eth_type_reg <= input_eth_type;\n"], [419, "        ip_dscp_reg <= input_ip_dscp;\n"], [419, "        ip_ecn_reg <= input_ip_ecn;\n"], [419, "        ip_length_reg <= input_ip_length;\n"], [419, "        ip_identification_reg <= input_ip_identification;\n"], [419, "        ip_flags_reg <= input_ip_flags;\n"], [419, "        ip_fragment_offset_reg <= input_ip_fragment_offset;\n"], [419, "        ip_ttl_reg <= input_ip_ttl;\n"], [419, "        ip_protocol_reg <= input_ip_protocol;\n"], [419, "        ip_source_ip_reg <= input_ip_source_ip;\n"], [419, "        ip_dest_ip_reg <= input_ip_dest_ip;\n"], [419, "    end\n"], [423, "    if (store_last_word) begin\n"], [423, "        last_word_data_reg <= output_eth_payload_tdata_int;\n"]]}}