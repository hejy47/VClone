{"Source Block": ["verilog-ethernet/rtl/arp_eth_tx_64.v@138:254@HdlStmProcess", "assign output_eth_src_mac = output_eth_src_mac_reg;\nassign output_eth_type = output_eth_type_reg;\n\nassign busy = busy_reg;\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    input_frame_ready_next = 0;\n\n    store_frame = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;\n\n    output_eth_payload_tdata_int = 0;\n    output_eth_payload_tkeep_int = 0;\n    output_eth_payload_tvalid_int = 0;\n    output_eth_payload_tlast_int = 0;\n    output_eth_payload_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 0;\n            input_frame_ready_next = ~output_eth_hdr_valid_reg;\n\n            if (input_frame_ready & input_frame_valid) begin\n                store_frame = 1;\n                input_frame_ready_next = 0;\n                output_eth_hdr_valid_next = 1;\n                if (output_eth_payload_tready_int) begin\n                    output_eth_payload_tvalid_int = 1;\n                    output_eth_payload_tdata_int[ 7: 0] = input_arp_htype[15: 8];\n                    output_eth_payload_tdata_int[15: 8] = input_arp_htype[ 7: 0];\n                    output_eth_payload_tdata_int[23:16] = input_arp_ptype[15: 8];\n                    output_eth_payload_tdata_int[31:24] = input_arp_ptype[ 7: 0];\n                    output_eth_payload_tdata_int[39:32] = 6; // hlen\n                    output_eth_payload_tdata_int[47:40] = 4; // plen\n                    output_eth_payload_tdata_int[55:48] = input_arp_oper[15: 8];\n                    output_eth_payload_tdata_int[63:56] = input_arp_oper[ 7: 0];\n                    output_eth_payload_tkeep_int = 8'hff;\n                    frame_ptr_next = 8;\n                end\n                state_next = STATE_WRITE_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_WRITE_HEADER: begin\n            // read header state\n            if (output_eth_payload_tready_int) begin\n                // word transfer out\n                frame_ptr_next = frame_ptr_reg+8;\n                output_eth_payload_tvalid_int = 1;\n                state_next = STATE_WRITE_HEADER;\n                case (frame_ptr_reg)\n                    8'h00: begin\n                        output_eth_payload_tdata_int[ 7: 0] = input_arp_htype[15: 8];\n                        output_eth_payload_tdata_int[15: 8] = input_arp_htype[ 7: 0];\n                        output_eth_payload_tdata_int[23:16] = input_arp_ptype[15: 8];\n                        output_eth_payload_tdata_int[31:24] = input_arp_ptype[ 7: 0];\n                        output_eth_payload_tdata_int[39:32] = 6; // hlen\n                        output_eth_payload_tdata_int[47:40] = 4; // plen\n                        output_eth_payload_tdata_int[55:48] = input_arp_oper[15: 8];\n                        output_eth_payload_tdata_int[63:56] = input_arp_oper[ 7: 0];\n                        output_eth_payload_tkeep_int = 8'hff;\n                    end\n                    8'h08: begin\n                        output_eth_payload_tdata_int[ 7: 0] = arp_sha_reg[47:40];\n                        output_eth_payload_tdata_int[15: 8] = arp_sha_reg[39:32];\n                        output_eth_payload_tdata_int[23:16] = arp_sha_reg[31:24];\n                        output_eth_payload_tdata_int[31:24] = arp_sha_reg[23:16];\n                        output_eth_payload_tdata_int[39:32] = arp_sha_reg[15: 8];\n                        output_eth_payload_tdata_int[47:40] = arp_sha_reg[ 7: 0];\n                        output_eth_payload_tdata_int[55:48] = arp_spa_reg[31:24];\n                        output_eth_payload_tdata_int[63:56] = arp_spa_reg[23:16];\n                        output_eth_payload_tkeep_int = 8'hff;\n                    end\n                    8'h10: begin\n                        output_eth_payload_tdata_int[ 7: 0] = arp_spa_reg[15: 8];\n                        output_eth_payload_tdata_int[15: 8] = arp_spa_reg[ 7: 0];\n                        output_eth_payload_tdata_int[23:16] = arp_tha_reg[47:40];\n                        output_eth_payload_tdata_int[31:24] = arp_tha_reg[39:32];\n                        output_eth_payload_tdata_int[39:32] = arp_tha_reg[31:24];\n                        output_eth_payload_tdata_int[47:40] = arp_tha_reg[23:16];\n                        output_eth_payload_tdata_int[55:48] = arp_tha_reg[15: 8];\n                        output_eth_payload_tdata_int[63:56] = arp_tha_reg[ 7: 0];\n                        output_eth_payload_tkeep_int = 8'hff;\n                    end\n                    8'h18: begin\n                        output_eth_payload_tdata_int[ 7: 0] = arp_tpa_reg[31:24];\n                        output_eth_payload_tdata_int[15: 8] = arp_tpa_reg[23:16];\n                        output_eth_payload_tdata_int[23:16] = arp_tpa_reg[15: 8];\n                        output_eth_payload_tdata_int[31:24] = arp_tpa_reg[ 7: 0];\n                        output_eth_payload_tdata_int[39:32] = 0;\n                        output_eth_payload_tdata_int[47:40] = 0;\n                        output_eth_payload_tdata_int[55:48] = 0;\n                        output_eth_payload_tdata_int[63:56] = 0;\n                        output_eth_payload_tkeep_int = 8'h0f;\n                        output_eth_payload_tlast_int = 1;\n                        input_frame_ready_next = ~output_eth_hdr_valid_reg;\n                        state_next = STATE_IDLE;\n                    end\n                endcase\n            end else begin\n                state_next = STATE_WRITE_HEADER;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[146, "    input_frame_ready_next = 0;\n"], [148, "    store_frame = 0;\n"], [154, "    output_eth_payload_tdata_int = 0;\n"], [155, "    output_eth_payload_tkeep_int = 0;\n"], [156, "    output_eth_payload_tvalid_int = 0;\n"], [157, "    output_eth_payload_tlast_int = 0;\n"], [158, "    output_eth_payload_tuser_int = 0;\n"], [163, "            frame_ptr_next = 0;\n"], [167, "                store_frame = 1;\n"], [168, "                input_frame_ready_next = 0;\n"], [169, "                output_eth_hdr_valid_next = 1;\n"], [170, "                if (output_eth_payload_tready_int) begin\n"], [171, "                    output_eth_payload_tvalid_int = 1;\n"], [176, "                    output_eth_payload_tdata_int[39:32] = 6; // hlen\n"], [177, "                    output_eth_payload_tdata_int[47:40] = 4; // plen\n"], [181, "                    frame_ptr_next = 8;\n"], [190, "            if (output_eth_payload_tready_int) begin\n"], [192, "                frame_ptr_next = frame_ptr_reg+8;\n"], [193, "                output_eth_payload_tvalid_int = 1;\n"], [201, "                        output_eth_payload_tdata_int[39:32] = 6; // hlen\n"], [202, "                        output_eth_payload_tdata_int[47:40] = 4; // plen\n"], [239, "                        output_eth_payload_tlast_int = 1;\n"]], "Add": [[146, "    input_frame_ready_next = 1'b0;\n"], [148, "    store_frame = 1'b0;\n"], [158, "    output_eth_payload_tdata_int = 64'd0;\n"], [158, "    output_eth_payload_tkeep_int = 8'd0;\n"], [158, "    output_eth_payload_tvalid_int = 1'b0;\n"], [158, "    output_eth_payload_tlast_int = 1'b0;\n"], [158, "    output_eth_payload_tuser_int = 1'b0;\n"], [163, "            frame_ptr_next = 8'd0;\n"], [171, "                store_frame = 1'b1;\n"], [171, "                input_frame_ready_next = 1'b0;\n"], [171, "                output_eth_hdr_valid_next = 1'b1;\n"], [171, "                if (output_eth_payload_tready_int_reg) begin\n"], [171, "                    output_eth_payload_tvalid_int = 1'b1;\n"], [177, "                    output_eth_payload_tdata_int[39:32] = 8'd6; // hlen\n"], [177, "                    output_eth_payload_tdata_int[47:40] = 8'd4; // plen\n"], [181, "                    frame_ptr_next = 8'd8;\n"], [190, "            if (output_eth_payload_tready_int_reg) begin\n"], [193, "                frame_ptr_next = frame_ptr_reg + 8'd8;\n"], [193, "                output_eth_payload_tvalid_int = 1'b1;\n"], [202, "                        output_eth_payload_tdata_int[39:32] = 8'd6; // hlen\n"], [202, "                        output_eth_payload_tdata_int[47:40] = 8'd4; // plen\n"], [239, "                        output_eth_payload_tlast_int = 1'b1;\n"]]}}