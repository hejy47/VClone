{"Source Block": ["verilog-ethernet/rtl/axis_eth_fcs_check_64.v@152:304@HdlStmProcess", "    .data_in(input_axis_tdata[63:0]),\n    .crc_state(crc_state),\n    .crc_next(crc_next7)\n);\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    reset_crc = 0;\n    update_crc = 0;\n    shift_in = 0;\n    shift_reset = 0;\n\n    last_cycle_tkeep_next = last_cycle_tkeep_reg;\n    last_cycle_tuser_next = last_cycle_tuser_reg;\n\n    input_axis_tready_next = 0;\n\n    output_axis_tdata_int = 0;\n    output_axis_tkeep_int = 0;\n    output_axis_tvalid_int = 0;\n    output_axis_tlast_int = 0;\n    output_axis_tuser_int = 0;\n\n    error_bad_fcs_next = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            input_axis_tready_next = output_axis_tready_int_early;\n            reset_crc = 1;\n\n            output_axis_tdata_int = input_axis_tdata_d0;\n            output_axis_tkeep_int = input_axis_tkeep_d0;\n            output_axis_tvalid_int = input_axis_tvalid_d0 & input_axis_tvalid;\n            output_axis_tlast_int = 0;\n            output_axis_tuser_int = 0;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                shift_in = 1;\n                reset_crc = 0;\n                update_crc = 1;\n                if (input_axis_tlast) begin\n                    if (input_axis_tkeep[7:4] == 0) begin\n                        shift_reset = 1;\n                        reset_crc = 1;\n                        output_axis_tlast_int = 1;\n                        output_axis_tuser_int = input_axis_tuser;\n                        output_axis_tkeep_int = {input_axis_tkeep[3:0], 4'b1111};\n                        if ((input_axis_tkeep[3:0] == 4'b0001 & crc_valid0) ||\n                            (input_axis_tkeep[3:0] == 4'b0011 & crc_valid1) ||\n                            (input_axis_tkeep[3:0] == 4'b0111 & crc_valid2) ||\n                            (input_axis_tkeep[3:0] == 4'b1111 & crc_valid3)) begin\n                            // CRC valid\n                        end else begin\n                            output_axis_tuser_int = 1;\n                            error_bad_fcs_next = 1;\n                        end\n                        input_axis_tready_next = output_axis_tready_int_early;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        last_cycle_tkeep_next = {4'b0000, input_axis_tkeep[7:4]};\n                        last_cycle_tuser_next = input_axis_tuser;\n                        input_axis_tready_next = 0;\n                        state_next = STATE_LAST;\n                    end\n                end else begin\n                    state_next = STATE_PAYLOAD;\n                end\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_PAYLOAD: begin\n            // transfer payload\n            input_axis_tready_next = output_axis_tready_int_early;\n\n            output_axis_tdata_int = input_axis_tdata_d0;\n            output_axis_tkeep_int = input_axis_tkeep_d0;\n            output_axis_tvalid_int = input_axis_tvalid_d0 & input_axis_tvalid;\n            output_axis_tlast_int = 0;\n            output_axis_tuser_int = 0;\n\n            if (input_axis_tready & input_axis_tvalid) begin\n                shift_in = 1;\n                update_crc = 1;\n                if (input_axis_tlast) begin\n                    if (input_axis_tkeep[7:4] == 0) begin\n                        shift_reset = 1;\n                        reset_crc = 1;\n                        output_axis_tlast_int = 1;\n                        output_axis_tuser_int = input_axis_tuser;\n                        output_axis_tkeep_int = {input_axis_tkeep[3:0], 4'b1111};\n                        if ((input_axis_tkeep[3:0] == 4'b0001 & crc_valid0) ||\n                            (input_axis_tkeep[3:0] == 4'b0011 & crc_valid1) ||\n                            (input_axis_tkeep[3:0] == 4'b0111 & crc_valid2) ||\n                            (input_axis_tkeep[3:0] == 4'b1111 & crc_valid3)) begin\n                            // CRC valid\n                        end else begin\n                            output_axis_tuser_int = 1;\n                            error_bad_fcs_next = 1;\n                        end\n                        input_axis_tready_next = output_axis_tready_int_early;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        last_cycle_tkeep_next = {4'b0000, input_axis_tkeep[7:4]};\n                        last_cycle_tuser_next = input_axis_tuser;\n                        input_axis_tready_next = 0;\n                        state_next = STATE_LAST;\n                    end\n                end else begin\n                    state_next = STATE_PAYLOAD;\n                end\n            end else begin\n                state_next = STATE_PAYLOAD;\n            end\n        end\n        STATE_LAST: begin\n            // last cycle\n            input_axis_tready_next = 0;\n\n            output_axis_tdata_int = input_axis_tdata_d0;\n            output_axis_tkeep_int = last_cycle_tkeep_reg;\n            output_axis_tvalid_int = input_axis_tvalid_d0;\n            output_axis_tlast_int = 1;\n            output_axis_tuser_int = last_cycle_tuser_reg;\n\n            if ((input_axis_tkeep_d0[7:4] == 4'b0001 & crc_valid0) ||\n                (input_axis_tkeep_d0[7:4] == 4'b0011 & crc_valid1) ||\n                (input_axis_tkeep_d0[7:4] == 4'b0111 & crc_valid2) ||\n                (input_axis_tkeep_d0[7:4] == 4'b1111 & crc_valid3)) begin\n                // CRC valid\n            end else begin\n                output_axis_tuser_int = 1;\n                error_bad_fcs_next = 1;\n            end\n\n            if (output_axis_tready_int) begin\n                shift_reset = 1;\n                reset_crc = 1;\n                input_axis_tready_next = output_axis_tready_int_early;\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[160, "    reset_crc = 0;\n"], [161, "    update_crc = 0;\n"], [162, "    shift_in = 0;\n"], [163, "    shift_reset = 0;\n"], [168, "    input_axis_tready_next = 0;\n"], [170, "    output_axis_tdata_int = 0;\n"], [171, "    output_axis_tkeep_int = 0;\n"], [172, "    output_axis_tvalid_int = 0;\n"], [173, "    output_axis_tlast_int = 0;\n"], [174, "    output_axis_tuser_int = 0;\n"], [176, "    error_bad_fcs_next = 0;\n"], [182, "            reset_crc = 1;\n"], [187, "            output_axis_tlast_int = 0;\n"], [188, "            output_axis_tuser_int = 0;\n"], [191, "                shift_in = 1;\n"], [192, "                reset_crc = 0;\n"], [193, "                update_crc = 1;\n"], [196, "                        shift_reset = 1;\n"], [197, "                        reset_crc = 1;\n"], [198, "                        output_axis_tlast_int = 1;\n"], [207, "                            output_axis_tuser_int = 1;\n"], [208, "                            error_bad_fcs_next = 1;\n"], [215, "                        input_axis_tready_next = 0;\n"], [232, "            output_axis_tlast_int = 0;\n"], [233, "            output_axis_tuser_int = 0;\n"], [236, "                shift_in = 1;\n"], [237, "                update_crc = 1;\n"], [240, "                        shift_reset = 1;\n"], [241, "                        reset_crc = 1;\n"], [242, "                        output_axis_tlast_int = 1;\n"], [251, "                            output_axis_tuser_int = 1;\n"], [252, "                            error_bad_fcs_next = 1;\n"], [259, "                        input_axis_tready_next = 0;\n"], [271, "            input_axis_tready_next = 0;\n"], [276, "            output_axis_tlast_int = 1;\n"], [285, "                output_axis_tuser_int = 1;\n"], [286, "                error_bad_fcs_next = 1;\n"], [289, "            if (output_axis_tready_int) begin\n"], [290, "                shift_reset = 1;\n"], [291, "                reset_crc = 1;\n"]], "Add": [[163, "    reset_crc = 1'b0;\n"], [163, "    update_crc = 1'b0;\n"], [163, "    shift_in = 1'b0;\n"], [163, "    shift_reset = 1'b0;\n"], [168, "    input_axis_tready_next = 1'b0;\n"], [174, "    output_axis_tdata_int = 64'd0;\n"], [174, "    output_axis_tkeep_int = 8'd0;\n"], [174, "    output_axis_tvalid_int = 1'b0;\n"], [174, "    output_axis_tlast_int = 1'b0;\n"], [174, "    output_axis_tuser_int = 1'b0;\n"], [176, "    error_bad_fcs_next = 1'b0;\n"], [182, "            reset_crc = 1'b1;\n"], [188, "            output_axis_tlast_int = 1'b0;\n"], [188, "            output_axis_tuser_int = 1'b0;\n"], [193, "                shift_in = 1'b1;\n"], [193, "                reset_crc = 1'b0;\n"], [193, "                update_crc = 1'b1;\n"], [198, "                        shift_reset = 1'b1;\n"], [198, "                        reset_crc = 1'b1;\n"], [198, "                        output_axis_tlast_int = 1'b1;\n"], [208, "                            output_axis_tuser_int = 1'b1;\n"], [208, "                            error_bad_fcs_next = 1'b1;\n"], [215, "                        input_axis_tready_next = 1'b0;\n"], [233, "            output_axis_tlast_int = 1'b0;\n"], [233, "            output_axis_tuser_int = 1'b0;\n"], [237, "                shift_in = 1'b1;\n"], [237, "                update_crc = 1'b1;\n"], [242, "                        shift_reset = 1'b1;\n"], [242, "                        reset_crc = 1'b1;\n"], [242, "                        output_axis_tlast_int = 1'b1;\n"], [252, "                            output_axis_tuser_int = 1'b1;\n"], [252, "                            error_bad_fcs_next = 1'b1;\n"], [259, "                        input_axis_tready_next = 1'b0;\n"], [271, "            input_axis_tready_next = 1'b0;\n"], [276, "            output_axis_tlast_int = 1'b1;\n"], [286, "                output_axis_tuser_int = 1'b1;\n"], [286, "                error_bad_fcs_next = 1'b1;\n"], [291, "            if (output_axis_tready_int_reg) begin\n"], [291, "                shift_reset = 1'b1;\n"], [291, "                reset_crc = 1'b1;\n"]]}}