{"Source Block": ["verilog-ethernet/rtl/eth_mac_1g_tx.v@97:253@HdlStmProcess", "    .data_in(gmii_txd_next),\n    .crc_state(crc_state),\n    .crc_next(crc_next)\n);\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    reset_crc = 0;\n    update_crc = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    input_axis_tready_next = 0;\n\n    gmii_txd_next = 0;\n    gmii_tx_en_next = 0;\n    gmii_tx_er_next = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for packet\n            reset_crc = 1;\n\n            if (input_axis_tvalid) begin\n                frame_ptr_next = 1;\n                gmii_txd_next = 8'h55; // Preamble\n                gmii_tx_en_next = 1;\n                state_next = STATE_PREAMBLE;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_PREAMBLE: begin\n            // send preamble\n            reset_crc = 1;\n            frame_ptr_next = frame_ptr_reg + 1;\n\n            gmii_txd_next = 8'h55; // Preamble\n            gmii_tx_en_next = 1;\n\n            if (frame_ptr_reg == 7) begin\n                // end of preamble; start payload\n                frame_ptr_next = 0;\n                input_axis_tready_next = 1;\n                gmii_txd_next = 8'hD5; // SFD\n                state_next = STATE_PAYLOAD;\n            end else begin\n                state_next = STATE_PREAMBLE;\n            end\n        end\n        STATE_PAYLOAD: begin\n            // send payload\n            update_crc = 1;\n            input_axis_tready_next = 1;\n\n            frame_ptr_next = frame_ptr_reg + 1;\n\n            gmii_txd_next = input_axis_tdata;\n            gmii_tx_en_next = 1;\n\n            if (input_axis_tvalid) begin\n                if (input_axis_tlast) begin\n                    input_axis_tready_next = 0;\n                    if (input_axis_tuser) begin\n                        gmii_tx_er_next = 1;\n                        frame_ptr_next = 0;\n                        state_next = STATE_IFG;\n                    end else begin\n                        if (ENABLE_PADDING && frame_ptr_reg < MIN_FRAME_LENGTH-5) begin\n                            state_next = STATE_PAD;\n                        end else begin\n                            frame_ptr_next = 0;\n                            state_next = STATE_FCS;\n                        end\n                    end\n                end else begin\n                    state_next = STATE_PAYLOAD;\n                end\n            end else begin\n                // tvalid deassert, fail frame\n                gmii_tx_er_next = 1;\n                frame_ptr_next = 0;\n                state_next = STATE_WAIT_END;\n            end\n        end\n        STATE_PAD: begin\n            // send padding\n            update_crc = 1;\n            frame_ptr_next = frame_ptr_reg + 1;\n\n            gmii_txd_next = 0;\n            gmii_tx_en_next = 1;\n\n            if (frame_ptr_reg < MIN_FRAME_LENGTH-5) begin\n                state_next = STATE_PAD;\n            end else begin\n                frame_ptr_next = 0;\n                state_next = STATE_FCS;\n            end\n        end\n        STATE_FCS: begin\n            // send FCS\n            frame_ptr_next = frame_ptr_reg + 1;\n\n            case (frame_ptr_reg)\n                2'd0: gmii_txd_next = ~crc_state[7:0];\n                2'd1: gmii_txd_next = ~crc_state[15:8];\n                2'd2: gmii_txd_next = ~crc_state[23:16];\n                2'd3: gmii_txd_next = ~crc_state[31:24];\n            endcase\n            gmii_tx_en_next = 1;\n\n            if (frame_ptr_reg < 3) begin\n                state_next = STATE_FCS;\n            end else begin\n                frame_ptr_next = 0;\n                state_next = STATE_IFG;\n            end\n        end\n        STATE_IFG: begin\n            // send IFG\n            frame_ptr_next = frame_ptr_reg + 1;\n            reset_crc = 1;\n\n            if (frame_ptr_reg < ifg_delay-1) begin\n                state_next = STATE_IFG;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_WAIT_END: begin\n            // wait for end of frame\n            frame_ptr_next = frame_ptr_reg + 1;\n            reset_crc = 1;\n\n            if (input_axis_tvalid) begin\n                if (input_axis_tlast) begin\n                    if (frame_ptr_reg < ifg_delay-1) begin\n                        state_next = STATE_IFG;\n                    end else begin\n                        state_next = STATE_IDLE;\n                    end\n                end else begin\n                    state_next = STATE_WAIT_END;\n                end\n            end else begin\n                state_next = STATE_WAIT_END;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[105, "    reset_crc = 0;\n"], [106, "    update_crc = 0;\n"], [110, "    input_axis_tready_next = 0;\n"], [112, "    gmii_txd_next = 0;\n"], [113, "    gmii_tx_en_next = 0;\n"], [114, "    gmii_tx_er_next = 0;\n"], [119, "            reset_crc = 1;\n"], [122, "                frame_ptr_next = 1;\n"], [124, "                gmii_tx_en_next = 1;\n"], [132, "            reset_crc = 1;\n"], [133, "            frame_ptr_next = frame_ptr_reg + 1;\n"], [136, "            gmii_tx_en_next = 1;\n"], [138, "            if (frame_ptr_reg == 7) begin\n"], [140, "                frame_ptr_next = 0;\n"], [141, "                input_axis_tready_next = 1;\n"], [150, "            update_crc = 1;\n"], [151, "            input_axis_tready_next = 1;\n"], [153, "            frame_ptr_next = frame_ptr_reg + 1;\n"], [156, "            gmii_tx_en_next = 1;\n"], [160, "                    input_axis_tready_next = 0;\n"], [162, "                        gmii_tx_er_next = 1;\n"], [163, "                        frame_ptr_next = 0;\n"], [169, "                            frame_ptr_next = 0;\n"], [178, "                gmii_tx_er_next = 1;\n"], [179, "                frame_ptr_next = 0;\n"], [185, "            update_crc = 1;\n"], [186, "            frame_ptr_next = frame_ptr_reg + 1;\n"], [188, "            gmii_txd_next = 0;\n"], [189, "            gmii_tx_en_next = 1;\n"], [194, "                frame_ptr_next = 0;\n"], [200, "            frame_ptr_next = frame_ptr_reg + 1;\n"], [208, "            gmii_tx_en_next = 1;\n"], [213, "                frame_ptr_next = 0;\n"], [217, "        STATE_IFG: begin\n"], [219, "            frame_ptr_next = frame_ptr_reg + 1;\n"], [220, "            reset_crc = 1;\n"], [222, "            if (frame_ptr_reg < ifg_delay-1) begin\n"], [223, "                state_next = STATE_IFG;\n"], [224, "            end else begin\n"], [225, "                state_next = STATE_IDLE;\n"], [226, "            end\n"], [227, "        end\n"], [230, "            frame_ptr_next = frame_ptr_reg + 1;\n"], [231, "            reset_crc = 1;\n"]], "Add": [[106, "    reset_crc = 1'b0;\n"], [106, "    update_crc = 1'b0;\n"], [110, "    input_axis_tready_next = 1'b0;\n"], [114, "    gmii_txd_next = 8'd0;\n"], [114, "    gmii_tx_en_next = 1'b0;\n"], [114, "    gmii_tx_er_next = 1'b0;\n"], [119, "            reset_crc = 1'b1;\n"], [122, "                frame_ptr_next = 16'd1;\n"], [124, "                gmii_tx_en_next = 1'b1;\n"], [133, "            reset_crc = 1'b1;\n"], [133, "            frame_ptr_next = frame_ptr_reg + 16'd1;\n"], [136, "            gmii_tx_en_next = 1'b1;\n"], [138, "            if (frame_ptr_reg == 16'd7) begin\n"], [141, "                frame_ptr_next = 16'd0;\n"], [141, "                input_axis_tready_next = 1'b1;\n"], [151, "            update_crc = 1'b1;\n"], [151, "            input_axis_tready_next = 1'b1;\n"], [153, "            frame_ptr_next = frame_ptr_reg + 16'd1;\n"], [156, "            gmii_tx_en_next = 1'b1;\n"], [160, "                    input_axis_tready_next = 1'b0;\n"], [163, "                        gmii_tx_er_next = 1'b1;\n"], [163, "                        frame_ptr_next = 1'b0;\n"], [169, "                            frame_ptr_next = 16'd0;\n"], [179, "                gmii_tx_er_next = 1'b1;\n"], [179, "                frame_ptr_next = 16'd0;\n"], [186, "            update_crc = 1'b1;\n"], [186, "            frame_ptr_next = frame_ptr_reg + 16'd1;\n"], [189, "            gmii_txd_next = 8'd0;\n"], [189, "            gmii_tx_en_next = 1'b1;\n"], [194, "                frame_ptr_next = 16'd0;\n"], [200, "            frame_ptr_next = frame_ptr_reg + 16'd1;\n"], [208, "            gmii_tx_en_next = 1'b1;\n"], [213, "                frame_ptr_next = 16'd0;\n"], [231, "            frame_ptr_next = frame_ptr_reg + 16'd1;\n"], [231, "            reset_crc = 1'b1;\n"], [246, "        STATE_IFG: begin\n"], [246, "            frame_ptr_next = frame_ptr_reg + 16'd1;\n"], [246, "            reset_crc = 1'b1;\n"], [246, "            if (frame_ptr_reg < ifg_delay-1) begin\n"], [246, "                state_next = STATE_IFG;\n"], [246, "            end else begin\n"], [246, "                state_next = STATE_IDLE;\n"], [246, "            end\n"], [246, "        end\n"]]}}