{"Source Block": ["verilog-ethernet/rtl/ip_eth_tx_64.v@242:492@HdlStmProcess", "        shift_ip_payload_tuser = (input_ip_payload_tuser & (input_ip_payload_tkeep[7:4] == 0));\n        shift_ip_payload_input_tready = ~(input_ip_payload_tlast & input_ip_payload_tvalid & transfer_in_save) & ~save_ip_payload_tlast_reg;\n    end\nend\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    input_ip_hdr_ready_next = 0;\n    input_ip_payload_tready_next = 0;\n\n    store_ip_hdr = 0;\n\n    store_last_word = 0;\n\n    flush_save = 0;\n    transfer_in_save = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    hdr_sum_temp = 0;\n    hdr_sum_next = hdr_sum_reg;\n\n    output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;\n\n    error_payload_early_termination_next = 0;\n\n    output_eth_payload_tdata_int = 0;\n    output_eth_payload_tkeep_int = 0;\n    output_eth_payload_tvalid_int = 0;\n    output_eth_payload_tlast_int = 0;\n    output_eth_payload_tuser_int = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 0;\n            flush_save = 1;\n            input_ip_hdr_ready_next = ~output_eth_hdr_valid_reg;\n\n            if (input_ip_hdr_ready & input_ip_hdr_valid) begin\n                store_ip_hdr = 1;\n                hdr_sum_next = {4'd4, 4'd5, input_ip_dscp, input_ip_ecn} +\n                               input_ip_length +\n                               input_ip_identification +\n                               {input_ip_flags, input_ip_fragment_offset} +\n                               {input_ip_ttl, input_ip_protocol} +\n                               input_ip_source_ip[31:16] +\n                               input_ip_source_ip[15: 0] +\n                               input_ip_dest_ip[31:16] +\n                               input_ip_dest_ip[15: 0];\n                input_ip_hdr_ready_next = 0;\n                output_eth_hdr_valid_next = 1;\n                if (output_eth_payload_tready_int) begin\n                    output_eth_payload_tvalid_int = 1;\n                    output_eth_payload_tdata_int[ 7: 0] = {4'd4, 4'd5}; // ip_version, ip_ihl\n                    output_eth_payload_tdata_int[15: 8] = {input_ip_dscp, input_ip_ecn};\n                    output_eth_payload_tdata_int[23:16] = input_ip_length[15: 8];\n                    output_eth_payload_tdata_int[31:24] = input_ip_length[ 7: 0];\n                    output_eth_payload_tdata_int[39:32] = input_ip_identification[15: 8];\n                    output_eth_payload_tdata_int[47:40] = input_ip_identification[ 7: 0];\n                    output_eth_payload_tdata_int[55:48] = {input_ip_flags, input_ip_fragment_offset[12: 8]};\n                    output_eth_payload_tdata_int[63:56] = input_ip_fragment_offset[ 7: 0];\n                    output_eth_payload_tkeep_int = 8'hff;\n                    frame_ptr_next = 8;\n                end\n                state_next = STATE_WRITE_HEADER;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_WRITE_HEADER: begin\n            // write header\n            if (output_eth_payload_tready_int) begin\n                frame_ptr_next = frame_ptr_reg+8;\n                output_eth_payload_tvalid_int = 1;\n                state_next = STATE_WRITE_HEADER;\n                case (frame_ptr_reg)\n                    8'h00: begin\n                        output_eth_payload_tdata_int[ 7: 0] = {4'd4, 4'd5}; // ip_version, ip_ihl\n                        output_eth_payload_tdata_int[15: 8] = {input_ip_dscp, input_ip_ecn};\n                        output_eth_payload_tdata_int[23:16] = input_ip_length[15: 8];\n                        output_eth_payload_tdata_int[31:24] = input_ip_length[ 7: 0];\n                        output_eth_payload_tdata_int[39:32] = input_ip_identification[15: 8];\n                        output_eth_payload_tdata_int[47:40] = input_ip_identification[ 7: 0];\n                        output_eth_payload_tdata_int[55:48] = {input_ip_flags, input_ip_fragment_offset[12: 8]};\n                        output_eth_payload_tdata_int[63:56] = input_ip_fragment_offset[ 7: 0];\n                        output_eth_payload_tkeep_int = 8'hff;\n                    end\n                    8'h08: begin\n                        hdr_sum_temp = hdr_sum_reg[15:0] + hdr_sum_reg[31:16];\n                        hdr_sum_temp = hdr_sum_temp[15:0] + hdr_sum_temp[16];\n                        output_eth_payload_tdata_int[ 7: 0] = ip_ttl_reg;\n                        output_eth_payload_tdata_int[15: 8] = ip_protocol_reg;\n                        output_eth_payload_tdata_int[23:16] = ~hdr_sum_temp[15: 8];\n                        output_eth_payload_tdata_int[31:24] = ~hdr_sum_temp[ 7: 0];\n                        output_eth_payload_tdata_int[39:32] = ip_source_ip_reg[31:24];\n                        output_eth_payload_tdata_int[47:40] = ip_source_ip_reg[23:16];\n                        output_eth_payload_tdata_int[55:48] = ip_source_ip_reg[15: 8];\n                        output_eth_payload_tdata_int[63:56] = ip_source_ip_reg[ 7: 0];\n                        output_eth_payload_tkeep_int = 8'hff;\n                        input_ip_payload_tready_next = output_eth_payload_tready_int_early;\n                        state_next = STATE_WRITE_HEADER_LAST;\n                    end\n                endcase\n            end else begin\n                state_next = STATE_WRITE_HEADER;\n            end\n        end\n        STATE_WRITE_HEADER_LAST: begin\n            // last header word requires first payload word; process accordingly\n            input_ip_payload_tready_next = output_eth_payload_tready_int_early & shift_ip_payload_input_tready;\n\n            if (input_ip_payload_tready & input_ip_payload_tvalid) begin\n                output_eth_payload_tvalid_int = 1;\n                transfer_in_save = 1;\n\n                output_eth_payload_tdata_int[ 7: 0] = ip_dest_ip_reg[31:24];\n                output_eth_payload_tdata_int[15: 8] = ip_dest_ip_reg[23:16];\n                output_eth_payload_tdata_int[23:16] = ip_dest_ip_reg[15: 8];\n                output_eth_payload_tdata_int[31:24] = ip_dest_ip_reg[ 7: 0];\n                output_eth_payload_tdata_int[39:32] = shift_ip_payload_tdata[39:32];\n                output_eth_payload_tdata_int[47:40] = shift_ip_payload_tdata[47:40];\n                output_eth_payload_tdata_int[55:48] = shift_ip_payload_tdata[55:48];\n                output_eth_payload_tdata_int[63:56] = shift_ip_payload_tdata[63:56];\n                output_eth_payload_tkeep_int = {shift_ip_payload_tkeep[7:4], 4'hF};\n                output_eth_payload_tlast_int = shift_ip_payload_tlast;\n                output_eth_payload_tuser_int = shift_ip_payload_tuser;\n                frame_ptr_next = frame_ptr_reg+keep2count(output_eth_payload_tkeep_int);\n\n                if (frame_ptr_next >= ip_length_reg) begin\n                    // have entire payload\n                    frame_ptr_next = ip_length_reg;\n                    output_eth_payload_tkeep_int = count2keep(ip_length_reg - frame_ptr_reg);\n                    if (shift_ip_payload_tlast) begin\n                        input_ip_hdr_ready_next = ~output_eth_hdr_valid_reg;\n                        input_ip_payload_tready_next = 0;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        store_last_word = 1;\n                        input_ip_payload_tready_next = shift_ip_payload_input_tready;\n                        output_eth_payload_tvalid_int = 0;\n                        state_next = STATE_WRITE_PAYLOAD_LAST;\n                    end\n                end else begin\n                    if (shift_ip_payload_tlast) begin\n                        // end of frame, but length does not match\n                        error_payload_early_termination_next = 1;\n                        input_ip_payload_tready_next = shift_ip_payload_input_tready;\n                        output_eth_payload_tuser_int = 1;\n                        state_next = STATE_WAIT_LAST;\n                    end else begin\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                end\n            end else begin\n                state_next = STATE_WRITE_HEADER_LAST;\n            end\n        end\n        STATE_WRITE_PAYLOAD: begin\n            // write payload\n            input_ip_payload_tready_next = output_eth_payload_tready_int_early & shift_ip_payload_input_tready;\n\n            output_eth_payload_tdata_int = shift_ip_payload_tdata;\n            output_eth_payload_tkeep_int = shift_ip_payload_tkeep;\n            output_eth_payload_tvalid_int = shift_ip_payload_tvalid;\n            output_eth_payload_tlast_int = shift_ip_payload_tlast;\n            output_eth_payload_tuser_int = shift_ip_payload_tuser;\n\n            if (output_eth_payload_tready_int & shift_ip_payload_tvalid) begin\n                // word transfer through\n                frame_ptr_next = frame_ptr_reg+keep2count(shift_ip_payload_tkeep);\n                transfer_in_save = 1;\n                if (frame_ptr_next >= ip_length_reg) begin\n                    // have entire payload\n                    frame_ptr_next = ip_length_reg;\n                    output_eth_payload_tkeep_int = count2keep(ip_length_reg - frame_ptr_reg);\n                    if (shift_ip_payload_tlast) begin\n                        input_ip_payload_tready_next = 0;\n                        flush_save = 1;\n                        input_ip_hdr_ready_next = ~output_eth_hdr_valid_reg;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        store_last_word = 1;\n                        output_eth_payload_tvalid_int = 0;\n                        state_next = STATE_WRITE_PAYLOAD_LAST;\n                    end\n                end else begin\n                    if (shift_ip_payload_tlast) begin\n                        // end of frame, but length does not match\n                        error_payload_early_termination_next = 1;\n                        output_eth_payload_tuser_int = 1;\n                        input_ip_payload_tready_next = 0;\n                        flush_save = 1;\n                        input_ip_hdr_ready_next = ~output_eth_hdr_valid_reg;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        state_next = STATE_WRITE_PAYLOAD;\n                    end\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD;\n            end\n        end\n        STATE_WRITE_PAYLOAD_LAST: begin\n            // read and discard until end of frame\n            input_ip_payload_tready_next = output_eth_payload_tready_int_early & shift_ip_payload_input_tready;\n\n            output_eth_payload_tdata_int = last_word_data_reg;\n            output_eth_payload_tkeep_int = last_word_keep_reg;\n            output_eth_payload_tvalid_int = shift_ip_payload_tvalid & shift_ip_payload_tlast;\n            output_eth_payload_tlast_int = shift_ip_payload_tlast;\n            output_eth_payload_tuser_int = shift_ip_payload_tuser;\n\n            if (output_eth_payload_tready_int & shift_ip_payload_tvalid) begin\n                transfer_in_save = 1;\n                if (shift_ip_payload_tlast) begin\n                    input_ip_hdr_ready_next = ~output_eth_hdr_valid_reg;\n                    input_ip_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WRITE_PAYLOAD_LAST;\n                end\n            end else begin\n                state_next = STATE_WRITE_PAYLOAD_LAST;\n            end\n        end\n        STATE_WAIT_LAST: begin\n            // read and discard until end of frame\n            input_ip_payload_tready_next = shift_ip_payload_input_tready;\n\n            if (shift_ip_payload_tvalid) begin\n                transfer_in_save = 1;\n                if (shift_ip_payload_tlast) begin\n                    input_ip_hdr_ready_next = ~output_eth_hdr_valid_reg;\n                    input_ip_payload_tready_next = 0;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_WAIT_LAST;\n                end\n            end else begin\n                state_next = STATE_WAIT_LAST;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        frame_ptr_reg <= 0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[250, "    input_ip_hdr_ready_next = 0;\n"], [251, "    input_ip_payload_tready_next = 0;\n"], [253, "    store_ip_hdr = 0;\n"], [255, "    store_last_word = 0;\n"], [257, "    flush_save = 0;\n"], [258, "    transfer_in_save = 0;\n"], [262, "    hdr_sum_temp = 0;\n"], [267, "    error_payload_early_termination_next = 0;\n"], [269, "    output_eth_payload_tdata_int = 0;\n"], [270, "    output_eth_payload_tkeep_int = 0;\n"], [271, "    output_eth_payload_tvalid_int = 0;\n"], [272, "    output_eth_payload_tlast_int = 0;\n"], [273, "    output_eth_payload_tuser_int = 0;\n"], [278, "            frame_ptr_next = 0;\n"], [279, "            flush_save = 1;\n"], [283, "                store_ip_hdr = 1;\n"], [293, "                input_ip_hdr_ready_next = 0;\n"], [294, "                output_eth_hdr_valid_next = 1;\n"], [295, "                if (output_eth_payload_tready_int) begin\n"], [296, "                    output_eth_payload_tvalid_int = 1;\n"], [306, "                    frame_ptr_next = 8;\n"], [315, "            if (output_eth_payload_tready_int) begin\n"], [316, "                frame_ptr_next = frame_ptr_reg+8;\n"], [317, "                output_eth_payload_tvalid_int = 1;\n"], [356, "                output_eth_payload_tvalid_int = 1;\n"], [357, "                transfer_in_save = 1;\n"], [378, "                        input_ip_payload_tready_next = 0;\n"], [381, "                        store_last_word = 1;\n"], [383, "                        output_eth_payload_tvalid_int = 0;\n"], [389, "                        error_payload_early_termination_next = 1;\n"], [391, "                        output_eth_payload_tuser_int = 1;\n"], [411, "            if (output_eth_payload_tready_int & shift_ip_payload_tvalid) begin\n"], [414, "                transfer_in_save = 1;\n"], [420, "                        input_ip_payload_tready_next = 0;\n"], [421, "                        flush_save = 1;\n"], [425, "                        store_last_word = 1;\n"], [426, "                        output_eth_payload_tvalid_int = 0;\n"], [432, "                        error_payload_early_termination_next = 1;\n"], [433, "                        output_eth_payload_tuser_int = 1;\n"], [434, "                        input_ip_payload_tready_next = 0;\n"], [435, "                        flush_save = 1;\n"], [456, "            if (output_eth_payload_tready_int & shift_ip_payload_tvalid) begin\n"], [457, "                transfer_in_save = 1;\n"], [460, "                    input_ip_payload_tready_next = 0;\n"], [474, "                transfer_in_save = 1;\n"], [477, "                    input_ip_payload_tready_next = 0;\n"]], "Add": [[251, "    input_ip_hdr_ready_next = 1'b0;\n"], [251, "    input_ip_payload_tready_next = 1'b0;\n"], [253, "    store_ip_hdr = 1'b0;\n"], [255, "    store_last_word = 1'b0;\n"], [258, "    flush_save = 1'b0;\n"], [258, "    transfer_in_save = 1'b0;\n"], [262, "    hdr_sum_temp = 16'd0;\n"], [267, "    error_payload_early_termination_next = 1'b0;\n"], [273, "    output_eth_payload_tdata_int = 1'b0;\n"], [273, "    output_eth_payload_tkeep_int = 1'b0;\n"], [273, "    output_eth_payload_tvalid_int = 1'b0;\n"], [273, "    output_eth_payload_tlast_int = 1'b0;\n"], [273, "    output_eth_payload_tuser_int = 1'b0;\n"], [279, "            frame_ptr_next = 16'd0;\n"], [279, "            flush_save = 1'b1;\n"], [283, "                store_ip_hdr = 1'b1;\n"], [296, "                input_ip_hdr_ready_next = 1'b0;\n"], [296, "                output_eth_hdr_valid_next = 1'b1;\n"], [296, "                if (output_eth_payload_tready_int_reg) begin\n"], [296, "                    output_eth_payload_tvalid_int = 1'b1;\n"], [306, "                    frame_ptr_next = 16'd8;\n"], [317, "            if (output_eth_payload_tready_int_reg) begin\n"], [317, "                frame_ptr_next = frame_ptr_reg + 16'd8;\n"], [317, "                output_eth_payload_tvalid_int = 1'b1;\n"], [357, "                output_eth_payload_tvalid_int = 1'b1;\n"], [357, "                transfer_in_save = 1'b1;\n"], [378, "                        input_ip_payload_tready_next = 1'b0;\n"], [381, "                        store_last_word = 1'b1;\n"], [383, "                        output_eth_payload_tvalid_int = 1'b0;\n"], [389, "                        error_payload_early_termination_next = 1'b1;\n"], [391, "                        output_eth_payload_tuser_int = 1'b1;\n"], [411, "            if (output_eth_payload_tready_int_reg & shift_ip_payload_tvalid) begin\n"], [414, "                transfer_in_save = 1'b1;\n"], [421, "                        input_ip_payload_tready_next = 1'b0;\n"], [421, "                        flush_save = 1'b1;\n"], [426, "                        store_last_word = 1'b1;\n"], [426, "                        output_eth_payload_tvalid_int = 1'b0;\n"], [435, "                        error_payload_early_termination_next = 1'b1;\n"], [435, "                        output_eth_payload_tuser_int = 1'b1;\n"], [435, "                        input_ip_payload_tready_next = 1'b0;\n"], [435, "                        flush_save = 1'b1;\n"], [457, "            if (output_eth_payload_tready_int_reg & shift_ip_payload_tvalid) begin\n"], [457, "                transfer_in_save = 1'b1;\n"], [460, "                    input_ip_payload_tready_next = 1'b0;\n"], [474, "                transfer_in_save = 1'b1;\n"], [477, "                    input_ip_payload_tready_next = 1'b0;\n"]]}}