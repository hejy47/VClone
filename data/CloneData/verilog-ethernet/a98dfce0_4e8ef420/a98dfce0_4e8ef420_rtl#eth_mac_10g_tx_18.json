{"Source Block": ["verilog-ethernet/rtl/eth_mac_10g_tx.v@290:550@HdlStmProcess", "            ifg_offset = 0;\n        end\n    endcase\nend\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    reset_crc = 0;\n    update_crc = 0;\n\n    swap_lanes = 0;\n    unswap_lanes = 0;\n\n    frame_ptr_next = frame_ptr_reg;\n\n    ifg_count_next = ifg_count_reg;\n    deficit_idle_count_next = deficit_idle_count_reg;\n\n    input_axis_tready_next = 0;\n\n    input_tdata_next = input_tdata_reg;\n    input_tkeep_next = input_tkeep_reg;\n\n    // XGMII idle\n    xgmii_txd_next = 64'h0707070707070707;\n    xgmii_txc_next = 8'b11111111;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for data\n            frame_ptr_next = 8;\n            reset_crc = 1;\n            input_axis_tready_next = 1;\n\n            // XGMII idle\n            xgmii_txd_next = 64'h0707070707070707;\n            xgmii_txc_next = 8'b11111111;\n\n            input_tdata_next = input_axis_tdata_masked;\n            input_tkeep_next = input_axis_tkeep;\n\n            if (input_axis_tvalid) begin\n                // XGMII start and preamble\n                if (ifg_count_reg > 0) begin\n                    // need to send more idles - swap lanes\n                    swap_lanes = 1;\n                end else begin\n                    // no more idles - unswap\n                    unswap_lanes = 1;\n                end\n                xgmii_txd_next = 64'hd5555555555555fb;\n                xgmii_txc_next = 8'b00000001;\n                input_axis_tready_next = 1;\n                state_next = STATE_PAYLOAD;\n            end else begin\n                ifg_count_next = 0;\n                deficit_idle_count_next = 0;\n                unswap_lanes = 1;\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_PAYLOAD: begin\n            // transfer payload\n            update_crc = 1;\n            input_axis_tready_next = 1;\n\n            frame_ptr_next = frame_ptr_reg + 8;\n\n            xgmii_txd_next = input_tdata_reg;\n            xgmii_txc_next = 8'b00000000;\n\n            input_tdata_next = input_axis_tdata_masked;\n            input_tkeep_next = input_axis_tkeep;\n\n            if (input_axis_tvalid) begin\n                if (input_axis_tlast) begin\n                    frame_ptr_next = frame_ptr_reg + keep2count(input_axis_tkeep);\n                    input_axis_tready_next = 0;\n                    if (input_axis_tuser) begin\n                        xgmii_txd_next = 64'h070707fdfefefefe;\n                        xgmii_txc_next = 8'b11111111;\n                        frame_ptr_next = 0;\n                        ifg_count_next = 8;\n                        state_next = STATE_IFG;\n                    end else begin\n                        input_axis_tready_next = 0;\n\n                        if (ENABLE_PADDING && (frame_ptr_reg < MIN_FL_NOCRC_MS || (frame_ptr_reg == MIN_FL_NOCRC_MS && keep2count(input_axis_tkeep) < MIN_FL_NOCRC_LS))) begin\n                            input_tkeep_next = 8'hff;\n                            frame_ptr_next = frame_ptr_reg + 8;\n\n                            if (frame_ptr_reg < MIN_FL_NOCRC_MS) begin\n                                state_next = STATE_PAD;\n                            end else begin\n                                input_tkeep_next = 8'hff >> (8-MIN_FL_NOCRC_LS);\n                                state_next = STATE_FCS_1;\n                            end\n                        end else begin\n                            state_next = STATE_FCS_1;\n                        end\n                    end\n                end else begin\n                    state_next = STATE_PAYLOAD;\n                end\n            end else begin\n                // tvalid deassert, fail frame\n                xgmii_txd_next = 64'h070707fdfefefefe;\n                xgmii_txc_next = 8'b11111111;\n                frame_ptr_next = 0;\n                ifg_count_next = 8;\n                state_next = STATE_WAIT_END;\n            end\n        end\n        STATE_PAD: begin\n            input_axis_tready_next = 0;\n\n            xgmii_txd_next = input_tdata_reg;\n            xgmii_txc_next = 8'b00000000;\n\n            input_tdata_next = 0;\n            input_tkeep_next = 8'hff;\n\n            update_crc = 1;\n            frame_ptr_next = frame_ptr_reg + 8;\n\n            if (frame_ptr_reg < MIN_FL_NOCRC_MS) begin\n                state_next = STATE_PAD;\n            end else begin\n                input_tkeep_next = 8'hff >> (8-MIN_FL_NOCRC_LS);\n\n                state_next = STATE_FCS_1;\n            end\n        end\n        STATE_FCS_1: begin\n            // last cycle\n            input_axis_tready_next = 0;\n\n            xgmii_txd_next = fcs_output_txd_0;\n            xgmii_txc_next = fcs_output_txc_0;\n\n            frame_ptr_next = 0;\n\n            ifg_count_next = (ifg_delay > 12 ? ifg_delay : 12) - ifg_offset + (lanes_swapped ? 4 : 0) + deficit_idle_count_reg;\n            if (fcs_output_txc_1 != 8'hff || fcs_output_txc_0 == 0) begin\n                state_next = STATE_FCS_2;\n            end else begin\n                state_next = STATE_IFG;\n            end\n        end\n        STATE_FCS_2: begin\n            // last cycle\n            input_axis_tready_next = 0;\n\n            xgmii_txd_next = fcs_output_txd_1;\n            xgmii_txc_next = fcs_output_txc_1;\n            \n            reset_crc = 1;\n            frame_ptr_next = 0;\n\n            if (ENABLE_DIC) begin\n                if (ifg_count_next > 7) begin\n                    state_next = STATE_IFG;\n                end else begin\n                    if (ifg_count_next >= 4) begin\n                        deficit_idle_count_next = ifg_count_next - 4;\n                    end else begin\n                        deficit_idle_count_next = ifg_count_next;\n                        ifg_count_next = 0;\n                    end\n                    input_axis_tready_next = 1;\n                    state_next = STATE_IDLE;\n                end\n            end else begin\n                if (ifg_count_next > 4) begin\n                    state_next = STATE_IFG;\n                end else begin\n                    input_axis_tready_next = 1;\n                    state_next = STATE_IDLE;\n                end\n            end\n        end\n        STATE_IFG: begin\n            // send IFG\n            if (ifg_count_reg > 8) begin\n                ifg_count_next = ifg_count_reg - 8;\n            end else begin\n                ifg_count_next = 0;\n            end\n\n            reset_crc = 1;\n\n            if (ENABLE_DIC) begin\n                if (ifg_count_next > 7) begin\n                    state_next = STATE_IFG;\n                end else begin\n                    if (ifg_count_next >= 4) begin\n                        deficit_idle_count_next = ifg_count_next - 4;\n                    end else begin\n                        deficit_idle_count_next = ifg_count_next;\n                        ifg_count_next = 0;\n                    end\n                    input_axis_tready_next = 1;\n                    state_next = STATE_IDLE;\n                end\n            end else begin\n                if (ifg_count_next > 4) begin\n                    state_next = STATE_IFG;\n                end else begin\n                    input_axis_tready_next = 1;\n                    state_next = STATE_IDLE;\n                end\n            end\n        end\n        STATE_WAIT_END: begin\n            // wait for end of frame\n            if (ifg_count_reg > 8) begin\n                ifg_count_next = ifg_count_reg - 8;\n            end else begin\n                ifg_count_next = 0;\n            end\n\n            reset_crc = 1;\n\n            if (input_axis_tvalid) begin\n                if (input_axis_tlast) begin\n                    if (ENABLE_DIC) begin\n                        if (ifg_count_next > 7) begin\n                            state_next = STATE_IFG;\n                        end else begin\n                            if (ifg_count_next >= 4) begin\n                                deficit_idle_count_next = ifg_count_next - 4;\n                            end else begin\n                                deficit_idle_count_next = ifg_count_next;\n                                ifg_count_next = 0;\n                            end\n                            input_axis_tready_next = 1;\n                            state_next = STATE_IDLE;\n                        end\n                    end else begin\n                        if (ifg_count_next > 4) begin\n                            state_next = STATE_IFG;\n                        end else begin\n                            input_axis_tready_next = 1;\n                            state_next = STATE_IDLE;\n                        end\n                    end\n                end else begin\n                    state_next = STATE_WAIT_END;\n                end\n            end else begin\n                state_next = STATE_WAIT_END;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        \n"], "Clone Blocks": [], "Diff Content": {"Delete": [[298, "    reset_crc = 0;\n"], [299, "    update_crc = 0;\n"], [301, "    swap_lanes = 0;\n"], [302, "    unswap_lanes = 0;\n"], [309, "    input_axis_tready_next = 0;\n"], [321, "            frame_ptr_next = 8;\n"], [322, "            reset_crc = 1;\n"], [323, "            input_axis_tready_next = 1;\n"], [334, "                if (ifg_count_reg > 0) begin\n"], [336, "                    swap_lanes = 1;\n"], [339, "                    unswap_lanes = 1;\n"], [343, "                input_axis_tready_next = 1;\n"], [346, "                ifg_count_next = 0;\n"], [347, "                deficit_idle_count_next = 0;\n"], [348, "                unswap_lanes = 1;\n"], [354, "            update_crc = 1;\n"], [355, "            input_axis_tready_next = 1;\n"], [357, "            frame_ptr_next = frame_ptr_reg + 8;\n"], [368, "                    input_axis_tready_next = 0;\n"], [372, "                        frame_ptr_next = 0;\n"], [373, "                        ifg_count_next = 8;\n"], [376, "                        input_axis_tready_next = 0;\n"], [380, "                            frame_ptr_next = frame_ptr_reg + 8;\n"], [399, "                frame_ptr_next = 0;\n"], [400, "                ifg_count_next = 8;\n"], [405, "            input_axis_tready_next = 0;\n"], [410, "            input_tdata_next = 0;\n"], [413, "            update_crc = 1;\n"], [414, "            frame_ptr_next = frame_ptr_reg + 8;\n"], [426, "            input_axis_tready_next = 0;\n"], [431, "            frame_ptr_next = 0;\n"], [433, "            ifg_count_next = (ifg_delay > 12 ? ifg_delay : 12) - ifg_offset + (lanes_swapped ? 4 : 0) + deficit_idle_count_reg;\n"], [434, "            if (fcs_output_txc_1 != 8'hff || fcs_output_txc_0 == 0) begin\n"], [442, "            input_axis_tready_next = 0;\n"], [447, "            reset_crc = 1;\n"], [448, "            frame_ptr_next = 0;\n"], [451, "                if (ifg_count_next > 7) begin\n"], [454, "                    if (ifg_count_next >= 4) begin\n"], [455, "                        deficit_idle_count_next = ifg_count_next - 4;\n"], [458, "                        ifg_count_next = 0;\n"], [460, "                    input_axis_tready_next = 1;\n"], [464, "                if (ifg_count_next > 4) begin\n"], [467, "                    input_axis_tready_next = 1;\n"], [474, "            if (ifg_count_reg > 8) begin\n"], [475, "                ifg_count_next = ifg_count_reg - 8;\n"], [477, "                ifg_count_next = 0;\n"], [480, "            reset_crc = 1;\n"], [483, "                if (ifg_count_next > 7) begin\n"], [486, "                    if (ifg_count_next >= 4) begin\n"], [487, "                        deficit_idle_count_next = ifg_count_next - 4;\n"], [490, "                        ifg_count_next = 0;\n"], [492, "                    input_axis_tready_next = 1;\n"], [496, "                if (ifg_count_next > 4) begin\n"], [499, "                    input_axis_tready_next = 1;\n"], [506, "            if (ifg_count_reg > 8) begin\n"], [507, "                ifg_count_next = ifg_count_reg - 8;\n"], [509, "                ifg_count_next = 0;\n"], [512, "            reset_crc = 1;\n"], [517, "                        if (ifg_count_next > 7) begin\n"], [520, "                            if (ifg_count_next >= 4) begin\n"], [521, "                                deficit_idle_count_next = ifg_count_next - 4;\n"], [524, "                                ifg_count_next = 0;\n"], [526, "                            input_axis_tready_next = 1;\n"], [530, "                        if (ifg_count_next > 4) begin\n"], [533, "                            input_axis_tready_next = 1;\n"]], "Add": [[299, "    reset_crc = 1'b0;\n"], [299, "    update_crc = 1'b0;\n"], [302, "    swap_lanes = 1'b0;\n"], [302, "    unswap_lanes = 1'b0;\n"], [309, "    input_axis_tready_next = 1'b0;\n"], [323, "            frame_ptr_next = 16'd8;\n"], [323, "            reset_crc = 1'b1;\n"], [323, "            input_axis_tready_next = 1'b1;\n"], [334, "                if (ifg_count_reg > 8'd0) begin\n"], [336, "                    swap_lanes = 1'b1;\n"], [339, "                    unswap_lanes = 1'b1;\n"], [343, "                input_axis_tready_next = 1'b1;\n"], [348, "                ifg_count_next = 8'd0;\n"], [348, "                deficit_idle_count_next = 2'd0;\n"], [348, "                unswap_lanes = 1'b1;\n"], [355, "            update_crc = 1'b1;\n"], [355, "            input_axis_tready_next = 1'b1;\n"], [357, "            frame_ptr_next = frame_ptr_reg + 16'd8;\n"], [368, "                    input_axis_tready_next = 1'b0;\n"], [373, "                        frame_ptr_next = 16'd0;\n"], [373, "                        ifg_count_next = 8'd8;\n"], [376, "                        input_axis_tready_next = 1'b0;\n"], [380, "                            frame_ptr_next = frame_ptr_reg + 16'd8;\n"], [400, "                frame_ptr_next = 16'd0;\n"], [400, "                ifg_count_next = 8'd8;\n"], [405, "            input_axis_tready_next = 1'b0;\n"], [410, "            input_tdata_next = 64'd0;\n"], [414, "            update_crc = 1'b1;\n"], [414, "            frame_ptr_next = frame_ptr_reg + 16'd8;\n"], [426, "            input_axis_tready_next = 1'b0;\n"], [431, "            frame_ptr_next = 16'd0;\n"], [434, "            ifg_count_next = (ifg_delay > 8'd12 ? ifg_delay : 8'd12) - ifg_offset + (lanes_swapped ? 8'd4 : 8'd0) + deficit_idle_count_reg;\n"], [434, "            if (fcs_output_txc_1 != 8'hff || fcs_output_txc_0 == 8'd0) begin\n"], [442, "            input_axis_tready_next = 1'b0;\n"], [448, "            reset_crc = 1'b1;\n"], [448, "            frame_ptr_next = 16'd0;\n"], [451, "                if (ifg_count_next > 8'd7) begin\n"], [455, "                    if (ifg_count_next >= 8'd4) begin\n"], [455, "                        deficit_idle_count_next = ifg_count_next - 8'd4;\n"], [458, "                        ifg_count_next = 8'd0;\n"], [460, "                    input_axis_tready_next = 1'b1;\n"], [464, "                if (ifg_count_next > 8'd4) begin\n"], [467, "                    input_axis_tready_next = 1'b1;\n"], [475, "            if (ifg_count_reg > 8'd8) begin\n"], [475, "                ifg_count_next = ifg_count_reg - 8'd8;\n"], [477, "                ifg_count_next = 8'd0;\n"], [480, "            reset_crc = 1'b1;\n"], [483, "                if (ifg_count_next > 8'd7) begin\n"], [487, "                    if (ifg_count_next >= 8'd4) begin\n"], [487, "                        deficit_idle_count_next = ifg_count_next - 8'd4;\n"], [490, "                        ifg_count_next = 8'd0;\n"], [492, "                    input_axis_tready_next = 1'b1;\n"], [496, "                if (ifg_count_next > 8'd4) begin\n"], [499, "                    input_axis_tready_next = 1'b1;\n"], [507, "            if (ifg_count_reg > 8'd8) begin\n"], [507, "                ifg_count_next = ifg_count_reg - 8'd8;\n"], [509, "                ifg_count_next = 8'd0;\n"], [512, "            reset_crc = 1'b1;\n"], [517, "                        if (ifg_count_next > 8'd7) begin\n"], [521, "                            if (ifg_count_next >= 8'd4) begin\n"], [521, "                                deficit_idle_count_next = ifg_count_next - 8'd4;\n"], [524, "                                ifg_count_next = 8'd0;\n"], [526, "                            input_axis_tready_next = 1'b1;\n"], [530, "                        if (ifg_count_next > 8'd4) begin\n"], [533, "                            input_axis_tready_next = 1'b1;\n"]]}}