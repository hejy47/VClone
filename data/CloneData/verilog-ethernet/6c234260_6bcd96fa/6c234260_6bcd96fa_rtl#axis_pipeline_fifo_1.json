{"Source Block": ["verilog-ethernet/rtl/axis_pipeline_fifo.v@85:256@HdlStmIf", "\nparameter FIFO_ADDR_WIDTH = LENGTH < 2 ? 3 : $clog2(LENGTH*4);\n\ngenerate\n\nif (LENGTH > 0) begin\n\n    // pipeline\n    (* shreg_extract = \"no\" *)\n    reg [DATA_WIDTH-1:0]  axis_tdata_reg[0:LENGTH-1];\n    (* shreg_extract = \"no\" *)\n    reg [KEEP_WIDTH-1:0]  axis_tkeep_reg[0:LENGTH-1];\n    (* shreg_extract = \"no\" *)\n    reg                   axis_tvalid_reg[0:LENGTH-1];\n    (* shreg_extract = \"no\" *)\n    reg                   axis_tready_reg[0:LENGTH-1];\n    (* shreg_extract = \"no\" *)\n    reg                   axis_tlast_reg[0:LENGTH-1];\n    (* shreg_extract = \"no\" *)\n    reg [ID_WIDTH-1:0]    axis_tid_reg[0:LENGTH-1];\n    (* shreg_extract = \"no\" *)\n    reg [DEST_WIDTH-1:0]  axis_tdest_reg[0:LENGTH-1];\n    (* shreg_extract = \"no\" *)\n    reg [USER_WIDTH-1:0]  axis_tuser_reg[0:LENGTH-1];\n\n    wire [DATA_WIDTH-1:0] m_axis_tdata_int = axis_tdata_reg[LENGTH-1];\n    wire [KEEP_WIDTH-1:0] m_axis_tkeep_int = axis_tkeep_reg[LENGTH-1];\n    wire                  m_axis_tvalid_int = axis_tvalid_reg[LENGTH-1];\n    wire                  m_axis_tready_int;\n    wire                  m_axis_tlast_int = axis_tlast_reg[LENGTH-1];\n    wire [ID_WIDTH-1:0]   m_axis_tid_int = axis_tid_reg[LENGTH-1];\n    wire [DEST_WIDTH-1:0] m_axis_tdest_int = axis_tdest_reg[LENGTH-1];\n    wire [USER_WIDTH-1:0] m_axis_tuser_int = axis_tuser_reg[LENGTH-1];\n\n    assign s_axis_tready = axis_tready_reg[0];\n\n    integer i;\n\n    initial begin\n        for (i = 0; i < LENGTH; i = i + 1) begin\n            axis_tdata_reg[i] = {DATA_WIDTH{1'b0}};\n            axis_tkeep_reg[i] = {KEEP_WIDTH{1'b0}};\n            axis_tvalid_reg[i] = 1'b0;\n            axis_tready_reg[i] = 1'b0;\n            axis_tlast_reg[i] = 1'b0;\n            axis_tid_reg[i] = {ID_WIDTH{1'b0}};\n            axis_tdest_reg[i] = {DEST_WIDTH{1'b0}};\n            axis_tuser_reg[i] = {USER_WIDTH{1'b0}};\n        end\n    end\n\n    always @(posedge clk) begin\n        axis_tdata_reg[0] <= s_axis_tdata;\n        axis_tkeep_reg[0] <= s_axis_tkeep;\n        axis_tvalid_reg[0] <= s_axis_tvalid && s_axis_tready;\n        axis_tlast_reg[0] <= s_axis_tlast;\n        axis_tid_reg[0] <= s_axis_tid;\n        axis_tdest_reg[0] <= s_axis_tdest;\n        axis_tuser_reg[0] <= s_axis_tuser;\n\n        axis_tready_reg[LENGTH-1] <= m_axis_tready_int;\n\n        for (i = 0; i < LENGTH-1; i = i + 1) begin\n            axis_tdata_reg[i+1] <= axis_tdata_reg[i];\n            axis_tkeep_reg[i+1] <= axis_tkeep_reg[i];\n            axis_tvalid_reg[i+1] <= axis_tvalid_reg[i];\n            axis_tlast_reg[i+1] <= axis_tlast_reg[i];\n            axis_tid_reg[i+1] <= axis_tid_reg[i];\n            axis_tdest_reg[i+1] <= axis_tdest_reg[i];\n            axis_tuser_reg[i+1] <= axis_tuser_reg[i];\n\n            axis_tready_reg[i] <= axis_tready_reg[i+1];\n        end\n\n        if (rst) begin\n            for (i = 0; i < LENGTH; i = i + 1) begin\n                axis_tvalid_reg[i] = 1'b0;\n                axis_tready_reg[i] = 1'b0;\n            end\n        end\n    end\n\n    // output datapath logic\n    reg [DATA_WIDTH-1:0] m_axis_tdata_reg  = {DATA_WIDTH{1'b0}};\n    reg [KEEP_WIDTH-1:0] m_axis_tkeep_reg  = {KEEP_WIDTH{1'b0}};\n    reg                  m_axis_tvalid_reg = 1'b0;\n    reg                  m_axis_tlast_reg  = 1'b0;\n    reg [ID_WIDTH-1:0]   m_axis_tid_reg    = {ID_WIDTH{1'b0}};\n    reg [DEST_WIDTH-1:0] m_axis_tdest_reg  = {DEST_WIDTH{1'b0}};\n    reg [USER_WIDTH-1:0] m_axis_tuser_reg  = {USER_WIDTH{1'b0}};\n\n    reg [FIFO_ADDR_WIDTH+1-1:0] out_fifo_wr_ptr_reg = 0;\n    reg [FIFO_ADDR_WIDTH+1-1:0] out_fifo_rd_ptr_reg = 0;\n    reg out_fifo_half_full_reg = 1'b0;\n\n    wire out_fifo_full = out_fifo_wr_ptr_reg == (out_fifo_rd_ptr_reg ^ {1'b1, {FIFO_ADDR_WIDTH{1'b0}}});\n    wire out_fifo_empty = out_fifo_wr_ptr_reg == out_fifo_rd_ptr_reg;\n\n    (* ram_style = \"distributed\" *)\n    reg [DATA_WIDTH-1:0] out_fifo_tdata[2**FIFO_ADDR_WIDTH-1:0];\n    (* ram_style = \"distributed\" *)\n    reg [KEEP_WIDTH-1:0] out_fifo_tkeep[2**FIFO_ADDR_WIDTH-1:0];\n    (* ram_style = \"distributed\" *)\n    reg                  out_fifo_tlast[2**FIFO_ADDR_WIDTH-1:0];\n    (* ram_style = \"distributed\" *)\n    reg [ID_WIDTH-1:0]   out_fifo_tid[2**FIFO_ADDR_WIDTH-1:0];\n    (* ram_style = \"distributed\" *)\n    reg [DEST_WIDTH-1:0] out_fifo_tdest[2**FIFO_ADDR_WIDTH-1:0];\n    (* ram_style = \"distributed\" *)\n    reg [USER_WIDTH-1:0] out_fifo_tuser[2**FIFO_ADDR_WIDTH-1:0];\n\n    assign m_axis_tready_int = !out_fifo_half_full_reg;\n\n    assign m_axis_tdata  = m_axis_tdata_reg;\n    assign m_axis_tkeep  = KEEP_ENABLE ? m_axis_tkeep_reg : {KEEP_WIDTH{1'b1}};\n    assign m_axis_tvalid = m_axis_tvalid_reg;\n    assign m_axis_tlast  = LAST_ENABLE ? m_axis_tlast_reg : 1'b1;\n    assign m_axis_tid    = ID_ENABLE   ? m_axis_tid_reg   : {ID_WIDTH{1'b0}};\n    assign m_axis_tdest  = DEST_ENABLE ? m_axis_tdest_reg : {DEST_WIDTH{1'b0}};\n    assign m_axis_tuser  = USER_ENABLE ? m_axis_tuser_reg : {USER_WIDTH{1'b0}};\n\n    always @(posedge clk) begin\n        m_axis_tvalid_reg <= m_axis_tvalid_reg && !m_axis_tready;\n\n        out_fifo_half_full_reg <= $unsigned(out_fifo_wr_ptr_reg - out_fifo_rd_ptr_reg) >= 2**(FIFO_ADDR_WIDTH-1);\n\n        if (!out_fifo_full && m_axis_tvalid_int) begin\n            out_fifo_tdata[out_fifo_wr_ptr_reg[FIFO_ADDR_WIDTH-1:0]] <= m_axis_tdata_int;\n            out_fifo_tkeep[out_fifo_wr_ptr_reg[FIFO_ADDR_WIDTH-1:0]] <= m_axis_tkeep_int;\n            out_fifo_tlast[out_fifo_wr_ptr_reg[FIFO_ADDR_WIDTH-1:0]] <= m_axis_tlast_int;\n            out_fifo_tid[out_fifo_wr_ptr_reg[FIFO_ADDR_WIDTH-1:0]] <= m_axis_tid_int;\n            out_fifo_tdest[out_fifo_wr_ptr_reg[FIFO_ADDR_WIDTH-1:0]] <= m_axis_tdest_int;\n            out_fifo_tuser[out_fifo_wr_ptr_reg[FIFO_ADDR_WIDTH-1:0]] <= m_axis_tuser_int;\n            out_fifo_wr_ptr_reg <= out_fifo_wr_ptr_reg + 1;\n        end\n\n        if (!out_fifo_empty && (!m_axis_tvalid_reg || m_axis_tready)) begin\n            m_axis_tdata_reg <= out_fifo_tdata[out_fifo_rd_ptr_reg[FIFO_ADDR_WIDTH-1:0]];\n            m_axis_tkeep_reg <= out_fifo_tkeep[out_fifo_rd_ptr_reg[FIFO_ADDR_WIDTH-1:0]];\n            m_axis_tvalid_reg <= 1'b1;\n            m_axis_tlast_reg <= out_fifo_tlast[out_fifo_rd_ptr_reg[FIFO_ADDR_WIDTH-1:0]];\n            m_axis_tid_reg <= out_fifo_tid[out_fifo_rd_ptr_reg[FIFO_ADDR_WIDTH-1:0]];\n            m_axis_tdest_reg <= out_fifo_tdest[out_fifo_rd_ptr_reg[FIFO_ADDR_WIDTH-1:0]];\n            m_axis_tuser_reg <= out_fifo_tuser[out_fifo_rd_ptr_reg[FIFO_ADDR_WIDTH-1:0]];\n            out_fifo_rd_ptr_reg <= out_fifo_rd_ptr_reg + 1;\n        end\n\n        if (rst) begin\n            out_fifo_wr_ptr_reg <= 0;\n            out_fifo_rd_ptr_reg <= 0;\n            m_axis_tvalid_reg <= 1'b0;\n        end\n    end\n\nend else begin\n    // bypass\n\n    assign m_axis_tdata  = s_axis_tdata;\n    assign m_axis_tkeep  = KEEP_ENABLE ? s_axis_tkeep : {KEEP_WIDTH{1'b1}};\n    assign m_axis_tvalid = s_axis_tvalid;\n    assign m_axis_tlast  = LAST_ENABLE ? s_axis_tlast : 1'b1;\n    assign m_axis_tid    = ID_ENABLE   ? s_axis_tid   : {ID_WIDTH{1'b0}};\n    assign m_axis_tdest  = DEST_ENABLE ? s_axis_tdest : {DEST_WIDTH{1'b0}};\n    assign m_axis_tuser  = USER_ENABLE ? s_axis_tuser : {USER_WIDTH{1'b0}};\n\n    assign s_axis_tready = m_axis_tready;\n\nend\n\nendgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[161, "                axis_tvalid_reg[i] = 1'b0;\n"], [162, "                axis_tready_reg[i] = 1'b0;\n"]], "Add": [[162, "                axis_tvalid_reg[i] <= 1'b0;\n"], [162, "                axis_tready_reg[i] <= 1'b0;\n"]]}}