Source Block: verilog-ethernet/rtl/eth_arb_mux.v@190:214@HdlStmProcess
    m_eth_payload_axis_tid_int    = current_s_tid;
    m_eth_payload_axis_tdest_int  = current_s_tdest;
    m_eth_payload_axis_tuser_int  = current_s_tuser;
end

always @(posedge clk) begin
    if (rst) begin
        frame_reg <= 1'b0;
        s_eth_hdr_ready_mask_reg <= 1'b0;
        m_eth_hdr_valid_reg <= 1'b0;
    end else begin
        frame_reg <= frame_next;
        s_eth_hdr_ready_mask_reg <= s_eth_hdr_ready_mask_next;
        m_eth_hdr_valid_reg <= m_eth_hdr_valid_next;
    end

    m_eth_dest_mac_reg <= m_eth_dest_mac_next;
    m_eth_src_mac_reg <= m_eth_src_mac_next;
    m_eth_type_reg <= m_eth_type_next;
end

// output datapath logic
reg [DATA_WIDTH-1:0] m_eth_payload_axis_tdata_reg  = {DATA_WIDTH{1'b0}};
reg [KEEP_WIDTH-1:0] m_eth_payload_axis_tkeep_reg  = {KEEP_WIDTH{1'b0}};
reg                  m_eth_payload_axis_tvalid_reg = 1'b0, m_eth_payload_axis_tvalid_next;

Diff Content:
- 196     if (rst) begin
- 197         frame_reg <= 1'b0;
- 198         s_eth_hdr_ready_mask_reg <= 1'b0;
- 199         m_eth_hdr_valid_reg <= 1'b0;
- 200     end else begin
- 201         frame_reg <= frame_next;
- 202         s_eth_hdr_ready_mask_reg <= s_eth_hdr_ready_mask_next;
- 203         m_eth_hdr_valid_reg <= m_eth_hdr_valid_next;
- 204     end
+ 204     frame_reg <= frame_next;
+ 204     s_eth_hdr_ready_reg <= s_eth_hdr_ready_next;
+ 204     m_eth_hdr_valid_reg <= m_eth_hdr_valid_next;
+ 208     if (rst) begin
+ 208         frame_reg <= 1'b0;
+ 208         s_eth_hdr_ready_reg <= {S_COUNT{1'b0}};
+ 208         m_eth_hdr_valid_reg <= 1'b0;
+ 208     end

Clone Blocks:
Clone Blocks 1:
verilog-ethernet/rtl/eth_mux.v@175:203
    m_eth_payload_axis_tid_int    = current_s_tid;
    m_eth_payload_axis_tdest_int  = current_s_tdest;
    m_eth_payload_axis_tuser_int  = current_s_tuser;
end

always @(posedge clk) begin
    if (rst) begin
        select_reg <= 0;
        frame_reg <= 1'b0;
        s_eth_hdr_ready_reg <= 0;
        s_eth_payload_axis_tready_reg <= 0;
        m_eth_hdr_valid_reg <= 1'b0;
    end else begin
        select_reg <= select_next;
        frame_reg <= frame_next;
        s_eth_hdr_ready_reg <= s_eth_hdr_ready_next;
        s_eth_payload_axis_tready_reg <= s_eth_payload_axis_tready_next;
        m_eth_hdr_valid_reg <= m_eth_hdr_valid_next;
    end

    m_eth_dest_mac_reg <= m_eth_dest_mac_next;
    m_eth_src_mac_reg <= m_eth_src_mac_next;
    m_eth_type_reg <= m_eth_type_next;
end

// output datapath logic
reg [DATA_WIDTH-1:0] m_eth_payload_axis_tdata_reg  = {DATA_WIDTH{1'b0}};
reg [KEEP_WIDTH-1:0] m_eth_payload_axis_tkeep_reg  = {KEEP_WIDTH{1'b0}};
reg                  m_eth_payload_axis_tvalid_reg = 1'b0, m_eth_payload_axis_tvalid_next;

