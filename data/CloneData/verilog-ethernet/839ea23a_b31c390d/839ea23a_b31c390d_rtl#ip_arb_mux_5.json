{"Source Block": ["verilog-ethernet/rtl/ip_arb_mux.v@268:305@HdlStmProcess", "    m_ip_payload_axis_tid_int    = current_s_tid;\n    m_ip_payload_axis_tdest_int  = current_s_tdest;\n    m_ip_payload_axis_tuser_int  = current_s_tuser;\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        frame_reg <= 1'b0;\n        s_ip_hdr_ready_mask_reg <= 1'b0;\n        m_ip_hdr_valid_reg <= 1'b0;\n    end else begin\n        frame_reg <= frame_next;\n        s_ip_hdr_ready_mask_reg <= s_ip_hdr_ready_mask_next;\n        m_ip_hdr_valid_reg <= m_ip_hdr_valid_next;\n    end\n\n    m_eth_dest_mac_reg <= m_eth_dest_mac_next;\n    m_eth_src_mac_reg <= m_eth_src_mac_next;\n    m_eth_type_reg <= m_eth_type_next;\n    m_ip_version_reg <= m_ip_version_next;\n    m_ip_ihl_reg <= m_ip_ihl_next;\n    m_ip_dscp_reg <= m_ip_dscp_next;\n    m_ip_ecn_reg <= m_ip_ecn_next;\n    m_ip_length_reg <= m_ip_length_next;\n    m_ip_identification_reg <= m_ip_identification_next;\n    m_ip_flags_reg <= m_ip_flags_next;\n    m_ip_fragment_offset_reg <= m_ip_fragment_offset_next;\n    m_ip_ttl_reg <= m_ip_ttl_next;\n    m_ip_protocol_reg <= m_ip_protocol_next;\n    m_ip_header_checksum_reg <= m_ip_header_checksum_next;\n    m_ip_source_ip_reg <= m_ip_source_ip_next;\n    m_ip_dest_ip_reg <= m_ip_dest_ip_next;\nend\n\n// output datapath logic\nreg [DATA_WIDTH-1:0] m_ip_payload_axis_tdata_reg  = {DATA_WIDTH{1'b0}};\nreg [KEEP_WIDTH-1:0] m_ip_payload_axis_tkeep_reg  = {KEEP_WIDTH{1'b0}};\nreg                  m_ip_payload_axis_tvalid_reg = 1'b0, m_ip_payload_axis_tvalid_next;\n"], "Clone Blocks": [["verilog-ethernet/rtl/ip_mux.v@253:294", "    m_ip_payload_axis_tid_int    = current_s_tid;\n    m_ip_payload_axis_tdest_int  = current_s_tdest;\n    m_ip_payload_axis_tuser_int  = current_s_tuser;\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        select_reg <= 0;\n        frame_reg <= 1'b0;\n        s_ip_hdr_ready_reg <= 0;\n        s_ip_payload_axis_tready_reg <= 0;\n        m_ip_hdr_valid_reg <= 1'b0;\n    end else begin\n        select_reg <= select_next;\n        frame_reg <= frame_next;\n        s_ip_hdr_ready_reg <= s_ip_hdr_ready_next;\n        s_ip_payload_axis_tready_reg <= s_ip_payload_axis_tready_next;\n        m_ip_hdr_valid_reg <= m_ip_hdr_valid_next;\n    end\n\n    m_eth_dest_mac_reg <= m_eth_dest_mac_next;\n    m_eth_src_mac_reg <= m_eth_src_mac_next;\n    m_eth_type_reg <= m_eth_type_next;\n    m_ip_version_reg <= m_ip_version_next;\n    m_ip_ihl_reg <= m_ip_ihl_next;\n    m_ip_dscp_reg <= m_ip_dscp_next;\n    m_ip_ecn_reg <= m_ip_ecn_next;\n    m_ip_length_reg <= m_ip_length_next;\n    m_ip_identification_reg <= m_ip_identification_next;\n    m_ip_flags_reg <= m_ip_flags_next;\n    m_ip_fragment_offset_reg <= m_ip_fragment_offset_next;\n    m_ip_ttl_reg <= m_ip_ttl_next;\n    m_ip_protocol_reg <= m_ip_protocol_next;\n    m_ip_header_checksum_reg <= m_ip_header_checksum_next;\n    m_ip_source_ip_reg <= m_ip_source_ip_next;\n    m_ip_dest_ip_reg <= m_ip_dest_ip_next;\nend\n\n// output datapath logic\nreg [DATA_WIDTH-1:0] m_ip_payload_axis_tdata_reg  = {DATA_WIDTH{1'b0}};\nreg [KEEP_WIDTH-1:0] m_ip_payload_axis_tkeep_reg  = {KEEP_WIDTH{1'b0}};\nreg                  m_ip_payload_axis_tvalid_reg = 1'b0, m_ip_payload_axis_tvalid_next;\n"], ["verilog-ethernet/rtl/udp_arb_mux.v@292:333", "    m_udp_payload_axis_tid_int    = current_s_tid;\n    m_udp_payload_axis_tdest_int  = current_s_tdest;\n    m_udp_payload_axis_tuser_int  = current_s_tuser;\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        frame_reg <= 1'b0;\n        s_udp_hdr_ready_mask_reg <= 1'b0;\n        m_udp_hdr_valid_reg <= 1'b0;\n    end else begin\n        frame_reg <= frame_next;\n        s_udp_hdr_ready_mask_reg <= s_udp_hdr_ready_mask_next;\n        m_udp_hdr_valid_reg <= m_udp_hdr_valid_next;\n    end\n\n    m_eth_dest_mac_reg <= m_eth_dest_mac_next;\n    m_eth_src_mac_reg <= m_eth_src_mac_next;\n    m_eth_type_reg <= m_eth_type_next;\n    m_ip_version_reg <= m_ip_version_next;\n    m_ip_ihl_reg <= m_ip_ihl_next;\n    m_ip_dscp_reg <= m_ip_dscp_next;\n    m_ip_ecn_reg <= m_ip_ecn_next;\n    m_ip_length_reg <= m_ip_length_next;\n    m_ip_identification_reg <= m_ip_identification_next;\n    m_ip_flags_reg <= m_ip_flags_next;\n    m_ip_fragment_offset_reg <= m_ip_fragment_offset_next;\n    m_ip_ttl_reg <= m_ip_ttl_next;\n    m_ip_protocol_reg <= m_ip_protocol_next;\n    m_ip_header_checksum_reg <= m_ip_header_checksum_next;\n    m_ip_source_ip_reg <= m_ip_source_ip_next;\n    m_ip_dest_ip_reg <= m_ip_dest_ip_next;\n    m_udp_source_port_reg <= m_udp_source_port_next;\n    m_udp_dest_port_reg <= m_udp_dest_port_next;\n    m_udp_length_reg <= m_udp_length_next;\n    m_udp_checksum_reg <= m_udp_checksum_next;\nend\n\n// output datapath logic\nreg [DATA_WIDTH-1:0] m_udp_payload_axis_tdata_reg  = {DATA_WIDTH{1'b0}};\nreg [KEEP_WIDTH-1:0] m_udp_payload_axis_tkeep_reg  = {KEEP_WIDTH{1'b0}};\nreg                  m_udp_payload_axis_tvalid_reg = 1'b0, m_udp_payload_axis_tvalid_next;\n"], ["verilog-ethernet/rtl/udp_mux.v@277:322", "    m_udp_payload_axis_tid_int    = current_s_tid;\n    m_udp_payload_axis_tdest_int  = current_s_tdest;\n    m_udp_payload_axis_tuser_int  = current_s_tuser;\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        select_reg <= 0;\n        frame_reg <= 1'b0;\n        s_udp_hdr_ready_reg <= 0;\n        s_udp_payload_axis_tready_reg <= 0;\n        m_udp_hdr_valid_reg <= 1'b0;\n    end else begin\n        select_reg <= select_next;\n        frame_reg <= frame_next;\n        s_udp_hdr_ready_reg <= s_udp_hdr_ready_next;\n        s_udp_payload_axis_tready_reg <= s_udp_payload_axis_tready_next;\n        m_udp_hdr_valid_reg <= m_udp_hdr_valid_next;\n    end\n\n    m_eth_dest_mac_reg <= m_eth_dest_mac_next;\n    m_eth_src_mac_reg <= m_eth_src_mac_next;\n    m_eth_type_reg <= m_eth_type_next;\n    m_ip_version_reg <= m_ip_version_next;\n    m_ip_ihl_reg <= m_ip_ihl_next;\n    m_ip_dscp_reg <= m_ip_dscp_next;\n    m_ip_ecn_reg <= m_ip_ecn_next;\n    m_ip_length_reg <= m_ip_length_next;\n    m_ip_identification_reg <= m_ip_identification_next;\n    m_ip_flags_reg <= m_ip_flags_next;\n    m_ip_fragment_offset_reg <= m_ip_fragment_offset_next;\n    m_ip_ttl_reg <= m_ip_ttl_next;\n    m_ip_protocol_reg <= m_ip_protocol_next;\n    m_ip_header_checksum_reg <= m_ip_header_checksum_next;\n    m_ip_source_ip_reg <= m_ip_source_ip_next;\n    m_ip_dest_ip_reg <= m_ip_dest_ip_next;\n    m_udp_source_port_reg <= m_udp_source_port_next;\n    m_udp_dest_port_reg <= m_udp_dest_port_next;\n    m_udp_length_reg <= m_udp_length_next;\n    m_udp_checksum_reg <= m_udp_checksum_next;\nend\n\n// output datapath logic\nreg [DATA_WIDTH-1:0] m_udp_payload_axis_tdata_reg  = {DATA_WIDTH{1'b0}};\nreg [KEEP_WIDTH-1:0] m_udp_payload_axis_tkeep_reg  = {KEEP_WIDTH{1'b0}};\nreg                  m_udp_payload_axis_tvalid_reg = 1'b0, m_udp_payload_axis_tvalid_next;\n"], ["verilog-ethernet/rtl/ip_demux.v@257:300", "    m_ip_payload_axis_tid_int    = s_ip_payload_axis_tid;\n    m_ip_payload_axis_tdest_int  = s_ip_payload_axis_tdest;\n    m_ip_payload_axis_tuser_int  = s_ip_payload_axis_tuser; \nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        select_reg <= 2'd0;\n        drop_reg <= 1'b0;\n        frame_reg <= 1'b0;\n        s_ip_hdr_ready_reg <= 1'b0;\n        s_ip_payload_axis_tready_reg <= 1'b0;\n        m_ip_hdr_valid_reg <= 0;\n    end else begin\n        select_reg <= select_next;\n        drop_reg <= drop_next;\n        frame_reg <= frame_next;\n        s_ip_hdr_ready_reg <= s_ip_hdr_ready_next;\n        s_ip_payload_axis_tready_reg <= s_ip_payload_axis_tready_next;\n        m_ip_hdr_valid_reg <= m_ip_hdr_valid_next;\n    end\n\n    m_eth_dest_mac_reg <= m_eth_dest_mac_next;\n    m_eth_src_mac_reg <= m_eth_src_mac_next;\n    m_eth_type_reg <= m_eth_type_next;\n    m_ip_version_reg <= m_ip_version_next;\n    m_ip_ihl_reg <= m_ip_ihl_next;\n    m_ip_dscp_reg <= m_ip_dscp_next;\n    m_ip_ecn_reg <= m_ip_ecn_next;\n    m_ip_length_reg <= m_ip_length_next;\n    m_ip_identification_reg <= m_ip_identification_next;\n    m_ip_flags_reg <= m_ip_flags_next;\n    m_ip_fragment_offset_reg <= m_ip_fragment_offset_next;\n    m_ip_ttl_reg <= m_ip_ttl_next;\n    m_ip_protocol_reg <= m_ip_protocol_next;\n    m_ip_header_checksum_reg <= m_ip_header_checksum_next;\n    m_ip_source_ip_reg <= m_ip_source_ip_next;\n    m_ip_dest_ip_reg <= m_ip_dest_ip_next;\nend\n\n// output datapath logic\nreg [DATA_WIDTH-1:0] m_ip_payload_axis_tdata_reg  = {DATA_WIDTH{1'b0}};\nreg [KEEP_WIDTH-1:0] m_ip_payload_axis_tkeep_reg  = {KEEP_WIDTH{1'b0}};\nreg [M_COUNT-1:0]    m_ip_payload_axis_tvalid_reg = {M_COUNT{1'b0}}, m_ip_payload_axis_tvalid_next;\n"]], "Diff Content": {"Delete": [[274, "    if (rst) begin\n"], [275, "        frame_reg <= 1'b0;\n"], [276, "        s_ip_hdr_ready_mask_reg <= 1'b0;\n"], [277, "        m_ip_hdr_valid_reg <= 1'b0;\n"], [278, "    end else begin\n"], [279, "        frame_reg <= frame_next;\n"], [280, "        s_ip_hdr_ready_mask_reg <= s_ip_hdr_ready_mask_next;\n"], [281, "        m_ip_hdr_valid_reg <= m_ip_hdr_valid_next;\n"], [282, "    end\n"]], "Add": [[282, "    frame_reg <= frame_next;\n"], [282, "    s_ip_hdr_ready_reg <= s_ip_hdr_ready_next;\n"], [282, "    m_ip_hdr_valid_reg <= m_ip_hdr_valid_next;\n"], [299, "    if (rst) begin\n"], [299, "        frame_reg <= 1'b0;\n"], [299, "        s_ip_hdr_ready_reg <= {S_COUNT{1'b0}};\n"], [299, "        m_ip_hdr_valid_reg <= 1'b0;\n"], [299, "    end\n"]]}}