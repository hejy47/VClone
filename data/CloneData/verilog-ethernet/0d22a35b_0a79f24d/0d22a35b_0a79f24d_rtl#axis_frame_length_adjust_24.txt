Source Block: verilog-ethernet/rtl/axis_frame_length_adjust.v@133:443@HdlStmProcess
assign status_frame_length = status_frame_length_reg;
assign status_frame_original_length = status_frame_original_length_reg;

integer i, word_cnt;

always @* begin
    state_next = STATE_IDLE;

    store_last_word = 0;

    frame_ptr_next = frame_ptr_reg;

    short_counter_next = short_counter_reg;
    long_counter_next = long_counter_reg;

    output_axis_tdata_int = 0;
    output_axis_tkeep_int = 0;
    output_axis_tvalid_int = 0;
    output_axis_tlast_int = 0;
    output_axis_tuser_int = 0;

    input_axis_tready_next = 0;

    last_cycle_tuser_next = last_cycle_tuser_reg;

    status_valid_next = status_valid_reg & ~status_ready;
    status_frame_pad_next = status_frame_pad_reg;
    status_frame_truncate_next = status_frame_truncate_reg;
    status_frame_length_next = status_frame_length_reg;
    status_frame_original_length_next = status_frame_original_length_reg;

    case (state_reg)
        STATE_IDLE: begin
            // idle state
            // accept data next cycle if output register ready next cycle
            input_axis_tready_next = output_axis_tready_int_early & (~status_valid_reg | status_ready);

            output_axis_tdata_int = input_axis_tdata;
            output_axis_tkeep_int = input_axis_tkeep;
            output_axis_tvalid_int = input_axis_tvalid;
            output_axis_tlast_int = input_axis_tlast;
            output_axis_tuser_int = input_axis_tuser;

            short_counter_next = length_min;
            long_counter_next = length_max;

            if (input_axis_tready & input_axis_tvalid) begin
                // transfer through
                word_cnt = 0;
                for (i = 0; i <= KEEP_WIDTH; i = i + 1) begin
                    //bit_cnt = bit_cnt + monitor_axis_tkeep[i];
                    if (input_axis_tkeep == ({KEEP_WIDTH{1'b1}}) >> (KEEP_WIDTH-i)) word_cnt = i;
                end
                frame_ptr_next = frame_ptr_reg+KEEP_WIDTH;

                if (short_counter_reg > KEEP_WIDTH) begin
                    short_counter_next = short_counter_reg - KEEP_WIDTH;
                end else begin
                    short_counter_next = 0;
                end

                if (long_counter_reg > KEEP_WIDTH) begin
                    long_counter_next = long_counter_reg - KEEP_WIDTH;
                end else begin
                    long_counter_next = 0;
                end

                if (long_counter_reg <= word_cnt) begin
                    output_axis_tkeep_int = ({KEEP_WIDTH{1'b1}}) >> (KEEP_WIDTH-long_counter_reg);
                    if (input_axis_tlast) begin
                        status_valid_next = 1;
                        status_frame_pad_next = 0;
                        status_frame_truncate_next = word_cnt > long_counter_reg;
                        status_frame_length_next = length_max;
                        status_frame_original_length_next = frame_ptr_reg+word_cnt;
                        input_axis_tready_next = output_axis_tready_int_early & status_ready;
                        frame_ptr_next = 0;
                        short_counter_next = length_min;
                        long_counter_next = length_max;
                        state_next = STATE_IDLE;
                    end else begin
                        output_axis_tvalid_int = 0;
                        store_last_word = 1;
                        state_next = STATE_TRUNCATE;
                    end
                end else begin
                    if (input_axis_tlast) begin
                        status_frame_original_length_next = frame_ptr_reg+word_cnt;
                        if (short_counter_reg > word_cnt) begin
                            if (short_counter_reg > KEEP_WIDTH) begin
                                frame_ptr_next = frame_ptr_reg + KEEP_WIDTH;
                                input_axis_tready_next = 0;
                                output_axis_tkeep_int = {KEEP_WIDTH{1'b1}};
                                output_axis_tlast_int = 0;
                                output_axis_tuser_int = 0;
                                last_cycle_tuser_next = input_axis_tuser;
                                state_next = STATE_PAD;
                            end else begin
                                status_valid_next = 1;
                                status_frame_pad_next = 1;
                                status_frame_truncate_next = 0;
                                status_frame_length_next = length_min;
                                input_axis_tready_next = output_axis_tready_int_early & status_ready;
                                output_axis_tkeep_int = ({KEEP_WIDTH{1'b1}}) >> (KEEP_WIDTH-(length_min - frame_ptr_reg));
                                frame_ptr_next = 0;
                                short_counter_next = length_min;
                                long_counter_next = length_max;
                                state_next = STATE_IDLE;
                            end
                        end else begin
                            status_valid_next = 1;
                            status_frame_pad_next = 0;
                            status_frame_truncate_next = 0;
                            status_frame_length_next = frame_ptr_reg+word_cnt;
                            status_frame_original_length_next = frame_ptr_reg+word_cnt;
                            input_axis_tready_next = output_axis_tready_int_early & status_ready;
                            frame_ptr_next = 0;
                            short_counter_next = length_min;
                            long_counter_next = length_max;
                            state_next = STATE_IDLE;
                        end
                    end else begin
                        state_next = STATE_TRANSFER;
                    end
                end
            end else begin
                state_next = STATE_IDLE;
            end
        end
        STATE_TRANSFER: begin
            // transfer data
            // accept data next cycle if output register ready next cycle
            input_axis_tready_next = output_axis_tready_int_early;

            output_axis_tdata_int = input_axis_tdata;
            output_axis_tkeep_int = input_axis_tkeep;
            output_axis_tvalid_int = input_axis_tvalid;
            output_axis_tlast_int = input_axis_tlast;
            output_axis_tuser_int = input_axis_tuser;

            if (input_axis_tready & input_axis_tvalid) begin
                // transfer through
                word_cnt = 0;
                for (i = 0; i <= KEEP_WIDTH; i = i + 1) begin
                    //bit_cnt = bit_cnt + monitor_axis_tkeep[i];
                    if (input_axis_tkeep == ({KEEP_WIDTH{1'b1}}) >> (KEEP_WIDTH-i)) word_cnt = i;
                end
                frame_ptr_next = frame_ptr_reg+KEEP_WIDTH;

                if (short_counter_reg > KEEP_WIDTH) begin
                    short_counter_next = short_counter_reg - KEEP_WIDTH;
                end else begin
                    short_counter_next = 0;
                end

                if (long_counter_reg > KEEP_WIDTH) begin
                    long_counter_next = long_counter_reg - KEEP_WIDTH;
                end else begin
                    long_counter_next = 0;
                end

                if (long_counter_reg <= word_cnt) begin
                    output_axis_tkeep_int = ({KEEP_WIDTH{1'b1}}) >> (KEEP_WIDTH-long_counter_reg);
                    if (input_axis_tlast) begin
                        status_valid_next = 1;
                        status_frame_pad_next = 0;
                        status_frame_truncate_next = word_cnt > long_counter_reg;
                        status_frame_length_next = length_max;
                        status_frame_original_length_next = frame_ptr_reg+word_cnt;
                        input_axis_tready_next = output_axis_tready_int_early & status_ready;
                        frame_ptr_next = 0;
                        short_counter_next = length_min;
                        long_counter_next = length_max;
                        state_next = STATE_IDLE;
                    end else begin
                        output_axis_tvalid_int = 0;
                        store_last_word = 1;
                        state_next = STATE_TRUNCATE;
                    end
                end else begin
                    if (input_axis_tlast) begin
                        status_frame_original_length_next = frame_ptr_reg+word_cnt;
                        if (short_counter_reg > word_cnt) begin
                            if (short_counter_reg > KEEP_WIDTH) begin
                                frame_ptr_next = frame_ptr_reg + KEEP_WIDTH;
                                input_axis_tready_next = 0;
                                output_axis_tkeep_int = {KEEP_WIDTH{1'b1}};
                                output_axis_tlast_int = 0;
                                output_axis_tuser_int = 0;
                                last_cycle_tuser_next = input_axis_tuser;
                                state_next = STATE_PAD;
                            end else begin
                                status_valid_next = 1;
                                status_frame_pad_next = 1;
                                status_frame_truncate_next = 0;
                                status_frame_length_next = length_min;
                                input_axis_tready_next = output_axis_tready_int_early & status_ready;
                                output_axis_tkeep_int = ({KEEP_WIDTH{1'b1}}) >> (KEEP_WIDTH-short_counter_reg);
                                frame_ptr_next = 0;
                                short_counter_next = length_min;
                                long_counter_next = length_max;
                                state_next = STATE_IDLE;
                            end
                        end else begin
                            status_valid_next = 1;
                            status_frame_pad_next = 0;
                            status_frame_truncate_next = 0;
                            status_frame_length_next = frame_ptr_reg+word_cnt;
                            status_frame_original_length_next = frame_ptr_reg+word_cnt;
                            input_axis_tready_next = output_axis_tready_int_early & status_ready;
                            frame_ptr_next = 0;
                            short_counter_next = length_min;
                            long_counter_next = length_max;
                            state_next = STATE_IDLE;
                        end
                    end else begin
                        state_next = STATE_TRANSFER;
                    end
                end
            end else begin
                state_next = STATE_TRANSFER;
            end
        end
        STATE_PAD: begin
            // pad to minimum length
            input_axis_tready_next = 0;

            output_axis_tdata_int = 0;
            output_axis_tkeep_int = {KEEP_WIDTH{1'b1}};
            output_axis_tvalid_int = 1;
            output_axis_tlast_int = 0;
            output_axis_tuser_int = 0;

            if (output_axis_tready_int) begin
                frame_ptr_next = frame_ptr_reg + KEEP_WIDTH;

                if (short_counter_reg > KEEP_WIDTH) begin
                    short_counter_next = short_counter_reg - KEEP_WIDTH;
                end else begin
                    short_counter_next = 0;
                end

                if (long_counter_reg > KEEP_WIDTH) begin
                    long_counter_next = long_counter_reg - KEEP_WIDTH;
                end else begin
                    long_counter_next = 0;
                end

                if (short_counter_reg <= KEEP_WIDTH) begin
                    status_valid_next = 1;
                    status_frame_pad_next = 1;
                    status_frame_truncate_next = 0;
                    status_frame_length_next = length_min;
                    input_axis_tready_next = output_axis_tready_int_early & status_ready;
                    output_axis_tkeep_int = ({KEEP_WIDTH{1'b1}}) >> (KEEP_WIDTH-short_counter_reg);
                    output_axis_tlast_int = 1;
                    output_axis_tuser_int = last_cycle_tuser_reg;
                    frame_ptr_next = 0;
                    short_counter_next = length_min;
                    long_counter_next = length_max;
                    state_next = STATE_IDLE;
                end else begin
                    state_next = STATE_PAD;
                end
            end else begin
                state_next = STATE_PAD;
            end
        end
        STATE_TRUNCATE: begin
            // drop after maximum length
            input_axis_tready_next = output_axis_tready_int_early;

            output_axis_tdata_int = last_word_data_reg;
            output_axis_tkeep_int = last_word_keep_reg;
            output_axis_tvalid_int = input_axis_tvalid & input_axis_tlast;
            output_axis_tlast_int = input_axis_tlast;
            output_axis_tuser_int = input_axis_tuser;

            if (input_axis_tready & input_axis_tvalid) begin
                word_cnt = 0;
                for (i = 0; i <= KEEP_WIDTH; i = i + 1) begin
                    //bit_cnt = bit_cnt + monitor_axis_tkeep[i];
                    if (input_axis_tkeep == ({KEEP_WIDTH{1'b1}}) >> (KEEP_WIDTH-i)) word_cnt = i;
                end
                frame_ptr_next = frame_ptr_reg+KEEP_WIDTH;

                if (input_axis_tlast) begin
                    status_valid_next = 1;
                    status_frame_pad_next = 0;
                    status_frame_truncate_next = 1;
                    status_frame_length_next = length_max;
                    status_frame_original_length_next = frame_ptr_reg+word_cnt;
                    input_axis_tready_next = output_axis_tready_int_early & status_ready;
                    frame_ptr_next = 0;
                    short_counter_next = length_min;
                    long_counter_next = length_max;
                    state_next = STATE_IDLE;
                end else begin
                    state_next = STATE_TRUNCATE;
                end
            end else begin
                state_next = STATE_TRUNCATE;
            end
        end
    endcase
end

always @(posedge clk) begin
    if (rst) begin
        state_reg <= STATE_IDLE;
        frame_ptr_reg <= 0;

Diff Content:
- 141     store_last_word = 0;
- 148     output_axis_tdata_int = 0;
- 149     output_axis_tkeep_int = 0;
- 150     output_axis_tvalid_int = 0;
- 151     output_axis_tlast_int = 0;
- 152     output_axis_tuser_int = 0;
- 154     input_axis_tready_next = 0;
- 191                     short_counter_next = 0;
- 197                     long_counter_next = 0;
- 203                         status_valid_next = 1;
- 204                         status_frame_pad_next = 0;
- 209                         frame_ptr_next = 0;
- 214                         output_axis_tvalid_int = 0;
- 215                         store_last_word = 1;
- 224                                 input_axis_tready_next = 0;
- 226                                 output_axis_tlast_int = 0;
- 227                                 output_axis_tuser_int = 0;
- 231                                 status_valid_next = 1;
- 232                                 status_frame_pad_next = 1;
- 233                                 status_frame_truncate_next = 0;
- 237                                 frame_ptr_next = 0;
- 243                             status_valid_next = 1;
- 244                             status_frame_pad_next = 0;
- 245                             status_frame_truncate_next = 0;
- 249                             frame_ptr_next = 0;
- 285                     short_counter_next = 0;
- 291                     long_counter_next = 0;
- 297                         status_valid_next = 1;
- 298                         status_frame_pad_next = 0;
- 303                         frame_ptr_next = 0;
- 308                         output_axis_tvalid_int = 0;
- 309                         store_last_word = 1;
- 318                                 input_axis_tready_next = 0;
- 320                                 output_axis_tlast_int = 0;
- 321                                 output_axis_tuser_int = 0;
- 325                                 status_valid_next = 1;
- 326                                 status_frame_pad_next = 1;
- 327                                 status_frame_truncate_next = 0;
- 331                                 frame_ptr_next = 0;
- 337                             status_valid_next = 1;
- 338                             status_frame_pad_next = 0;
- 339                             status_frame_truncate_next = 0;
- 343                             frame_ptr_next = 0;
- 358             input_axis_tready_next = 0;
- 360             output_axis_tdata_int = 0;
- 362             output_axis_tvalid_int = 1;
- 363             output_axis_tlast_int = 0;
- 364             output_axis_tuser_int = 0;
- 366             if (output_axis_tready_int) begin
- 372                     short_counter_next = 0;
- 378                     long_counter_next = 0;
- 382                     status_valid_next = 1;
- 383                     status_frame_pad_next = 1;
- 384                     status_frame_truncate_next = 0;
- 388                     output_axis_tlast_int = 1;
- 390                     frame_ptr_next = 0;
- 420                     status_valid_next = 1;
- 421                     status_frame_pad_next = 0;
- 422                     status_frame_truncate_next = 1;
- 426                     frame_ptr_next = 0;
+ 141     store_last_word = 1'b0;
+ 152     output_axis_tdata_int = {DATA_WIDTH{1'b0}};
+ 152     output_axis_tkeep_int = {KEEP_WIDTH{1'b0}};
+ 152     output_axis_tvalid_int = 1'b0;
+ 152     output_axis_tlast_int = 1'b0;
+ 152     output_axis_tuser_int = 1'b0;
+ 154     input_axis_tready_next = 1'b0;
+ 191                     short_counter_next = 16'd0;
+ 197                     long_counter_next = 16'd0;
+ 204                         status_valid_next = 1'b1;
+ 204                         status_frame_pad_next = 1'b0;
+ 209                         frame_ptr_next = 16'd0;
+ 215                         output_axis_tvalid_int = 1'b0;
+ 215                         store_last_word = 1'b1;
+ 224                                 input_axis_tready_next = 1'b0;
+ 227                                 output_axis_tlast_int = 1'b0;
+ 227                                 output_axis_tuser_int = 1'b0;
+ 233                                 status_valid_next = 1'b1;
+ 233                                 status_frame_pad_next = 1'b1;
+ 233                                 status_frame_truncate_next = 1'b0;
+ 237                                 frame_ptr_next = 16'd0;
+ 245                             status_valid_next = 1'b1;
+ 245                             status_frame_pad_next = 1'b0;
+ 245                             status_frame_truncate_next = 1'b0;
+ 249                             frame_ptr_next = 16'd0;
+ 285                     short_counter_next = 16'd0;
+ 291                     long_counter_next = 16'd0;
+ 298                         status_valid_next = 1'b1;
+ 298                         status_frame_pad_next = 1'b0;
+ 303                         frame_ptr_next = 16'd0;
+ 309                         output_axis_tvalid_int = 1'b0;
+ 309                         store_last_word = 1'b1;
+ 318                                 input_axis_tready_next = 1'b0;
+ 321                                 output_axis_tlast_int = 1'b0;
+ 321                                 output_axis_tuser_int = 1'b0;
+ 327                                 status_valid_next = 1'b1;
+ 327                                 status_frame_pad_next = 1'b1;
+ 327                                 status_frame_truncate_next = 1'b0;
+ 331                                 frame_ptr_next = 16'd0;
+ 339                             status_valid_next = 1'b1;
+ 339                             status_frame_pad_next = 1'b0;
+ 339                             status_frame_truncate_next = 1'b0;
+ 343                             frame_ptr_next = 16'd0;
+ 358             input_axis_tready_next = 1'b0;
+ 360             output_axis_tdata_int = {DATA_WIDTH{1'b0}};
+ 364             output_axis_tvalid_int = 1'b1;
+ 364             output_axis_tlast_int = 1'b0;
+ 364             output_axis_tuser_int = 1'b0;
+ 366             if (output_axis_tready_int_reg) begin
+ 372                     short_counter_next = 16'd0;
+ 378                     long_counter_next = 16'd0;
+ 384                     status_valid_next = 1'b1;
+ 384                     status_frame_pad_next = 1'b1;
+ 384                     status_frame_truncate_next = 1'b0;
+ 388                     output_axis_tlast_int = 1'b1;
+ 390                     frame_ptr_next = 16'd0;
+ 422                     status_valid_next = 1'b1;
+ 422                     status_frame_pad_next = 1'b0;
+ 422                     status_frame_truncate_next = 1'b1;
+ 426                     frame_ptr_next = 16'd0;

Clone Blocks:
