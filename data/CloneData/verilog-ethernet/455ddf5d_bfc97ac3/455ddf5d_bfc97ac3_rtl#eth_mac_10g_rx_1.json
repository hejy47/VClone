{"Source Block": ["verilog-ethernet/rtl/eth_mac_10g_rx.v@298:409@HdlStmProcess", "    for (j = 0; j < 8; j = j + 1) begin\n        xgmii_rxd_masked[j*8 +: 8] = xgmii_rxc_d0[j] ? 8'd0 : xgmii_rxd_d0[j*8 +: 8];\n    end\nend\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    reset_crc = 0;\n    update_crc = 0;\n\n    last_cycle_tkeep_next = last_cycle_tkeep_reg;\n    last_cycle_tuser_next = last_cycle_tuser_reg;\n\n    output_axis_tdata_next = 0;\n    output_axis_tkeep_next = 0;\n    output_axis_tvalid_next = 0;\n    output_axis_tlast_next = 0;\n    output_axis_tuser_next = 0;\n\n    error_bad_frame_next = 0;\n    error_bad_fcs_next = 0;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state - wait for packet\n            reset_crc = 1;\n\n            if (xgmii_rxc_d1[0] && xgmii_rxd_d1[7:0] == 8'hfb) begin\n                // start condition\n                reset_crc = 0;\n                update_crc = 1;\n                state_next = STATE_PAYLOAD;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_PAYLOAD: begin\n            // read payload\n            update_crc = 1;\n\n            output_axis_tdata_next = xgmii_rxd_d1;\n            output_axis_tkeep_next = ~xgmii_rxc_d1;\n            output_axis_tvalid_next = 1;\n            output_axis_tlast_next = 0;\n            output_axis_tuser_next = 0;\n\n            if (xgmii_rxc_d1[0] && xgmii_rxd_d1[7:0] == 8'hfb) begin\n                // start condition in packet - flag as bad and restart\n                output_axis_tlast_next = 1;\n                output_axis_tuser_next = 1;\n                error_bad_frame_next = 1;\n                reset_crc = 1;\n                state_next = STATE_PAYLOAD;\n            end else if (detect_error_masked) begin\n                // error condition\n                output_axis_tlast_next = 1;\n                output_axis_tuser_next = 1;\n                error_bad_frame_next = 1;\n                reset_crc = 1;\n                state_next = STATE_IDLE;\n            end else if (detect_term) begin\n                if (detect_term[4:0]) begin\n                    // end this cycle\n                    reset_crc = 1;\n                    output_axis_tkeep_next = fcs_output_tkeep_0;\n                    output_axis_tlast_next = 1;\n                    if (xgmii_rxd_masked != fcs_output_tdata_1 || xgmii_rxd_d1 != fcs_output_tdata_0) begin\n                        output_axis_tuser_next = 1;\n                        error_bad_frame_next = 1;\n                        error_bad_fcs_next = 1;\n                    end\n                    state_next = STATE_IDLE;\n                end else begin\n                    // need extra cycle\n                    last_cycle_tkeep_next = fcs_output_tkeep_0;\n                    last_cycle_tuser_next = 0;\n                    if (xgmii_rxd_masked != fcs_output_tdata_0) begin\n                        error_bad_frame_next = 1;\n                        error_bad_fcs_next = 1;\n                        last_cycle_tuser_next = 1;\n                    end\n                    state_next = STATE_LAST;\n                end\n            end else begin\n                state_next = STATE_PAYLOAD;\n            end\n        end\n        STATE_LAST: begin\n            // last cycle of packet\n            output_axis_tdata_next = xgmii_rxd_d1;\n            output_axis_tkeep_next = last_cycle_tkeep_reg;\n            output_axis_tvalid_next = 1;\n            output_axis_tlast_next = 1;\n            output_axis_tuser_next = last_cycle_tuser_reg;\n\n            reset_crc = 1;\n\n            if (xgmii_rxc_d1[0] && xgmii_rxd_d1[7:0] == 8'hfb) begin\n                // start condition\n                state_next = STATE_PAYLOAD;\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n    endcase\nend\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[328, "                reset_crc = 0;\n"], [329, "                update_crc = 1;\n"], [330, "                state_next = STATE_PAYLOAD;\n"]], "Add": [[330, "                if (detect_error_masked) begin\n"], [330, "                    output_axis_tdata_next = 0;\n"], [330, "                    output_axis_tkeep_next = 1;\n"], [330, "                    output_axis_tvalid_next = 1;\n"], [330, "                    output_axis_tlast_next = 1;\n"], [330, "                    output_axis_tuser_next = 1;\n"], [330, "                    error_bad_frame_next = 1;\n"], [330, "                    state_next = STATE_IDLE;\n"], [330, "                end else begin\n"], [330, "                    reset_crc = 0;\n"], [330, "                    update_crc = 1;\n"], [330, "                    state_next = STATE_PAYLOAD;\n"], [330, "                end\n"]]}}