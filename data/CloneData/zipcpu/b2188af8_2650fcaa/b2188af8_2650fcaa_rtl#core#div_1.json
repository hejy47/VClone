{"Source Block": ["zipcpu/rtl/core/div.v@246:262@HdlStmProcess", "\t//\n\t// This is part of the state machine.  pre_sign indicates that we need\n\t// a extra clock to take the absolute value of our inputs.  It need only\n\t// be true for the one clock, and then it must clear itself.\n\tinitial\tpre_sign = 1'b0;\n\talways @(posedge i_clk)\n\tif (i_reset)\n\t\tpre_sign <= 1'b0;\n\telse if (i_wr)\n\t\tpre_sign <= (i_signed)&&((i_numerator[BW-1])||(i_denominator[BW-1]));\n\telse\n\t\tpre_sign <= 1'b0;\n\n\t// As a result of our operation, we need to set the flags.  The most\n\t// difficult of these is the \"Z\" flag indicating that the result is\n\t// zero.  Here, we'll use the same logic that sets the low-order\n\t// bit to clear our zero flag, and leave the zero flag set in all\n"], "Clone Blocks": [["zipcpu/rtl/core/div.v@245:255", "\t// pre_sign\n\t//\n\t// This is part of the state machine.  pre_sign indicates that we need\n\t// a extra clock to take the absolute value of our inputs.  It need only\n\t// be true for the one clock, and then it must clear itself.\n\tinitial\tpre_sign = 1'b0;\n\talways @(posedge i_clk)\n\tif (i_reset)\n\t\tpre_sign <= 1'b0;\n\telse if (i_wr)\n\t\tpre_sign <= (i_signed)&&((i_numerator[BW-1])||(i_denominator[BW-1]));\n"]], "Diff Content": {"Delete": [[252, "\tif (i_reset)\n"], [253, "\t\tpre_sign <= 1'b0;\n"], [254, "\telse if (i_wr)\n"], [255, "\t\tpre_sign <= (i_signed)&&((i_numerator[BW-1])||(i_denominator[BW-1]));\n"], [256, "\telse\n"], [257, "\t\tpre_sign <= 1'b0;\n"]], "Add": [[257, "\t\tpre_sign <= (i_wr)&&(i_signed)&&((i_numerator[BW-1])||(i_denominator[BW-1]));\n"]]}}