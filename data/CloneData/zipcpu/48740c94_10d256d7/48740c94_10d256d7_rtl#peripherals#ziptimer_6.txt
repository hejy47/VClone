Source Block: zipcpu/rtl/peripherals/ziptimer.v@150:161@HdlStmProcess
		o_int <= (r_running)&&(r_value == { {(VW-1){1'b0}}, 1'b1 });
		else
			o_int <= 1'b0;

	initial	o_wb_ack = 1'b0;
	always @(posedge i_clk)
		o_wb_ack <= (i_wb_cyc)&&(i_wb_stb);
	assign	o_wb_stall = 1'b0;

	generate
	if (VW < BW-1)
		assign	o_wb_data = { auto_reload, {(BW-1-VW){1'b0}}, r_value };

Diff Content:
- 156 		o_wb_ack <= (i_wb_cyc)&&(i_wb_stb);
+ 156 		o_wb_ack <= (!i_reset)&&(i_wb_stb);

Clone Blocks:
Clone Blocks 1:
zipcpu/rtl/peripherals/ziptimer.v@149:159
		else if (i_ce)
		o_int <= (r_running)&&(r_value == { {(VW-1){1'b0}}, 1'b1 });
		else
			o_int <= 1'b0;

	initial	o_wb_ack = 1'b0;
	always @(posedge i_clk)
		o_wb_ack <= (i_wb_cyc)&&(i_wb_stb);
	assign	o_wb_stall = 1'b0;

	generate

Clone Blocks 2:
zipcpu/rtl/peripherals/ziptimer.v@141:157
			r_value <= reload_value;

	// Set the interrupt on our last tick, as we transition from one to
	// zero.
	initial	o_int   = 1'b0;
	always @(posedge i_clk)
		if (i_rst)
			o_int <= 1'b0;
		else if (i_ce)
		o_int <= (r_running)&&(r_value == { {(VW-1){1'b0}}, 1'b1 });
		else
			o_int <= 1'b0;

	initial	o_wb_ack = 1'b0;
	always @(posedge i_clk)
		o_wb_ack <= (i_wb_cyc)&&(i_wb_stb);
	assign	o_wb_stall = 1'b0;

Clone Blocks 3:
zipcpu/rtl/peripherals/ziptimer.v@152:162
			o_int <= 1'b0;

	initial	o_wb_ack = 1'b0;
	always @(posedge i_clk)
		o_wb_ack <= (i_wb_cyc)&&(i_wb_stb);
	assign	o_wb_stall = 1'b0;

	generate
	if (VW < BW-1)
		assign	o_wb_data = { auto_reload, {(BW-1-VW){1'b0}}, r_value };
	else

