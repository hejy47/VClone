Source Block: zipcpu/rtl/core/idecode.v@634:722@HdlStmIf
	//		by one
	// Note that we're not using iword here ... there's a lot of logic
	// taking place, and it's only valid if the new word is not compressed.
	//
	reg	r_valid;
	generate if (OPT_OPIPE)
	begin : GEN_OPIPE
		reg	r_pipe;

		wire	[13:0]	pipe_addr_diff;
		assign		pipe_addr_diff = w_I[13:0] - r_I[13:0];

		// Pipeline logic is too extreme for a single clock.
		// Let's break it into two clocks, using r_insn_is_pipeable
		// If this function is true, then the instruction associated
		// with the current output *may* have a pipeable instruction
		// following it.
		// 
		reg	r_insn_is_pipeable;
		initial	r_insn_is_pipeable = 1'b0;
		always @(posedge i_clk)
		if (i_reset)
			r_insn_is_pipeable <= 1'b0;
		else if ((i_ce)&&(!pf_valid)&&(!o_phase))
			// Pipeline bubble, can't pipe through it
			r_insn_is_pipeable <= 1'b0;
		else if (i_ce)
		begin	// This is a valid instruction
			r_insn_is_pipeable <= (w_mem)&&(w_rB)
				// PC (and CC) registers can change
				// underneath us.  Therefore they cannot
				// be used as a base register for piped
				// memory ops
				&&(w_dcdB[3:1] != 3'h7)
				// Writes to PC or CC will destroy any
				// possibility of pipeing--since they
				// could create a jump
				&&(w_dcdR[3:1] != 3'h7)
				//
				// Loads landing in the current address
				// pointer register are not allowed,
				// as they could then be used to violate
				// our rule(s)
				&&((w_cis_op[0])||(w_dcdB != w_dcdA));
		end // else
			// The pipeline is stalled
		

		initial	r_pipe = 1'b0;
		always @(posedge i_clk)
		if (i_reset)
			r_pipe <= 1'b0;
		else if (i_ce)
			r_pipe <= ((pf_valid)||(o_phase))
				// The last operation must be capable of
				// being followed by a pipeable memory op
				&&(r_insn_is_pipeable)
				// Both must be memory operations
				&&(w_mem)
				// Both must be writes, or both stores
				&&(o_op[0] == w_cis_op[0])
				// Both must be register ops
				&&(w_rB)
				// Both must use the same register for B
				&&(w_dcdB[3:0] == o_dcdB[3:0])
				// CC or PC registers are not valid addresses
				//   Captured above
				// But ... the result can never be B
				//   Captured above
				//
				// Reads to CC or PC not allowed
				// &&((o_op[0])||(w_dcdR[3:1] != 3'h7))
				// Prior-reads to CC or PC not allowed
				//   Captured above
				// Same condition, or no condition before
				&&((w_cond[2:0]==o_cond[2:0])
					||(o_cond[2:0] == 3'h0))
				// Same or incrementing immediate
				&&(w_I[13]==r_I[13])
				&&(pipe_addr_diff <= 14'h4);
		assign o_pipe = r_pipe;
	end else begin
		assign o_pipe = 1'b0;
	end endgenerate

	initial	r_valid = 1'b0;
	generate if (OPT_PIPELINED)
	begin : GEN_DCD_VALID


Diff Content:
- 652 		reg	r_insn_is_pipeable;
- 657 		else if ((i_ce)&&(!pf_valid)&&(!o_phase))
+ 657 		else if ((i_ce)&&((!pf_valid)||(i_illegal))&&(!o_phase))
+ 659 		else if (o_ljmp)
+ 659 			r_insn_is_pipeable <= 1'b0;
+ 659 		else if ((i_ce)&&((!OPT_CIS)&&(i_instruction[`CISBIT])))
+ 659 			r_insn_is_pipeable <= 1'b0;
+ 716 		always @(*)
+ 716 			r_insn_is_pipeable = 1'b0;

Clone Blocks:
