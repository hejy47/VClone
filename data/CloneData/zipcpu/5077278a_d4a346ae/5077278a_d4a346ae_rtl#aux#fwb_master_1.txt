Source Block: zipcpu/rtl/aux/fwb_master.v@135:147@HdlStmProcess
	// will yield valid result
	reg	f_past_valid;
	initial	f_past_valid = 1'b0;
	always @(posedge i_clk)
		f_past_valid <= 1'b1;
	always @(*)
		if (!f_past_valid)
			assume(i_reset);
	//
	//
	// Assertions regarding the initial (and reset) state
	//
	//

Diff Content:
- 142 			assume(i_reset);
+ 142 			assert(i_reset);

Clone Blocks:
Clone Blocks 1:
zipcpu/rtl/aux/fwb_master.v@132:142

	//
	// A quick register to be used later to know if the $past() operator
	// will yield valid result
	reg	f_past_valid;
	initial	f_past_valid = 1'b0;
	always @(posedge i_clk)
		f_past_valid <= 1'b1;
	always @(*)
		if (!f_past_valid)
			assume(i_reset);

Clone Blocks 2:
zipcpu/rtl/aux/fwb_slave.v@125:135

	//
	// A quick register to be used later to know if the $past() operator
	// will yield valid result
	reg	f_past_valid;
	initial	f_past_valid = 1'b0;
	always @(posedge i_clk)
		f_past_valid <= 1'b1;
	always @(*)
		if (!f_past_valid)
			assert(i_reset);

Clone Blocks 3:
zipcpu/rtl/aux/fwb_master.v@133:144
	//
	// A quick register to be used later to know if the $past() operator
	// will yield valid result
	reg	f_past_valid;
	initial	f_past_valid = 1'b0;
	always @(posedge i_clk)
		f_past_valid <= 1'b1;
	always @(*)
		if (!f_past_valid)
			assume(i_reset);
	//
	//

Clone Blocks 4:
zipcpu/rtl/aux/fwb_slave.v@128:140
	// will yield valid result
	reg	f_past_valid;
	initial	f_past_valid = 1'b0;
	always @(posedge i_clk)
		f_past_valid <= 1'b1;
	always @(*)
		if (!f_past_valid)
			assert(i_reset);
	//
	//
	// Assertions regarding the initial (and reset) state
	//
	//

Clone Blocks 5:
zipcpu/rtl/aux/fwb_slave.v@126:137
	//
	// A quick register to be used later to know if the $past() operator
	// will yield valid result
	reg	f_past_valid;
	initial	f_past_valid = 1'b0;
	always @(posedge i_clk)
		f_past_valid <= 1'b1;
	always @(*)
		if (!f_past_valid)
			assert(i_reset);
	//
	//

