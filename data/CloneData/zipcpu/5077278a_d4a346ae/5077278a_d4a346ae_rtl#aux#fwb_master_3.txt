Source Block: zipcpu/rtl/aux/fwb_master.v@199:215@HdlStmProcess
		if (i_wb_stb)
			assert(i_wb_cyc);

	// If a request was both outstanding and stalled on the last clock,
	// then nothing should change on this clock regarding it.
	always @(posedge i_clk)
	if ((f_past_valid)&&(!$past(i_reset))&&($past(i_wb_stb))
			&&($past(i_wb_stall))&&(i_wb_cyc))
	begin
		assert(i_wb_stb);
		assert($stable(f_request));
	end

	// Within any series of STB/requests, the direction of the request
	// may not change.
	always @(posedge i_clk)
		if ((f_past_valid)&&($past(i_wb_stb))&&(i_wb_stb))

Diff Content:
- 209 		assert($stable(f_request));
+ 209 		assert(i_wb_we   == $past(i_wb_we));
+ 209 		assert(i_wb_addr == $past(i_wb_addr));
+ 209 		assert(i_wb_sel  == $past(i_wb_sel));
+ 209 		if (i_wb_we)
+ 209 			assert(i_wb_data == $past(i_wb_data));

Clone Blocks:
Clone Blocks 1:
zipcpu/rtl/aux/fwb_master.v@193:205
	always @(posedge i_clk)
	if ((f_past_valid)&&($past(i_wb_err))&&($past(i_wb_cyc)))
		assert(!i_wb_cyc);

	// STB can only be true if CYC is also true
	always @(posedge i_clk)
		if (i_wb_stb)
			assert(i_wb_cyc);

	// If a request was both outstanding and stalled on the last clock,
	// then nothing should change on this clock regarding it.
	always @(posedge i_clk)
	if ((f_past_valid)&&(!$past(i_reset))&&($past(i_wb_stb))

Clone Blocks 2:
zipcpu/rtl/aux/fwb_slave.v@189:205
		if (i_wb_stb)
			assume(i_wb_cyc);

	// If a request was both outstanding and stalled on the last clock,
	// then nothing should change on this clock regarding it.
	always @(posedge i_clk)
	if ((f_past_valid)&&(!$past(i_reset))&&($past(i_wb_stb))
			&&($past(i_wb_stall))&&(i_wb_cyc))
	begin
		assume(i_wb_stb);
		assume($stable(f_request));
	end

	// Within any series of STB/requests, the direction of the request
	// may not change.
	always @(posedge i_clk)
		if ((f_past_valid)&&($past(i_wb_stb))&&(i_wb_stb))

