{"Source Block": ["zipcpu/rtl/aux/fwb_slave.v@257:285@HdlStmIf", "\t\talways @(posedge i_clk)\n\t\t\tif (i_wb_cyc)\n\t\t\t\tassert(f_stall_count < F_MAX_STALL);\n\tend endgenerate\n\n\tgenerate if (F_MAX_ACK_DELAY > 0)\n\tbegin : MXWAIT\n\t\t//\n\t\t// Assume the slave will respond within F_MAX_ACK_DELAY cycles,\n\t\t// counted either from the end of the last request, or from the\n\t\t// last ACK received\n\t\t//\n\t\treg\t[(DLYBITS-1):0]\t\tf_ackwait_count;\n\n\t\tinitial\tf_ackwait_count = 0;\n\t\talways @(posedge i_clk)\n\t\t\tif ((!i_reset)&&(i_wb_cyc)&&(!i_wb_stb)\n\t\t\t\t\t&&(!i_wb_ack)&&(!i_wb_err))\n\t\t\tbegin\n\t\t\t\tf_ackwait_count <= f_ackwait_count + 1'b1;\n\t\t\t\tassert(f_ackwait_count < F_MAX_ACK_DELAY);\n\t\t\tend else\n\t\t\t\tf_ackwait_count <= 0;\n\tend endgenerate\n\n\t//\n\t// Count the number of requests that have been received\n\t//\n\tinitial\tf_nreqs = 0;\n"], "Clone Blocks": [["zipcpu/rtl/aux/fwb_master.v@267:295", "\t\talways @(posedge i_clk)\n\t\t\tif (i_wb_cyc)\n\t\t\t\tassume(f_stall_count < F_MAX_STALL);\n\tend endgenerate\n\n\tgenerate if (F_MAX_ACK_DELAY > 0)\n\tbegin : MXWAIT\n\t\t//\n\t\t// Assume the slave will respond within F_MAX_ACK_DELAY cycles,\n\t\t// counted either from the end of the last request, or from the\n\t\t// last ACK received\n\t\t//\n\t\treg\t[(DLYBITS-1):0]\t\tf_ackwait_count;\n\n\t\tinitial\tf_ackwait_count = 0;\n\t\talways @(posedge i_clk)\n\t\t\tif ((!i_reset)&&(i_wb_cyc)&&(!i_wb_stb)\n\t\t\t\t\t&&(!i_wb_ack)&&(!i_wb_err))\n\t\t\tbegin\n\t\t\t\tf_ackwait_count <= f_ackwait_count + 1'b1;\n\t\t\t\tassume(f_ackwait_count < F_MAX_ACK_DELAY);\n\t\t\tend else\n\t\t\t\tf_ackwait_count <= 0;\n\tend endgenerate\n\n\t//\n\t// Count the number of requests that have been made\n\t//\n\tinitial\tf_nreqs = 0;\n"]], "Diff Content": {"Delete": [[274, "\t\t\t\t\t&&(!i_wb_ack)&&(!i_wb_err))\n"]], "Add": [[274, "\t\t\t\t\t&&(!i_wb_ack)&&(!i_wb_err)\n"], [274, "\t\t\t\t\t&&(f_outstanding > 0))\n"]]}}