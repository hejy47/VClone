{"Source Block": ["zipcpu/rtl/zipbones.v@105:115@HdlStmAssign", "\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[4:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);\n\t//\n\t// Always start us off with an initial reset\n\t//\n\tinitial\tcmd_reset = 1'b1;\n\talways @(posedge i_clk)\n"], "Clone Blocks": [["zipcpu/rtl/zipbones.v@140:150", "\tinitial\tcmd_addr = 5'h0;\n\talways @(posedge i_clk)\n\t\tif (dbg_cmd_write)\n\t\t\tcmd_addr <= i_dbg_data[4:0];\n\n\twire\tcpu_reset;\n\tassign\tcpu_reset = (cmd_reset)||(i_rst);\n\n\twire\tcpu_halt, cpu_dbg_stall;\n\tassign\tcpu_halt = (i_rst)||((cmd_halt)&&(~cmd_step));\n\twire\t[31:0]\tcmd_data;\n"], ["zipcpu/rtl/zipsystem.v@307:317", "\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n\tinitial\tcmd_reset = 1'b1;\n\talways @(posedge i_clk)\n\t\tcmd_reset <= ((dbg_cmd_write)&&(dbg_idata[6]));\n"], ["zipcpu/rtl/zipbones.v@101:111", "\t// set the following address in question.  Hence all accesses require\n\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[4:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);\n\t//\n"], ["zipcpu/rtl/zipsystem.v@310:320", "\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n\tinitial\tcmd_reset = 1'b1;\n\talways @(posedge i_clk)\n\t\tcmd_reset <= ((dbg_cmd_write)&&(dbg_idata[6]));\n\t//\n\tinitial\tcmd_halt  = START_HALTED;\n\talways @(posedge i_clk)\n"], ["zipcpu/rtl/zipsystem.v@305:315", "\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n\tinitial\tcmd_reset = 1'b1;\n"], ["zipcpu/rtl/zipbones.v@103:113", "\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[4:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);\n\t//\n\t// Always start us off with an initial reset\n\t//\n"], ["zipcpu/rtl/zipsystem.v@305:315", "\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n\tinitial\tcmd_reset = 1'b1;\n"], ["zipcpu/rtl/zipsystem.v@308:318", "\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n\tinitial\tcmd_reset = 1'b1;\n\talways @(posedge i_clk)\n\t\tcmd_reset <= ((dbg_cmd_write)&&(dbg_idata[6]));\n\t//\n"], ["zipcpu/rtl/zipsystem.v@305:315", "\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n\tinitial\tcmd_reset = 1'b1;\n"], ["zipcpu/rtl/zipsystem.v@305:315", "\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n\tinitial\tcmd_reset = 1'b1;\n"], ["zipcpu/rtl/zipbones.v@102:112", "\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[4:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);\n\t//\n\t// Always start us off with an initial reset\n"], ["zipcpu/rtl/zipsystem.v@311:322", "\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n\tinitial\tcmd_reset = 1'b1;\n\talways @(posedge i_clk)\n\t\tcmd_reset <= ((dbg_cmd_write)&&(dbg_idata[6]));\n\t//\n\tinitial\tcmd_halt  = START_HALTED;\n\talways @(posedge i_clk)\n\t\tif (i_rst)\n\t\t\tcmd_halt <= (START_HALTED == 1)? 1'b1 : 1'b0;\n"], ["zipcpu/rtl/zipsystem.v@304:314", "\t// set the following address in question.  Hence all accesses require\n\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n"], ["zipcpu/rtl/zipbones.v@101:111", "\t// set the following address in question.  Hence all accesses require\n\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[4:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);\n\t//\n"], ["zipcpu/rtl/zipbones.v@102:112", "\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[4:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);\n\t//\n\t// Always start us off with an initial reset\n"], ["zipcpu/rtl/zipbones.v@102:112", "\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[4:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);\n\t//\n\t// Always start us off with an initial reset\n"], ["zipcpu/rtl/zipsystem.v@306:316", "\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n\tinitial\tcmd_reset = 1'b1;\n\talways @(posedge i_clk)\n"], ["zipcpu/rtl/zipbones.v@104:114", "\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[4:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);\n\t//\n\t// Always start us off with an initial reset\n\t//\n\tinitial\tcmd_reset = 1'b1;\n"], ["zipcpu/rtl/zipsystem.v@304:314", "\t// set the following address in question.  Hence all accesses require\n\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[5:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (dbg_cyc)&&(dbg_stb)&&(dbg_we)&&(~dbg_addr);\n\t//\n"], ["zipcpu/rtl/zipbones.v@102:112", "\t// two accesses: write the address to the control register (and halt\n\t// the CPU if not halted), then read/write the data from the data\n\t// register.\n\t//\n\twire\t\tcpu_break, dbg_cmd_write;\n\treg\t\tcmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;\n\treg\t[4:0]\tcmd_addr;\n\twire\t[3:0]\tcpu_dbg_cc;\n\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);\n\t//\n\t// Always start us off with an initial reset\n"]], "Diff Content": {"Delete": [[110, "\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);\n"]], "Add": [[110, "\tassign\tdbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(!i_dbg_addr);\n"]]}}