{"Source Block": ["serv/rtl/serv_state.v@86:155@HdlStmProcess", "\n   assign o_dbus_cyc = (state == IDLE) & stage_two_pending & i_mem_op & !mem_misalign;\n\n   assign o_rf_rreq = i_ibus_ack;\n\n   always @(posedge i_clk) begin\n      if (state == INIT)\n\to_ctrl_jump <= i_take_branch;\n      if (state == IDLE)\n\to_ctrl_jump <= 1'b0;\n\n      if (cnt_en)\n\tstage_two_pending <= o_init;\n\n      if (i_new_irq)\n\tpending_irq <= 1'b1;\n\n      cnt_done <= (o_cnt[4:2] == 3'b111) & o_cnt_r[2];\n\n      //Shift operations require bufreg to hold for one cycle before shifting\n      o_bufreg_hold <= i_shift_op & cnt_done;\n\n      case (state)\n        IDLE : begin\n           if (i_rf_ready | i_dbus_ack) begin\n\t      state <= RUN;\n              if (two_stage_op & !stage_two_pending)\n\t\tstate <= INIT;\n\t      if (i_e_op | pending_irq)\n\t\tstate <= TRAP;\n\t   end else if (i_alu_sh_done & i_shift_op & stage_two_pending)\n\t     state <= RUN;\n        end\n        INIT : begin\n\n           if (cnt_done)\n\t     if (mem_misalign | (i_take_branch & i_ctrl_misalign))\n               state <= TRAP;\n\t     else if (i_mem_op | i_shift_op )\n\t       state <= IDLE;\n\t     else\n\t       state <= RUN;\n        end\n        RUN : begin\n           if (cnt_done)\n             state <= IDLE;\n        end\n\tTRAP : begin\n\t   pending_irq <= 1'b0;\n           if (cnt_done)\n             state <= IDLE;\n\tend\n        default : state <= IDLE;\n      endcase\n\n      o_cnt <= o_cnt + {4'd0,cnt_en};\n      if (cnt_en)\n\to_cnt_r <= {o_cnt_r[2:0],o_cnt_r[3]};\n\n      if (i_rst) begin\n\t state <= IDLE;\n\t o_cnt   <= 5'd0;\n\t pending_irq <= 1'b0;\n\t stage_two_pending <= 1'b0;\n\t o_ctrl_jump <= 1'b0;\n\t o_cnt_r <= 4'b0001;\n      end\n   end\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[94, "      if (state == IDLE)\n"], [106, "      o_bufreg_hold <= i_shift_op & cnt_done;\n"], [110, "           if (i_rf_ready | i_dbus_ack) begin\n"], [111, "\t      state <= RUN;\n"], [112, "              if (two_stage_op & !stage_two_pending)\n"], [113, "\t\tstate <= INIT;\n"], [114, "\t      if (i_e_op | pending_irq)\n"], [116, "\t   end else if (i_alu_sh_done & i_shift_op & stage_two_pending)\n"], [117, "\t     state <= RUN;\n"], [118, "        end\n"], [121, "           if (cnt_done)\n"], [122, "\t     if (mem_misalign | (i_take_branch & i_ctrl_misalign))\n"], [123, "               state <= TRAP;\n"], [124, "\t     else if (i_mem_op | i_shift_op )\n"], [125, "\t       state <= IDLE;\n"], [126, "\t     else\n"], [127, "\t       state <= RUN;\n"], [130, "           if (cnt_done)\n"], [131, "             state <= IDLE;\n"], [135, "           if (cnt_done)\n"], [136, "             state <= IDLE;\n"]], "Add": [[94, "      if (o_ctrl_pc_en & cnt_done)\n"], [106, "      stage_two_req <= cnt_done & (state == INIT);\n"], [114, "\t   if (stage_two_pending) begin\n"], [114, "\t      if (o_rf_wreq)\n"], [114, "\t\tstate <= RUN;\n"], [114, "\t      if (trap_pending & i_rf_ready)\n"], [118, "\t   end else begin\n"], [118, "\t      if (i_rf_ready)\n"], [118, "\t\tif (i_e_op | pending_irq)\n"], [118, "\t\t  state <= TRAP;\n"], [118, "\t\telse if (two_stage_op)\n"], [118, "\t\t  state <= INIT;\n"], [118, "\t\telse\n"], [118, "\t\t  state <= RUN;\n"], [118, "           end\n"], [118, "\tend\n"], [139, "      if (cnt_done)\n"], [139, "        state <= IDLE;\n"]]}}