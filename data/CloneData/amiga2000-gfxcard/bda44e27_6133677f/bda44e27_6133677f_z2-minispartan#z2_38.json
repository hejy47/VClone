{"Source Block": ["amiga2000-gfxcard/z2-minispartan/z2.v@466:715@HdlStmProcess", "  end\nend\n\nreg[15:0] rgb = 'h0000;\n\nalways @(posedge vga_clk) begin\n  if (counter_x >= h_max) begin\n    counter_x <= 0;\n    if (counter_y == v_max)\n      counter_y <= 0;\n    else\n      counter_y <= counter_y + 1;\n  end else\n    counter_x <= counter_x + 1;\n    \n  if (counter_x>=h_sync_start && counter_x<h_sync_end)\n    dvi_hsync <= 1;\n  else\n    dvi_hsync <= 0;\n    \n  if (counter_y>=v_sync_start && counter_y<v_sync_end)\n    dvi_vsync <= 1;\n  else\n    dvi_vsync <= 0;\n      \n  if (counter_x<h_rez && counter_y<v_rez) begin\n    dvi_blank <= 0;\n  end else begin\n    dvi_blank <= 1;\n    rgb <= 0;\n  end\n  \n  red_p[0] <= rgb[0];\n  red_p[1] <= rgb[0];\n  red_p[2] <= rgb[1];\n  red_p[3] <= rgb[1];\n  red_p[4] <= rgb[2];\n  red_p[5] <= rgb[2];\n  red_p[6] <= rgb[3];\n  red_p[7] <= rgb[4];\n  \n  green_p[0] <= rgb[5];\n  green_p[1] <= rgb[5];\n  green_p[2] <= rgb[6];\n  green_p[3] <= rgb[6];\n  green_p[4] <= rgb[7];\n  green_p[5] <= rgb[8];\n  green_p[6] <= rgb[9];\n  green_p[7] <= rgb[10];\n  \n  blue_p[0] <= rgb[11];\n  blue_p[1] <= rgb[11];\n  blue_p[2] <= rgb[12];\n  blue_p[3] <= rgb[12];\n  blue_p[4] <= rgb[13];  \n  blue_p[5] <= rgb[13];\n  blue_p[6] <= rgb[14];\n  blue_p[7] <= rgb[15];\n\n  /*blue_p[0] <= rgb[3];\n  blue_p[1] <= rgb[4];\n  blue_p[2] <= rgb[5];\n  blue_p[3] <= rgb[5];\n  blue_p[4] <= rgb[6];\n  blue_p[5] <= rgb[6];\n  blue_p[6] <= rgb[7];\n  blue_p[7] <= rgb[7];\n  \n  green_p[0] <= rgb[13];\n  green_p[1] <= rgb[14];\n  green_p[2] <= rgb[15];\n  green_p[3] <= rgb[0];\n  green_p[4] <= rgb[1];\n  green_p[5] <= rgb[1];\n  green_p[6] <= rgb[2];\n  green_p[7] <= rgb[2];\n  \n  red_p[0] <= rgb[8];\n  red_p[1] <= rgb[9];\n  red_p[2] <= rgb[10];\n  red_p[3] <= rgb[10];\n  red_p[4] <= rgb[11];  \n  red_p[5] <= rgb[11];\n  red_p[6] <= rgb[12];\n  red_p[7] <= rgb[12];*/\n\n  LEDS <= 0;\n\t//rgb <= 0;\n  \n  if (dvi_blank)\n\t    rgb <= 0;\n\t  else\n      //rgb <= ram_data_buffer[counter_x];\n      \n      if (counter_y>710) begin\n        if (counter_x<210)\n          rgb <= 0;\n        else if (counter_x<220)\n          rgb <= last_addr[23]?16'hff:16'h0;\n        else if (counter_x<230)\n          rgb <= last_addr[22]?16'hff:16'h0;\n        else if (counter_x<240)\n          rgb <= last_addr[21]?16'hff:16'h0;\n        else if (counter_x<250)\n          rgb <= last_addr[20]?16'hff:16'h0;\n        else if (counter_x<260)\n          rgb <= last_addr[19]?16'hff:16'h0;\n        else if (counter_x<270)\n          rgb <= last_addr[18]?16'hff:16'h0;\n        else if (counter_x<280)\n          rgb <= last_addr[17]?16'hff:16'h0;\n        else if (counter_x<290)\n          rgb <= last_addr[16]?16'hff:16'h0;\n        else if (counter_x<300)\n          rgb <= last_addr[15]?16'hff:16'h0;\n        else if (counter_x<310)\n          rgb <= last_addr[14]?16'hff:16'h0;\n        else if (counter_x<320)\n          rgb <= last_addr[13]?16'hff:16'h0;\n        else if (counter_x<330)\n          rgb <= last_addr[12]?16'hff:16'h0;\n        else if (counter_x<340)\n          rgb <= last_addr[11]?16'hff:16'h0;\n        else if (counter_x<350)\n          rgb <= last_addr[10]?16'hff:16'h0;\n        else if (counter_x<360)\n          rgb <= last_addr[9]?16'hff:16'h0;\n        else if (counter_x<370)\n          rgb <= last_addr[8]?16'hff:16'h0;\n        else if (counter_x<380)\n          rgb <= last_addr[7]?16'hff:16'h0;\n        else if (counter_x<390)\n          rgb <= last_addr[6]?16'hff:16'h0;\n        else if (counter_x<400)\n          rgb <= last_addr[5]?16'hff:16'h0;\n        else if (counter_x<410)\n          rgb <= last_addr[4]?16'hff:16'h0;\n        else if (counter_x<420)\n          rgb <= last_addr[3]?16'hff:16'h0;\n        else if (counter_x<430)\n          rgb <= last_addr[2]?16'hff:16'h0;\n        else if (counter_x<440)\n          rgb <= last_addr[1]?16'hff:16'h0;\n        else if (counter_x<450)\n          rgb <= last_addr[0]?16'hff:16'h0;\n        else if (counter_x<490)\n          rgb <= 16'h0;\n          \n        else if (counter_x<520)\n          rgb <= last_data[15]?16'hffff:16'h00ff;\n        else if (counter_x<521)\n          rgb <= 0;\n        else if (counter_x<530)\n          rgb <= last_data[14]?16'hffff:16'h00ff;\n        else if (counter_x<531)\n          rgb <= 0;\n        else if (counter_x<540)\n          rgb <= last_data[13]?16'hffff:16'h00ff;\n        else if (counter_x<541)\n          rgb <= 0;\n        else if (counter_x<550)\n          rgb <= last_data[12]?16'hffff:16'h00ff;\n        else if (counter_x<551)\n          rgb <= 0;\n        else if (counter_x<560)\n          rgb <= last_data[11]?16'hffff:16'h00ff;\n        else if (counter_x<561)\n          rgb <= 0;\n        else if (counter_x<570)\n          rgb <= last_data[10]?16'hffff:16'h00ff;\n        else if (counter_x<571)\n          rgb <= 0;\n        else if (counter_x<580)\n          rgb <= last_data[9]?16'hffff:16'h00ff;\n        else if (counter_x<581)\n          rgb <= 0;\n        else if (counter_x<590)\n          rgb <= last_data[8]?16'hffff:16'h00ff;\n        else if (counter_x<591)\n          rgb <= 0;\n        else if (counter_x<600)\n          rgb <= last_data[7]?16'hffff:16'h00ff;\n        else if (counter_x<601)\n          rgb <= 0;\n        else if (counter_x<610)\n          rgb <= last_data[6]?16'hffff:16'h00ff;\n        else if (counter_x<611)\n          rgb <= 0;\n        else if (counter_x<620)\n          rgb <= last_data[5]?16'hffff:16'h00ff;\n        else if (counter_x<621)\n          rgb <= 0;\n        else if (counter_x<630)\n          rgb <= last_data[4]?16'hffff:16'h00ff;\n        else if (counter_x<631)\n          rgb <= 0;\n        else if (counter_x<640)\n          rgb <= last_data[3]?16'hffff:16'h00ff;\n        else if (counter_x<641)\n          rgb <= 0;\n        else if (counter_x<650)\n          rgb <= last_data[2]?16'hffff:16'h00ff;\n        else if (counter_x<651)\n          rgb <= 0;\n        else if (counter_x<660)\n          rgb <= last_data[1]?16'hffff:16'h00ff;\n        else if (counter_x<661)\n          rgb <= 0;\n        else if (counter_x<670)\n          rgb <= last_data[0]?16'hffff:16'h00ff;\n        else if (counter_x<700)\n          rgb <= 0;\n        else if (counter_x<(700+max_fill)) begin\n          if (counter_y<550) \n            rgb <= writeq_fill>(counter_x-700)?16'hffff:16'h0000;        \n          else\n            rgb <= writeq_drain>(counter_x-700)?16'hffff:16'h0000;\n        end else \n          rgb <= 0;\n        end\n      else begin\n        if (counter_x>=(screen_w+240) || counter_x<240)\n          rgb <= 0;\n        \n        /*else if (counter_x<rec_depth) begin\n          if (counter_y>=100 && counter_y<=145)\n            rgb <= (rec_addr[counter_x][(counter_y-100)>>1])?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=200 && counter_y<=231)\n            rgb <= (rec_data[counter_x][(counter_y-200)>>1])?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=300 && counter_y<=305)\n            rgb <= rec_as[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=306 && counter_y<=310)\n            rgb <= rec_uds[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=311 && counter_y<=315)\n            rgb <= rec_lds[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=316 && counter_y<=320)\n            rgb <= rec_doe[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=321 && counter_y<=325)\n            rgb <= rec_read[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else\n            rgb <= ram_data_buffer[counter_x];*/\n        else rgb <= ram_data_buffer[counter_x-240];\n          \n        /*else\n          rgb <= ram_data_buffer[counter_x];*/\n      end\n\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[472, "  if (counter_x >= h_max) begin\n"], [474, "    if (counter_y == v_max)\n"], [476, "    else\n"], [477, "      counter_y <= counter_y + 1;\n"], [478, "  end else\n"], [479, "    counter_x <= counter_x + 1;\n"], [495, "    rgb <= 0;\n"], [498, "  red_p[0] <= rgb[0];\n"], [499, "  red_p[1] <= rgb[0];\n"], [500, "  red_p[2] <= rgb[1];\n"], [501, "  red_p[3] <= rgb[1];\n"], [502, "  red_p[4] <= rgb[2];\n"], [503, "  red_p[5] <= rgb[2];\n"], [504, "  red_p[6] <= rgb[3];\n"], [505, "  red_p[7] <= rgb[4];\n"], [507, "  green_p[0] <= rgb[5];\n"], [508, "  green_p[1] <= rgb[5];\n"], [509, "  green_p[2] <= rgb[6];\n"], [510, "  green_p[3] <= rgb[6];\n"], [511, "  green_p[4] <= rgb[7];\n"], [512, "  green_p[5] <= rgb[8];\n"], [513, "  green_p[6] <= rgb[9];\n"], [514, "  green_p[7] <= rgb[10];\n"], [516, "  blue_p[0] <= rgb[11];\n"], [517, "  blue_p[1] <= rgb[11];\n"], [518, "  blue_p[2] <= rgb[12];\n"], [519, "  blue_p[3] <= rgb[12];\n"], [520, "  blue_p[4] <= rgb[13];  \n"], [521, "  blue_p[5] <= rgb[13];\n"], [522, "  blue_p[6] <= rgb[14];\n"], [523, "  blue_p[7] <= rgb[15];\n"], [525, "  /*blue_p[0] <= rgb[3];\n"], [526, "  blue_p[1] <= rgb[4];\n"], [527, "  blue_p[2] <= rgb[5];\n"], [528, "  blue_p[3] <= rgb[5];\n"], [529, "  blue_p[4] <= rgb[6];\n"], [530, "  blue_p[5] <= rgb[6];\n"], [531, "  blue_p[6] <= rgb[7];\n"], [532, "  blue_p[7] <= rgb[7];\n"], [534, "  green_p[0] <= rgb[13];\n"], [535, "  green_p[1] <= rgb[14];\n"], [536, "  green_p[2] <= rgb[15];\n"], [537, "  green_p[3] <= rgb[0];\n"], [538, "  green_p[4] <= rgb[1];\n"], [539, "  green_p[5] <= rgb[1];\n"], [540, "  green_p[6] <= rgb[2];\n"], [541, "  green_p[7] <= rgb[2];\n"], [543, "  red_p[0] <= rgb[8];\n"], [544, "  red_p[1] <= rgb[9];\n"], [545, "  red_p[2] <= rgb[10];\n"], [546, "  red_p[3] <= rgb[10];\n"], [547, "  red_p[4] <= rgb[11];  \n"], [548, "  red_p[5] <= rgb[11];\n"], [549, "  red_p[6] <= rgb[12];\n"], [550, "  red_p[7] <= rgb[12];*/\n"], [552, "  LEDS <= 0;\n"], [555, "  if (dvi_blank)\n"], [556, "\t    rgb <= 0;\n"], [557, "\t  else\n"], [560, "      if (counter_y>710) begin\n"], [561, "        if (counter_x<210)\n"], [562, "          rgb <= 0;\n"], [563, "        else if (counter_x<220)\n"], [564, "          rgb <= last_addr[23]?16'hff:16'h0;\n"], [565, "        else if (counter_x<230)\n"], [566, "          rgb <= last_addr[22]?16'hff:16'h0;\n"], [567, "        else if (counter_x<240)\n"], [568, "          rgb <= last_addr[21]?16'hff:16'h0;\n"], [569, "        else if (counter_x<250)\n"], [570, "          rgb <= last_addr[20]?16'hff:16'h0;\n"], [571, "        else if (counter_x<260)\n"], [572, "          rgb <= last_addr[19]?16'hff:16'h0;\n"], [573, "        else if (counter_x<270)\n"], [574, "          rgb <= last_addr[18]?16'hff:16'h0;\n"], [575, "        else if (counter_x<280)\n"], [576, "          rgb <= last_addr[17]?16'hff:16'h0;\n"], [577, "        else if (counter_x<290)\n"], [578, "          rgb <= last_addr[16]?16'hff:16'h0;\n"], [579, "        else if (counter_x<300)\n"], [580, "          rgb <= last_addr[15]?16'hff:16'h0;\n"], [581, "        else if (counter_x<310)\n"], [582, "          rgb <= last_addr[14]?16'hff:16'h0;\n"], [583, "        else if (counter_x<320)\n"], [584, "          rgb <= last_addr[13]?16'hff:16'h0;\n"], [585, "        else if (counter_x<330)\n"], [586, "          rgb <= last_addr[12]?16'hff:16'h0;\n"], [587, "        else if (counter_x<340)\n"], [588, "          rgb <= last_addr[11]?16'hff:16'h0;\n"], [589, "        else if (counter_x<350)\n"], [590, "          rgb <= last_addr[10]?16'hff:16'h0;\n"], [591, "        else if (counter_x<360)\n"], [592, "          rgb <= last_addr[9]?16'hff:16'h0;\n"], [593, "        else if (counter_x<370)\n"], [594, "          rgb <= last_addr[8]?16'hff:16'h0;\n"], [595, "        else if (counter_x<380)\n"], [596, "          rgb <= last_addr[7]?16'hff:16'h0;\n"], [597, "        else if (counter_x<390)\n"], [598, "          rgb <= last_addr[6]?16'hff:16'h0;\n"], [599, "        else if (counter_x<400)\n"], [600, "          rgb <= last_addr[5]?16'hff:16'h0;\n"], [601, "        else if (counter_x<410)\n"], [602, "          rgb <= last_addr[4]?16'hff:16'h0;\n"], [603, "        else if (counter_x<420)\n"], [604, "          rgb <= last_addr[3]?16'hff:16'h0;\n"], [605, "        else if (counter_x<430)\n"], [606, "          rgb <= last_addr[2]?16'hff:16'h0;\n"], [607, "        else if (counter_x<440)\n"], [608, "          rgb <= last_addr[1]?16'hff:16'h0;\n"], [609, "        else if (counter_x<450)\n"], [610, "          rgb <= last_addr[0]?16'hff:16'h0;\n"], [611, "        else if (counter_x<490)\n"], [612, "          rgb <= 16'h0;\n"], [614, "        else if (counter_x<520)\n"], [615, "          rgb <= last_data[15]?16'hffff:16'h00ff;\n"], [616, "        else if (counter_x<521)\n"], [617, "          rgb <= 0;\n"], [618, "        else if (counter_x<530)\n"], [619, "          rgb <= last_data[14]?16'hffff:16'h00ff;\n"], [620, "        else if (counter_x<531)\n"], [621, "          rgb <= 0;\n"], [622, "        else if (counter_x<540)\n"], [623, "          rgb <= last_data[13]?16'hffff:16'h00ff;\n"], [624, "        else if (counter_x<541)\n"], [625, "          rgb <= 0;\n"], [626, "        else if (counter_x<550)\n"], [627, "          rgb <= last_data[12]?16'hffff:16'h00ff;\n"], [628, "        else if (counter_x<551)\n"], [629, "          rgb <= 0;\n"], [630, "        else if (counter_x<560)\n"], [631, "          rgb <= last_data[11]?16'hffff:16'h00ff;\n"], [632, "        else if (counter_x<561)\n"], [633, "          rgb <= 0;\n"], [634, "        else if (counter_x<570)\n"], [635, "          rgb <= last_data[10]?16'hffff:16'h00ff;\n"], [636, "        else if (counter_x<571)\n"], [637, "          rgb <= 0;\n"], [638, "        else if (counter_x<580)\n"], [639, "          rgb <= last_data[9]?16'hffff:16'h00ff;\n"], [640, "        else if (counter_x<581)\n"], [641, "          rgb <= 0;\n"], [642, "        else if (counter_x<590)\n"], [643, "          rgb <= last_data[8]?16'hffff:16'h00ff;\n"], [644, "        else if (counter_x<591)\n"], [645, "          rgb <= 0;\n"], [646, "        else if (counter_x<600)\n"], [647, "          rgb <= last_data[7]?16'hffff:16'h00ff;\n"], [648, "        else if (counter_x<601)\n"], [649, "          rgb <= 0;\n"], [650, "        else if (counter_x<610)\n"], [651, "          rgb <= last_data[6]?16'hffff:16'h00ff;\n"], [652, "        else if (counter_x<611)\n"], [653, "          rgb <= 0;\n"], [654, "        else if (counter_x<620)\n"], [655, "          rgb <= last_data[5]?16'hffff:16'h00ff;\n"], [656, "        else if (counter_x<621)\n"], [657, "          rgb <= 0;\n"], [658, "        else if (counter_x<630)\n"], [659, "          rgb <= last_data[4]?16'hffff:16'h00ff;\n"], [660, "        else if (counter_x<631)\n"], [661, "          rgb <= 0;\n"], [662, "        else if (counter_x<640)\n"], [663, "          rgb <= last_data[3]?16'hffff:16'h00ff;\n"], [664, "        else if (counter_x<641)\n"], [665, "          rgb <= 0;\n"], [666, "        else if (counter_x<650)\n"], [667, "          rgb <= last_data[2]?16'hffff:16'h00ff;\n"], [668, "        else if (counter_x<651)\n"], [669, "          rgb <= 0;\n"], [670, "        else if (counter_x<660)\n"], [671, "          rgb <= last_data[1]?16'hffff:16'h00ff;\n"], [672, "        else if (counter_x<661)\n"], [673, "          rgb <= 0;\n"], [674, "        else if (counter_x<670)\n"], [675, "          rgb <= last_data[0]?16'hffff:16'h00ff;\n"], [676, "        else if (counter_x<700)\n"], [677, "          rgb <= 0;\n"], [678, "        else if (counter_x<(700+max_fill)) begin\n"], [679, "          if (counter_y<550) \n"], [680, "            rgb <= writeq_fill>(counter_x-700)?16'hffff:16'h0000;        \n"], [681, "          else\n"], [682, "            rgb <= writeq_drain>(counter_x-700)?16'hffff:16'h0000;\n"], [683, "        end else \n"], [684, "          rgb <= 0;\n"], [685, "        end\n"], [686, "      else begin\n"], [687, "        if (counter_x>=(screen_w+240) || counter_x<240)\n"], [688, "          rgb <= 0;\n"], [690, "        /*else if (counter_x<rec_depth) begin\n"], [691, "          if (counter_y>=100 && counter_y<=145)\n"], [692, "            rgb <= (rec_addr[counter_x][(counter_y-100)>>1])?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n"], [693, "          else if (counter_y>=200 && counter_y<=231)\n"], [694, "            rgb <= (rec_data[counter_x][(counter_y-200)>>1])?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n"], [695, "          else if (counter_y>=300 && counter_y<=305)\n"], [696, "            rgb <= rec_as[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n"], [697, "          else if (counter_y>=306 && counter_y<=310)\n"], [698, "            rgb <= rec_uds[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n"], [699, "          else if (counter_y>=311 && counter_y<=315)\n"], [700, "            rgb <= rec_lds[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n"], [701, "          else if (counter_y>=316 && counter_y<=320)\n"], [702, "            rgb <= rec_doe[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n"], [703, "          else if (counter_y>=321 && counter_y<=325)\n"], [704, "            rgb <= rec_read[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n"], [705, "          else\n"], [706, "            rgb <= ram_data_buffer[counter_x];*/\n"], [707, "        else rgb <= ram_data_buffer[counter_x-240];\n"], [709, "        /*else\n"], [710, "          rgb <= ram_data_buffer[counter_x];*/\n"], [711, "      end\n"]], "Add": [[472, "  x_safe_area <= (counter_x > h_max-safe_x2);\n"], [472, "  if (counter_x > h_max) begin\n"], [474, "    if (counter_y > v_max) begin\n"], [479, "    end else\n"], [479, "      counter_y <= counter_y + 1'b1;\n"], [479, "  end else begin\n"], [479, "    counter_x <= counter_x + 1'b1;\n"], [479, "    if (counter_x > h_max-fetch_preroll)\n"], [479, "      if (counter_y<screen_h)\n"], [479, "        need_row_fetch_y <= (counter_y+1'b1)>>scalemode;\n"], [479, "      else\n"], [479, "        need_row_fetch_y <= 0;\n"], [479, "  end\n"], [552, "  if ((counter_y<screen_h || counter_y>=v_max) && (counter_x>=h_max || counter_x<h_rez))\n"], [552, "    display_pixels <= 1;\n"], [552, "  else begin\n"], [552, "    display_pixels <= 0;\n"], [552, "    preheat <= 1;\n"], [552, "    counter_scale <= scalemode;\n"], [552, "    counter_8x <= margin_x;\n"], [552, "    counter_x_hi <= 0;\n"], [552, "    display_x2 <= {margin_x,1'b0};\n"], [552, "    display_x3 <= {margin_x,1'b1};\n"], [552, "  end\n"], [557, "`ifdef ANALYZER\n"], [557, "  if (counter_y>=590) begin\n"], [557, "    /*if (counter_x<110) begin\n"], [557, "      if (zorro_state[4]) green_p <= 8'hff;\n"], [557, "      else green_p <= 8'h20;\n"], [557, "    end else if (counter_x<120) begin\n"], [557, "      if (zorro_state[3]) green_p <= 8'hff;\n"], [557, "      else green_p <= 8'h40;\n"], [557, "    end else if (counter_x<130) begin\n"], [557, "      if (zorro_state[2]) green_p <= 8'hff;\n"], [557, "      else green_p <= 8'h20;\n"], [557, "    end else if (counter_x<140) begin\n"], [557, "      if (zorro_state[1]) green_p <= 8'hff;\n"], [557, "      else green_p <= 8'h40;\n"], [557, "    end else if (counter_x<150) begin\n"], [557, "      if (zorro_state[0]) green_p <= 8'hff;\n"], [557, "      else green_p <= 8'h20;\n"], [557, "    end else if (counter_x<160) begin\n"], [557, "      green_p <= 0;\n"], [557, "    end else if (counter_x<170) begin\n"], [557, "      if (ram_arbiter_state[4]) green_p <= 8'hff;\n"], [557, "      else green_p <= 8'h20;\n"], [557, "    end else if (counter_x<180) begin\n"], [557, "      if (ram_arbiter_state[3]) green_p <= 8'hff;\n"], [557, "      else green_p <= 8'h40;\n"], [557, "    end else if (counter_x<190) begin\n"], [557, "      if (ram_arbiter_state[2]) green_p <= 8'hff;\n"], [557, "      else green_p <= 8'h20;\n"], [557, "    end else if (counter_x<200) begin\n"], [557, "      if (ram_arbiter_state[1]) green_p <= 8'hff;\n"], [557, "      else green_p <= 8'h40;\n"], [557, "    end else if (counter_x<210) begin\n"], [557, "      if (ram_arbiter_state[0]) green_p <= 8'hff;\n"], [557, "      else green_p <= 8'h20;\n"], [711, "    end else if (counter_x<220) begin\n"], [711, "      green_p <= 0;\n"], [711, "    end else if (counter_x<230) begin\n"], [711, "      if (zorro_ram_write_request) green_p <= 8'hff;\n"], [711, "      else green_p <= 8'h40;\n"], [711, "    end else if (counter_x<240) begin\n"], [711, "      if (ram_enable) green_p <= 8'hff;\n"], [711, "      else green_p <= 8'h20;\n"], [711, "    end else if (counter_x<250) begin\n"], [711, "      if (zorro_ram_read_request) green_p <= 8'hff;\n"], [711, "      else green_p <= 8'h40;\n"], [711, "    end else if (counter_x<260) begin\n"], [711, "      if (zorro_ram_read_done) green_p <= 8'hff;\n"], [711, "      else green_p <= 8'h40;\n"], [711, "    end else begin\n"], [711, "      green_p <= 0;\n"], [711, "      blue_p <= 0;\n"], [711, "    end*/\n"], [711, "    if (counter_y<600) begin\n"], [711, "      if (rec_zreadraw[counter_x]) green_p <= 8'hff;\n"], [711, "      else green_p <= 0;\n"], [711, "    end else if (counter_y<610) begin\n"], [711, "      if (rec_zread[counter_x]) green_p <= 8'hff;\n"], [711, "      else green_p <= 0;\n"], [711, "    end else if (counter_y<620) begin\n"], [711, "      if (rec_zwrite[counter_x]) green_p <= 8'hff;\n"], [711, "      else green_p <= 0;\n"], [711, "    end else if (counter_y<630) begin\n"], [711, "      if (rec_zas0[counter_x]) green_p <= 8'hff;\n"], [711, "      else green_p <= 0;\n"], [711, "    end else if (counter_y<640) begin\n"], [711, "      if (rec_zas1[counter_x]) green_p <= 8'hff;\n"], [711, "      else green_p <= 0;\n"], [711, "    end else if (counter_y<650) begin\n"], [711, "      if (rec_zaddr_in_ram[counter_x]) green_p <= 8'hff;\n"], [711, "      else green_p <= 0;\n"], [711, "    end else if (counter_y<660) begin\n"], [711, "      if (rec_state[counter_x]) blue_p <= 8'hff;\n"], [711, "      else blue_p <= 0;\n"], [711, "    end else if (counter_y<670) begin\n"], [711, "      if (rec_statew[counter_x]) blue_p <= 8'hff;\n"], [711, "      else blue_p <= 0;\n"], [711, "    end else if (counter_y<680) begin\n"], [711, "      if (rec_ready[counter_x]) blue_p <= 8'hff;\n"], [711, "      else blue_p <= 0;\n"], [711, "    end else if (counter_y<690) begin\n"], [711, "      if (rec_endcycle[counter_x]) green_p <= 8'hff;\n"], [711, "      else green_p <= 0;\n"], [711, "    end else begin\n"], [711, "      green_p <= 0;\n"], [711, "      blue_p <= 0;\n"], [711, "    end\n"], [711, "  end else\n"], [711, "`endif\n"], [711, "  if (!display_pixels) begin\n"], [711, "    red_p   <= 0;\n"], [711, "    green_p <= 0;\n"], [711, "    blue_p  <= 0;\n"], [711, "  end else if (colormode==0) begin\n"], [711, "    if (preheat) begin\n"], [711, "      red_p <= 0;\n"], [711, "      green_p <= 0;\n"], [711, "      blue_p <= 0;\n"], [711, "      preheat <= 0;\n"], [711, "    end else if (counter_scale != scalemode) begin\n"], [711, "      counter_scale <= counter_scale + 1'b1;\n"], [711, "    end else if (counter_x_hi==1) begin\n"], [711, "      red_p   <= palette_r[fetch_buffer[counter_8x][7:0]];\n"], [711, "      green_p <= palette_g[fetch_buffer[counter_8x][7:0]];\n"], [711, "      blue_p  <= palette_b[fetch_buffer[counter_8x][7:0]];\n"], [711, "      counter_8x <= counter_8x + 1'b1;\n"], [711, "      counter_x_hi <= 0;\n"], [711, "      counter_scale <= 0;\n"], [711, "    end else begin\n"], [711, "      red_p   <= palette_r[fetch_buffer[counter_8x][15:8]];\n"], [711, "      green_p <= palette_g[fetch_buffer[counter_8x][15:8]];\n"], [711, "      blue_p  <= palette_b[fetch_buffer[counter_8x][15:8]];\n"], [711, "      counter_x_hi <= 1;\n"], [711, "      counter_scale <= 0;\n"], [711, "    end\n"], [711, "  end else if (colormode==1) begin\n"], [711, "    if (counter_scale != scalemode) begin\n"], [711, "      counter_scale <= counter_scale + 1'b1;\n"], [711, "    end else begin\n"], [711, "      counter_scale <= 0;\n"], [711, "      rgb <= fetch_buffer[counter_8x];\n"], [711, "      counter_8x <= counter_8x + 1'b1;\n"], [711, "    end\n"], [711, "    red_p[0] <= rgb[0];\n"], [711, "    red_p[1] <= rgb[0];\n"], [711, "    red_p[2] <= rgb[1];\n"], [711, "    red_p[3] <= rgb[1];\n"], [711, "    red_p[4] <= rgb[2];\n"], [711, "    red_p[5] <= rgb[2];\n"], [711, "    red_p[6] <= rgb[3];\n"], [711, "    red_p[7] <= rgb[4];\n"], [711, "    green_p[0] <= rgb[5];\n"], [711, "    green_p[1] <= rgb[5];\n"], [711, "    green_p[2] <= rgb[6];\n"], [711, "    green_p[3] <= rgb[6];\n"], [711, "    green_p[4] <= rgb[7];\n"], [711, "    green_p[5] <= rgb[8];\n"], [711, "    green_p[6] <= rgb[9];\n"], [711, "    green_p[7] <= rgb[10];\n"], [711, "    blue_p[0] <= rgb[11];\n"], [711, "    blue_p[1] <= rgb[11];\n"], [711, "    blue_p[2] <= rgb[12];\n"], [711, "    blue_p[3] <= rgb[12];\n"], [711, "    blue_p[4] <= rgb[13];\n"], [711, "    blue_p[5] <= rgb[13];\n"], [711, "    blue_p[6] <= rgb[14];\n"], [711, "    blue_p[7] <= rgb[15];\n"], [711, "  end else if (colormode==2) begin\n"], [711, "    if (counter_scale != scalemode) begin\n"], [711, "      counter_scale <= counter_scale + 1'b1;\n"], [711, "    end else begin\n"], [711, "      counter_scale <= 0;\n"], [711, "      counter_8x <= counter_8x + 1'b1;\n"], [711, "      display_x2 <= display_x2 + 2'b10;\n"], [711, "      display_x3 <= display_x3 + 2'b10;\n"], [711, "    end\n"], [711, "    rgb32 <= {fetch_buffer[display_x3],fetch_buffer[display_x2]};\n"], [711, "    red_p   <= rgb32[15:8];\n"], [711, "    green_p <= rgb32[7:0];\n"], [711, "    blue_p <= rgb32[31:24];\n"], [711, "  end else begin\n"], [711, "    red_p   <= 0;\n"], [711, "    green_p <= 0;\n"], [711, "    blue_p  <= 0;\n"], [711, "  end\n"]]}}