Source Block: amiga2000-gfxcard/z2-minispartan/SDRAM_Controller_v.v@159:169@HdlIdDef
   
   // signals to hold the requested transaction before it is completed
   reg save_wr                  = 1'b0; 
   reg [sdram_row_bits-1:0] save_row          = 13'b0000000000000;
   reg [1:0]  save_bank         = 2'b00;
   reg [sdram_column_bits-1:0] save_col          = 13'b0000000000000;
   reg [15:0] save_data_in      = 16'b0000000000000000;
   reg [1:0]  save_byte_enable  = 2'b00;
   
   // control when new transactions are accepted 
   reg ready_for_new    = 1'b0;

Diff Content:
- 164    reg [sdram_column_bits-1:0] save_col          = 13'b0000000000000;
+ 164    reg [sdram_row_bits-1:0] save_col          = 13'b0000000000000;

Clone Blocks:
Clone Blocks 1:
amiga2000-gfxcard/z2-minispartan/SDRAM_Controller_v.v@158:168
   //reg [dqm_sr_high:0] dqm_sr = 2'b11; // an extra two bits in case CAS=3
   
   // signals to hold the requested transaction before it is completed
   reg save_wr                  = 1'b0; 
   reg [sdram_row_bits-1:0] save_row          = 13'b0000000000000;
   reg [1:0]  save_bank         = 2'b00;
   reg [sdram_column_bits-1:0] save_col          = 13'b0000000000000;
   reg [15:0] save_data_in      = 16'b0000000000000000;
   reg [1:0]  save_byte_enable  = 2'b00;
   
   // control when new transactions are accepted 

Clone Blocks 2:
amiga2000-gfxcard/z2-minispartan/SDRAM_Controller_v.v@157:167
   //parameter dqm_sr_high = 1;
   //reg [dqm_sr_high:0] dqm_sr = 2'b11; // an extra two bits in case CAS=3
   
   // signals to hold the requested transaction before it is completed
   reg save_wr                  = 1'b0; 
   reg [sdram_row_bits-1:0] save_row          = 13'b0000000000000;
   reg [1:0]  save_bank         = 2'b00;
   reg [sdram_column_bits-1:0] save_col          = 13'b0000000000000;
   reg [15:0] save_data_in      = 16'b0000000000000000;
   reg [1:0]  save_byte_enable  = 2'b00;
   

Clone Blocks 3:
amiga2000-gfxcard/z2-minispartan/SDRAM_Controller_v.v@164:174
   reg [sdram_column_bits-1:0] save_col          = 13'b0000000000000;
   reg [15:0] save_data_in      = 16'b0000000000000000;
   reg [1:0]  save_byte_enable  = 2'b00;
   
   // control when new transactions are accepted 
   reg ready_for_new    = 1'b0;
   reg got_transaction  = 1'b0;
   reg can_back_to_back = 1'b0; 

   // signal to control the Hi-Z state of the DQ bus
   reg iob_dq_hiz = 1'b0;

Clone Blocks 4:
amiga2000-gfxcard/attic/PapPro-sdram_verilog_v0.1/SDRAM_Controller_v.v@157:167
   
   // signals to hold the requested transaction before it is completed
   reg save_wr                  = 1'b0; 
   reg [12:0] save_row          = 13'b0000000000000;
   reg [1:0]  save_bank         = 2'b00;
   reg [12:0] save_col          = 13'b0000000000000;
   reg [31:0] save_data_in      = 32'b00000000000000000000000000000000;
   reg [3:0]  save_byte_enable  = 3'b0000;
   
   // control when new transactions are accepted 
   reg ready_for_new    = 1'b0;

Clone Blocks 5:
amiga2000-gfxcard/attic/PapPro-sdram_verilog_v0.1/SDRAM_Controller_v.v@158:168
   // signals to hold the requested transaction before it is completed
   reg save_wr                  = 1'b0; 
   reg [12:0] save_row          = 13'b0000000000000;
   reg [1:0]  save_bank         = 2'b00;
   reg [12:0] save_col          = 13'b0000000000000;
   reg [31:0] save_data_in      = 32'b00000000000000000000000000000000;
   reg [3:0]  save_byte_enable  = 3'b0000;
   
   // control when new transactions are accepted 
   reg ready_for_new    = 1'b0;
   reg got_transaction  = 1'b0;

Clone Blocks 6:
amiga2000-gfxcard/z2-minispartan/SDRAM_Controller_v.v@161:171
   reg save_wr                  = 1'b0; 
   reg [sdram_row_bits-1:0] save_row          = 13'b0000000000000;
   reg [1:0]  save_bank         = 2'b00;
   reg [sdram_column_bits-1:0] save_col          = 13'b0000000000000;
   reg [15:0] save_data_in      = 16'b0000000000000000;
   reg [1:0]  save_byte_enable  = 2'b00;
   
   // control when new transactions are accepted 
   reg ready_for_new    = 1'b0;
   reg got_transaction  = 1'b0;
   reg can_back_to_back = 1'b0; 

Clone Blocks 7:
amiga2000-gfxcard/z2-minispartan/SDRAM_Controller_v.v@156:166
   // shift register to hold the DQM bits
   //parameter dqm_sr_high = 1;
   //reg [dqm_sr_high:0] dqm_sr = 2'b11; // an extra two bits in case CAS=3
   
   // signals to hold the requested transaction before it is completed
   reg save_wr                  = 1'b0; 
   reg [sdram_row_bits-1:0] save_row          = 13'b0000000000000;
   reg [1:0]  save_bank         = 2'b00;
   reg [sdram_column_bits-1:0] save_col          = 13'b0000000000000;
   reg [15:0] save_data_in      = 16'b0000000000000000;
   reg [1:0]  save_byte_enable  = 2'b00;

Clone Blocks 8:
amiga2000-gfxcard/z2-minispartan/SDRAM_Controller_v.v@160:170
   // signals to hold the requested transaction before it is completed
   reg save_wr                  = 1'b0; 
   reg [sdram_row_bits-1:0] save_row          = 13'b0000000000000;
   reg [1:0]  save_bank         = 2'b00;
   reg [sdram_column_bits-1:0] save_col          = 13'b0000000000000;
   reg [15:0] save_data_in      = 16'b0000000000000000;
   reg [1:0]  save_byte_enable  = 2'b00;
   
   // control when new transactions are accepted 
   reg ready_for_new    = 1'b0;
   reg got_transaction  = 1'b0;

Clone Blocks 9:
amiga2000-gfxcard/attic/PapPro-sdram_verilog_v0.1/SDRAM_Controller_v.v@159:169
   reg save_wr                  = 1'b0; 
   reg [12:0] save_row          = 13'b0000000000000;
   reg [1:0]  save_bank         = 2'b00;
   reg [12:0] save_col          = 13'b0000000000000;
   reg [31:0] save_data_in      = 32'b00000000000000000000000000000000;
   reg [3:0]  save_byte_enable  = 3'b0000;
   
   // control when new transactions are accepted 
   reg ready_for_new    = 1'b0;
   reg got_transaction  = 1'b0;
   reg can_back_to_back = 1'b0; 

