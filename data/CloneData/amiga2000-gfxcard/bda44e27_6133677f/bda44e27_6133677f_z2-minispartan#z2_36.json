{"Source Block": ["amiga2000-gfxcard/z2-minispartan/z2.v@239:472@HdlStmProcess", "\nreg [6:0] rec_idx; // up to rec_depth\nreg [6:0] trigger_idx;\nreg read_fetched = 0;\n*/\nalways @(posedge z_sample_clk) begin\n\n  // synchronizers (inspired by https://github.com/endofexclusive/greta/blob/master/hdl/bus_interface/bus_interface.vhdl)\n  znUDS_sync  <= {znUDS_sync[1:0],znUDS};\n  znLDS_sync  <= {znLDS_sync[1:0],znLDS};\n  znAS_sync   <= {znAS_sync[0],znAS};\n  zREAD_sync  <= {zREAD_sync[0],zREAD};\n  zDOE_sync   <= {zDOE_sync[0],zDOE};\n  zE7M_sync   <= {zE7M_sync[0],zE7M};\n  \n  data_in <= zD;\n  zaddr <= zA;\n  \n  /*rec_addr[rec_idx] <= zaddr;\n  rec_data[rec_idx] <= data_in;\n  rec_as[rec_idx]   <= znAS_sync[1];\n  rec_lds[rec_idx]  <= znLDS_sync[1];\n  rec_uds[rec_idx]  <= znUDS_sync[1];\n  rec_read[rec_idx] <= zREAD_sync[1];\n  rec_doe[rec_idx]  <= zDOE_sync[1];\n  \n  if (rec_idx>=rec_depth-1) begin\n    if (recording)\n      rec_idx <= 0;\n  end else\n    rec_idx <= rec_idx+1;*/\n   \n  if (state == IDLE) begin\n    dataout <= 0;\n    \n    if (znAS_sync[1]==0) begin\n      // zorro gives us an address\n      \n      if (zREAD_sync[1]==1 && zaddr>=ram_low && zaddr<ram_high) begin\n        // read RAM\n\n        last_addr <= zaddr;\n        dataout_enable <= 1;\n        dataout <= 0;\n        data <= 'hffff;\n        \n        ram_write <= 0;\n        ram_addr <= ((zaddr&'h1ffffe)>>1);\n        ram_enable <= 1;\n        ram_byte_enable <= 'b11;\n        fetching <= 0;\n        \n        state <= WAIT_READ;\n                \n      end else if (zREAD_sync[1]==1 && zaddr>=rom_low && zaddr<rom_high && !znCFGIN) begin\n        // read iospace 'he80000 (ROM)\n        dataout_enable <= 1;\n        dataout <= 1;\n        last_addr <= zaddr;\n        \n        case (zaddr & 'h0000ff)\n          'h000000: data <= 'b1100_0000_0000_0000; // zorro 2\n          'h000002: data <= 'b0111_0000_0000_0000; // 4mb, not linked\n          'h000004: data <= 'b0001_0000_0000_0000; // product number\n          'h000006: data <= 'b0111_0000_0000_0000; // (23)\n          'h000008: data <= 'b0100_0000_0000_0000; // flags\n          'h00000a: data <= 'b0000_0000_0000_0000; // sub size automatic\n          'h00000c: data <= 'b0000_0000_0000_0000; // reserved\n          'h00000e: data <= 'b0000_0000_0000_0000; // \n          'h000010: data <= 'b0110_0000_0000_0000; // manufacturer high byte\n          'h000012: data <= 'b1101_0000_0000_0000; // \n          'h000014: data <= 'b0110_0000_0000_0000; // manufacturer low byte\n          'h000016: data <= 'b1101_0000_0000_0000;\n          'h000018: data <= 'b0000_0000_0000_0000; // reserved\n          'h00001a: data <= 'b0000_0000_0000_0000; //\n          //'h000044: z_state <= Z_CONF_DONE;\n         \n          default: data <= 'b0000_0000_0000_0000;\t \n        endcase\n        state <= WAIT_READ_ROM;\n       \n      end else if (zREAD_sync[1]==0 && zaddr>=ram_low && zaddr<ram_high) begin\n        // write RAM\n        \n        dataout <= 0;\n        last_addr <= zaddr;\n        \n        state <= WAIT_WRITE;\n      end else\n        dataout <= 0;\n      \n    end else if (!row_fetched && !fetching && counter_y<600 && ((writeq_fill-writeq_drain)<1000) ) begin\n      // fetch video pixels for current row as quickly as possible\n      \n      dataout <= 0;\n      fetching <= 1;\n      fetch_x <= 0;\n      ram_byte_enable <= 'b1111;\n      ram_addr  <= ((fetch_y << 10));\n      ram_write <= 0;\n      ram_enable <= 1;\n    end else\n      dataout <= 0;\n  \n  end else if (state == WAIT_READ) begin\n    if (data_out_ready) begin\n      last_data <= ram_data_out[15:0];\n    end\n    \n    if (znAS_sync[1]==1) begin\n      state <= IDLE;\n      dataout <= 0;\n      dataout_enable <= 0;\n      ram_enable <= 0;\n      if (!row_fetched) begin\n        fetching <= 1;\n        //fetch_x <= fetch_x + 16;\n      end\n    end else begin\n      dataout <= 1;\n      dataout_enable <= 1;\n      data <= last_data;\n    end\n\n  end else if (state == WAIT_READ_ROM) begin\n    if (znAS_sync[1]==1) begin\n      state <= IDLE;\n      dataout <= 0;\n      dataout_enable <= 0;\n    end else begin\n      dataout <= 1;\n      dataout_enable <= 1;\n    end\n   \n  end else if (state == WAIT_WRITE) begin\n    dataout <= 0;\n\n    if ((znUDS_sync[2]==znUDS_sync[1]) && (znLDS_sync[2]==znLDS_sync[1]) && ((znUDS_sync[2]==0) || (znLDS_sync[2]==0))) begin\n      //last_addr <= zaddr;\n      last_data <= data_in;\n    \n      /*if (recording==0) begin\n        recording <= 1;\n        trigger_idx <= 0;\n      end else begin\n        recording <= 0;\n        trigger_idx <= rec_idx;\n      end*/\n      \n      writeq_addr[writeq_fill][q_msb:0] <= (last_addr&'h1ffffe)>>1;\n      writeq_addr[writeq_fill][lds_bit]   <= ~znLDS_sync[2];\n      writeq_addr[writeq_fill][uds_bit]   <= ~znUDS_sync[2];\n      writeq_data[writeq_fill]       <= data_in;\n      \n      if (writeq_fill<max_fill-1)\n        writeq_fill <= writeq_fill+1;\n      else\n        writeq_fill <= 0;\n        \n      state <= WAIT_WRITE2;\n    end\n  end else if (state == WAIT_WRITE2) begin\n    dataout <= 0;\n    if (znAS_sync[1]==1) state <= IDLE;\n  end\n  \n  if ((state == IDLE && (!(zREAD_sync[1]==1 && zaddr>=ram_low && zaddr<ram_high) || znAS_sync[1]==1))\n      || state == WAIT_WRITE2) begin\n    if (fetching && cmd_ready && (data_out_ready || fetch_x==0) && state!=WAIT_READ2) begin\n      ram_data_buffer[fetch_x] <= ram_data_out[15:0];\n      \n      fetch_x <= fetch_x + 1;\n      if (fetch_x > screen_w) begin\n        fetching <= 0;\n        fetch_x  <= 0;\n        row_fetched <= 1; // row completely fetched\n      end\n      \n      // catch up with counter if we're behind\n      /*if (fetch_x < counter_x) begin\n        fetch_x <= counter_x + 8;\n      end*/\n       \n      // read window\n      ram_addr  <= ((fetch_y << 10) + fetch_x);\n      ram_enable <= 1; // fetch next\n      ram_byte_enable <= 'b11;\n      ram_write <= 0;\n    end\n\n    if (!fetching && cmd_ready && writeq_fill!=writeq_drain) begin\n      // write window\n      if (writeq_addr[writeq_drain][uds_bit] && !writeq_addr[writeq_drain][lds_bit])\n        ram_byte_enable <= 'b10; // UDS\n      else if (writeq_addr[writeq_drain][lds_bit] && !writeq_addr[writeq_drain][uds_bit])\n        ram_byte_enable <= 'b01; // LDS\n      else\n        ram_byte_enable <= 'b11;\n      \n      ram_data_in <= (writeq_data[writeq_drain]);\n      ram_addr    <= (writeq_addr[writeq_drain][q_msb:0]);   \n      ram_write   <= 1;\n      ram_enable  <= 1;\n      wdelay <= 0;\n      \n      if (writeq_drain<max_fill-1)\n        writeq_drain <= writeq_drain+1;\n      else\n        writeq_drain <= 0;\n    end\n    \n    if (!fetching && (writeq_fill==writeq_drain)) begin\n      if (wdelay==2) begin\n        ram_enable <= 0;\n        ram_write <= 0;\n        ram_byte_enable <= 'b11;\n        wdelay <= wdelay+1;\n      end else if (wdelay<2) begin\n        wdelay <= wdelay+1;\n      end\n    end\n  end\n  \n  if (counter_x==h_max-200) begin\n    row_fetched <= 0;\n    fetch_x <= 0;\n    fetch_y <= counter_y;\n  end\nend\n\nreg[15:0] rgb = 'h0000;\n\nalways @(posedge vga_clk) begin\n  if (counter_x >= h_max) begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[244, "always @(posedge z_sample_clk) begin\n"], [249, "  znAS_sync   <= {znAS_sync[0],znAS};\n"], [250, "  zREAD_sync  <= {zREAD_sync[0],zREAD};\n"], [255, "  zaddr <= zA;\n"], [257, "  /*rec_addr[rec_idx] <= zaddr;\n"], [258, "  rec_data[rec_idx] <= data_in;\n"], [259, "  rec_as[rec_idx]   <= znAS_sync[1];\n"], [260, "  rec_lds[rec_idx]  <= znLDS_sync[1];\n"], [261, "  rec_uds[rec_idx]  <= znUDS_sync[1];\n"], [262, "  rec_read[rec_idx] <= zREAD_sync[1];\n"], [263, "  rec_doe[rec_idx]  <= zDOE_sync[1];\n"], [265, "  if (rec_idx>=rec_depth-1) begin\n"], [266, "    if (recording)\n"], [269, "    rec_idx <= rec_idx+1;*/\n"], [271, "  if (state == IDLE) begin\n"], [272, "    dataout <= 0;\n"], [274, "    if (znAS_sync[1]==0) begin\n"], [277, "      if (zREAD_sync[1]==1 && zaddr>=ram_low && zaddr<ram_high) begin\n"], [280, "        last_addr <= zaddr;\n"], [281, "        dataout_enable <= 1;\n"], [283, "        data <= 'hffff;\n"], [285, "        ram_write <= 0;\n"], [286, "        ram_addr <= ((zaddr&'h1ffffe)>>1);\n"], [287, "        ram_enable <= 1;\n"], [288, "        ram_byte_enable <= 'b11;\n"], [289, "        fetching <= 0;\n"], [291, "        state <= WAIT_READ;\n"], [293, "      end else if (zREAD_sync[1]==1 && zaddr>=rom_low && zaddr<rom_high && !znCFGIN) begin\n"], [295, "        dataout_enable <= 1;\n"], [296, "        dataout <= 1;\n"], [297, "        last_addr <= zaddr;\n"], [299, "        case (zaddr & 'h0000ff)\n"], [300, "          'h000000: data <= 'b1100_0000_0000_0000; // zorro 2\n"], [301, "          'h000002: data <= 'b0111_0000_0000_0000; // 4mb, not linked\n"], [302, "          'h000004: data <= 'b0001_0000_0000_0000; // product number\n"], [303, "          'h000006: data <= 'b0111_0000_0000_0000; // (23)\n"], [304, "          'h000008: data <= 'b0100_0000_0000_0000; // flags\n"], [305, "          'h00000a: data <= 'b0000_0000_0000_0000; // sub size automatic\n"], [306, "          'h00000c: data <= 'b0000_0000_0000_0000; // reserved\n"], [307, "          'h00000e: data <= 'b0000_0000_0000_0000; // \n"], [308, "          'h000010: data <= 'b0110_0000_0000_0000; // manufacturer high byte\n"], [309, "          'h000012: data <= 'b1101_0000_0000_0000; // \n"], [310, "          'h000014: data <= 'b0110_0000_0000_0000; // manufacturer low byte\n"], [311, "          'h000016: data <= 'b1101_0000_0000_0000;\n"], [312, "          'h000018: data <= 'b0000_0000_0000_0000; // reserved\n"], [313, "          'h00001a: data <= 'b0000_0000_0000_0000; //\n"], [316, "          default: data <= 'b0000_0000_0000_0000;\t \n"], [317, "        endcase\n"], [318, "        state <= WAIT_READ_ROM;\n"], [320, "      end else if (zREAD_sync[1]==0 && zaddr>=ram_low && zaddr<ram_high) begin\n"], [323, "        dataout <= 0;\n"], [324, "        last_addr <= zaddr;\n"], [326, "        state <= WAIT_WRITE;\n"], [327, "      end else\n"], [328, "        dataout <= 0;\n"], [330, "    end else if (!row_fetched && !fetching && counter_y<600 && ((writeq_fill-writeq_drain)<1000) ) begin\n"], [333, "      dataout <= 0;\n"], [334, "      fetching <= 1;\n"], [335, "      fetch_x <= 0;\n"], [336, "      ram_byte_enable <= 'b1111;\n"], [337, "      ram_addr  <= ((fetch_y << 10));\n"], [338, "      ram_write <= 0;\n"], [339, "      ram_enable <= 1;\n"], [340, "    end else\n"], [341, "      dataout <= 0;\n"], [343, "  end else if (state == WAIT_READ) begin\n"], [344, "    if (data_out_ready) begin\n"], [345, "      last_data <= ram_data_out[15:0];\n"], [348, "    if (znAS_sync[1]==1) begin\n"], [349, "      state <= IDLE;\n"], [350, "      dataout <= 0;\n"], [351, "      dataout_enable <= 0;\n"], [352, "      ram_enable <= 0;\n"], [353, "      if (!row_fetched) begin\n"], [354, "        fetching <= 1;\n"], [357, "    end else begin\n"], [358, "      dataout <= 1;\n"], [359, "      dataout_enable <= 1;\n"], [360, "      data <= last_data;\n"], [363, "  end else if (state == WAIT_READ_ROM) begin\n"], [364, "    if (znAS_sync[1]==1) begin\n"], [365, "      state <= IDLE;\n"], [366, "      dataout <= 0;\n"], [367, "      dataout_enable <= 0;\n"], [368, "    end else begin\n"], [369, "      dataout <= 1;\n"], [370, "      dataout_enable <= 1;\n"], [373, "  end else if (state == WAIT_WRITE) begin\n"], [374, "    dataout <= 0;\n"], [376, "    if ((znUDS_sync[2]==znUDS_sync[1]) && (znLDS_sync[2]==znLDS_sync[1]) && ((znUDS_sync[2]==0) || (znLDS_sync[2]==0))) begin\n"], [378, "      last_data <= data_in;\n"], [380, "      /*if (recording==0) begin\n"], [381, "        recording <= 1;\n"], [382, "        trigger_idx <= 0;\n"], [383, "      end else begin\n"], [384, "        recording <= 0;\n"], [385, "        trigger_idx <= rec_idx;\n"], [386, "      end*/\n"], [388, "      writeq_addr[writeq_fill][q_msb:0] <= (last_addr&'h1ffffe)>>1;\n"], [389, "      writeq_addr[writeq_fill][lds_bit]   <= ~znLDS_sync[2];\n"], [390, "      writeq_addr[writeq_fill][uds_bit]   <= ~znUDS_sync[2];\n"], [391, "      writeq_data[writeq_fill]       <= data_in;\n"], [393, "      if (writeq_fill<max_fill-1)\n"], [394, "        writeq_fill <= writeq_fill+1;\n"], [395, "      else\n"], [396, "        writeq_fill <= 0;\n"], [398, "      state <= WAIT_WRITE2;\n"], [400, "  end else if (state == WAIT_WRITE2) begin\n"], [401, "    dataout <= 0;\n"], [402, "    if (znAS_sync[1]==1) state <= IDLE;\n"], [403, "  end\n"], [405, "  if ((state == IDLE && (!(zREAD_sync[1]==1 && zaddr>=ram_low && zaddr<ram_high) || znAS_sync[1]==1))\n"], [406, "      || state == WAIT_WRITE2) begin\n"], [407, "    if (fetching && cmd_ready && (data_out_ready || fetch_x==0) && state!=WAIT_READ2) begin\n"], [408, "      ram_data_buffer[fetch_x] <= ram_data_out[15:0];\n"], [410, "      fetch_x <= fetch_x + 1;\n"], [411, "      if (fetch_x > screen_w) begin\n"], [412, "        fetching <= 0;\n"], [413, "        fetch_x  <= 0;\n"], [414, "        row_fetched <= 1; // row completely fetched\n"], [418, "      /*if (fetch_x < counter_x) begin\n"], [419, "        fetch_x <= counter_x + 8;\n"], [420, "      end*/\n"], [423, "      ram_addr  <= ((fetch_y << 10) + fetch_x);\n"], [424, "      ram_enable <= 1; // fetch next\n"], [425, "      ram_byte_enable <= 'b11;\n"], [429, "    if (!fetching && cmd_ready && writeq_fill!=writeq_drain) begin\n"], [431, "      if (writeq_addr[writeq_drain][uds_bit] && !writeq_addr[writeq_drain][lds_bit])\n"], [432, "        ram_byte_enable <= 'b10; // UDS\n"], [433, "      else if (writeq_addr[writeq_drain][lds_bit] && !writeq_addr[writeq_drain][uds_bit])\n"], [434, "        ram_byte_enable <= 'b01; // LDS\n"], [435, "      else\n"], [438, "      ram_data_in <= (writeq_data[writeq_drain]);\n"], [439, "      ram_addr    <= (writeq_addr[writeq_drain][q_msb:0]);   \n"], [440, "      ram_write   <= 1;\n"], [441, "      ram_enable  <= 1;\n"], [442, "      wdelay <= 0;\n"], [444, "      if (writeq_drain<max_fill-1)\n"], [445, "        writeq_drain <= writeq_drain+1;\n"], [446, "      else\n"], [447, "        writeq_drain <= 0;\n"], [450, "    if (!fetching && (writeq_fill==writeq_drain)) begin\n"], [451, "      if (wdelay==2) begin\n"], [454, "        ram_byte_enable <= 'b11;\n"], [455, "        wdelay <= wdelay+1;\n"], [456, "      end else if (wdelay<2) begin\n"], [457, "        wdelay <= wdelay+1;\n"], [458, "      end\n"], [460, "  end\n"], [462, "  if (counter_x==h_max-200) begin\n"], [463, "    row_fetched <= 0;\n"], [464, "    fetch_x <= 0;\n"], [465, "    fetch_y <= counter_y;\n"], [466, "  end\n"]], "Add": [[244, "reg z2_uds = 0;\n"], [244, "reg z2_lds = 0;\n"], [244, "reg z3_din_latch = 0;\n"], [244, "reg z3_fcs_state = 0;\n"], [244, "always @(posedge z_sample_clk) begin\n"], [250, "  znAS_sync   <= {znAS_sync[1:0],znAS};\n"], [250, "  zREAD_sync  <= {zREAD_sync[1:0],zREAD};\n"], [250, "  znDS1_sync  <= {znDS1_sync[1:0],znDS1};\n"], [250, "  znDS0_sync  <= {znDS0_sync[1:0],znDS0};\n"], [252, "  znRST_sync  <= {znRST_sync[0],znRST};\n"], [252, "  znCFGIN_sync  <= {znCFGIN_sync[1:0],znCFGIN};\n"], [252, "  znFCS_sync <= {znFCS_sync[1:0],znFCS};\n"], [252, "  z2_addr_valid <= (znAS_sync[2]==0); //(znAS_sync[0] == 0);\n"], [255, "  data_in_z3_low16 <= zA[22:7]; // FIXME why sample this twice?\n"], [255, "  zdata_in_sync <= data_in;\n"], [255, "  z_ready_latch <= z_ready; // timing fix\n"], [255, "  vga_clk_sel0_latch <= vga_clk_sel[0];\n"], [255, "  if (znUDS_sync[1]==0 || znLDS_sync[1]==0 || znDS1_sync[1]==0 || znDS0_sync[1]==0)\n"], [255, "    z3_din_latch <= 1;\n"], [255, "  else\n"], [255, "    z3_din_latch <= 0;\n"], [255, "  z3_end_cycle <= (z3_fcs_state==1); //(znFCS_sync[0]==1); //(znFCS_sync==3'b111);\n"], [255, "  if (z3_din_latch) begin\n"], [255, "    z3_din_high_s2 <= zD;\n"], [255, "    z3_din_low_s2  <= zA[22:7];\n"], [255, "  end\n"], [255, "  data_z3_hi16_latched <= data_z3_hi16;\n"], [255, "  data_z3_low16_latched <= data_z3_low16;\n"], [255, "  dataout_z3_latched <= dataout_z3;\n"], [263, "  need_row_fetch_y_latched <= need_row_fetch_y;\n"], [266, "  zaddr <= {zA[22:0],1'b0};\n"], [266, "  zaddr_sync  <= zaddr;\n"], [266, "  zaddr_sync2 <= zaddr_sync;\n"], [266, "  z2_mapped_addr <= ((zaddr_sync2-ram_low)>>1);\n"], [266, "  z2_read  <= (zREAD_sync[0] == 1'b1);\n"], [266, "  z2_write <= (zREAD_sync[0] == 1'b0);\n"], [266, "  z3addr2 <= {zD[15:8],zA[22:1],2'b00};\n"], [266, "  z3addr3 <= z3addr2;\n"], [266, "  if (z3_fcs_state==0) begin\n"], [266, "    if (znFCS_sync==3'b111)\n"], [266, "      z3_fcs_state<=1;\n"], [266, "  end else\n"], [266, "  if (z3_fcs_state==1) begin\n"], [266, "    if (znFCS_sync==3'b000 && z3addr3==z3addr2) begin\n"], [266, "      z3_fcs_state<=0;\n"], [266, "      z3addr <= z3addr2;\n"], [266, "      zorro_read  <= zREAD_sync[1];\n"], [266, "      zorro_write  <= ~zREAD_sync[1];\n"], [266, "    end\n"], [266, "  end\n"], [266, "  if (z3_fcs_state==0) begin\n"], [266, "    z3addr_in_ram <= (z3addr >= z3_ram_low) && (z3addr < z3_ram_high);\n"], [266, "  end else begin\n"], [266, "    z3addr_in_ram <= 0;\n"], [266, "  end\n"], [266, "  z3_mapped_addr <= ((z3addr)&'h01ffffff)>>1;\n"], [266, "  datastrobe_synced <= (znUDS_sync==0 || znLDS_sync==0);\n"], [266, "  z2_uds <= (znUDS_sync==0);\n"], [266, "  z2_lds <= (znLDS_sync==0);\n"], [266, "  zaddr_in_ram <= (zaddr_sync==zaddr_sync2 && zaddr_sync>=ram_low && zaddr_sync<ram_high);\n"], [266, "  zaddr_in_reg <= (zaddr_sync==zaddr_sync2 && zaddr_sync>=reg_low && zaddr_sync<reg_high);\n"], [266, "  if (znAS_sync[1]==0 && zaddr_sync>=autoconf_low && zaddr_sync<autoconf_high)\n"], [266, "    zaddr_autoconfig <= 1'b1;\n"], [266, "  else\n"], [266, "    zaddr_autoconfig <= 1'b0;\n"], [266, "  z_reset <= (znRST_sync==3'b000);\n"], [266, "  z_cfgin <= (znCFGIN_sync==3'b000);\n"], [266, "  z_cfgin_lo <= (znCFGIN_sync==3'b111);\n"], [266, "  z3addr_in_reg <= (z3addr >= z3_reg_low) && (z3addr < z3_reg_high);\n"], [266, "  z3addr_autoconfig <= (z3addr[31:16]=='hff00);\n"], [266, "end\n"], [266, "reg zorro_ram_read_request = 0;\n"], [266, "reg zorro_ram_read_done = 1;\n"], [266, "reg zorro_ram_write_request = 0;\n"], [266, "reg zorro_ram_write_done = 1;\n"], [266, "reg [23:0] zorro_ram_read_addr;\n"], [266, "reg [15:0] zorro_ram_read_data;\n"], [266, "reg [1:0] zorro_ram_read_bytes;\n"], [266, "reg [23:0] zorro_ram_write_addr;\n"], [266, "reg [15:0] zorro_ram_write_data;\n"], [266, "reg [1:0] zorro_ram_write_bytes;\n"], [266, "reg [4:0] ram_arbiter_state = 0;\n"], [266, "parameter RAM_READY = 0;\n"], [266, "parameter RAM_READY2 = 1;\n"], [266, "parameter RAM_FETCHING_ROW8 = 2;\n"], [266, "parameter RAM_ROW_FETCHED = 3;\n"], [266, "parameter RAM_READING_ZORRO_PRE = 4;\n"], [266, "parameter RAM_WRITING_ZORRO = 5;\n"], [266, "parameter RAM_BURST_OFF = 6;\n"], [266, "parameter RAM_BURST_OFF2 = 7;\n"], [266, "parameter RAM_BURST_ON = 8;\n"], [266, "parameter RAM_READING_BLIT = 9;\n"], [266, "parameter RAM_REFRESH = 10;\n"], [266, "parameter RAM_READING_ZORRO = 11;\n"], [266, "parameter RAM_REFRESH_PRE = 12;\n"], [266, "parameter RAM_WRITING_ZORRO_PRE = 13;\n"], [266, "reg [11:0] need_row_fetch_y = 0;\n"], [266, "reg [11:0] need_row_fetch_y_latched = 0;\n"], [266, "reg [11:0] fetch_line_y = 0;\n"], [266, "reg [2:0] linescalecount = 0;\n"], [266, "reg blitter_dirx = 0;\n"], [266, "reg blitter_diry = 0;\n"], [266, "reg [4:0] dtack_time = 0;\n"], [266, "reg [15:0] warmup_counter = 0; // 2 seconds @ 150mhz\n"], [266, "reg [5:0] dvid_reset_counter = 0;\n"], [266, "reg z2_addr_valid = 0;\n"], [266, "reg z3_end_cycle = 0;\n"], [266, "reg [31:0] trace_1 = 0;\n"], [266, "reg [31:0] trace_2 = 0;\n"], [266, "reg [31:0] trace_3 = 0;\n"], [266, "reg [15:0] trace_4 = 0;\n"], [266, "reg [31:0] trace_5 = 0;\n"], [266, "reg [31:0] trace_6 = 0;\n"], [266, "reg [15:0] trace_7 = 0;\n"], [266, "reg [15:0] trace_8 = 0;\n"], [266, "reg [15:0] trace_9 = 0;\n"], [266, "reg [7:0] write_counter = 0;\n"], [266, "reg z3_ds3=0;\n"], [266, "reg z3_ds2=0;\n"], [266, "reg z3_ds1=0;\n"], [266, "reg z3_ds0=0;\n"], [266, "reg [1:0] zorro_write_capture_bytes = 0;\n"], [266, "reg [15:0] zorro_write_capture_data = 0;\n"], [266, "reg [15:0] default_data = 'hffff; // causes read/write glitches on A2000 (data bus interference) when 0\n"], [266, "always @(posedge z_sample_clk) begin\n"], [266, "`ifdef ANALYZER\n"], [266, "  if (rec_enable) begin\n"], [266, "    if (rec_idx==(ANSIZE*4)) begin\n"], [266, "      rec_enable <= 0;\n"], [267, "    end else begin\n"], [267, "      rec_idx <= rec_idx+1;\n"], [267, "      rec_zreadraw[rec_idx>>2] <= !znAS_sync[0]; // zREAD;\n"], [267, "      rec_zread[rec_idx>>2] <= z2_read;\n"], [267, "      rec_zwrite[rec_idx>>2] <= z2_write;\n"], [267, "      rec_zas0[rec_idx>>2] <= !znLDS_sync[0]; //znAS_sync[0];\n"], [267, "      rec_zas1[rec_idx>>2] <= !znUDS_sync[0]; //znAS_sync[1];\n"], [267, "      rec_zaddr_in_ram[rec_idx>>2] <= zorro_ram_read_request; //z3addr_in_ram;\n"], [267, "      rec_state[rec_idx>>2] <= zorro_ram_write_request;\n"], [267, "      rec_statew[rec_idx>>2] <= ((zorro_state==WAIT_WRITE2)||(zorro_state==WAIT_WRITE)||(zorro_state==Z2_WRITE_FINALIZE))?1'b1:1'b0;\n"], [267, "      rec_ready[rec_idx>>2] <= ((zorro_state==WAIT_READ2)||(zorro_state==WAIT_READ3))?1'b1:1'b0;\n"], [267, "      rec_endcycle[rec_idx>>2] <= ((zorro_state==Z2_ENDCYCLE))?1'b1:1'b0;\n"], [267, "    end\n"], [267, "  end\n"], [267, "`endif\n"], [267, "  if (z_cfgin_lo || z_reset) begin\n"], [267, "    zorro_state <= RESET;\n"], [272, "  case (zorro_state)\n"], [272, "    RESET: begin\n"], [272, "      vga_clk_sel  <= 0;\n"], [272, "      screen_w     <= 1280;\n"], [272, "      h_rez        <= 1280;\n"], [272, "      h_sync_start <= 1280+72;\n"], [272, "      h_sync_end   <= 1280+80;\n"], [272, "      h_max        <= 1647;\n"], [272, "      screen_h     <= 720;\n"], [272, "      v_rez        <= 720;\n"], [272, "      v_sync_start <= 720+3;\n"], [272, "      v_sync_end   <= 720+8;\n"], [272, "      v_max        <= 749;\n"], [272, "      z_confout <= 0;\n"], [272, "      z3_confdone <= 0;\n"], [272, "      scalemode <= 0;\n"], [272, "      colormode <= 1;\n"], [272, "      dataout_enable <= 0;\n"], [272, "      dataout <= 0;\n"], [272, "      slaven <= 0;\n"], [272, "      z_ready <= 1; // clear XRDY (cpu wait)\n"], [272, "      zorro_ram_read_done <= 1;\n"], [272, "      blitter_enable <= 0;\n"], [272, "      warmup_counter <= 0;\n"], [272, "      sdram_reset <= 1;\n"], [272, "      z_ovr <= 0;\n"], [272, "      blitter_x1 <= 0;\n"], [272, "      blitter_y1 <= 0; \n"], [272, "      blitter_x2 <= 1279;\n"], [272, "      blitter_y2 <= 719;\n"], [272, "      blitter_ptr <= 0;\n"], [272, "      ram_low   <= 'h600000;\n"], [272, "      ram_high  <= 'h600000 + ram_size-4;\n"], [272, "      reg_low   <= 'h600000 + ram_size;\n"], [272, "      reg_high  <= 'h600000 + ram_size + reg_size;\n"], [272, "        zorro_state <= PAUSE;\n"], [272, "    end\n"], [274, "    PAUSE: begin\n"], [274, "      if (zaddr_autoconfig) begin\n"], [274, "        ZORRO3 <= 0;\n"], [274, "        zorro_state <= Z2_CONFIGURING;\n"], [274, "      end else if (z3addr_autoconfig) begin\n"], [274, "        ZORRO3 <= 1;\n"], [274, "        zorro_state <= Z3_CONFIGURING;\n"], [274, "      end\n"], [274, "    end\n"], [274, "    Z3_CONFIGURING: begin\n"], [274, "      if (z_cfgin && z3addr_autoconfig && znFCS_sync[2]==0) begin\n"], [274, "        if (zorro_read) begin\n"], [274, "          dataout_enable <= 1;\n"], [274, "          dataout_z3 <= 1;\n"], [274, "          data_z3_low16 <= 'hffff;\n"], [274, "          slaven <= 1;\n"], [274, "          dtack_time <= 0;\n"], [274, "          zorro_state <= Z3_DTACK;\n"], [274, "          case (z3addr[15:0])\n"], [274, "            'h0000: data_z3_hi16 <= 'b1000_1111_1111_1111; // zorro 3 (10), no pool link (0), no autoboot (0)\n"], [274, "            'h0100: data_z3_hi16 <= 'b0001_1111_1111_1111; // next board unrelated (0), 32mb\n"], [274, "            'h0004: data_z3_hi16 <= 'b1111_1111_1111_1111; // product number\n"], [274, "            'h0104: data_z3_hi16 <= 'b1110_1111_1111_1111; // (1)\n"], [274, "            'h0008: data_z3_hi16 <= 'b0000_1111_1111_1111; // flags inverted 0111 io,shutup,extension,reserved(1)\n"], [274, "            'h0108: data_z3_hi16 <= 'b1111_1111_1111_1111; // inverted zero\n"], [274, "            'h000c: data_z3_hi16 <= 'b1111_1111_1111_1111; // reserved?\n"], [274, "            'h010c: data_z3_hi16 <= 'b1111_1111_1111_1111; // \n"], [274, "            'h0010: data_z3_hi16 <= 'b1001_1111_1111_1111; // manufacturer high byte inverted\n"], [274, "            'h0110: data_z3_hi16 <= 'b0010_1111_1111_1111; // \n"], [274, "            'h0014: data_z3_hi16 <= 'b1001_1111_1111_1111; // manufacturer low byte\n"], [274, "            'h0114: data_z3_hi16 <= 'b0001_1111_1111_1111;\n"], [274, "            'h0018: data_z3_hi16 <= 'b1111_1111_1111_1111; // serial 01 01 01 01\n"], [274, "            'h0118: data_z3_hi16 <= 'b1110_1111_1111_1111; //\n"], [274, "            'h001c: data_z3_hi16 <= 'b1111_1111_1111_1111; //\n"], [274, "            'h011c: data_z3_hi16 <= 'b1110_1111_1111_1111; //\n"], [274, "            'h0020: data_z3_hi16 <= 'b1111_1111_1111_1111; //\n"], [274, "            'h0120: data_z3_hi16 <= 'b1110_1111_1111_1111; //\n"], [274, "            'h0024: data_z3_hi16 <= 'b1111_1111_1111_1111; //\n"], [274, "            'h0124: data_z3_hi16 <= 'b1110_1111_1111_1111; //\n"], [274, "            default: data_z3_hi16 <= 'b1111_1111_1111_1111;\n"], [274, "          endcase\n"], [274, "        end else begin\n"], [274, "          slaven <= 1;\n"], [274, "          if (((znUDS_sync[2]==0) || (znLDS_sync[2]==0))) begin\n"], [274, "            dtack_time <= 0;\n"], [274, "            zorro_state <= Z3_DTACK;\n"], [274, "            casex (z3addr[15:0])\n"], [274, "              'hXX44: begin\n"], [274, "                z3_ram_low[31:16] <= data_in;\n"], [274, "                z3_confdone <= 1;\n"], [274, "              end\n"], [274, "              'hXX48: begin\n"], [274, "              end\n"], [274, "              'hXX4c: begin\n"], [274, "                z3_confdone <= 1;\n"], [274, "              end\n"], [274, "            endcase\n"], [274, "          end\n"], [274, "        end\n"], [274, "      end else begin\n"], [274, "        dataout_z3 <= 0;\n"], [274, "        dataout_enable <= 0;\n"], [274, "        slaven <= 0;\n"], [274, "        dtack <= 0;\n"], [274, "      end\n"], [274, "    end\n"], [274, "    Z3_DTACK: begin\n"], [274, "      /*if (dtack_time < 2)\n"], [274, "        dtack_time <= dtack_time + 1'b1;\n"], [274, "      else*/ if (z3_end_cycle) begin\n"], [274, "        dtack <= 0;\n"], [274, "        dataout_z3 <= 0;\n"], [274, "        dataout_enable <= 0;\n"], [274, "        slaven <= 0;\n"], [274, "        dtack_time <= 0;\n"], [274, "        if (z3_confdone) begin\n"], [274, "          zorro_state <= CONFIGURED;\n"], [274, "          ram_high  <= z3_ram_low + z3_ram_size-'h10000-4;\n"], [274, "          reg_low   <= z3_ram_low + z3_ram_size-'h10000;\n"], [274, "          reg_high  <= z3_ram_low + z3_ram_size-'h10000 + reg_size;\n"], [274, "        end else\n"], [274, "          zorro_state <= Z3_CONFIGURING;\n"], [274, "      end else\n"], [274, "        dtack <= 1;\n"], [274, "    end\n"], [274, "    Z2_CONFIGURING: begin\n"], [274, "      z_ovr <= 0;\n"], [274, "      if (zaddr_autoconfig && z_cfgin) begin\n"], [274, "        if (z2_read) begin\n"], [274, "          dataout_enable <= 1;\n"], [274, "          dataout <= 1;\n"], [274, "          slaven <= 1;\n"], [274, "          case (zaddr_sync2[7:0])\n"], [274, "            8'h00: data <= 'b1100_1111_1111_1111; // zorro 2\n"], [274, "            8'h02: data <= 'b0111_1111_1111_1111; // next board unrelated (0), 4mb\n"], [274, "            8'h04: data <= 'b1111_1111_1111_1111; // product number\n"], [274, "            8'h06: data <= 'b1110_1111_1111_1111; // (1)\n"], [274, "            8'h08: data <= 'b0011_1111_1111_1111; // flags inverted 0011\n"], [274, "            8'h0a: data <= 'b1111_1111_1111_1111; // inverted zero\n"], [274, "            8'h10: data <= 'b1001_1111_1111_1111; // manufacturer high byte inverted (02)\n"], [274, "            8'h12: data <= 'b0010_1111_1111_1111; // \n"], [274, "            8'h14: data <= 'b1001_1111_1111_1111; // manufacturer low byte (9a)\n"], [274, "            8'h16: data <= 'b0001_1111_1111_1111;\n"], [274, "            8'h18: data <= 'b1111_1111_1111_1111; // serial 01 01 01 01\n"], [274, "            8'h1a: data <= 'b1110_1111_1111_1111; //\n"], [274, "            8'h1c: data <= 'b1111_1111_1111_1111; //\n"], [274, "            8'h1e: data <= 'b1110_1111_1111_1111; //\n"], [274, "            8'h20: data <= 'b1111_1111_1111_1111; //\n"], [274, "            8'h22: data <= 'b1110_1111_1111_1111; //\n"], [274, "            8'h24: data <= 'b1111_1111_1111_1111; //\n"], [274, "            8'h26: data <= 'b1110_1111_1111_1111; //\n"], [274, "            default: data <= 'b1111_1111_1111_1111;\n"], [274, "          endcase\n"], [274, "        end else begin\n"], [274, "          if (datastrobe_synced) begin\n"], [274, "            case (zaddr_sync2[7:0])\n"], [274, "              8'h48: begin\n"], [274, "                ram_low[31:24] <= 8'h0;\n"], [274, "                ram_low[23:20] <= zdata_in_sync[15:12];\n"], [274, "                ram_low[15:0] <= 16'h0;\n"], [274, "                zorro_state <= Z2_PRE_CONFIGURED; // configured\n"], [274, "              end\n"], [274, "              8'h4a: begin\n"], [274, "                ram_low[31:24] <= 8'h0;\n"], [274, "                ram_low[19:16] <= zdata_in_sync[15:12];\n"], [274, "                ram_low[15:0] <= 16'h0;\n"], [274, "              end\n"], [274, "              8'h4c: begin \n"], [274, "                zorro_state <= Z2_PRE_CONFIGURED; // configured, shut up\n"], [274, "              end\n"], [274, "            endcase\n"], [274, "          end\n"], [274, "        end\n"], [274, "      end else begin\n"], [274, "        dataout <= 0;\n"], [274, "        dataout_enable <= 0;\n"], [274, "        slaven <= 0;\n"], [274, "      end\n"], [274, "    end\n"], [274, "    Z2_PRE_CONFIGURED: begin\n"], [274, "      if (znAS_sync[2]==1) begin\n"], [274, "        z_confout<=1;\n"], [274, "        zorro_state <= CONFIGURED;\n"], [274, "      end\n"], [274, "    end\n"], [274, "    CONFIGURED: begin\n"], [274, "      scalemode <= 0;\n"], [274, "      colormode <= 1;\n"], [274, "      blitter_base <= 0;\n"], [274, "      pan_ptr <= 0;\n"], [274, "      burst_enabled <= 1;\n"], [274, "      margin_x <= 8;\n"], [274, "      row_pitch <= 2048;\n"], [274, "      row_pitch_shift <= 11;\n"], [277, "      blitter_enable <= 1;\n"], [277, "      blitter_rgb <= 'h1111;\n"], [281, "      ram_high  <= ram_low + ram_size-'h10000-4;\n"], [281, "      reg_low   <= ram_low + ram_size-'h10000;\n"], [281, "      reg_high  <= ram_low + ram_size-'h10000 + reg_size;\n"], [281, "      z3_ram_high  <= z3_ram_low + z3_ram_size-'h10000-4;\n"], [281, "      z3_reg_low   <= z3_ram_low + z3_ram_size-'h10000;\n"], [281, "      z3_reg_high  <= z3_ram_low + z3_ram_size-'h10000 + reg_size;\n"], [281, "      z_confout <= 1;\n"], [281, "      sdram_reset <= 0;\n"], [281, "      if (ZORRO3) begin\n"], [281, "        zorro_state <= Z3_IDLE;\n"], [281, "      end else begin\n"], [281, "        zorro_state <= Z2_IDLE;\n"], [281, "      end\n"], [281, "    end\n"], [281, "    Z2_IDLE: begin\n"], [281, "      if (dvid_reset) begin\n"], [281, "        dvid_reset_counter <= 2;\n"], [281, "        zorro_state <= RESET_DVID;\n"], [281, "      end else\n"], [281, "      if (z2_addr_valid) begin\n"], [281, "        `ifdef ANALYZER\n"], [281, "          if (!rec_enable && zaddr_in_ram) begin \n"], [281, "            rec_enable <= 1;\n"], [281, "            rec_idx <= 0;\n"], [281, "          end\n"], [281, "        `endif\n"], [281, "        if (z2_read && zaddr_in_ram) begin\n"], [281, "          last_addr <= z2_mapped_addr;\n"], [281, "          data <= default_data; //'hffff;\n"], [281, "          read_counter <= 0;\n"], [281, "          slaven <= 1;\n"], [281, "          dataout_enable <= 1;\n"], [281, "          dataout <= 1;\n"], [281, "          z_ovr <= 1;\n"], [281, "          zorro_state <= WAIT_READ3;\n"], [281, "        end else if (z2_write && zaddr_in_ram) begin\n"], [281, "          last_addr <= z2_mapped_addr;\n"], [281, "          zorro_state <= WAIT_WRITE;\n"], [281, "          dataout_enable <= 0;\n"], [281, "          dataout <= 0;\n"], [281, "          datain_counter <= 0;\n"], [281, "          z_ovr <= 1;\n"], [281, "        end else if (z2_write && zaddr_in_reg) begin\n"], [281, "          zaddr_regpart <= z2_mapped_addr[15:0];\n"], [281, "          zorro_state <= WAIT_REGWRITE;\n"], [281, "          dataout_enable <= 0;\n"], [281, "          dataout <= 0;\n"], [281, "          z_ovr <= 1;\n"], [281, "        end else if (z2_read && zaddr_in_reg) begin\n"], [281, "          dataout_enable <= 1;\n"], [281, "          dataout <= 1;\n"], [281, "          slaven <= 1;\n"], [281, "          z_ovr <= 1;\n"], [281, "          case (zaddr_sync2[7:0])\n"], [281, "            'h20: data <= blitter_x1;\n"], [281, "            'h22: data <= blitter_y1;\n"], [281, "            'h24: data <= blitter_x2;\n"], [281, "            'h26: data <= blitter_y2;\n"], [281, "            'h28: data <= blitter_rgb;\n"], [281, "            'h2a: data <= blitter_enable;\n"], [281, "            'h60: data <= {sd_busy,8'h00};\n"], [281, "            'h62: data <= {sd_read,8'h00};\n"], [281, "            'h64: data <= {sd_write,8'h00};\n"], [281, "            'h66: data <= {sd_handshake_out,8'h00};\n"], [281, "            'h68: data <= sd_addr_in[31:16];\n"], [281, "            'h6a: data <= sd_addr_in[15:0];\n"], [281, "            'h6c: data <= {sd_data_in,8'h00};\n"], [281, "            'h6e: data <= {sd_data_out,8'h00};\n"], [281, "            'h70: data <= sd_error;\n"], [281, "            default: data <= REVISION; //'h0000;\n"], [281, "          endcase\n"], [281, "          zorro_state <= Z2_ENDCYCLE;\n"], [281, "        end else begin\n"], [281, "          dataout <= 0;\n"], [281, "          dataout_enable <= 0;\n"], [281, "          slaven <= 0;\n"], [281, "          write_stall <= 0;\n"], [281, "        end\n"], [281, "      end else begin\n"], [289, "        dataout_enable <= 0;\n"], [289, "        slaven <= 0;\n"], [289, "        write_stall <= 0;\n"], [289, "      end\n"], [289, "    end\n"], [289, "    WAIT_REGWRITE: begin\n"], [289, "      if (datastrobe_synced) begin\n"], [289, "        regdata_in <= zdata_in_sync;\n"], [289, "        zaddr_regpart <= zaddr_sync2[15:0];\n"], [289, "        zorro_state <= REGWRITE;\n"], [289, "      end\n"], [289, "    end\n"], [289, "    WAIT_READ3: begin\n"], [289, "        zorro_ram_read_addr <= last_addr;\n"], [289, "        zorro_ram_read_request <= 1;\n"], [289, "        zorro_ram_read_done <= 0;\n"], [289, "        zorro_state <= WAIT_READ2;\n"], [289, "    end\n"], [289, "    WAIT_READ2: begin\n"], [289, "      if (zorro_ram_read_done) begin\n"], [289, "        read_counter <= read_counter + 1;\n"], [289, "        data <= zorro_ram_read_data;\n"], [297, "        if (read_counter >= dataout_time) begin\n"], [297, "          zorro_state <= Z2_ENDCYCLE;\n"], [297, "        end\n"], [297, "      end\n"], [297, "    end\n"], [297, "    WAIT_WRITE: begin\n"], [297, "      if (!zorro_ram_write_request) begin\n"], [297, "        if (datastrobe_synced) begin\n"], [297, "          zorro_write_capture_bytes <= {~znUDS_sync[1],~znLDS_sync[1]};\n"], [297, "          zorro_write_capture_data <= data_in; //_sync;\n"], [297, "          zorro_state <= WAIT_WRITE2;\n"], [297, "        end\n"], [297, "      end\n"], [297, "    end\n"], [297, "    WAIT_WRITE2: begin\n"], [297, "      zorro_ram_write_addr <= last_addr;\n"], [297, "      zorro_ram_write_bytes <= zorro_write_capture_bytes;\n"], [297, "      zorro_ram_write_data <= zorro_write_capture_data;\n"], [297, "      zorro_ram_write_request <= 1;\n"], [297, "      zorro_state <= Z2_WRITE_FINALIZE;\n"], [297, "    end\n"], [297, "    Z2_WRITE_FINALIZE: begin\n"], [297, "      if (!zorro_ram_write_request) begin\n"], [297, "        zorro_state <= Z2_ENDCYCLE;\n"], [297, "      end\n"], [297, "    end\n"], [297, "    Z2_ENDCYCLE: begin\n"], [297, "      if (!z2_addr_valid) begin\n"], [297, "        dtack <= 0;\n"], [297, "        slaven <= 0;\n"], [297, "        dataout_enable <= 0;\n"], [297, "        dataout <= 0;\n"], [297, "        z_ovr <= 0;\n"], [297, "        zorro_state <= Z2_IDLE;\n"], [297, "      end else\n"], [297, "        dtack <= 1;\n"], [297, "    end\n"], [297, "    RESET_DVID: begin\n"], [297, "      if (dvid_reset_counter==0) begin\n"], [297, "        dvid_reset <= 0;\n"], [297, "        if (ZORRO3)\n"], [297, "          zorro_state <= Z3_IDLE;\n"], [297, "        else\n"], [297, "          zorro_state <= Z2_IDLE;\n"], [297, "      end else\n"], [297, "        dvid_reset_counter <= dvid_reset_counter - 1'b1;\n"], [297, "    end\n"], [297, "    Z3_IDLE: begin\n"], [297, "      if (dvid_reset) begin\n"], [297, "        dvid_reset_counter <= 2;\n"], [297, "        zorro_state <= RESET_DVID;\n"], [297, "      end else\n"], [297, "      if (z3_fcs_state==0) begin\n"], [313, "        `ifdef ANALYZER\n"], [313, "          if (!rec_enable && z3addr_in_ram) begin \n"], [313, "            rec_enable <= 1;\n"], [313, "            rec_idx <= 0;\n"], [313, "          end\n"], [313, "        `endif\n"], [320, "        if (z3addr_in_ram && zorro_write) begin\n"], [320, "          slaven <= 1;\n"], [320, "          dataout_enable <= 0;\n"], [320, "          dataout_z3 <= 0;\n"], [320, "          read_counter <= 0;\n"], [320, "          zorro_state <= Z3_WRITE_PRE;\n"], [320, "        end else if (z3addr_in_ram && zorro_read) begin\n"], [320, "          slaven <= 1;\n"], [320, "          data_z3_hi16 <= default_data;\n"], [320, "          data_z3_low16 <= default_data;\n"], [320, "          dataout_z3 <= 1;\n"], [320, "          zorro_state <= Z3_READ_UPPER;\n"], [320, "        end else if (zorro_write && z3addr_in_reg) begin\n"], [320, "          slaven <= 1;\n"], [320, "          if (znDS1_sync[2]==0) begin\n"], [320, "            regdata_in <= data_in_z3_low16;\n"], [320, "            zaddr_regpart <= (z3addr[15:0])|16'h2;\n"], [320, "            zorro_state <= REGWRITE;\n"], [320, "          end else if (znUDS_sync[2]==0) begin\n"], [320, "            regdata_in <= zdata_in_sync;\n"], [320, "            zaddr_regpart <= z3addr[15:0];\n"], [320, "            zorro_state <= REGWRITE;\n"], [320, "          end\n"], [320, "        end else if (zorro_read && z3addr_in_reg) begin\n"], [320, "          slaven <= 1;\n"], [320, "          data_z3_hi16 <= 0;\n"], [320, "          data_z3_low16 <= 0;\n"], [320, "          if (znDS1_sync[2]==0 || znDS0_sync[2]==0 || znUDS_sync[2]==0 || znLDS_sync[2]==0) begin\n"], [320, "            zaddr_regpart <= {z3addr[15:2],2'b00}; //|16'h2;\n"], [320, "            zorro_state <= REGREAD;\n"], [320, "          end\n"], [320, "        end else begin\n"], [320, "          slaven <= 0;\n"], [320, "          dtack <= 0;\n"], [320, "          dataout_enable <= 0;\n"], [320, "          dataout_z3 <= 0;\n"], [320, "        end\n"], [324, "      end else begin\n"], [324, "        slaven <= 0;\n"], [324, "        dtack <= 0;\n"], [324, "        dataout_enable <= 0;\n"], [324, "        dataout_z3 <= 0;\n"], [324, "      end\n"], [324, "    end\n"], [324, "    Z3_READ_UPPER: begin\n"], [324, "      dataout_enable <= 1;\n"], [324, "      if (!zorro_ram_read_request) begin\n"], [324, "        z3_read_addr <= z3_mapped_addr;\n"], [324, "        zorro_state <= Z3_READ_LOWER;\n"], [324, "        zorro_ram_read_addr <= z3_mapped_addr[23:0];\n"], [324, "        zorro_ram_read_bytes <= 2'b11;\n"], [324, "        zorro_ram_read_request <= 1;\n"], [324, "        zorro_ram_read_done <= 0;\n"], [324, "      end\n"], [324, "    end\n"], [324, "    Z3_READ_LOWER: begin\n"], [324, "      if (!zorro_ram_read_request) begin\n"], [324, "        zorro_ram_read_addr <= {z3_read_addr[23:1],1'b1};\n"], [324, "        zorro_ram_read_bytes <= 2'b11;\n"], [324, "        zorro_ram_read_request <= 1;\n"], [324, "        zorro_ram_read_done <= 0;\n"], [324, "        z3_read_data <= zorro_ram_read_data;\n"], [324, "        zorro_state <= Z3_READ_DELAY1;\n"], [324, "      end\n"], [324, "    end\n"], [324, "    Z3_READ_DELAY1: begin\n"], [324, "      if (!zorro_ram_read_request) begin\n"], [324, "        data_z3_hi16 <= z3_read_data;\n"], [324, "        data_z3_low16 <= zorro_ram_read_data;\n"], [324, "        read_counter <= 0;\n"], [324, "        zorro_state <= Z3_READ_DELAY2;\n"], [324, "      end\n"], [324, "    end\n"], [324, "    Z3_READ_DELAY2: begin\n"], [324, "      if (read_counter >= dataout_time)\n"], [324, "        zorro_state <= Z3_ENDCYCLE;\n"], [324, "      else\n"], [324, "        read_counter <= read_counter+1'b1;\n"], [324, "    end\n"], [324, "    Z3_WRITE_PRE: begin\n"], [324, "      if ((znUDS_sync==0) || (znLDS_sync==0) || (znDS1_sync==0) || (znDS0_sync==0)) begin\n"], [324, "        z3_ds0<=~znDS0_sync[0];\n"], [324, "        z3_ds1<=~znDS1_sync[0];\n"], [324, "        z3_ds2<=~znLDS_sync[0];\n"], [324, "        z3_ds3<=~znUDS_sync[0];\n"], [324, "        zorro_state<=Z3_WRITE_UPPER;\n"], [324, "      end\n"], [324, "    end\n"], [324, "    Z3_WRITE_UPPER: begin\n"], [328, "      if (z3_ds3 || z3_ds2) begin\n"], [328, "        if (!zorro_ram_write_request) begin\n"], [328, "          zorro_ram_write_addr <= z3_mapped_addr[23:0];\n"], [328, "          zorro_ram_write_bytes <= {z3_ds3,z3_ds2};\n"], [328, "          zorro_ram_write_data <= z3_din_high_s2;\n"], [328, "          zorro_ram_write_request <= 1;\n"], [330, "`ifdef TRACE    \n"], [330, "          trace_1 <= trace_1 + 1'b1;\n"], [330, "          trace_2 <= z3_mapped_addr;\n"], [330, "          trace_3 <= z3_din_high_s2;\n"], [330, "          trace_4 <= {z3_ds3,z3_ds2};\n"], [330, "`endif\n"], [330, "          zorro_state <= Z3_WRITE_LOWER;\n"], [330, "        end\n"], [330, "      end else begin\n"], [330, "        zorro_state <= Z3_WRITE_LOWER;\n"], [330, "      end\n"], [330, "    end\n"], [330, "    Z3_WRITE_LOWER: begin\n"], [330, "      if (z3_ds1 || z3_ds0) begin\n"], [330, "        if (!zorro_ram_write_request) begin\n"], [330, "          zorro_ram_write_addr <= (z3_mapped_addr[23:0])|1'b1;\n"], [330, "          zorro_ram_write_bytes <= {z3_ds1,z3_ds0};\n"], [330, "          zorro_ram_write_data <= z3_din_low_s2;\n"], [330, "          zorro_ram_write_request <= 1;\n"], [345, "`ifdef TRACE    \n"], [345, "          trace_1 <= trace_1 + 1'b1;\n"], [345, "          trace_2 <= (z3_mapped_addr[23:0])|1'b1;\n"], [345, "          trace_3 <= z3_din_low_s2;\n"], [345, "          trace_4 <= {z3_ds1,z3_ds0};\n"], [345, "`endif\n"], [345, "          zorro_state <= Z3_WRITE_FINALIZE;\n"], [345, "        end\n"], [345, "      end else begin\n"], [345, "        zorro_state <= Z3_WRITE_FINALIZE;\n"], [345, "      end\n"], [354, "    Z3_WRITE_FINALIZE: begin\n"], [354, "      if (!zorro_ram_write_request) begin\n"], [354, "        zorro_state <= Z3_ENDCYCLE;\n"], [354, "        dtack <= 1;\n"], [370, "    Z3_ENDCYCLE: begin\n"], [370, "      if (z3_end_cycle) begin\n"], [370, "        dtack <= 0;\n"], [370, "        slaven <= 0;\n"], [370, "        dataout_enable <= 0;\n"], [370, "        dataout_z3 <= 0;\n"], [370, "        zorro_state <= Z3_IDLE;\n"], [370, "      end else\n"], [370, "        dtack <= 1;\n"], [374, "    REGREAD_POST: begin\n"], [374, "      data_z3_hi16 <= z3_regread_hi;\n"], [374, "      data_z3_low16 <= z3_regread_lo;\n"], [374, "      zorro_state <= Z3_ENDCYCLE;\n"], [374, "    end\n"], [374, "    REGREAD: begin\n"], [374, "      dataout_enable <= 1;\n"], [374, "      dataout_z3 <= 1;\n"], [374, "      zorro_state <= REGREAD_POST;\n"], [374, "      case (zaddr_regpart)\n"], [374, "        /*'h20: begin z3_regread_hi <= blitter_x1;\n"], [374, "              z3_regread_lo <= blitter_y1; end // 'h22\n"], [374, "        'h24: begin z3_regread_hi <= blitter_x2;\n"], [374, "              z3_regread_lo <= blitter_y2; end // 'h26*/\n"], [374, "        'h28: begin z3_regread_hi <= blitter_rgb;\n"], [374, "              z3_regread_lo <= blitter_enable; end // 'h2a\n"], [374, "        'h60: begin z3_regread_hi <= {sd_busy,8'h00};\n"], [374, "              z3_regread_lo <= {sd_read,8'h00}; end // 'h62\n"], [374, "        'h64: begin z3_regread_hi <= {sd_write,8'h00};\n"], [374, "              z3_regread_lo <= {sd_handshake_out,8'h00}; end // 'h66\n"], [374, "        'h68: begin z3_regread_hi <= sd_addr_in[31:16];\n"], [374, "              z3_regread_lo <= sd_addr_in[15:0]; end // 'h6a\n"], [374, "        'h6c: begin z3_regread_hi <= {sd_data_in,8'h00};\n"], [374, "              z3_regread_lo <= {sd_data_out,8'h00}; end // 'h6e\n"], [374, "        'h70: begin z3_regread_hi <= sd_error; z3_regread_lo <= 0; end\n"], [374, "        /*'h72: data_z3_low16 <= sd_clkdiv;*/\n"], [374, "`ifdef TRACE\n"], [374, "        'h80: begin z3_regread_hi <= trace_1[31:16]; z3_regread_lo <= trace_1[15:0]; end\n"], [374, "        'h84: begin z3_regread_hi <= trace_2[31:16]; z3_regread_lo <= trace_2[15:0]; end\n"], [374, "        'h88: begin z3_regread_hi <= trace_3[31:16]; z3_regread_lo <= trace_3[15:0]; end\n"], [374, "        'h8c: begin z3_regread_hi <= trace_4[15:0]; z3_regread_lo <= 0; end\n"], [374, "        'h90: begin z3_regread_hi <= trace_5[31:16]; z3_regread_lo <= trace_5[15:0]; end\n"], [374, "        'h94: begin z3_regread_hi <= trace_6[31:16]; z3_regread_lo <= trace_6[15:0]; end\n"], [374, "`endif\n"], [378, "        default: begin\n"], [378, "          z3_regread_hi <= REVISION; //'h0000; \n"], [378, "          z3_regread_lo <= 'h0000;\n"], [378, "        end\n"], [378, "      endcase\n"], [378, "    end\n"], [386, "    REGWRITE: begin\n"], [386, "      if (ZORRO3) begin\n"], [386, "        zorro_state <= Z3_ENDCYCLE;\n"], [386, "      end else\n"], [386, "        zorro_state <= Z2_ENDCYCLE;\n"], [391, "      if (zaddr_regpart>='h600) begin\n"], [391, "        palette_r[zaddr_regpart[8:1]] <= regdata_in[7:0];\n"], [391, "      end else if (zaddr_regpart>='h400) begin\n"], [391, "        palette_g[zaddr_regpart[8:1]] <= regdata_in[7:0];\n"], [391, "      end else if (zaddr_regpart>='h200) begin\n"], [391, "        palette_b[zaddr_regpart[8:1]] <= regdata_in[7:0];\n"], [391, "      end else\n"], [391, "      case (zaddr_regpart)\n"], [391, "        'h02: screen_w <= regdata_in[11:0];\n"], [391, "        'h04: scalemode <= regdata_in[1:0];\n"], [391, "        'h06: begin\n"], [391, "          screen_w <= regdata_in[11:0];\n"], [391, "          h_rez    <= regdata_in[11:0];\n"], [391, "        end\n"], [391, "        'h08: begin\n"], [391, "          screen_h <= regdata_in[11:0];\n"], [391, "          v_rez    <= regdata_in[11:0];\n"], [391, "        end\n"], [391, "        'h70: h_sync_start <= regdata_in[11:0];\n"], [391, "        'h72: h_sync_end <= regdata_in[11:0];\n"], [391, "        'h74: h_max <= regdata_in[11:0];\n"], [391, "        'h76: v_sync_start <= regdata_in[11:0];\n"], [391, "        'h78: v_sync_end <= regdata_in[11:0];\n"], [391, "        'h7a: v_max <= regdata_in[11:0];\n"], [391, "        'h7c: begin \n"], [391, "          vga_clk_sel <= regdata_in[1:0];\n"], [391, "          dvid_reset <= 1;\n"], [391, "        end\n"], [391, "        'h0a: dataout_time <= regdata_in[7:0];\n"], [391, "        'h0c: margin_x <= regdata_in[9:0];\n"], [391, "        'h0e: default_data <= regdata_in[15:0];\n"], [391, "        'h10: preheat_x <= regdata_in[4:0];\n"], [391, "        'h14: safe_x2 <= regdata_in[10:0];\n"], [391, "        'h1a: fetch_preroll <= regdata_in[10:0];\n"], [391, "        'h1c: blitter_base[23:16] <= regdata_in[7:0];\n"], [391, "        'h1e: blitter_base[15:0]  <= regdata_in;\n"], [391, "        'h20: blitter_x1 <= regdata_in[11:0];\n"], [391, "        'h22: blitter_y1 <= regdata_in[11:0];\n"], [391, "        'h24: blitter_x2 <= regdata_in[11:0];\n"], [391, "        'h26: blitter_y2 <= regdata_in[11:0];\n"], [391, "        'h28: blitter_rgb <= regdata_in[15:0];\n"], [391, "        'h2a: begin\n"], [391, "          blitter_enable <= regdata_in[3:0];\n"], [391, "          blitter_curx <= blitter_x1;\n"], [391, "          blitter_cury <= blitter_y1;\n"], [391, "          blitter_curx2 <= blitter_x3;\n"], [391, "          blitter_cury2 <= blitter_y3;\n"], [391, "          blitter_dirx <= (blitter_x3>blitter_x4)?1'b1:1'b0;\n"], [391, "          blitter_diry <= (blitter_y3>blitter_y4)?1'b1:1'b0;\n"], [391, "          blitter_ptr <= blitter_base + (blitter_y1 << row_pitch_shift);\n"], [391, "          blitter_ptr2 <= blitter_base + (blitter_y3 << row_pitch_shift);\n"], [391, "          blitter_rgb32_t <= 1;\n"], [391, "        end\n"], [391, "        'h2c: blitter_x3 <= regdata_in[11:0];\n"], [391, "        'h2e: blitter_y3 <= regdata_in[11:0];\n"], [391, "        'h30: blitter_x4 <= regdata_in[11:0];\n"], [391, "        'h32: blitter_y4 <= regdata_in[11:0];\n"], [391, "        'h34: blitter_rgb32[0] <= regdata_in[15:0];\n"], [391, "        'h36: blitter_rgb32[1] <= regdata_in[15:0];\n"], [391, "        'h38: pan_ptr[23:16] <= regdata_in[7:0];\n"], [391, "        'h3a: pan_ptr[15:0]  <= regdata_in;\n"], [391, "        /*'h40: sprite_ax <= regdata_in[10:0];\n"], [391, "        'h42: sprite_ay <= regdata_in[10:0];\n"], [391, "        'h44: sprite_ax2 <= regdata_in[10:0];\n"], [391, "        'h46: sprite_ay2 <= regdata_in[10:0];*/\n"], [391, "        'h48: colormode <= regdata_in[2:0];\n"], [391, "        'h58: row_pitch <= regdata_in;\n"], [391, "        'h5c: row_pitch_shift <= regdata_in[4:0];\n"], [391, "        'h60: sd_reset <= regdata_in[8];\n"], [391, "        'h62: sd_read <= regdata_in[8];\n"], [391, "        'h64: sd_write <= regdata_in[8];\n"], [391, "        'h66: sd_handshake_in <= regdata_in[8];\n"], [391, "        'h68: sd_addr_in[31:16] <= regdata_in[15:0];\n"], [391, "        'h6a: sd_addr_in[15:0] <= regdata_in[15:0];\n"], [391, "        'h6c: sd_data_in <= regdata_in[15:8];\n"], [396, "`ifdef TRACE      \n"], [396, "        'h80: begin\n"], [396, "          trace_1 <= 0;\n"], [396, "        end\n"], [396, "`endif\n"], [398, "      endcase\n"], [414, "    default:\n"], [414, "      zorro_state <= CONFIGURED;\n"], [414, "  endcase\n"], [414, "  case (ram_arbiter_state)\n"], [414, "    RAM_READY: begin\n"], [414, "      ram_enable <= 0;\n"], [414, "      ram_arbiter_state <= RAM_READY2;\n"], [414, "      fetch_y <= pan_ptr + (fetch_line_y << row_pitch_shift);\n"], [414, "    end\n"], [414, "    RAM_READY2: begin\n"], [414, "      if (row_fetched) begin\n"], [414, "        ram_enable <= 0;\n"], [414, "        ram_burst <= 0;\n"], [414, "        if (data_out_queue_empty)\n"], [414, "          ram_arbiter_state <= RAM_BURST_OFF;\n"], [414, "      end else begin\n"], [414, "        ram_enable <= 0;\n"], [414, "        ram_burst <= 1;\n"], [414, "        ram_arbiter_state <= RAM_BURST_ON;\n"], [414, "        fetch_x <= 0;\n"], [414, "        fetch_x2 <= glitchx2_reg;\n"], [415, "    end\n"], [415, "    RAM_BURST_ON: begin\n"], [415, "      if (cmd_ready) begin\n"], [415, "        ram_arbiter_state <= RAM_FETCHING_ROW8;\n"], [415, "        ram_addr  <= fetch_y+glitchx2_reg;\n"], [415, "        ram_write <= 0;\n"], [415, "        ram_byte_enable <= 'b11;\n"], [415, "        ram_enable <= 1;\n"], [415, "        ram_write <= 0;\n"], [415, "        ram_byte_enable <= 'b11;\n"], [415, "      end\n"], [415, "    end\n"], [415, "    RAM_FETCHING_ROW8: begin\n"], [415, "      if (fetch_x >= (screen_w+margin_x)) begin\n"], [415, "        row_fetched <= 1; // row completely fetched\n"], [415, "        ram_enable <= 0;\n"], [415, "        ram_arbiter_state <= RAM_READY;\n"], [415, "      end else if (data_out_ready) begin\n"], [415, "        ram_addr  <= ram_addr + 1'b1; // burst incremented\n"], [425, "        fetch_x <= fetch_x + 1'b1;\n"], [425, "        fetch_x2 <= fetch_x2 + 1'b1;\n"], [425, "        fetch_buffer[fetch_x] <= ram_data_out;\n"], [425, "      end\n"], [425, "    end\n"], [425, "    RAM_BURST_OFF: begin\n"], [425, "      if (cmd_ready) begin\n"], [425, "        ram_enable <= 1;\n"], [425, "        ram_write <= 0;\n"], [425, "        ram_addr <= refresh_addr;\n"], [425, "        refresh_addr <= refresh_addr + 512;\n"], [425, "        ram_arbiter_state <= RAM_BURST_OFF2;\n"], [425, "      end\n"], [425, "    end\n"], [425, "    RAM_BURST_OFF2: begin\n"], [425, "      ram_enable <= 0;\n"], [425, "      if (data_out_ready) begin\n"], [425, "        ram_arbiter_state <= RAM_ROW_FETCHED;\n"], [425, "      end\n"], [425, "    end\n"], [425, "    RAM_ROW_FETCHED:\n"], [425, "      if ((need_row_fetch_y_latched!=fetch_line_y) && x_safe_area && cmd_ready) begin\n"], [425, "        row_fetched <= 0;\n"], [425, "        fetch_x <= 0;\n"], [425, "        fetch_line_y <= need_row_fetch_y_latched;\n"], [425, "        ram_arbiter_state <= RAM_READY;\n"], [425, "      end else if (x_safe_area) begin\n"], [425, "      end else if (blitter_enable==1 && cmd_ready) begin\n"], [425, "        if (colormode==2) begin\n"], [425, "          blitter_rgb <= blitter_rgb32[blitter_rgb32_t];\n"], [425, "        end\n"], [425, "        blitter_rgb32_t <= ~blitter_rgb32_t;\n"], [425, "        if (blitter_curx <= blitter_x2) begin\n"], [425, "          blitter_curx <= blitter_curx + 1'b1;\n"], [425, "          ram_byte_enable <= 'b11;\n"], [425, "          ram_addr    <= blitter_ptr + blitter_curx;          \n"], [425, "          ram_data_in <= blitter_rgb;\n"], [425, "          ram_write   <= 1;\n"], [425, "          ram_enable  <= 1;\n"], [425, "        end else if (blitter_cury<blitter_y2) begin\n"], [425, "          blitter_cury <= blitter_cury + 1'b1;\n"], [425, "          blitter_curx <= blitter_x1;\n"], [425, "          blitter_ptr <= blitter_ptr + row_pitch;\n"], [425, "        end else begin\n"], [425, "          blitter_curx <= 0;\n"], [425, "          blitter_cury <= 0;\n"], [425, "          blitter_enable <= 0;\n"], [425, "        end\n"], [425, "      /*end else if (blitter_enable==2 && cmd_ready) begin\n"], [425, "        if (data_out_queue_empty) begin\n"], [425, "          ram_byte_enable <= 'b11;\n"], [425, "          ram_addr    <= blitter_ptr2+blitter_curx2;\n"], [425, "          ram_write   <= 0;\n"], [425, "          ram_enable  <= 1;\n"], [425, "          ram_arbiter_state <= RAM_READING_BLIT;\n"], [425, "        end else \n"], [425, "          ram_enable <= 0;\n"], [425, "      end else if (blitter_enable==4 && cmd_ready) begin\n"], [425, "        ram_addr    <= blitter_ptr+blitter_curx;\n"], [425, "        ram_data_in <= blitter_copy_rgb;\n"], [425, "        ram_write   <= 1;\n"], [425, "        ram_enable  <= 1;\n"], [425, "        ram_byte_enable <= 'b11;\n"], [425, "        if (blitter_curx2 != blitter_x4) begin\n"], [425, "          if (blitter_dirx==1) begin\n"], [425, "            blitter_curx2 <= blitter_curx2 - 1'b1;\n"], [425, "            blitter_curx  <= blitter_curx - 1'b1;\n"], [425, "          end else begin\n"], [425, "            blitter_curx2 <= blitter_curx2 + 1'b1;\n"], [425, "            blitter_curx  <= blitter_curx + 1'b1;\n"], [425, "          end\n"], [425, "        end else if (blitter_cury2 == blitter_y4) begin\n"], [425, "        end else if (blitter_diry == 0) begin\n"], [425, "          blitter_curx <= blitter_x1;\n"], [425, "          blitter_curx2 <= blitter_x3;\n"], [425, "          blitter_ptr <= blitter_ptr + row_pitch;\n"], [425, "          blitter_ptr2 <= blitter_ptr2 + row_pitch;\n"], [425, "          blitter_cury <= blitter_cury + 1'b1;\n"], [425, "          blitter_cury2 <= blitter_cury2 + 1'b1;\n"], [425, "        end else begin\n"], [425, "          blitter_curx <= blitter_x1;\n"], [425, "          blitter_curx2 <= blitter_x3;\n"], [425, "          blitter_ptr <= blitter_ptr - row_pitch;\n"], [425, "          blitter_ptr2 <= blitter_ptr2 - row_pitch;\n"], [425, "          blitter_cury <= blitter_cury - 1'b1;\n"], [425, "          blitter_cury2 <= blitter_cury2 - 1'b1;\n"], [425, "        end\n"], [425, "        blitter_enable <= 5; // next\n"], [425, "      end else if (blitter_enable==5) begin\n"], [425, "        if (blitter_curx2==blitter_x4 && blitter_cury2 == blitter_y4)\n"], [425, "          blitter_enable <= 0;\n"], [425, "        else\n"], [425, "          blitter_enable <= 2;\n"], [425, "        ram_enable <= 0;\n"], [425, "        */\n"], [425, "      end else if (/*blitter_enable==0 &&*/ zorro_ram_write_request && cmd_ready) begin\n"], [425, "        ram_arbiter_state <= RAM_WRITING_ZORRO_PRE;\n"], [425, "      /*end else if (blitter_enable) begin\n"], [425, "        blitter_enable <= 0;*/\n"], [425, "      end else if (/*blitter_enable==0 &&*/ zorro_ram_read_request && cmd_ready) begin\n"], [425, "        zorro_ram_read_done <= 0;\n"], [425, "        ram_enable <= 0;\n"], [425, "        ram_arbiter_state <= RAM_READING_ZORRO_PRE;\n"], [425, "      end\n"], [425, "    RAM_REFRESH_PRE: begin\n"], [425, "      ram_enable <= 1;\n"], [426, "      ram_byte_enable <= 'b11;\n"], [426, "      ram_addr <= refresh_addr;\n"], [426, "      refresh_addr <= refresh_addr + 512;\n"], [426, "      ram_arbiter_state <= RAM_REFRESH;\n"], [426, "      refresh_counter <= 0;\n"], [435, "    RAM_REFRESH: begin\n"], [435, "      ram_enable <= 0;\n"], [435, "      ram_arbiter_state <= RAM_BURST_OFF;\n"], [435, "    end\n"], [435, "    RAM_READING_BLIT: begin\n"], [435, "      if (data_out_ready) begin\n"], [435, "        ram_enable <= 0;\n"], [435, "        blitter_copy_rgb <= ram_data_out;\n"], [435, "        blitter_enable <= 4;\n"], [435, "        ram_arbiter_state <= RAM_ROW_FETCHED;\n"], [435, "      end\n"], [435, "    end\n"], [435, "    RAM_READING_ZORRO_PRE: begin\n"], [435, "      if (data_out_queue_empty && cmd_ready) begin\n"], [435, "        ram_write <= 0;\n"], [435, "        ram_addr <= zorro_ram_read_addr;\n"], [436, "        ram_enable <= 1;\n"], [436, "        ram_arbiter_state <= RAM_READING_ZORRO;\n"], [436, "      end\n"], [436, "    end\n"], [436, "    RAM_READING_ZORRO: begin\n"], [436, "      if (data_out_ready) begin\n"], [436, "        ram_enable <= 0;\n"], [436, "        zorro_ram_read_data <= ram_data_out;\n"], [436, "        zorro_ram_read_done <= 1;\n"], [436, "        zorro_ram_read_request <= 0;\n"], [436, "        ram_arbiter_state <= RAM_ROW_FETCHED;\n"], [436, "      end\n"], [436, "    end\n"], [436, "    RAM_WRITING_ZORRO_PRE: begin\n"], [436, "      if (cmd_ready) begin\n"], [442, "`ifdef TRACE\n"], [442, "        trace_5 <= zorro_ram_write_addr;\n"], [442, "        trace_6 <= zorro_ram_write_data;\n"], [442, "`endif      \n"], [447, "        ram_byte_enable <= zorro_ram_write_bytes;\n"], [447, "        ram_data_in <= zorro_ram_write_data;\n"], [447, "        ram_addr    <= zorro_ram_write_addr;\n"], [447, "        ram_write   <= 1;\n"], [447, "        ram_enable  <= 1;\n"], [447, "        ram_arbiter_state <= RAM_WRITING_ZORRO;\n"], [447, "      end\n"], [451, "    RAM_WRITING_ZORRO: begin\n"], [451, "        zorro_ram_write_done <= 1;\n"], [451, "        zorro_ram_write_request <= 0;\n"], [458, "        ram_arbiter_state <= RAM_ROW_FETCHED;\n"], [466, "    default:\n"], [466, "      ram_arbiter_state <= RAM_READY;\n"], [466, "  endcase\n"]]}}