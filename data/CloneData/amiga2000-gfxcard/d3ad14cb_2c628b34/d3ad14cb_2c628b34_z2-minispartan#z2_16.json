{"Source Block": ["amiga2000-gfxcard/z2-minispartan/z2.v@1615:1842@HdlStmProcess", "reg [4:0] preheat_x = 0;\nreg preheat = 0;\n\nreg x_safe_area = 0;\n\nalways @(posedge vga_clk) begin\n  if (counter_x >= h_max-preheat_x && !preheat) begin\n    counter_8x <= margin_x;\n    counter_x_hi <= 0;\n    counter_scale <= scalemode;\n    display_x <= margin_x;\n    display_x2 <= margin_x<<1'b1;\n    display_x3 <= (margin_x<<1'b1)+1'b1;\n    \n    preheat <= 1;\n  end\n  \n  x_safe_area <= (counter_x > h_max-safe_x2);\n  \n  if (counter_x >= h_max) begin\n    counter_x <= 0;\n    preheat <= 0;\n    \n    if (counter_y >= v_max) begin\n      counter_y <= 0;\n    end else\n      counter_y <= counter_y + 1'b1;\n  end else begin\n    counter_x <= counter_x + 1'b1;\n    display_x <= display_x + 1'b1;\n  \n    if (counter_x==h_max-fetch_preroll) begin\n      if (counter_y<screen_h-1'b1)\n        need_row_fetch_y <= (counter_y>>scalemode)+1'b1;\n      else\n        need_row_fetch_y <= 0;\n    end\n  end\n    \n  if (counter_x>=h_sync_start && counter_x<h_sync_end)\n    dvi_hsync <= 1;\n  else\n    dvi_hsync <= 0;\n    \n  if (counter_y>=v_sync_start && counter_y<v_sync_end)\n    dvi_vsync <= 1;\n  else\n    dvi_vsync <= 0;\n      \n  if (counter_x<h_rez && counter_y<v_rez) begin\n    dvi_blank <= 0;\n  end else begin\n    dvi_blank <= 1;\n  end\n  \n  if (!preheat && (dvi_blank || (counter_x>=h_rez) || (counter_y>=screen_h))) begin\n    red_p   <= 0;\n    green_p <= 0;\n    blue_p  <= 0;\n  /*end else if (counter_y>=590) begin\n    if (counter_x<110) begin\n      if (zorro_state[4]) green_p <= 8'hff;\n      else green_p <= 8'h20;\n    end else if (counter_x<120) begin\n      if (zorro_state[3]) green_p <= 8'hff;\n      else green_p <= 8'h40;\n    end else if (counter_x<130) begin\n      if (zorro_state[2]) green_p <= 8'hff;\n      else green_p <= 8'h20;\n    end else if (counter_x<140) begin\n      if (zorro_state[1]) green_p <= 8'hff;\n      else green_p <= 8'h40;\n    end else if (counter_x<150) begin\n      if (zorro_state[0]) green_p <= 8'hff;\n      else green_p <= 8'h20;\n    end else if (counter_x<160) begin\n      green_p <= 0;\n    \n    end else if (counter_x<170) begin\n      if (ram_arbiter_state[4]) green_p <= 8'hff;\n      else green_p <= 8'h20;\n    end else if (counter_x<180) begin\n      if (ram_arbiter_state[3]) green_p <= 8'hff;\n      else green_p <= 8'h40;\n    end else if (counter_x<190) begin\n      if (ram_arbiter_state[2]) green_p <= 8'hff;\n      else green_p <= 8'h20;\n    end else if (counter_x<200) begin\n      if (ram_arbiter_state[1]) green_p <= 8'hff;\n      else green_p <= 8'h40;\n    end else if (counter_x<210) begin\n      if (ram_arbiter_state[0]) green_p <= 8'hff;\n      else green_p <= 8'h20;\n      \n    end else if (counter_x<220) begin\n      green_p <= 0;\n    end else if (counter_x<230) begin\n      if (cmd_ready) green_p <= 8'hff;\n      else green_p <= 8'h40;\n    end else if (counter_x<240) begin\n      if (blitter_enable[0]) green_p <= 8'hff;\n      else green_p <= 8'h20;\n    end else if (counter_x<250) begin\n      if (zorro_ram_read_request) green_p <= 8'hff;\n      else green_p <= 8'h40;\n    end else if (counter_x<260) begin\n      if (zorro_ram_read_done) green_p <= 8'hff;\n      else green_p <= 8'h40;\n    end else begin\n      green_p <= 0;\n      blue_p <= 0;\n    end*/\n    \n    /*if (counter_y<600) begin\n      if (rec_zreadraw[counter_x]) green_p <= 8'hff;\n      else green_p <= 0;\n    end else if (counter_y<610) begin\n      if (rec_zread[counter_x]) green_p <= 8'hff;\n      else green_p <= 0;\n    end else if (counter_y<620) begin\n      if (rec_zwrite[counter_x]) green_p <= 8'hff;\n      else green_p <= 0;\n    end else if (counter_y<630) begin\n      if (rec_zas0[counter_x]) green_p <= 8'hff;\n      else green_p <= 0;\n    end else if (counter_y<640) begin\n      if (rec_zas1[counter_x]) green_p <= 8'hff;\n      else green_p <= 0;\n    end else if (counter_y<650) begin\n      if (rec_zaddr_in_ram[counter_x]) green_p <= 8'hff;\n      else green_p <= 0;\n    end else if (counter_y<660) begin\n      if (rec_state[counter_x]) blue_p <= 8'hff;\n      else blue_p <= 0;\n    end else if (counter_y<670) begin\n      if (rec_statew[counter_x]) blue_p <= 8'hff;\n      else blue_p <= 0;\n    end else if (counter_y<680) begin\n      if (rec_ready[counter_x]) green_p <= 8'hff;\n      else green_p <= 0;\n    end else begin\n      green_p <= 0;\n      blue_p <= 0;\n    end*/\n    \n  end else if (colormode==0) begin\n    // 0: +0a +0b +1a\n    // 1: +0b +1a +1b\n    \n    if (preheat) begin\n      red_p <= 0;\n      green_p <= 0;\n      blue_p <= 0;\n    end else if (counter_scale != scalemode) begin\n      counter_scale <= counter_scale + 1'b1;\n    end else if (counter_x_hi==1) begin\n      red_p   <= palette_r[fetch_buffer[counter_8x][7:0]];\n      green_p <= palette_g[fetch_buffer[counter_8x][7:0]];\n      blue_p  <= palette_b[fetch_buffer[counter_8x][7:0]];\n      counter_8x <= counter_8x + 1'b1;\n      counter_x_hi <= 0;\n      counter_scale <= 0;\n    end else begin\n      red_p   <= palette_r[fetch_buffer[counter_8x][15:8]];\n      green_p <= palette_g[fetch_buffer[counter_8x][15:8]];\n      blue_p  <= palette_b[fetch_buffer[counter_8x][15:8]];\n      counter_x_hi <= 1;\n      counter_scale <= 0;\n    end\n  end else if (colormode==1) begin\n    // decode 16 to 24 bit color\n    if (counter_scale != scalemode) begin\n      counter_scale <= counter_scale + 1'b1;\n    end else begin\n      counter_scale <= 0;\n      rgb <= fetch_buffer[counter_8x];\n      counter_8x <= counter_8x + 1'b1;\n    end\n  \n    red_p[0] <= rgb[0];\n    red_p[1] <= rgb[0];\n    red_p[2] <= rgb[1];\n    red_p[3] <= rgb[1];\n    red_p[4] <= rgb[2];\n    red_p[5] <= rgb[2];\n    red_p[6] <= rgb[3];\n    red_p[7] <= rgb[4];\n    \n    green_p[0] <= rgb[5];\n    green_p[1] <= rgb[5];\n    green_p[2] <= rgb[6];\n    green_p[3] <= rgb[6];\n    green_p[4] <= rgb[7];\n    green_p[5] <= rgb[8];\n    green_p[6] <= rgb[9];\n    green_p[7] <= rgb[10];\n    \n    blue_p[0] <= rgb[11];\n    blue_p[1] <= rgb[11];\n    blue_p[2] <= rgb[12];\n    blue_p[3] <= rgb[12];\n    blue_p[4] <= rgb[13];\n    blue_p[5] <= rgb[13];\n    blue_p[6] <= rgb[14];\n    blue_p[7] <= rgb[15];\n  end else if (colormode==2) begin\n    // true color!\n    if (counter_scale != scalemode) begin\n      counter_scale <= counter_scale + 1'b1;\n    end else begin\n      counter_scale <= 0;\n      counter_8x <= counter_8x + 1'b1;\n      display_x2 <= display_x2 + 2'b10;\n      display_x3 <= display_x3 + 2'b10;\n    end\n    \n    rgb32 <= {fetch_buffer[display_x3],fetch_buffer[display_x2]};\n    red_p   <= rgb32[15:8];\n    green_p <= rgb32[7:0];\n    blue_p <= rgb32[31:24];\n  end else begin\n    red_p   <= 0;\n    green_p <= 0;\n    blue_p  <= 0;\n  end\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[1670, "  if (!preheat && (dvi_blank || (counter_x>=h_rez) || (counter_y>=screen_h))) begin\n"], [1674, "  /*end else if (counter_y>=590) begin\n"], [1675, "    if (counter_x<110) begin\n"], [1728, "    /*if (counter_y<600) begin\n"], [1758, "    end*/\n"]], "Add": [[1670, "  if (!preheat && (dvi_blank || (counter_x>=h_rez-1) || (counter_y>=screen_h-1)))\n"], [1670, "    display_pixels <= 0;\n"], [1670, "  else\n"], [1670, "    display_pixels <= 1;\n"], [1670, "  if (!display_pixels) begin\n"], [1675, "`ifdef ANALYZER\n"], [1675, "  end else if (counter_y>=590) begin\n"], [1675, "    /*if (counter_x<110) begin\n"], [1728, "    if (counter_y<600) begin\n"], [1758, "    end\n"], [1758, "`endif\n"]]}}