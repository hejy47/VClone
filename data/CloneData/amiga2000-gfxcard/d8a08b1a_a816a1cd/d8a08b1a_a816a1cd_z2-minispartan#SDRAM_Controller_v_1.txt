Source Block: amiga2000-gfxcard/z2-minispartan/SDRAM_Controller_v.v@228:535@HdlStmProcess
reg can_back_to_back = 0;
reg burst_old = 0;

always @(posedge clk) captured_data <= sdram_din;

always @(posedge clk)
   begin
      startup_refresh_count <= startup_refresh_count+1'b1;
      
      //-- It we are ready for a new transaction and one is being presented
      //-- then accept it. Also remember what we are reading or writing,
      //-- and if it can be back-to-backed with the last transaction
      if (ready_for_new == 1'b1 && cmd_enable == 1'b1) begin
        if (save_bank == addr_bank && save_row == addr_row) 
          can_back_to_back <= 1'b1;
        else
          can_back_to_back <= 1'b0;
        
        //$display("%h r: %h c: %h",cmd_address,addr_row,addr_col);
        save_row         <= addr_row;
        save_bank        <= addr_bank;
        save_col         <= addr_col;
        save_wr          <= cmd_wr; 
        save_data_in     <= cmd_data_in;
        save_byte_enable <= cmd_byte_enable;
        got_transaction  <= 1'b1;
        ready_for_new    <= 1'b0;
      end
      
      // empty read queue if switched off
      if (cmd_enable == 0) begin
        data_ready_delay <= 0;
      end

      if (data_ready_delay[0] == 1'b1) begin
        data_out_reg       <= captured_data;
        data_out_ready_reg <= 1'b1;
      end else begin
        data_out_ready_reg <= 1'b0;
      end
      
      // no more bits in the queue?
      if (data_ready_delay == 0)
        data_out_queue_empty_reg <= 1;
      else
        data_out_queue_empty_reg <= 0;
       
      //-- update shift registers used to choose when to present data to/from memory
      data_ready_delay <= {1'b0, data_ready_delay[data_ready_delay_high:1]};
         
      case(state) 
         s_startup: begin
               //------------------------------------------------------------------------
               //-- This is the initial startup state, where we wait for at least 100us
               //-- before starting the start sequence
               //-- 
               //-- The initialisation is sequence is 
               //--  * de-assert SDRAM_CKE
               //--  * 100us wait, 
               //--  * assert SDRAM_CKE
               //--  * wait at least one cycle, 
               //--  * PRECHARGE
               //--  * wait 2 cycles
               //--  * REFRESH, 
               //--  * tREF wait
               //--  * REFRESH, 
               //--  * tREF wait 
               //--  * LOAD_MODE_REG 
               //--  * 2 cycles wait
               //------------------------------------------------------------------------
               iob_cke <= 1'b1;
               
               // All the commands during the startup are NOPS, except these
               if(startup_refresh_count == startup_refresh_max-31) begin
                  // ensure all rows are closed
                  iob_command     <= CMD_PRECHARGE;
                  iob_address[prefresh_cmd] <= 1'b1;  // all banks
                  iob_bank        <= 2'b00;
               end
               else if (startup_refresh_count == startup_refresh_max-23) begin
                  // these refreshes need to be at least tREF (66ns) apart
                  iob_command     <= CMD_REFRESH;
               end else if (startup_refresh_count == startup_refresh_max-15) 
                  iob_command     <= CMD_REFRESH;
               else if (startup_refresh_count == startup_refresh_max-7) begin
                  // Now load the mode register
                  iob_command     <= CMD_LOAD_MODE_REG;
                  iob_address     <= MODE_REG;
               end

               if (startup_refresh_count == 1'b0) begin
                  state           <= s_idle;
                  ready_for_new   <= 1'b1;
                  got_transaction <= 1'b0;
                  startup_refresh_count <= 2048 - cycles_per_refresh+1;
               end
            end
         s_idle_in_6: state <= s_idle_in_5;
         s_idle_in_5: state <= s_idle_in_4;
         s_idle_in_4: state <= s_idle_in_3;
         s_idle_in_3: state <= s_idle_in_2;
         s_idle_in_2: state <= s_idle_in_1;
         s_idle_in_1: state <= s_idle;

         s_idle: begin
           if (burst == 1 && burst_old == 0) begin
              // switch burst on
              iob_command     <= CMD_LOAD_MODE_REG;
              iob_address     <= MODE_REG_BURST;
              state <= s_idle_in_6;
              ready_for_new   <= 1'b1;
              burst_old <= 1;
           end else if (burst == 0 && burst_old == 1) begin
              // switch burst off
              iob_command     <= CMD_LOAD_MODE_REG;
              iob_address     <= MODE_REG;
              state <= s_idle_in_6;
              ready_for_new   <= 1'b1;
              burst_old <= 0;
           end else if (got_transaction == 1'b1) begin
              state       <= s_open_in_2;
              iob_command <= CMD_ACTIVE;
              iob_address <= save_row;
              iob_bank    <= save_bank;
              //ready_for_new   <= 1'b1;
           /*end else if (startup_refresh_count >= cycles_per_refresh) begin
              // refresh when idle
              startup_refresh_count <= 0;
              state <= s_refresh;*/
           end else begin
              iob_command     <= CMD_NOP;
              iob_address     <= 13'b0000000000000;
              iob_bank        <= 2'b00;
           end
         end
         
         s_open_in_8: state <= s_open_in_7;
         s_open_in_7: state <= s_open_in_6;
         s_open_in_6: state <= s_open_in_5;
         s_open_in_5: state <= s_open_in_4;
         s_open_in_4: state <= s_open_in_3;
         s_open_in_3: state <= s_open_in_2;
         
         s_open_in_2: state <= s_open_in_1;

         s_open_in_1: begin 
            // still waiting for row to open
            if (save_wr == 1'b1) begin
              // write
              state       <= s_write_1;
              iob_dq_hiz  <= 1'b0;
              iob_data    <= save_data_in[15:0];
            end else begin
              // read
              iob_dq_hiz  <= 1'b1;
              state       <= s_read_1;
            end
            ready_for_new   <= 1'b1; 
            got_transaction <= 1'b0;
          end
            
         s_burst_read: begin
           if (!burst) begin
             state <=  s_precharge;
             ready_for_new   <= 1'b1;
             data_ready_delay[data_ready_delay_high]   <= 1'b0;
           end else begin
             iob_command     <= CMD_NOP;
             iob_dqm     <= 2'b00;
             iob_dq_hiz  <= 1'b1;
             
             if (save_col==burst_col) begin        // 'b111111010       
               state       <= s_precharge;
               data_ready_delay[data_ready_delay_high]   <= 1'b0;
               ready_for_new   <= 1'b0;
             end else begin
               data_ready_delay[data_ready_delay_high]   <= 1'b1;
               ready_for_new   <= 1'b1;
             end
           end
         end
         s_read_1: begin
               iob_command     <= CMD_READ;
               iob_address     <= save_col; 
               iob_bank        <= save_bank;
               iob_address[prefresh_cmd] <= 1'b0;
               iob_dqm     <= 2'b00;
               
               data_ready_delay[data_ready_delay_high]   <= 1'b1;
               
               if (burst) begin
                 ready_for_new <= 1;
                 state <= s_burst_read; 
               end else
                 state <= s_read_2;
            end   
         s_read_2: begin
               state <= s_read_3;
               if (got_transaction == 1'b1 && can_back_to_back == 1'b1) begin
                  if (save_wr == 1'b0) begin 
                     // read
                     state           <= s_read_1;
                     ready_for_new   <= 1'b1;
                     got_transaction <= 1'b0;
                  end
               end
            end   
         s_read_3: begin
               state <= s_read_4;
               if (got_transaction == 1'b1 && can_back_to_back == 1'b1) begin
                  if (save_wr == 1'b0) begin
                     // read 
                     state           <= s_read_1;
                     ready_for_new   <= 1'b1;
                     got_transaction <= 1'b0;
                  end
               end
            end

         s_read_4: begin
               state <= s_precharge;
               //-- can we do back-to-back read?
               if (got_transaction == 1'b1 && can_back_to_back == 1'b1) begin
                  if (save_wr == 1'b0) begin 
                     state           <= s_read_1;
                     ready_for_new   <= 1'b1;
                     got_transaction <= 1'b0;
                  end
                  else
                     state <= s_open_in_2;
               end
            end
         //------------------------------------------------------------------
         // -- Processing the write transaction
         //-------------------------------------------------------------------
         s_write_1: begin
               state                     <= s_write_2;
               iob_command               <= CMD_WRITE;
               iob_address               <= save_col; 
               iob_address[prefresh_cmd] <= 1'b0;
               iob_bank                  <= save_bank;
               iob_dqm                   <= ~ save_byte_enable[1:0];      
               iob_data                  <= save_data_in[15:0];
            end
         s_write_2: begin
            $display("w2 %h\t%h\t%h", save_bank, save_row, iob_address);
               state           <= s_write_3;
               // can we do a back-to-back write?
               if (got_transaction == 1'b1 && can_back_to_back == 1'b1) begin
                  if (save_wr == 1'b1) begin
                     $display("back-to-back write");
                     
                     // back-to-back write?
                     state           <= s_write_1;
                     ready_for_new   <= 1'b1;
                     got_transaction <= 1'b0;
                  end
                  // Although it looks right in simulation you can't go write-to-read 
                  // here due to bus contention, as iob_dq_hiz takes a few ns.
               end
            end
         s_write_3: begin
               // must wait tRDL, hence the extra idle state
               //-- back to back transaction?
               if (got_transaction == 1'b1 && can_back_to_back == 1'b1) begin
                  if (save_wr == 1'b1) begin
                     // back-to-back write?
                     state           <= s_write_1;
                     ready_for_new   <= 1'b1;
                     got_transaction <= 1'b0;
                  end
                  else begin
                     // write-to-read switch?
                     state           <= s_read_1;
                     iob_dq_hiz      <= 1'b1;
                     ready_for_new   <= 1'b1;
                     got_transaction <= 1'b0;                  
                  end 
               end else begin
                  iob_dq_hiz         <= 1'b1;
                  state              <= s_precharge;
              end
            end
         //-- Closing the row off (this closes all banks)
         s_precharge: begin
               state                     <= s_idle_in_4;
               iob_command               <= CMD_PRECHARGE;
               iob_address[prefresh_cmd] <= 1'b0;
            end
         s_refresh: begin
               state                     <= s_idle_in_6;
               iob_command               <= CMD_REFRESH;
            end
         //-- We should never get here, but if we do then reset the memory
         default: begin 
               state                 <= s_startup;
               ready_for_new         <= 1'b0;
               startup_refresh_count <= startup_refresh_max-sdram_startup_cycles;
            end
         endcase

         if (reset == 1'b1) begin  // Sync reset
            state                 <= s_startup;
            ready_for_new         <= 1'b0;
            startup_refresh_count <= startup_refresh_max-sdram_startup_cycles;
         end
      end      
endmodule

Diff Content:
- 353            /*end else if (startup_refresh_count >= cycles_per_refresh) begin
- 355               startup_refresh_count <= 0;
- 356               state <= s_refresh;*/
- 517          s_refresh: begin
- 518                state                     <= s_idle_in_6;
- 519                iob_command               <= CMD_REFRESH;
- 520             end

Clone Blocks:
Clone Blocks 1:
amiga2000-gfxcard/attic/PapPro-sdram_verilog_v0.1/SDRAM_Controller_v.v@232:517
      );
   end 
     
always  @ (posedge clk ) captured_data      <= sdram_din;

always  @ (posedge clk )
   begin
      captured_data_last <= captured_data;
      
      //------------------------------------------------
      //-- Default state is to do nothing
      //------------------------------------------------
      iob_command     <= CMD_NOP;
      iob_address     <= 13'b0000000000000;
      iob_bank        <= 2'b00;

      //------------------------------------------------
      //-- countdown for initialisation & refresh
      //------------------------------------------------
      startup_refresh_count <= startup_refresh_count+1;
                  
      //-------------------------------------------------------------------
      //-- It we are ready for a new tranasction and one is being presented
      //-- then accept it. Also remember what we are reading or writing,
      //-- and if it can be back-to-backed with the last transaction
      //-------------------------------------------------------------------
      if (ready_for_new == 1'b1 && cmd_enable == 1'b1) begin
         if(save_bank == addr_bank && save_row == addr_row) 
            can_back_to_back <= 1'b1;
         else
            can_back_to_back <= 1'b0;

         save_row         <= addr_row;
         save_bank        <= addr_bank;
         save_col         <= addr_col;
         save_wr          <= cmd_wr; 
         save_data_in     <= cmd_data_in;
         save_byte_enable <= cmd_byte_enable;
         got_transaction  <= 1'b1;
         ready_for_new    <= 1'b0;
      end

      //------------------------------------------------
      //-- Handle the data coming back from the 
      //-- SDRAM for the Read transaction
      //------------------------------------------------
      data_out_ready_reg <= 1'b0;
      if (data_ready_delay[0] == 1'b1) begin
         data_out_reg       <= {captured_data, captured_data_last};
         data_out_ready_reg <= 1'b1;
      end
         
      //----------------------------------------------------------------------------
      //-- update shift registers used to choose when to present data to/from memory
      //----------------------------------------------------------------------------
      data_ready_delay <= {1'b0, data_ready_delay[data_ready_delay_high:1]};
      iob_dqm       <= dqm_sr[1:0];
      dqm_sr        <= {2'b11, dqm_sr[dqm_sr_high:2]};
         
      case(state) 
         s_startup: begin
               //------------------------------------------------------------------------
               //-- This is the initial startup state, where we wait for at least 100us
               //-- before starting the start sequence
               //-- 
               //-- The initialisation is sequence is 
               //--  * de-assert SDRAM_CKE
               //--  * 100us wait, 
               //--  * assert SDRAM_CKE
               //--  * wait at least one cycle, 
               //--  * PRECHARGE
               //--  * wait 2 cycles
               //--  * REFRESH, 
               //--  * tREF wait
               //--  * REFRESH, 
               //--  * tREF wait 
               //--  * LOAD_MODE_REG 
               //--  * 2 cycles wait
               //------------------------------------------------------------------------
               iob_cke <= 1'b1;
               
               // All the commands during the startup are NOPS, except these
               if(startup_refresh_count == startup_refresh_max-31) begin
                  // ensure all rows are closed
                  iob_command     <= CMD_PRECHARGE;
                  iob_address[prefresh_cmd] <= 1'b1;  // all banks
                  iob_bank        <= 2'b00;
               end
               else if (startup_refresh_count == startup_refresh_max-23) begin
                  // these refreshes need to be at least tREF (66ns) apart
                  iob_command     <= CMD_REFRESH;
               end else if (startup_refresh_count == startup_refresh_max-15) 
                  iob_command     <= CMD_REFRESH;
               else if (startup_refresh_count == startup_refresh_max-7) begin
                  // Now load the mode register
                  iob_command     <= CMD_LOAD_MODE_REG;
                  iob_address     <= MODE_REG;
               end

               //------------------------------------------------------
               //-- if startup is coomplete then go into idle mode,
               //-- get prepared to accept a new command, and schedule
               //-- the first refresh cycle
               //------------------------------------------------------
               if (startup_refresh_count == 1'b0) begin
                  state           <= s_idle;
                  ready_for_new   <= 1'b1;
                  got_transaction <= 1'b0;
                  startup_refresh_count <= 2048 - cycles_per_refresh+1;
               end
            end
         s_idle_in_6: state <= s_idle_in_5;
         s_idle_in_5: state <= s_idle_in_4;
         s_idle_in_4: state <= s_idle_in_3;
         s_idle_in_3: state <= s_idle_in_2;
         s_idle_in_2: state <= s_idle_in_1;
         s_idle_in_1: state <= s_idle;

         s_idle: begin
               // Priority is to issue a refresh if one is outstanding
               if (pending_refresh == 1'b1 || forcing_refresh == 1'b1) begin
                  //------------------------------------------------------------------------
                  //-- Start the refresh cycle. 
                  //-- This tasks tRFC (66ns), so 6 idle cycles are needed @ 100MHz
                  //------------------------------------------------------------------------
                  state       <= s_idle_in_6;
                  iob_command <= CMD_REFRESH;
                  startup_refresh_count <= startup_refresh_count - cycles_per_refresh+1;
               end
               else if (got_transaction == 1'b1) begin
                  //--------------------------------
                  //-- Start the read or write cycle. 
                  //-- First task is to open the row
                  //--------------------------------
                  state       <= s_open_in_2;
                  iob_command <= CMD_ACTIVE;
                  iob_address <= save_row;
                  iob_bank    <= save_bank;
               end               
            end
         //--------------------------------------------
         //-- Opening the row ready for reads or writes
         //--------------------------------------------
         s_open_in_2: state <= s_open_in_1;

         s_open_in_1: begin 
               // still waiting for row to open
               if(save_wr == 1'b1) begin
                  state       <= s_write_1;
                  iob_dq_hiz  <= 1'b0;
                  iob_data    <= save_data_in[15:0]; // get the DQ bus out of HiZ early
               end else begin
                  iob_dq_hiz  <= 1'b1;
                  state       <= s_read_1;
               end
               // we will be ready for a new transaction next cycle!
               ready_for_new   <= 1'b1; 
               got_transaction <= 1'b0;                  
            end
         //----------------------------------
         //-- Processing the read transaction
         //----------------------------------
         s_read_1: begin
               state           <= s_read_2;
               iob_command     <= CMD_READ;
               iob_address     <= save_col; 
               iob_bank        <= save_bank;
               iob_address[prefresh_cmd] <= 1'b0; // A10 actually matters - it selects auto precharge
               
               // Schedule reading the data values off the bus
               data_ready_delay[data_ready_delay_high]   <= 1'b1;
               
               // Set the data masks to read all bytes
               iob_dqm     <= 2'b00;
               dqm_sr[1:0] <= 2'b00;
            end   
         s_read_2: begin
               state <= s_read_3;
               if (forcing_refresh == 1'b0 && got_transaction == 1'b1 && can_back_to_back == 1'b1) begin
                  if (save_wr == 1'b0) begin 
                     state           <= s_read_1;
                     ready_for_new   <= 1'b1; // we will be ready for a new transaction next cycle!
                     got_transaction <= 1'b0;
                  end
               end
            end   
         s_read_3: begin
               state <= s_read_4;
               if (forcing_refresh == 1'b0 && got_transaction == 1'b1 && can_back_to_back == 1'b1) begin
                  if (save_wr == 1'b0) begin
                     state           <= s_read_1;
                     ready_for_new   <= 1'b1; // we will be ready for a new transaction next cycle!
                     got_transaction <= 1'b0;
                  end
               end
            end

         s_read_4: begin
               state <= s_precharge;
               //-- can we do back-to-back read?
               if (forcing_refresh == 1'b0 && got_transaction == 1'b1 && can_back_to_back == 1'b1) begin
                  if (save_wr == 1'b0) begin 
                     state           <= s_read_1;
                     ready_for_new   <= 1'b1; // we will be ready for a new transaction next cycle!
                     got_transaction <= 1'b0;
                  end
                  else
                     state <= s_open_in_2; // we have to wait for the read data to come back before we swutch the bus into HiZ
               end
            end
         //------------------------------------------------------------------
         // -- Processing the write transaction
         //-------------------------------------------------------------------
         s_write_1: begin
               state                     <= s_write_2;
               iob_command               <= CMD_WRITE;
               iob_address               <= save_col; 
               iob_address[prefresh_cmd] <= 1'b0; // A10 actually matters - it selects auto precharge
               iob_bank                  <= save_bank;
               iob_dqm                   <= ! save_byte_enable[1:0];    
               dqm_sr[1:0]               <= ! save_byte_enable[3:2];    
               iob_data                  <= save_data_in[15:0];
               iob_data_next             <= save_data_in[31:16];
            end   
         s_write_2: begin
               state           <= s_write_3;
               iob_data        <= iob_data_next;
               // can we do a back-to-back write?
               if (forcing_refresh == 1'b0 && got_transaction == 1'b1 && can_back_to_back == 1'b1) begin
                  if (save_wr == 1'b1) begin
                     // back-to-back write?
                     state           <= s_write_1;
                     ready_for_new   <= 1'b1;
                     got_transaction <= 1'b0;
                  end
                  // Although it looks right in simulation you can't go write-to-read 
                  // here due to bus contention, as iob_dq_hiz takes a few ns.
               end
            end
         s_write_3: begin
               // must wait tRDL, hence the extra idle state
               //-- back to back transaction?
               if (forcing_refresh == 1'b0 && got_transaction == 1'b1 && can_back_to_back == 1'b1) begin
                  if (save_wr == 1'b1) begin
                     // back-to-back write?
                     state           <= s_write_1;
                     ready_for_new   <= 1'b1;
                     got_transaction <= 1'b0;
                  end
                  else begin
                     // write-to-read switch?
                     state           <= s_read_1;
                     iob_dq_hiz      <= 1'b1;
                     ready_for_new   <= 1'b1; // we will be ready for a new transaction next cycle!
                     got_transaction <= 1'b0;                  
                  end 
               end else begin
                  iob_dq_hiz         <= 1'b1;
                  state              <= s_precharge;
              end
            end
         //-------------------------------------------------------------------
         //-- Closing the row off (this closes all banks)
         //-------------------------------------------------------------------
         s_precharge: begin
               state                     <= s_idle_in_3;
               iob_command               <= CMD_PRECHARGE;
               iob_address[prefresh_cmd] <= 1'b1; // A10 actually matters - it selects all banks or just one
            end
         //-------------------------------------------------------------------
         //-- We should never get here, but if we do then reset the memory
         //-------------------------------------------------------------------
         default: begin 
               state                 <= s_startup;
               ready_for_new         <= 1'b0;
               startup_refresh_count <= startup_refresh_max-sdram_startup_cycles;
            end
         endcase

         if (reset == 1'b1) begin  // Sync reset
            state                 <= s_startup;
            ready_for_new         <= 1'b0;
            startup_refresh_count <= startup_refresh_max-sdram_startup_cycles;
         end
      end      
endmodule

