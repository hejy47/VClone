{"Source Block": ["amiga2000-gfxcard/z2-minispartan/z2.v@1515:1764@HdlStmProcess", "reg display_sprite = 0;\n\nreg [4:0] preheat_x = 0;\nreg preheat = 0;\n\nalways @(posedge vga_clk) begin\n  if (counter_x >= h_max-preheat_x && !preheat) begin\n    counter_8x <= margin_x;\n    counter_x_hi <= 0;\n    counter_scale <= scalemode;\n    display_x <= margin_x;\n    display_x2 <= margin_x<<1'b1;\n    display_x3 <= (margin_x<<1'b1)+1'b1;\n    \n    preheat <= 1;\n  end\n  \n  if (counter_x >= h_max) begin\n    counter_x <= 0;\n    preheat <= 0;\n    \n    if (counter_y >= v_max) begin\n      counter_y <= 0;\n      \n      //sprite_ptr <= 0;\n      //sprite_bit <= 15;\n    end else\n      counter_y <= counter_y + 1'b1;\n  end else begin\n    counter_x <= counter_x + 1'b1;\n    display_x <= display_x + 1'b1;\n  \n    if (counter_x>=h_max-fetch_preroll && counter_y<screen_h)\n      need_row_fetch <= 1;\n    else\n      need_row_fetch <= 0;\n  end\n    \n  if (counter_x>=h_sync_start && counter_x<h_sync_end)\n    dvi_hsync <= 1;\n  else\n    dvi_hsync <= 0;\n    \n  if (counter_y>=v_sync_start && counter_y<v_sync_end)\n    dvi_vsync <= 1;\n  else\n    dvi_vsync <= 0;\n      \n  if (counter_x<h_rez && counter_y<v_rez) begin\n    dvi_blank <= 0;\n  end else begin\n    dvi_blank <= 1;\n  end\n  \n  /*if (counter_x>=sprite_ax && counter_x<=sprite_ax2 && counter_y>=sprite_ay && counter_y<=sprite_ay2)\n    display_sprite <= 1'b1;\n  else\n    display_sprite <= 1'b0;*/\n  \n  /*if (display_sprite) begin\n    sprite_pidx = {sprite_a1[sprite_ptr][sprite_bit],sprite_a2[sprite_ptr][sprite_bit]};\n    \n    if (sprite_bit==0) begin\n      sprite_bit <= 15;\n      if (sprite_ptr==63) begin\n        sprite_ptr <= 0;\n      end else begin\n        sprite_ptr <= sprite_ptr+1'b1;\n      end\n    end else begin\n      sprite_bit <= sprite_bit-1'b1;\n    end\n  end*/\n  \n  if (!preheat && (dvi_blank || (counter_x>=screen_w) || (counter_y>=screen_h))) begin\n    red_p   <= 0;\n    green_p <= 0;\n    blue_p  <= 0;\n  end else if (colormode==0) begin\n    // 0: +0a +0b +1a\n    // 1: +0b +1a +1b\n    \n    if (preheat) begin\n      red_p <= 0;\n      green_p <= 0;\n      blue_p <= 0;\n    end else if (counter_scale != scalemode) begin\n      counter_scale <= counter_scale + 1'b1;\n    end else if (counter_x_hi==1) begin\n      red_p   <= palette_r[fetch_buffer[counter_8x][7:0]];\n      green_p <= palette_g[fetch_buffer[counter_8x][7:0]];\n      blue_p  <= palette_b[fetch_buffer[counter_8x][7:0]];\n      counter_8x <= counter_8x + 1'b1;\n      counter_x_hi <= 0;\n      counter_scale <= 0;\n    end else begin\n      red_p   <= palette_r[fetch_buffer[counter_8x][15:8]];\n      green_p <= palette_g[fetch_buffer[counter_8x][15:8]];\n      blue_p  <= palette_b[fetch_buffer[counter_8x][15:8]];\n      counter_x_hi <= 1;\n      counter_scale <= 0;\n    end\n    \n    //if (!display_sprite || sprite_pidx==0) begin\n    /*red_p   <= pidx_r;\n    green_p <= pidx_g;\n    blue_p  <= pidx_b;*/\n    \n    /*end else begin\n      red_p   <= sprite_palette_r[sprite_pidx];\n      green_p <= sprite_palette_g[sprite_pidx];\n      blue_p  <= sprite_palette_b[sprite_pidx];\n    //end*/\n  end else if (colormode==1) begin\n    // decode 16 to 24 bit color\n    if (counter_scale != scalemode) begin\n      counter_scale <= counter_scale + 1'b1;\n    end else begin\n      counter_scale <= 0;\n      rgb <= fetch_buffer[counter_8x];\n      counter_8x <= counter_8x + 1'b1;\n    end\n    \n    //if (!display_sprite || sprite_pidx==0) begin\n      red_p[0] <= rgb[0];\n      red_p[1] <= rgb[0];\n      red_p[2] <= rgb[1];\n      red_p[3] <= rgb[1];\n      red_p[4] <= rgb[2];\n      red_p[5] <= rgb[2];\n      red_p[6] <= rgb[3];\n      red_p[7] <= rgb[4];\n      \n      green_p[0] <= rgb[5];\n      green_p[1] <= rgb[5];\n      green_p[2] <= rgb[6];\n      green_p[3] <= rgb[6];\n      green_p[4] <= rgb[7];\n      green_p[5] <= rgb[8];\n      green_p[6] <= rgb[9];\n      green_p[7] <= rgb[10];\n      \n      blue_p[0] <= rgb[11];\n      blue_p[1] <= rgb[11];\n      blue_p[2] <= rgb[12];\n      blue_p[3] <= rgb[12];\n      blue_p[4] <= rgb[13];\n      blue_p[5] <= rgb[13];\n      blue_p[6] <= rgb[14];\n      blue_p[7] <= rgb[15];\n   /* end else begin\n      red_p   <= sprite_palette_r[sprite_pidx];\n      green_p <= sprite_palette_g[sprite_pidx];\n      blue_p  <= sprite_palette_b[sprite_pidx];\n    end*/\n  end else if (colormode==2) begin\n    // true color!\n    if (counter_scale != scalemode) begin\n      counter_scale <= counter_scale + 1'b1;\n    end else begin\n      counter_scale <= 0;\n      //rgb32 <= {fetch_buffer[display_x3],fetch_buffer[display_x2]};\n      counter_8x <= counter_8x + 1'b1;\n      display_x2 <= display_x2 + 2'b10;\n      display_x3 <= display_x3 + 2'b10;\n    end\n  \n    /*red_p   <= fetch_buffer[display_x2][15:8];\n    green_p <= fetch_buffer[display_x2][7:0];\n    blue_p  <= fetch_buffer2[display_x3][15:8];*/\n  /*end else if (colormode==3) begin // zorro debug\n    if (counter_y<90) begin\n      if (counter_x<100)\n        red_p <= zSENSEZ3?8'hff:8'h00;\n      else if (counter_x<200)\n        red_p <= znCFGIN?8'h00:8'hff;\n      else if (counter_x<300)\n        red_p <= zorro_read?8'hff:8'h00;\n      else if (counter_x<400)\n        red_p <= znAS?8'h00:8'hff;\n      else if (counter_x<500) begin\n        blue_p <= (zaddr_autoconfig)?8'hff:8'h00;\n        red_p <= 0;\n      end else begin\n        blue_p <= 0;\n        green_p <= 0;\n        red_p <= 0;\n      end\n    end else if (counter_y<100)\n      red_p <= 0;*/\n    /*else if (counter_y<110)\n      blue_p <= zaddr[22]?'hff:'h00;\n    else if (counter_y<120)\n      blue_p <= zaddr[21]?'hff:'h00;\n    else if (counter_y<130)\n      blue_p <= zaddr[20]?'hff:'h00;\n    else if (counter_y<140)\n      blue_p <= zaddr[19]?'hff:'h00;\n    else if (counter_y<150)\n      blue_p <= zaddr[18]?'hff:'h00;\n    else if (counter_y<160)\n      blue_p <= zaddr[17]?'hff:'h00;\n    else if (counter_y<170)\n      blue_p <= zaddr[16]?'hff:'h00;\n    else if (counter_y<180)\n      blue_p <= zaddr[15]?'hff:'h00;\n    else if (counter_y<190)\n      blue_p <= zaddr[14]?'hff:'h00;\n    else if (counter_y<200)\n      blue_p <= zaddr[13]?'hff:'h00;\n    else if (counter_y<210)\n      blue_p <= zaddr[12]?'hff:'h00;\n    else if (counter_y<220)\n      blue_p <= zaddr[11]?'hff:'h00;\n    else if (counter_y<230)\n      blue_p <= zaddr[10]?'hff:'h00;\n    else if (counter_y<240)\n      blue_p <= zaddr[9]?'hff:'h00;\n    else if (counter_y<250)\n      blue_p <= zaddr[8]?'hff:'h00;\n    else if (counter_y<260)\n      blue_p <= zaddr[7]?'hff:'h00;\n    else if (counter_y<270)\n      blue_p <= zaddr[6]?'hff:'h00;\n    else if (counter_y<280)\n      blue_p <= zaddr[5]?'hff:'h00;\n    else if (counter_y<290)\n      blue_p <= zaddr[4]?'hff:'h00;\n    else if (counter_y<300)\n      blue_p <= zaddr[3]?'hff:'h00;\n    else if (counter_y<310)\n      blue_p <= zaddr[2]?'hff:'h00;\n    else if (counter_y<320)\n      blue_p <= zaddr[1]?'hff:'h00;\n    else if (counter_y<330)\n      blue_p <= zaddr[0]?'hff:'h00;\n      */\n    /*else begin\n      red_p <= 0;\n      green_p <= 0;\n      green_p <= 0;\n    end*/\n  end else begin\n    red_p   <= 0;\n    green_p <= 0;\n    blue_p  <= 0;\n  end\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[1569, "  /*if (counter_x>=sprite_ax && counter_x<=sprite_ax2 && counter_y>=sprite_ay && counter_y<=sprite_ay2)\n"], [1570, "    display_sprite <= 1'b1;\n"], [1571, "  else\n"], [1572, "    display_sprite <= 1'b0;*/\n"], [1574, "  /*if (display_sprite) begin\n"], [1575, "    sprite_pidx = {sprite_a1[sprite_ptr][sprite_bit],sprite_a2[sprite_ptr][sprite_bit]};\n"], [1577, "    if (sprite_bit==0) begin\n"], [1578, "      sprite_bit <= 15;\n"], [1579, "      if (sprite_ptr==63) begin\n"], [1580, "        sprite_ptr <= 0;\n"], [1581, "      end else begin\n"], [1582, "        sprite_ptr <= sprite_ptr+1'b1;\n"], [1583, "      end\n"], [1584, "    end else begin\n"], [1585, "      sprite_bit <= sprite_bit-1'b1;\n"], [1586, "    end\n"], [1587, "  end*/\n"], [1589, "  if (!preheat && (dvi_blank || (counter_x>=screen_w) || (counter_y>=screen_h))) begin\n"], [1619, "    /*red_p   <= pidx_r;\n"], [1620, "    green_p <= pidx_g;\n"], [1621, "    blue_p  <= pidx_b;*/\n"], [1623, "    /*end else begin\n"], [1624, "      red_p   <= sprite_palette_r[sprite_pidx];\n"], [1625, "      green_p <= sprite_palette_g[sprite_pidx];\n"], [1626, "      blue_p  <= sprite_palette_b[sprite_pidx];\n"], [1639, "      red_p[0] <= rgb[0];\n"], [1640, "      red_p[1] <= rgb[0];\n"], [1641, "      red_p[2] <= rgb[1];\n"], [1642, "      red_p[3] <= rgb[1];\n"], [1643, "      red_p[4] <= rgb[2];\n"], [1644, "      red_p[5] <= rgb[2];\n"], [1645, "      red_p[6] <= rgb[3];\n"], [1646, "      red_p[7] <= rgb[4];\n"], [1648, "      green_p[0] <= rgb[5];\n"], [1649, "      green_p[1] <= rgb[5];\n"], [1650, "      green_p[2] <= rgb[6];\n"], [1651, "      green_p[3] <= rgb[6];\n"], [1652, "      green_p[4] <= rgb[7];\n"], [1653, "      green_p[5] <= rgb[8];\n"], [1654, "      green_p[6] <= rgb[9];\n"], [1655, "      green_p[7] <= rgb[10];\n"], [1657, "      blue_p[0] <= rgb[11];\n"], [1658, "      blue_p[1] <= rgb[11];\n"], [1659, "      blue_p[2] <= rgb[12];\n"], [1660, "      blue_p[3] <= rgb[12];\n"], [1661, "      blue_p[4] <= rgb[13];\n"], [1662, "      blue_p[5] <= rgb[13];\n"], [1663, "      blue_p[6] <= rgb[14];\n"], [1664, "      blue_p[7] <= rgb[15];\n"], [1665, "   /* end else begin\n"], [1666, "      red_p   <= sprite_palette_r[sprite_pidx];\n"], [1667, "      green_p <= sprite_palette_g[sprite_pidx];\n"], [1668, "      blue_p  <= sprite_palette_b[sprite_pidx];\n"], [1669, "    end*/\n"], [1672, "    if (counter_scale != scalemode) begin\n"], [1675, "      counter_scale <= 0;\n"], [1680, "    end\n"], [1682, "    /*red_p   <= fetch_buffer[display_x2][15:8];\n"], [1683, "    green_p <= fetch_buffer[display_x2][7:0];\n"], [1684, "    blue_p  <= fetch_buffer2[display_x3][15:8];*/\n"], [1685, "  /*end else if (colormode==3) begin // zorro debug\n"], [1686, "    if (counter_y<90) begin\n"], [1687, "      if (counter_x<100)\n"], [1688, "        red_p <= zSENSEZ3?8'hff:8'h00;\n"], [1689, "      else if (counter_x<200)\n"], [1690, "        red_p <= znCFGIN?8'h00:8'hff;\n"], [1691, "      else if (counter_x<300)\n"], [1692, "        red_p <= zorro_read?8'hff:8'h00;\n"], [1693, "      else if (counter_x<400)\n"], [1694, "        red_p <= znAS?8'h00:8'hff;\n"], [1695, "      else if (counter_x<500) begin\n"], [1696, "        blue_p <= (zaddr_autoconfig)?8'hff:8'h00;\n"], [1697, "        red_p <= 0;\n"], [1698, "      end else begin\n"], [1699, "        blue_p <= 0;\n"], [1700, "        green_p <= 0;\n"], [1701, "        red_p <= 0;\n"], [1702, "      end\n"], [1703, "    end else if (counter_y<100)\n"], [1704, "      red_p <= 0;*/\n"], [1705, "    /*else if (counter_y<110)\n"], [1706, "      blue_p <= zaddr[22]?'hff:'h00;\n"], [1707, "    else if (counter_y<120)\n"], [1708, "      blue_p <= zaddr[21]?'hff:'h00;\n"], [1709, "    else if (counter_y<130)\n"], [1710, "      blue_p <= zaddr[20]?'hff:'h00;\n"], [1711, "    else if (counter_y<140)\n"], [1712, "      blue_p <= zaddr[19]?'hff:'h00;\n"], [1713, "    else if (counter_y<150)\n"], [1714, "      blue_p <= zaddr[18]?'hff:'h00;\n"], [1715, "    else if (counter_y<160)\n"], [1716, "      blue_p <= zaddr[17]?'hff:'h00;\n"], [1717, "    else if (counter_y<170)\n"], [1718, "      blue_p <= zaddr[16]?'hff:'h00;\n"], [1719, "    else if (counter_y<180)\n"], [1720, "      blue_p <= zaddr[15]?'hff:'h00;\n"], [1721, "    else if (counter_y<190)\n"], [1722, "      blue_p <= zaddr[14]?'hff:'h00;\n"], [1723, "    else if (counter_y<200)\n"], [1724, "      blue_p <= zaddr[13]?'hff:'h00;\n"], [1725, "    else if (counter_y<210)\n"], [1726, "      blue_p <= zaddr[12]?'hff:'h00;\n"], [1727, "    else if (counter_y<220)\n"], [1728, "      blue_p <= zaddr[11]?'hff:'h00;\n"], [1729, "    else if (counter_y<230)\n"], [1730, "      blue_p <= zaddr[10]?'hff:'h00;\n"], [1731, "    else if (counter_y<240)\n"], [1732, "      blue_p <= zaddr[9]?'hff:'h00;\n"], [1733, "    else if (counter_y<250)\n"], [1734, "      blue_p <= zaddr[8]?'hff:'h00;\n"], [1735, "    else if (counter_y<260)\n"], [1736, "      blue_p <= zaddr[7]?'hff:'h00;\n"], [1737, "    else if (counter_y<270)\n"], [1738, "      blue_p <= zaddr[6]?'hff:'h00;\n"], [1739, "    else if (counter_y<280)\n"], [1740, "      blue_p <= zaddr[5]?'hff:'h00;\n"], [1741, "    else if (counter_y<290)\n"], [1742, "      blue_p <= zaddr[4]?'hff:'h00;\n"], [1743, "    else if (counter_y<300)\n"], [1744, "      blue_p <= zaddr[3]?'hff:'h00;\n"], [1745, "    else if (counter_y<310)\n"], [1746, "      blue_p <= zaddr[2]?'hff:'h00;\n"], [1747, "    else if (counter_y<320)\n"], [1748, "      blue_p <= zaddr[1]?'hff:'h00;\n"], [1749, "    else if (counter_y<330)\n"], [1750, "      blue_p <= zaddr[0]?'hff:'h00;\n"], [1751, "      */\n"], [1752, "    /*else begin\n"], [1753, "      red_p <= 0;\n"], [1754, "      green_p <= 0;\n"], [1755, "      green_p <= 0;\n"], [1756, "    end*/\n"]], "Add": [[1530, "  if (counter_y>=v_rez && counter_y<(v_rez+ram_refresh_lines))\n"], [1530, "    display_in_refresh_lines <= 1;\n"], [1530, "  else\n"], [1530, "    display_in_refresh_lines <= 0;\n"], [1589, "  if (!preheat && (dvi_blank || (counter_x>=h_rez) || (counter_y>=screen_h))) begin\n"], [1592, "  /*end else if (counter_y>=590) begin\n"], [1592, "    if (counter_y<600) begin\n"], [1592, "      if (rec_zreadraw[counter_x]) green_p <= 8'hff;\n"], [1592, "      else green_p <= 0;\n"], [1592, "    end else if (counter_y<610) begin\n"], [1592, "      if (rec_zread[counter_x]) green_p <= 8'hff;\n"], [1592, "      else green_p <= 0;\n"], [1592, "    end else if (counter_y<620) begin\n"], [1592, "      if (rec_zwrite[counter_x]) green_p <= 8'hff;\n"], [1592, "      else green_p <= 0;\n"], [1592, "    end else if (counter_y<630) begin\n"], [1592, "      if (rec_zas0[counter_x]) green_p <= 8'hff;\n"], [1592, "      else green_p <= 0;\n"], [1592, "    end else if (counter_y<640) begin\n"], [1592, "      if (rec_zas1[counter_x]) green_p <= 8'hff;\n"], [1592, "      else green_p <= 0;\n"], [1592, "    end else if (counter_y<650) begin\n"], [1592, "      if (rec_zaddr_in_ram[counter_x]) green_p <= 8'hff;\n"], [1592, "      else green_p <= 0;\n"], [1592, "    end else if (counter_y<660) begin\n"], [1592, "      if (rec_state[counter_x]) blue_p <= 8'hff;\n"], [1592, "      else blue_p <= 0;\n"], [1592, "    end else if (counter_y<670) begin\n"], [1592, "      if (rec_statew[counter_x]) blue_p <= 8'hff;\n"], [1592, "      else blue_p <= 0;\n"], [1592, "    end else if (counter_y<680) begin\n"], [1592, "      if (rec_ready[counter_x]) green_p <= 8'hff;\n"], [1592, "      else green_p <= 0;\n"], [1592, "    end else begin\n"], [1592, "      green_p <= 0;\n"], [1592, "      blue_p <= 0;\n"], [1592, "    end*/\n"], [1636, "    red_p[0] <= rgb[0];\n"], [1636, "    red_p[1] <= rgb[0];\n"], [1636, "    red_p[2] <= rgb[1];\n"], [1636, "    red_p[3] <= rgb[1];\n"], [1636, "    red_p[4] <= rgb[2];\n"], [1636, "    red_p[5] <= rgb[2];\n"], [1636, "    red_p[6] <= rgb[3];\n"], [1636, "    red_p[7] <= rgb[4];\n"], [1669, "    green_p[0] <= rgb[5];\n"], [1669, "    green_p[1] <= rgb[5];\n"], [1669, "    green_p[2] <= rgb[6];\n"], [1669, "    green_p[3] <= rgb[6];\n"], [1669, "    green_p[4] <= rgb[7];\n"], [1669, "    green_p[5] <= rgb[8];\n"], [1669, "    green_p[6] <= rgb[9];\n"], [1669, "    green_p[7] <= rgb[10];\n"], [1669, "    blue_p[0] <= rgb[11];\n"], [1669, "    blue_p[1] <= rgb[11];\n"], [1669, "    blue_p[2] <= rgb[12];\n"], [1669, "    blue_p[3] <= rgb[12];\n"], [1669, "    blue_p[4] <= rgb[13];\n"], [1669, "    blue_p[5] <= rgb[13];\n"], [1669, "    blue_p[6] <= rgb[14];\n"], [1669, "    blue_p[7] <= rgb[15];\n"], [1672, "    /*if (counter_scale != scalemode) begin\n"], [1675, "      counter_scale <= 0;*/\n"], [1756, "    rgb32 <= {fetch_buffer[display_x3],fetch_buffer[display_x2]};\n"], [1756, "    red_p   <= rgb32[15:8];\n"], [1756, "    green_p <= rgb32[7:0];\n"], [1756, "    blue_p <= rgb32[31:24];\n"]]}}