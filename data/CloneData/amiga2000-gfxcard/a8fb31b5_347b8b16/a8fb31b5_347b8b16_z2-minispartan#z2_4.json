{"Source Block": ["amiga2000-gfxcard/z2-minispartan/z2.v@449:675@HdlStmProcess", "\n/*assign vgaR = rgb[0];\nassign vgaG = rgb[5];\nassign vgaB = rgb[11];*/\n\nalways @(posedge vga_clk) begin\n  if (counter_x >= h_max) begin\n    counter_x <= 0;\n    if (counter_y == v_max)\n      counter_y <= 0;\n    else\n      counter_y <= counter_y + 1;\n  end else\n    counter_x <= counter_x + 1;\n    \n  if (counter_x>=h_sync_start && counter_x<h_sync_end)\n    dvi_hsync <= 1;\n  else\n    dvi_hsync <= 0;\n    \n  if (counter_y>=v_sync_start && counter_y<v_sync_end)\n    dvi_vsync <= 1;\n  else\n    dvi_vsync <= 0;\n      \n  if (counter_x<h_rez && counter_y<v_rez) begin\n    /*red_p <= 'hff;\n    green_p <= 'hff;\n    blue_p <= 'hff;*/\n    rgb <= ram_data_buffer[counter_x];\n    dvi_blank <= 0;\n  end else begin\n    dvi_blank <= 1;\n    /*red_p <= 0;\n    green_p <= 0;\n    blue_p <= 0;*/\n    rgb <= 0;\n  end\n\n  red_p[7:3]   <= rgb[4:0];\n  green_p[7:2] <= rgb[10:5];\n  blue_p[7:3]  <= rgb[15:11];\n\n  red_p[2] <= rgb[0];\n  red_p[1] <= rgb[0];\n  red_p[0] <= rgb[0];\n  green_p[1] <= rgb[5];\n  green_p[0] <= rgb[5];\n  blue_p[2] <= rgb[11];\n  blue_p[1] <= rgb[11];\n  blue_p[0] <= rgb[11];\n\n  /*if (counter_y==0 && (counter_x >= h_max)) begin\n    counter_frame <= counter_frame + 1;\n  end*/\n  LEDS <= 0;\n\t//rgb <= 0;\n  \n  if (dvi_blank)\n\t    rgb <= 0;\n\t  else\n      //rgb <= ram_data_buffer[counter_x];\n        \n      if (counter_y>600) begin\n        if (counter_x<210)\n          rgb <= 0;\n        else if (counter_x<220)\n          rgb <= last_addr[23]?16'hff:16'h0;\n        else if (counter_x<230)\n          rgb <= last_addr[22]?16'hff:16'h0;\n        else if (counter_x<240)\n          rgb <= last_addr[21]?16'hff:16'h0;\n        else if (counter_x<250)\n          rgb <= last_addr[20]?16'hff:16'h0;\n        else if (counter_x<260)\n          rgb <= last_addr[19]?16'hff:16'h0;\n        else if (counter_x<270)\n          rgb <= last_addr[18]?16'hff:16'h0;\n        else if (counter_x<280)\n          rgb <= last_addr[17]?16'hff:16'h0;\n        else if (counter_x<290)\n          rgb <= last_addr[16]?16'hff:16'h0;\n        else if (counter_x<300)\n          rgb <= last_addr[15]?16'hff:16'h0;\n        else if (counter_x<310)\n          rgb <= last_addr[14]?16'hff:16'h0;\n        else if (counter_x<320)\n          rgb <= last_addr[13]?16'hff:16'h0;\n        else if (counter_x<330)\n          rgb <= last_addr[12]?16'hff:16'h0;\n        else if (counter_x<340)\n          rgb <= last_addr[11]?16'hff:16'h0;\n        else if (counter_x<350)\n          rgb <= last_addr[10]?16'hff:16'h0;\n        else if (counter_x<360)\n          rgb <= last_addr[9]?16'hff:16'h0;\n        else if (counter_x<370)\n          rgb <= last_addr[8]?16'hff:16'h0;\n        else if (counter_x<380)\n          rgb <= last_addr[7]?16'hff:16'h0;\n        else if (counter_x<390)\n          rgb <= last_addr[6]?16'hff:16'h0;\n        else if (counter_x<400)\n          rgb <= last_addr[5]?16'hff:16'h0;\n        else if (counter_x<410)\n          rgb <= last_addr[4]?16'hff:16'h0;\n        else if (counter_x<420)\n          rgb <= last_addr[3]?16'hff:16'h0;\n        else if (counter_x<430)\n          rgb <= last_addr[2]?16'hff:16'h0;\n        else if (counter_x<440)\n          rgb <= last_addr[1]?16'hff:16'h0;\n        else if (counter_x<450)\n          rgb <= last_addr[0]?16'hff:16'h0;\n        else if (counter_x<490)\n          rgb <= 16'h0;\n        /*else if (counter_x<500)\n          rgb <= last_uds?16'hf00f:16'hffff;\n        else if (counter_x<510)\n          rgb <= last_lds?16'hf00f:16'hffff;*/\n          \n        else if (counter_x<520)\n          rgb <= last_data[15]?16'hffff:16'h00ff;\n        else if (counter_x<521)\n          rgb <= 0;\n        else if (counter_x<530)\n          rgb <= last_data[14]?16'hffff:16'h00ff;\n        else if (counter_x<531)\n          rgb <= 0;\n        else if (counter_x<540)\n          rgb <= last_data[13]?16'hffff:16'h00ff;\n        else if (counter_x<541)\n          rgb <= 0;\n        else if (counter_x<550)\n          rgb <= last_data[12]?16'hffff:16'h00ff;\n        else if (counter_x<551)\n          rgb <= 0;\n        else if (counter_x<560)\n          rgb <= last_data[11]?16'hffff:16'h00ff;\n        else if (counter_x<561)\n          rgb <= 0;\n        else if (counter_x<570)\n          rgb <= last_data[10]?16'hffff:16'h00ff;\n        else if (counter_x<571)\n          rgb <= 0;\n        else if (counter_x<580)\n          rgb <= last_data[9]?16'hffff:16'h00ff;\n        else if (counter_x<581)\n          rgb <= 0;\n        else if (counter_x<590)\n          rgb <= last_data[8]?16'hffff:16'h00ff;\n        else if (counter_x<591)\n          rgb <= 0;\n        else if (counter_x<600)\n          rgb <= last_data[7]?16'hffff:16'h00ff;\n        else if (counter_x<601)\n          rgb <= 0;\n        else if (counter_x<610)\n          rgb <= last_data[6]?16'hffff:16'h00ff;\n        else if (counter_x<611)\n          rgb <= 0;\n        else if (counter_x<620)\n          rgb <= last_data[5]?16'hffff:16'h00ff;\n        else if (counter_x<621)\n          rgb <= 0;\n        else if (counter_x<630)\n          rgb <= last_data[4]?16'hffff:16'h00ff;\n        else if (counter_x<631)\n          rgb <= 0;\n        else if (counter_x<640)\n          rgb <= last_data[3]?16'hffff:16'h00ff;\n        else if (counter_x<641)\n          rgb <= 0;\n        else if (counter_x<650)\n          rgb <= last_data[2]?16'hffff:16'h00ff;\n        else if (counter_x<651)\n          rgb <= 0;\n        else if (counter_x<660)\n          rgb <= last_data[1]?16'hffff:16'h00ff;\n        else if (counter_x<661)\n          rgb <= 0;\n        else if (counter_x<670)\n          rgb <= last_data[0]?16'hffff:16'h00ff;\n        else if (counter_x<700)\n          rgb <= 0;\n        /*else if (counter_x<710)\n          rgb <= last_as?16'hf0ff:16'hffff;\n        else if (counter_x<720)\n          rgb <= last_read?16'hf0ff:16'hffff;*/\n        else if (counter_x<(700+max_fill)) begin\n          if (counter_y<550) \n            rgb <= writeq_fill>(counter_x-700)?16'hffff:16'h0000;        \n          else\n            rgb <= writeq_drain>(counter_x-700)?16'hffff:16'h0000;\n        end else \n          rgb <= 0;\n        end\n      else begin\n        if (counter_x>1023)\n          rgb <= 0;\n        \n        else if (counter_x<rec_depth) begin\n          if (counter_y>=100 && counter_y<=145)\n            rgb <= (rec_addr[counter_x][(counter_y-100)>>1])?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=200 && counter_y<=231)\n            rgb <= (rec_data[counter_x][(counter_y-200)>>1])?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=300 && counter_y<=305)\n            rgb <= rec_as[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=306 && counter_y<=310)\n            rgb <= rec_uds[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=311 && counter_y<=315)\n            rgb <= rec_lds[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=316 && counter_y<=320)\n            rgb <= rec_doe[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else if (counter_y>=321 && counter_y<=325)\n            rgb <= rec_read[counter_x]?(trigger_idx==counter_x?'hff00:'hffff):'h0000;\n          else\n            rgb <= ram_data_buffer[counter_x];\n        end else rgb <= ram_data_buffer[counter_x];\n          \n        /*else\n          rgb <= ram_data_buffer[counter_x];*/\n      end\n\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[488, "  red_p[7:3]   <= rgb[4:0];\n"], [489, "  green_p[7:2] <= rgb[10:5];\n"], [490, "  blue_p[7:3]  <= rgb[15:11];\n"], [492, "  red_p[2] <= rgb[0];\n"], [493, "  red_p[1] <= rgb[0];\n"], [494, "  red_p[0] <= rgb[0];\n"], [495, "  green_p[1] <= rgb[5];\n"], [496, "  green_p[0] <= rgb[5];\n"], [497, "  blue_p[2] <= rgb[11];\n"], [498, "  blue_p[1] <= rgb[11];\n"], [499, "  blue_p[0] <= rgb[11];\n"], [647, "        if (counter_x>1023)\n"], [650, "        else if (counter_x<rec_depth) begin\n"], [666, "            rgb <= ram_data_buffer[counter_x];\n"], [667, "        end else rgb <= ram_data_buffer[counter_x];\n"]], "Add": [[499, "  blue_p[0] <= rgb[3];\n"], [499, "  blue_p[1] <= rgb[4];\n"], [499, "  blue_p[2] <= rgb[5];\n"], [499, "  blue_p[3] <= rgb[5];\n"], [499, "  blue_p[4] <= rgb[6];\n"], [499, "  blue_p[5] <= rgb[6];\n"], [499, "  blue_p[6] <= rgb[7];\n"], [499, "  blue_p[7] <= rgb[7];\n"], [499, "  green_p[0] <= rgb[13];\n"], [499, "  green_p[1] <= rgb[14];\n"], [499, "  green_p[2] <= rgb[15];\n"], [499, "  green_p[3] <= rgb[0];\n"], [499, "  green_p[4] <= rgb[1];\n"], [499, "  green_p[5] <= rgb[1];\n"], [499, "  green_p[6] <= rgb[2];\n"], [499, "  green_p[7] <= rgb[2];\n"], [499, "  red_p[0] <= rgb[8];\n"], [499, "  red_p[1] <= rgb[9];\n"], [499, "  red_p[2] <= rgb[10];\n"], [499, "  red_p[3] <= rgb[10];\n"], [499, "  red_p[4] <= rgb[11];  \n"], [499, "  red_p[5] <= rgb[11];\n"], [499, "  red_p[6] <= rgb[12];\n"], [499, "  red_p[7] <= rgb[12];\n"], [647, "        if (counter_x>799)\n"], [650, "        /*else if (counter_x<rec_depth) begin\n"], [667, "            rgb <= ram_data_buffer[counter_x];*/\n"], [667, "        else rgb <= ram_data_buffer[counter_x];\n"]]}}