{"Source Block": ["amiga2000-gfxcard/z2-minispartan/z2.v@1501:1748@HdlStmProcess", "reg display_sprite = 0;\n\nreg [4:0] preheat_x = 0;\nreg preheat = 0;\n\nalways @(posedge vga_clk) begin\n  if (counter_x >= h_max-preheat_x && !preheat) begin\n    counter_8x <= margin_x;\n    counter_x_hi <= 0;\n    counter_scale <= scalemode;\n    display_x <= margin_x;\n    display_x2 <= margin_x<<1'b1;\n    display_x3 <= (margin_x<<1'b1)+1'b1;\n    \n    preheat <= 1;\n  end\n  \n  if (counter_x >= h_max) begin\n    counter_x <= 0;\n    preheat <= 0;\n    \n    if (counter_y >= v_max) begin\n      counter_y <= 0;\n      \n      //sprite_ptr <= 0;\n      //sprite_bit <= 15;\n    end else\n      counter_y <= counter_y + 1'b1;\n  end else begin\n    counter_x <= counter_x + 1'b1;\n    display_x <= display_x + 1'b1;\n  \n    if (counter_x>=h_max-fetch_preroll && counter_y<screen_h)\n      need_row_fetch <= 1;\n    else\n      need_row_fetch <= 0;\n  end\n    \n  if (counter_x>=h_sync_start && counter_x<h_sync_end)\n    dvi_hsync <= 1;\n  else\n    dvi_hsync <= 0;\n    \n  if (counter_y>=v_sync_start && counter_y<v_sync_end)\n    dvi_vsync <= 1;\n  else\n    dvi_vsync <= 0;\n      \n  if (counter_x<h_rez && counter_y<v_rez) begin\n    dvi_blank <= 0;\n  end else begin\n    dvi_blank <= 1;\n  end\n  \n  /*if (counter_x>=sprite_ax && counter_x<=sprite_ax2 && counter_y>=sprite_ay && counter_y<=sprite_ay2)\n    display_sprite <= 1'b1;\n  else\n    display_sprite <= 1'b0;*/\n  \n  /*if (display_sprite) begin\n    sprite_pidx = {sprite_a1[sprite_ptr][sprite_bit],sprite_a2[sprite_ptr][sprite_bit]};\n    \n    if (sprite_bit==0) begin\n      sprite_bit <= 15;\n      if (sprite_ptr==63) begin\n        sprite_ptr <= 0;\n      end else begin\n        sprite_ptr <= sprite_ptr+1'b1;\n      end\n    end else begin\n      sprite_bit <= sprite_bit-1'b1;\n    end\n  end*/\n  \n  if (!preheat && (dvi_blank || (counter_x>=screen_w) || (counter_y>=screen_h))) begin\n    red_p   <= 0;\n    green_p <= 0;\n    blue_p  <= 0;\n  end else if (colormode==0) begin\n    // 0: +0a +0b +1a\n    // 1: +0b +1a +1b\n    \n    if (preheat) begin\n      red_p <= 0;\n      green_p <= 0;\n      blue_p <= 0;\n    end else if (counter_scale != scalemode) begin\n      counter_scale <= counter_scale + 1'b1;\n    end else if (counter_x_hi==1) begin\n      red_p   <= palette_r[fetch_buffer[counter_8x][7:0]];\n      green_p <= palette_g[fetch_buffer[counter_8x][7:0]];\n      blue_p  <= palette_b[fetch_buffer[counter_8x][7:0]];\n      counter_8x <= counter_8x + 1'b1;\n      counter_x_hi <= 0;\n    end else begin\n      red_p   <= palette_r[fetch_buffer[counter_8x][15:8]];\n      green_p <= palette_g[fetch_buffer[counter_8x][15:8]];\n      blue_p  <= palette_b[fetch_buffer[counter_8x][15:8]];\n      counter_x_hi <= 1;\n    end\n    \n    //if (!display_sprite || sprite_pidx==0) begin\n    /*red_p   <= pidx_r;\n    green_p <= pidx_g;\n    blue_p  <= pidx_b;*/\n    \n    /*end else begin\n      red_p   <= sprite_palette_r[sprite_pidx];\n      green_p <= sprite_palette_g[sprite_pidx];\n      blue_p  <= sprite_palette_b[sprite_pidx];\n    //end*/\n  end else if (colormode==1) begin\n    // decode 16 to 24 bit color\n    if (counter_scale != scalemode) begin\n      counter_scale <= counter_scale + 1'b1;\n    end else begin\n      counter_scale <= 0;\n      rgb <= fetch_buffer[counter_8x];\n      counter_8x <= counter_8x + 1'b1;\n    end\n    \n    //if (!display_sprite || sprite_pidx==0) begin\n      red_p[0] <= rgb[0];\n      red_p[1] <= rgb[0];\n      red_p[2] <= rgb[1];\n      red_p[3] <= rgb[1];\n      red_p[4] <= rgb[2];\n      red_p[5] <= rgb[2];\n      red_p[6] <= rgb[3];\n      red_p[7] <= rgb[4];\n      \n      green_p[0] <= rgb[5];\n      green_p[1] <= rgb[5];\n      green_p[2] <= rgb[6];\n      green_p[3] <= rgb[6];\n      green_p[4] <= rgb[7];\n      green_p[5] <= rgb[8];\n      green_p[6] <= rgb[9];\n      green_p[7] <= rgb[10];\n      \n      blue_p[0] <= rgb[11];\n      blue_p[1] <= rgb[11];\n      blue_p[2] <= rgb[12];\n      blue_p[3] <= rgb[12];\n      blue_p[4] <= rgb[13];\n      blue_p[5] <= rgb[13];\n      blue_p[6] <= rgb[14];\n      blue_p[7] <= rgb[15];\n   /* end else begin\n      red_p   <= sprite_palette_r[sprite_pidx];\n      green_p <= sprite_palette_g[sprite_pidx];\n      blue_p  <= sprite_palette_b[sprite_pidx];\n    end*/\n  end else if (colormode==2) begin\n    // true color!\n    /*if (counter_scale != scalemode) begin\n      counter_scale <= counter_scale + 1'b1;\n    end else begin\n      counter_scale <= 0;\n      //rgb32 <= {fetch_buffer[display_x3],fetch_buffer[display_x2]};\n      counter_8x <= counter_8x + 1'b1;\n      display_x2 <= display_x2 + 2'b10;\n      display_x3 <= display_x3 + 2'b10;\n    end\n    \n      blue_p <= rgb32[31:24];\n      green_p <= rgb32[7:0];\n      red_p <= rgb32[15:8];*/\n  /*end else if (colormode==3) begin // zorro debug\n    if (counter_y<90) begin\n      if (counter_x<100)\n        red_p <= zSENSEZ3?8'hff:8'h00;\n      else if (counter_x<200)\n        red_p <= znCFGIN?8'h00:8'hff;\n      else if (counter_x<300)\n        red_p <= zorro_read?8'hff:8'h00;\n      else if (counter_x<400)\n        red_p <= znAS?8'h00:8'hff;\n      else if (counter_x<500) begin\n        blue_p <= (zaddr_autoconfig)?8'hff:8'h00;\n        red_p <= 0;\n      end else begin\n        blue_p <= 0;\n        green_p <= 0;\n        red_p <= 0;\n      end\n    end else if (counter_y<100)\n      red_p <= 0;*/\n    /*else if (counter_y<110)\n      blue_p <= zaddr[22]?'hff:'h00;\n    else if (counter_y<120)\n      blue_p <= zaddr[21]?'hff:'h00;\n    else if (counter_y<130)\n      blue_p <= zaddr[20]?'hff:'h00;\n    else if (counter_y<140)\n      blue_p <= zaddr[19]?'hff:'h00;\n    else if (counter_y<150)\n      blue_p <= zaddr[18]?'hff:'h00;\n    else if (counter_y<160)\n      blue_p <= zaddr[17]?'hff:'h00;\n    else if (counter_y<170)\n      blue_p <= zaddr[16]?'hff:'h00;\n    else if (counter_y<180)\n      blue_p <= zaddr[15]?'hff:'h00;\n    else if (counter_y<190)\n      blue_p <= zaddr[14]?'hff:'h00;\n    else if (counter_y<200)\n      blue_p <= zaddr[13]?'hff:'h00;\n    else if (counter_y<210)\n      blue_p <= zaddr[12]?'hff:'h00;\n    else if (counter_y<220)\n      blue_p <= zaddr[11]?'hff:'h00;\n    else if (counter_y<230)\n      blue_p <= zaddr[10]?'hff:'h00;\n    else if (counter_y<240)\n      blue_p <= zaddr[9]?'hff:'h00;\n    else if (counter_y<250)\n      blue_p <= zaddr[8]?'hff:'h00;\n    else if (counter_y<260)\n      blue_p <= zaddr[7]?'hff:'h00;\n    else if (counter_y<270)\n      blue_p <= zaddr[6]?'hff:'h00;\n    else if (counter_y<280)\n      blue_p <= zaddr[5]?'hff:'h00;\n    else if (counter_y<290)\n      blue_p <= zaddr[4]?'hff:'h00;\n    else if (counter_y<300)\n      blue_p <= zaddr[3]?'hff:'h00;\n    else if (counter_y<310)\n      blue_p <= zaddr[2]?'hff:'h00;\n    else if (counter_y<320)\n      blue_p <= zaddr[1]?'hff:'h00;\n    else if (counter_y<330)\n      blue_p <= zaddr[0]?'hff:'h00;\n      */\n    /*else begin\n      red_p <= 0;\n      green_p <= 0;\n      green_p <= 0;\n    end*/\n  end else begin\n    red_p   <= 0;\n    green_p <= 0;\n    blue_p  <= 0;\n  end\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[1656, "    /*if (counter_scale != scalemode) begin\n"], [1666, "      blue_p <= rgb32[31:24];\n"], [1667, "      green_p <= rgb32[7:0];\n"], [1668, "      red_p <= rgb32[15:8];*/\n"]], "Add": [[1594, "      counter_scale <= 0;\n"], [1599, "      counter_scale <= 0;\n"], [1656, "    if (counter_scale != scalemode) begin\n"], [1668, "    /*red_p   <= fetch_buffer[display_x2][15:8];\n"], [1668, "    green_p <= fetch_buffer[display_x2][7:0];\n"], [1668, "    blue_p  <= fetch_buffer2[display_x3][15:8];*/\n"]]}}