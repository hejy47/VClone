{"Source Block": ["miaow/src/verilog/rtl/decode/reg_field_encoder.v@36:338@HdlStmProcess", "\nassign sgpr_address = sgpr_base + in[6:0];\nassign vgpr_address = vgpr_base + in[7:0];\nassign negative_constant = (~{4'b0,in[5:0]}) + 10'b1;\n\nalways @(in or sgpr_base or vgpr_base)\nbegin\n  casex(in)\n    //invalid operand\n    10'b0?_????_????:\n      begin\n        out <= {1'b0,{11{1'bx}}};\n        literal_required <= 1'b0;\n        explicit_vcc <= 1'b0;\n        explicit_exec <= 1'b0;\n        explicit_scc <= 1'b0;\n        explicit_M0 <= 1'b0;\n        fp_constant <= {1'b0,{32{1'bx}}};\n      end\n    //vgpr\n    10'b11_????_????:\n      begin\n        out <= {2'b10,vgpr_address};\n\tliteral_required <= 1'b0;\n        explicit_vcc <= 1'b0;\n        explicit_exec <= 1'b0;\n        explicit_scc <= 1'b0;\n        explicit_M0 <= 1'b0;\n        fp_constant <= {1'b0,{32{1'bx}}};\n      end\n    //Integer constants and reserved fields or literal constant\n    10'b10_1???_????:\n      begin\n        //Zero and positive integer constants\n        if(in[6:0] <= 7'd64) begin \n          out <= {5'd0,in[6:0]};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b0,{32{1'bx}}};\n        end\n        //negative integer constant\n        else if(in[6:0] <= 7'd80) begin\n          out <= {2'b00,negative_constant};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b0,{32{1'bx}}};\n        end\n        //reserved field\n        else if(in[6:0] <= 7'd111) begin\n          out <= {1'b0,{11{1'bx}}};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b0,{32{1'bx}}};\n        end\n        //floating point constant: 0.5\n        else if(in[6:0] == 7'd112) begin\n          out <= {1'b0,11'b111_1111_1111};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b1,32'h3f00_0000};\n        end\n        //floating point constant: -0.5\n        else if(in[6:0] == 7'd113) begin\n          out <= {1'b0,11'b111_1111_1111};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b1,32'hbf00_0000};\n        end\n        //floating point constant: 1.0\n        else if(in[6:0] == 7'd114) begin\n          out <= {1'b0,11'b111_1111_1111};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b1,32'h3f80_0000};\n        end\n        //floating point constant: -1.0\n        else if(in[6:0] == 7'd115) begin\n          out <= {1'b0,11'b111_1111_1111};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b1,32'hbf80_0000};\n        end\n        //floating point constant: 2.0\n        else if(in[6:0] == 7'd116) begin\n          out <= {1'b0,11'b111_1111_1111};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b1,32'h4000_0000};\n        end\n        //floating point constant: -2.0\n        else if(in[6:0] == 7'd117) begin\n          out <= {1'b0,11'b111_1111_1111};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b1,32'hc000_0000};\n        end\n        //floating point constant: 4.0\n        else if(in[6:0] == 7'd118) begin\n          out <= {1'b0,11'b111_1111_1111};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b1,32'h4080_0000};\n        end\n        //floating point constant: -4.0\n        else if(in[6:0] == 7'd119) begin\n          out <= {1'b0,11'b111_1111_1111};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b1,32'hc080_0000};\n        end\n        //reserved field\n        else if(in[6:0] <= 7'd122) begin\n          out <= {1'b0,{11{1'bx}}};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b0,{32{1'bx}}};\n        end\n        //VCCZ\n\telse if(in[6:0] == 7'd123) begin\n          out <= {3'b111,9'd32};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b1;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b0,{32{1'bx}}};\n        end\n        //EXECZ\n\telse if(in[6:0] == 7'd124) begin\n          out <= {3'b111,9'd64};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b1;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b0,{32{1'bx}}};\n        end\n        //SCC\n\telse if(in[6:0] == 7'd125) begin\n          out <= {3'b111,9'd128};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b1;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b0,{32{1'bx}}};\n        end\n\t//Literal constant in instruction stream!\n\telse if(in[6:0] == 7'd127) begin\n          out <= {1'b0,11'b111_1111_1111};\n\t  literal_required <= 1'b1;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b0,{32{1'bx}}};\n\tend\n        //reserved\n        else begin\n          out <= {1'b0,{11{1'bx}}};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b0,{32{1'bx}}};\n        end\n      end\n    //sgpr or exec or vcc or reserved field\n    10'b10_0???_????:\n      begin\n        //sgpr\n        if(in[6:0] <= 7'd103) begin\n          out <= {3'b110,sgpr_address};\n\t  literal_required <= 1'b0;\n          explicit_vcc <= 1'b0;\n          explicit_exec <= 1'b0;\n          explicit_scc <= 1'b0;\n          explicit_M0 <= 1'b0;\n          fp_constant <= {1'b0,{32{1'bx}}};\n        end\n        //special registers or reserved fields\n        else begin\n          casex(in[6:0])\n            //VCC_LO\n            7'd106:\n              begin\n                out <= {3'b111,9'd1};\n\t        literal_required <= 1'b0;\n                explicit_vcc <= 1'b1;\n                explicit_exec <= 1'b0;\n                explicit_scc <= 1'b0;\n                explicit_M0 <= 1'b0;\n                fp_constant <= {1'b0,{32{1'bx}}};\n              end\n            //VCC_HI\n            7'd107:\n              begin\n                out <= {3'b111,9'd2};\n\t        literal_required <= 1'b0;\n                explicit_vcc <= 1'b1;\n                explicit_exec <= 1'b0;\n                explicit_scc <= 1'b0;\n                explicit_M0 <= 1'b0;\n                fp_constant <= {1'b0,{32{1'bx}}};\n              end\n            //M0\n            7'd124:\n              begin\n                out <= {3'b111,9'd4};\n\t        literal_required <= 1'b0;\n                explicit_vcc <= 1'b0;\n                explicit_exec <= 1'b0;\n                explicit_scc <= 1'b0;\n                explicit_M0 <= 1'b1;\n                fp_constant <= {1'b0,{32{1'bx}}};\n              end\n            //EXEC_LO\n            7'd126:\n              begin\n                out <= {3'b111,9'd8};\n\t        literal_required <= 1'b0;\n                explicit_vcc <= 1'b0;\n                explicit_exec <= 1'b1;\n                explicit_scc <= 1'b0;\n                explicit_M0 <= 1'b0;\n                fp_constant <= {1'b0,{32{1'bx}}};\n              end\n            //EXEC_HI\n            7'd127:\n              begin\n                out <= {3'b111,9'd16};\n\t        literal_required <= 1'b0;\n                explicit_vcc <= 1'b0;\n                explicit_exec <= 1'b1;\n                explicit_scc <= 1'b0;\n                explicit_M0 <= 1'b0;\n                fp_constant <= {1'b0,{32{1'bx}}};\n              end\n            //reserved field\n            default:\n              begin\n                out <= {1'b0,{11{1'bx}}};\n\t        literal_required <= 1'b0;\n                explicit_vcc <= 1'b0;\n                explicit_exec <= 1'b0;\n                explicit_scc <= 1'b0;\n                explicit_M0 <= 1'b0;\n                fp_constant <= {1'b0,{32{1'bx}}};\n              end\n          endcase\n        end\n      end\n    //Error condition\n    default:\n      begin\n        out <= {1'b0,{11{1'bx}}};\n\tliteral_required <= 1'b0;\n        explicit_vcc <= 1'b0;\n        explicit_exec <= 1'b0;\n        explicit_scc <= 1'b0;\n        explicit_M0 <= 1'b0;\n        fp_constant <= {1'b0,{32{1'bx}}};\n      end\n  endcase\nend\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[41, "always @(in or sgpr_base or vgpr_base)\n"]], "Add": [[41, "always @(*)\n"]]}}