{"Source Block": ["oh/common/hdl/oh_fifo_async.v@43:91@HdlStmIf", "   wire [AW-1:0]   wr_count;  // valid entries in fifo\n   \n   assign prog_full = fifo_prog_full | wait_random;\n   \ngenerate\nif(TARGET==\"GENERIC\") begin : basic   \n   oh_fifo_generic \n     #(.DEPTH(DEPTH),\n       .DW(DW))\n   fifo_generic (\n\t       // Outputs\n\t       .full\t\t\t(full),\n\t       .prog_full\t\t(fifo_prog_full),\n\t       .dout\t\t\t(dout[DW-1:0]),\n\t       .empty\t\t\t(empty),\n\t       .rd_count\t\t(rd_count[AW-1:0]),\n\t       .wr_count\t\t(wr_count[AW-1:0]),\n\t       // Inputs\n\t       .nreset   \t\t(nreset),\n\t       .wr_clk\t\t\t(wr_clk),\n\t       .rd_clk\t\t\t(rd_clk),\n\t       .wr_en\t\t\t(wr_en),\n\t       .din\t\t\t(din[DW-1:0]),\n\t       .rd_en\t\t\t(rd_en));\nend\nelse if (TARGET==\"XILINX\") begin : xilinx\n   if((DW==104) & (DEPTH==32))\n     begin\t\n\tfifo_async_104x32 fifo (\n\t       // Outputs\n\t       .full\t\t\t(full),\n\t       .prog_full\t\t(fifo_prog_full),\n\t       .dout\t\t\t(dout[DW-1:0]),\n\t       .empty\t\t\t(empty),\n\t       .rd_data_count\t\t(rd_count[AW-1:0]),\n\t       // Inputs\n\t       .rst\t\t\t(~nreset),\n\t       .wr_clk\t\t\t(wr_clk),\n\t       .rd_clk\t\t\t(rd_clk),\n\t       .wr_en\t\t\t(wr_en),\n\t       .din\t\t\t(din[DW-1:0]),\n\t       .rd_en\t\t\t(rd_en));\n     end // if ((DW==104) & (DEPTH==32))\nend // block: xilinx   \nendgenerate\n\n //Random wait generator (for testing)\n   generate\n      if(WAIT>0)\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[48, "if(TARGET==\"GENERIC\") begin : basic   \n"], [49, "   oh_fifo_generic \n"]], "Add": [[49, "   if(TARGET==\"GENERIC\") begin : basic   \n"], [49, "      oh_fifo_generic \n"]]}}