{"Source Block": ["oh/src/mio/hdl/mtx_fifo.v@79:94@HdlStmAssign", "       emesh_cycle[1:0] <= 2'b01;\n     else\n       emesh_cycle[1:0] <= 2'b00;\n   \n   // valid bits depending on type of transaction\n   assign valid[7:0] = (emesh_cycle[0] && (AW==32))       ? 8'h3F : //48 bits\n\t\t       (emesh_cycle[1] && (AW==64))       ? 8'h02 : //16 bits\n         \t       (~emode & datamode_in[1:0]==2'b00) ? 8'h01 : //double\n        \t       (~emode & datamode_in[1:0]==2'b01) ? 8'h03 : //word\n         \t       (~emode & datamode_in[1:0]==2'b10) ? 8'h0F : //short\t \n                                                            8'hFF;  //default\n\t\t\t   \n   // folding data for fifo\n   assign fifo_data_in[63:0] = ~emode          ? data_wide[63:0]       :\n                                emesh_cycle[0] ? packet_wide[127:64]   :\n      \t\t                emesh_cycle[1] ? packet_wide[191:128]  :\n"], "Clone Blocks": [["oh/src/mio/hdl/mtx_fifo.v@68:86", "\n   // create a dummy wide packet to avoid warnings\n   assign packet_wide[191:0] = packet_in[PW-1:0];\n    \n   // Emesh write pipeline (note! fifo_wait means half full!)\n   always @ (posedge clk or negedge nreset)\n     if(!nreset)\n       emesh_cycle[1:0] <= 'b0;\n     else if(emesh_cycle[0] && (AW==64))       // 2nd stall for 64bit\n       emesh_cycle[1:0] <= 2'b10;\n     else if(emode & access_in & ~fifo_wait)  // 1 stall for emesh\n       emesh_cycle[1:0] <= 2'b01;\n     else\n       emesh_cycle[1:0] <= 2'b00;\n   \n   // valid bits depending on type of transaction\n   assign valid[7:0] = (emesh_cycle[0] && (AW==32))       ? 8'h3F : //48 bits\n\t\t       (emesh_cycle[1] && (AW==64))       ? 8'h02 : //16 bits\n         \t       (~emode & datamode_in[1:0]==2'b00) ? 8'h01 : //double\n"]], "Diff Content": {"Delete": [[85, "\t\t       (emesh_cycle[1] && (AW==64))       ? 8'h02 : //16 bits\n"]], "Add": [[85, "\t\t       (emesh_cycle[1] && (AW==64))       ? 8'h03 : //16 bits\n"]]}}