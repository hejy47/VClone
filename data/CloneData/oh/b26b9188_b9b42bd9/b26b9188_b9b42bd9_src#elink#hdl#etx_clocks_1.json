{"Source Block": ["oh/src/elink/hdl/etx_clocks.v@169:291@HdlStmIf", "\t\t     .clk\t\t(tx_lclk_div4),\n\t\t     .nrst_in\t\t(tx_nreset));\n   \n\n  generate\n      if(TARGET==\"XILINX\")\n\tbegin\n   \n   //###########################\n   // MMCM FOR TXCLK + CCLK\n   //###########################\n   MMCME2_ADV\n     #(\n       .BANDWIDTH(\"OPTIMIZED\"),          \n       .CLKFBOUT_MULT_F(MMCM_VCO_MULT),\n       .CLKFBOUT_PHASE(0.0),\n       .CLKIN1_PERIOD(SYSCLK_PERIOD),   \n       .CLKOUT0_DIVIDE_F(CCLK_DIVIDE),   //cclk_c\n       .CLKOUT1_DIVIDE(TXCLK_DIVIDE),    //tx_lclk\n       .CLKOUT2_DIVIDE(TXCLK_DIVIDE),    //tx_lclk90\n       .CLKOUT3_DIVIDE(TXCLK_DIVIDE*4),  //tx_lclk_div4\n       .CLKOUT4_DIVIDE(128),             //N/A\n       .CLKOUT5_DIVIDE(128),             //N/A\n       .CLKOUT6_DIVIDE(128),             //N/A\n       .CLKOUT0_DUTY_CYCLE(0.5),         \n       .CLKOUT1_DUTY_CYCLE(0.5),\n       .CLKOUT2_DUTY_CYCLE(0.5),\n       .CLKOUT3_DUTY_CYCLE(0.5),\n       .CLKOUT4_DUTY_CYCLE(0.5),\n       .CLKOUT5_DUTY_CYCLE(0.5),\n       .CLKOUT6_DUTY_CYCLE(0.5),\n       .CLKOUT0_PHASE(0.0),\n       .CLKOUT1_PHASE(0.0),\n       .CLKOUT2_PHASE(TXCLK_PHASE),\n       .CLKOUT3_PHASE(0.0),\n       .CLKOUT4_PHASE(0.0),\n       .CLKOUT5_PHASE(0.0),\n       .CLKOUT6_PHASE(0.0),\n       .DIVCLK_DIVIDE(1.0), \n       .REF_JITTER1(0.01), \n       .STARTUP_WAIT(\"FALSE\") \n       ) mmcm_cclk\n       (\n        .CLKOUT0(cclk_mmcm),\n\t.CLKOUT0B(),\n        .CLKOUT1(tx_lclk_mmcm),\n\t.CLKOUT1B(),\n        .CLKOUT2(tx_lclk90_mmcm),//goes directly to IO\n\t.CLKOUT2B(),\n        .CLKOUT3(tx_lclk_div4_mmcm),\n\t.CLKOUT3B(),\n        .CLKOUT4(),\n        .CLKOUT5(),\n\t.CLKOUT6(),\n\t.PWRDWN(1'b0),\n        .RST(mmcm_reset),     //reset\n        .CLKFBIN(cclk_fb),\n        .CLKFBOUT(cclk_fb),  //feedback clock\n\t.CLKFBOUTB(),        //inverted output feedback clock     \n        .CLKIN1(sys_clk),    //input clock\n\t.CLKIN2(1'b0),\n\t.CLKINSEL(1'b1),      \n\t.DADDR(7'b0),\n        .DCLK(1'b0),\n\t.DEN(1'b0),\n\t.DI(16'b0),\n\t.DWE(1'b0),\n\t.DRDY(),\n\t.DO(), \n\t.LOCKED(mmcm_locked), //locked indicator\n\t.PSCLK(1'b0),\n\t.PSEN(1'b0),\n\t.PSDONE(),\n\t.PSINCDEC(1'b0),\n\t.CLKFBSTOPPED(),\n\t.CLKINSTOPPED()\n        );\n        \n\n   //Tx clock buffers\n   BUFG i_lclk_bufg      (.I(tx_lclk_mmcm),     .O(tx_lclk_io));   //300MHz\n   BUFG i_lclk_div4_bufg (.I(tx_lclk_div4_mmcm),.O(tx_lclk_div4)); //75MHz\n   BUFG i_lclk90_bufg    (.I(tx_lclk90_mmcm),   .O(tx_lclk90));    //300MHz 90deg clock\n//   BUFG i_fb_buf           (.I(cclk_fb_out), .O(cclk_fb_in));    //FB\n\n   //###########################\n   // CCLK\n   //###########################\n\n   //CCLK bufio\n   BUFIO bufio_cclk(.O(cclk_bufio), .I(cclk_mmcm));\n\n   //CCLK oddr \n   ODDR #(.DDR_CLK_EDGE  (\"SAME_EDGE\"), .SRTYPE(\"ASYNC\"))\n   oddr_lclk (\n              .Q  (cclk_oddr),\n              .C  (cclk_bufio),\n              .CE (1'b1),\n              .D1 (1'b1),\n              .D2 (1'b0),\n              .R  (1'b0),\n              .S  (1'b0));\n\t    \n   //CCLK differential buffer\n   OBUFDS  cclk_obuf (.O   (cclk_p),\n                      .OB  (cclk_n),\n                      .I   (cclk_oddr)\n                      );\n\n\tend // if (TARGET==\"XILINX\")\n      else\n\tbegin\n\t   assign cclk_p       = sys_clk;\n\t   assign cclk_n       = sys_clk;\n\t   assign tx_lclk_io   = sys_clk;\n\t   assign tx_lclk_div4 = sys_clk;\n\t   assign tx_lclk90    = sys_clk;\n\tend\n  endgenerate\n   \n\t   \n \n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[262, "   ODDR #(.DDR_CLK_EDGE  (\"SAME_EDGE\"), .SRTYPE(\"ASYNC\"))\n"], [266, "              .CE (1'b1),\n"], [268, "              .D2 (1'b0),\n"], [269, "              .R  (1'b0),\n"], [270, "              .S  (1'b0));\n"]], "Add": [[262, "   ODDRE1\n"], [270, "              .D2 (1'b0));\n"]]}}