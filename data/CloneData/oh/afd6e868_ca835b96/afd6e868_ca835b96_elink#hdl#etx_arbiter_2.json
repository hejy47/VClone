{"Source Block": ["oh/elink/hdl/etx_arbiter.v@85:95@HdlStmAssign", "   assign     rr_ready = ~txrr_fifo_empty & ~etx_wr_wait & ~wr_ready & ~rd_ready;//lowest\n   \n   // FIFO read enables (one hot)\n   // Hold until transaction has been accepted by IO\n   assign     txrr_fifo_read = rr_ready & (~etx_access | etx_wait);\n   assign     txrd_fifo_read = rd_ready & (~etx_access | etx_wait);\n   assign     txwr_fifo_read = wr_ready & (~etx_access | etx_wait);\n   \n   //Selecting control mode on slave transcations\n   assign txrd_ctrlmode[3:0] =  ecfg_tx_ctrlmode_bp ? ecfg_tx_ctrlmode[3:0] : \n\t\t\t\t                      txrd_fifo_packet[7:4];\n"], "Clone Blocks": [["oh/elink/hdl/etx_arbiter.v@80:90", "   //Current implementation can deadlock!! (move rd below rr)   \n   \n   // priority-based ready signals\n   assign     wr_ready = ~txwr_fifo_empty & ~etx_wr_wait;                        //highest\n   assign     rd_ready = ~txrd_fifo_empty & ~etx_rd_wait & ~wr_ready;\n   assign     rr_ready = ~txrr_fifo_empty & ~etx_wr_wait & ~wr_ready & ~rd_ready;//lowest\n   \n   // FIFO read enables (one hot)\n   // Hold until transaction has been accepted by IO\n   assign     txrr_fifo_read = rr_ready & (~etx_access | etx_wait);\n   assign     txrd_fifo_read = rd_ready & (~etx_access | etx_wait);\n"], ["oh/elink/hdl/etx_arbiter.v@86:96", "   \n   // FIFO read enables (one hot)\n   // Hold until transaction has been accepted by IO\n   assign     txrr_fifo_read = rr_ready & (~etx_access | etx_wait);\n   assign     txrd_fifo_read = rd_ready & (~etx_access | etx_wait);\n   assign     txwr_fifo_read = wr_ready & (~etx_access | etx_wait);\n   \n   //Selecting control mode on slave transcations\n   assign txrd_ctrlmode[3:0] =  ecfg_tx_ctrlmode_bp ? ecfg_tx_ctrlmode[3:0] : \n\t\t\t\t                      txrd_fifo_packet[7:4];\n\n"], ["oh/elink/hdl/etx_arbiter.v@84:94", "   assign     rd_ready = ~txrd_fifo_empty & ~etx_rd_wait & ~wr_ready;\n   assign     rr_ready = ~txrr_fifo_empty & ~etx_wr_wait & ~wr_ready & ~rd_ready;//lowest\n   \n   // FIFO read enables (one hot)\n   // Hold until transaction has been accepted by IO\n   assign     txrr_fifo_read = rr_ready & (~etx_access | etx_wait);\n   assign     txrd_fifo_read = rd_ready & (~etx_access | etx_wait);\n   assign     txwr_fifo_read = wr_ready & (~etx_access | etx_wait);\n   \n   //Selecting control mode on slave transcations\n   assign txrd_ctrlmode[3:0] =  ecfg_tx_ctrlmode_bp ? ecfg_tx_ctrlmode[3:0] : \n"], ["oh/elink/hdl/etx_arbiter.v@89:100", "   assign     txrr_fifo_read = rr_ready & (~etx_access | etx_wait);\n   assign     txrd_fifo_read = rd_ready & (~etx_access | etx_wait);\n   assign     txwr_fifo_read = wr_ready & (~etx_access | etx_wait);\n   \n   //Selecting control mode on slave transcations\n   assign txrd_ctrlmode[3:0] =  ecfg_tx_ctrlmode_bp ? ecfg_tx_ctrlmode[3:0] : \n\t\t\t\t                      txrd_fifo_packet[7:4];\n\n   assign txwr_ctrlmode[3:0] =  ecfg_tx_ctrlmode_bp ? ecfg_tx_ctrlmode[3:0] : \n\t\t\t\t                      txwr_fifo_packet[7:4];\n\n   always @ (posedge tx_lclk_div4)\n"]], "Diff Content": {"Delete": [[90, "   assign     txrd_fifo_read = rd_ready & (~etx_access | etx_wait);\n"]], "Add": []}}