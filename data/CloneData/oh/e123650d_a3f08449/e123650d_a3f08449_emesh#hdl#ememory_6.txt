Source Block: oh/emesh/hdl/ememory.v@76:86@HdlStmAssign
   assign mem_rd = (access_in & ~write_in & ~wait_all);   


   //Pushback Circuit (pass through problems?)
   assign wait_all = (wait_random | wait_in);
   assign wait_out = wait_all;// & access_in
   
   //Address-in (shifted by three bits, 64 bit wide memory)
   assign addr[MAW-1:0] = dstaddr_in[MAW+2:3];     

   //Shift up

Diff Content:
- 81    assign wait_out = wait_all;// & access_in
+ 81    assign ready_all = (ready_random | ready_in);
+ 81    assign readt_out = ready_all;// & access_in

Clone Blocks:
Clone Blocks 1:
oh/emesh/hdl/ememory.v@70:80
	// Inputs
	.packet_in			(packet_in[PW-1:0]));
   
      
   //Access-in
   assign en     =  access_in & ~wait_all & ~wait_all;
   assign mem_rd = (access_in & ~write_in & ~wait_all);   


   //Pushback Circuit (pass through problems?)
   assign wait_all = (wait_random | wait_in);

Clone Blocks 2:
oh/emesh/hdl/ememory.v@71:81
	.packet_in			(packet_in[PW-1:0]));
   
      
   //Access-in
   assign en     =  access_in & ~wait_all & ~wait_all;
   assign mem_rd = (access_in & ~write_in & ~wait_all);   


   //Pushback Circuit (pass through problems?)
   assign wait_all = (wait_random | wait_in);
   assign wait_out = wait_all;// & access_in

Clone Blocks 3:
oh/emesh/hdl/ememory.v@75:85
   assign en     =  access_in & ~wait_all & ~wait_all;
   assign mem_rd = (access_in & ~write_in & ~wait_all);   


   //Pushback Circuit (pass through problems?)
   assign wait_all = (wait_random | wait_in);
   assign wait_out = wait_all;// & access_in
   
   //Address-in (shifted by three bits, 64 bit wide memory)
   assign addr[MAW-1:0] = dstaddr_in[MAW+2:3];     


