Source Block: oh/common/hdl/oh_iddr.v@30:40@HdlIdDef

   reg [DW-1:0]     q1_pos;
   reg [DW-1:0]     q1_reg;

   reg [DW-1:0]     q2_pos;
   reg [DW-1:0]     q2_neg;
   
   always @ (posedge clk)
     if(ce)
       q1_pos[DW-1:0] <= #(HOLDHACK) din[DW-1:0];


Diff Content:
- 35    reg [DW-1:0]     q2_neg;
+ 35    output [DW-1:0]  q1;     // iddr rising edge sampled data
+ 35    output [DW-1:0]  q2;     // iddr falling edge sampled data
+ 35    reg [DW-1:0]     q1_sl;
+ 35    reg [DW-1:0]     q2_sh;
+ 35    reg [DW-1:0]     q2_sl;

Clone Blocks:
Clone Blocks 1:
oh/common/hdl/oh_iddr.v@32:44
   reg [DW-1:0]     q1_reg;

   reg [DW-1:0]     q2_pos;
   reg [DW-1:0]     q2_neg;
   
   always @ (posedge clk)
     if(ce)
       q1_pos[DW-1:0] <= #(HOLDHACK) din[DW-1:0];

   always @ (posedge clk)
     if(ce)
       q1_reg[DW-1:0] <= #(HOLDHACK) q1_pos[DW-1:0];
         

Clone Blocks 2:
oh/common/hdl/oh_iddr.v@29:39
   localparam [152:1] DDR_CLK_EDGE_REG = DDR_CLK_EDGE;

   reg [DW-1:0]     q1_pos;
   reg [DW-1:0]     q1_reg;

   reg [DW-1:0]     q2_pos;
   reg [DW-1:0]     q2_neg;
   
   always @ (posedge clk)
     if(ce)
       q1_pos[DW-1:0] <= #(HOLDHACK) din[DW-1:0];

Clone Blocks 3:
oh/common/hdl/oh_iddr.v@40:52

   always @ (posedge clk)
     if(ce)
       q1_reg[DW-1:0] <= #(HOLDHACK) q1_pos[DW-1:0];
         
   always @ (negedge clk)
     if(ce)
       q2_neg[DW-1:0] <= #(HOLDHACK) din[DW-1:0];
   
   always @ (posedge clk)
     if(ce)
       q2_pos[DW-1:0] <= #(HOLDHACK) q2_neg[DW-1:0];


Clone Blocks 4:
oh/common/hdl/oh_iddr.v@36:48
   
   always @ (posedge clk)
     if(ce)
       q1_pos[DW-1:0] <= #(HOLDHACK) din[DW-1:0];

   always @ (posedge clk)
     if(ce)
       q1_reg[DW-1:0] <= #(HOLDHACK) q1_pos[DW-1:0];
         
   always @ (negedge clk)
     if(ce)
       q2_neg[DW-1:0] <= #(HOLDHACK) din[DW-1:0];
   

Clone Blocks 5:
oh/common/hdl/oh_iddr.v@27:37

   //trick for string comparison?
   localparam [152:1] DDR_CLK_EDGE_REG = DDR_CLK_EDGE;

   reg [DW-1:0]     q1_pos;
   reg [DW-1:0]     q1_reg;

   reg [DW-1:0]     q2_pos;
   reg [DW-1:0]     q2_neg;
   
   always @ (posedge clk)

