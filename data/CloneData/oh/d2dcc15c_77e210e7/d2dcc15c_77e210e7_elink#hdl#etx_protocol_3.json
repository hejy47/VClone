{"Source Block": ["oh/elink/hdl/etx_protocol.v@77:99@HdlStmProcess", "\t\t\t (~etx_write & ~tx_rd_wait_sync)\n\t\t\t );\n   \n\n   //Prepare transaction / with burst\n   always @ (posedge clk or posedge reset)\n     if(reset)\n       begin\n\t  tx_packet[PW-1:0] <= 'b0;\n\t  tx_access         <= 1'b0;\t  \n\t  tx_burst          <= 1'b0;//TODO\n       end\n   else if(~tx_io_wait)\n       begin\n\t  tx_packet[PW-1:0] <= etx_packet[PW-1:0];\n\t  tx_access         <= etx_valid;\n\t  tx_burst          <= 1'b0;//TODO\n       end\n   \n  \n   //#############################\n   //# Wait signals (async)\n   //#############################\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[87, "\t  tx_burst          <= 1'b0;//TODO\n"], [93, "\t  tx_burst          <= 1'b0;//TODO\n"]], "Add": [[94, "   packet2emesh p2m1 (.access_out\t(last_access),\n"], [94, "\t\t     .write_out\t\t(last_write),\n"], [94, "\t\t      .datamode_out\t(last_datamode[1:0]),\n"], [94, "\t\t     .ctrlmode_out\t(last_ctrlmode[3:0]),\n"], [94, "\t\t     .dstaddr_out\t(last_dstaddr[31:0]),\n"], [94, "\t\t     .data_out\t\t(),\n"], [94, "\t\t     .srcaddr_out\t(),\n"], [94, "\t\t     .packet_in\t\t(tx_packet[PW-1:0]));//input\n"], [94, "   assign burst_addr[31:0]  = last_dstaddr[31:0]+ 4'd8;\n"], [94, "   assign burst_type_match = {last_ctrlmode[3:0],last_datamode[1:0],last_write}\n"], [94, "\t\t\t      ==\n"], [94, "\t\t   \t      {etx_ctrlmode[3:0],etx_datamode[1:0], etx_write};\n"], [94, "   assign tx_burst     = etx_write                             & //write \n"], [94, "\t       \t        (etx_datamode[1:0]==2'b11)            & //double only\n"], [94, "\t\t\tburst_type_match                      & //same types\n"], [94, "\t\t\t(burst_addr[31:0]==etx_dstaddr[31:0]);  //inc by 8\n"]]}}