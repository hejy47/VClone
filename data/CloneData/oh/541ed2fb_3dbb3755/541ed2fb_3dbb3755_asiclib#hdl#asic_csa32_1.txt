Source Block: oh/asiclib/hdl/asic_csa32.v@15:39@HdlStmIf
     output [N-1:0] s,   // sum
     output [N-1:0] c    // carry
     );

   generate
      if(SYN == "TRUE") begin
	 assign s[N-1:0] = in0[N-1:0] ^ in1[N-1:0] ^ in2[N-1:0];

	 assign c[N-1:0] = (in0[N-1:0] & in1[N-1:0]) |
			   (in1[N-1:0] & in2[N-1:0]) |
			   (in2[N-1:0] & in0[N-1:0] );
      end
      else begin
	 genvar 	     i;
	 for (i=0;i<N;i=i+1) begin
	    asic_csa32 #(.TYPE(TYPE))
	    asic_csa32  (.s(s[i]),
			 .c(c[i]),
			 .in2(in2[i]),
			 .in1(in1[i]),
			 .in0(in0[i]));
	 end
      end
   endgenerate
endmodule

Diff Content:
- 20       if(SYN == "TRUE") begin
- 21 	 assign s[N-1:0] = in0[N-1:0] ^ in1[N-1:0] ^ in2[N-1:0];
- 23 	 assign c[N-1:0] = (in0[N-1:0] & in1[N-1:0]) |
- 24 			   (in1[N-1:0] & in2[N-1:0]) |
- 25 			   (in2[N-1:0] & in0[N-1:0] );
- 26       end
- 27       else begin
- 28 	 genvar 	     i;
- 29 	 for (i=0;i<N;i=i+1) begin
- 30 	    asic_csa32 #(.TYPE(TYPE))
- 31 	    asic_csa32  (.s(s[i]),
- 32 			 .c(c[i]),
- 33 			 .in2(in2[i]),
- 34 			 .in1(in1[i]),
- 35 			 .in0(in0[i]));
- 36 	 end
- 37       end
+ 21    assign s = a ^ b ^ c;
+ 21    assign c = (a & b) | (b & c) | (c & a);

Clone Blocks:
Clone Blocks 1:
oh/common/hdl/oh_csa32.v@16:40
     output [N-1:0] s,   // sum
     output [N-1:0] c    // carry
     );

   generate
      if(SYN == "TRUE") begin
	 assign s[N-1:0] = in0[N-1:0] ^ in1[N-1:0] ^ in2[N-1:0];

	 assign c[N-1:0] = (in0[N-1:0] & in1[N-1:0]) |
			   (in1[N-1:0] & in2[N-1:0]) |
			   (in2[N-1:0] & in0[N-1:0] );
      end
      else begin
	 genvar 	     i;
	 for (i=0;i<N;i=i+1) begin
	    asic_csa32 #(.TYPE(TYPE))
	    asic_csa32  (.s(s[i]),
			 .c(c[i]),
			 .in2(in2[i]),
			 .in1(in1[i]),
			 .in0(in0[i]));
	 end
      end
   endgenerate
endmodule

Clone Blocks 2:
oh/common/hdl/oh_clockmux2.v@17:40
    input [N-1:0]  clkin1, // clock input
    output [N-1:0] clkout // clock output
    );

   generate
      if(SYN == "TRUE") begin
	 assign clkout[N-1:0] = (en0[N-1:0] & clkin0[N-1:0]) |
				(en1[N-1:0] & clkin1);
      end
      else begin
	 genvar 	     i;
	 for (i=0;i<N;i=i+1) begin
	    asic_clockmux2 #(.TYPE(TYPE))
	    asic_clockmux2(// Outputs
			   .clkout	(clkout[N-1:0]),
			   // Inputs
			   .en0		(en0[N-1:0]),
			   .en1		(en1[N-1:0]),
			   .clkin0	(clkin0[N-1:0]),
			   .clkin1	(clkin1[N-1:0]));
	 end
      end
   endgenerate
endmodule

