Source Block: oh/common/hdl/oh_lat1.v@16:27@HdlStmProcess
   asic_lat1 i_lat [DW-1:0] (.clk(clk),
			     .in(in[DW-1:0]),
			     .out(out[DW-1:0]));
`else
   reg [DW-1:0]      out_reg;	   
   always @ (clk or in)
     if (clk)
       out_reg[DW-1:0] <= in[DW-1:0];
   assign out[DW-1:0] = out_reg[DW-1:0];	
`endif
   
endmodule // oh_lat1

Diff Content:
- 21    always @ (clk or in)
+ 21    always_latch

Clone Blocks:
Clone Blocks 1:
oh/common/hdl/oh_lat1.v@15:25
`ifdef CFG_ASIC
   asic_lat1 i_lat [DW-1:0] (.clk(clk),
			     .in(in[DW-1:0]),
			     .out(out[DW-1:0]));
`else
   reg [DW-1:0]      out_reg;	   
   always @ (clk or in)
     if (clk)
       out_reg[DW-1:0] <= in[DW-1:0];
   assign out[DW-1:0] = out_reg[DW-1:0];	
`endif

Clone Blocks 2:
oh/common/hdl/oh_fall2pulse.v@13:27
      output [DW-1:0] out     // one cycle pulse
    );
   
   reg [DW-1:0]    in_reg;

   always @ (posedge clk or negedge nreset)
     if(!nreset)
       in_reg[DW-1:0]  <= 'b0 ;
     else
       in_reg[DW-1:0]  <= in[DW-1:0] ;
   
   assign out[DW-1:0]  = ~in[DW-1:0] & in_reg[DW-1:0] ;
   
endmodule // oh_fall2pulse


Clone Blocks 3:
oh/common/hdl/oh_rise2pulse.v@13:27
      output [DW-1:0] out     // one cycle pulse
      );
  
   reg [DW-1:0]    in_reg;
   
   always @ (posedge clk or negedge nreset)
     if(!nreset)
       in_reg[DW-1:0]  <= 'b0 ;
     else
       in_reg[DW-1:0]  <= in[DW-1:0] ;
   
   assign out[DW-1:0]  = in[DW-1:0] & ~in_reg[DW-1:0] ;
   
endmodule // oh_rise2pulse


Clone Blocks 4:
oh/common/hdl/oh_edge2pulse.v@13:26
    output [DW-1:0] out     // one cycle pulse
    );
     
   reg [DW-1:0]    in_reg;   

   always @ (posedge clk or negedge nreset)
     if(!nreset)
       in_reg[DW-1:0]  <= 'b0 ;
     else
       in_reg[DW-1:0]  <= in[DW-1:0] ;
     
   assign out[DW-1:0]  = in_reg[DW-1:0]  ^ in[DW-1:0] ;
   
endmodule // oh_edge2pulse

Clone Blocks 5:
oh/common/hdl/oh_reg1.v@13:27
     input [DW-1:0]  in, // input data
     output [DW-1:0] out  // output data (stable/latched when clk=1)
     );
   
   reg [DW-1:0]      out_reg;	   
   always @ (posedge clk or negedge nreset)
     if(!nreset)
       out_reg[DW-1:0] <= 'b0;
     else if(en)	      
       out_reg[DW-1:0] <= in[DW-1:0];
   assign out[DW-1:0] = out_reg[DW-1:0];	   
   
endmodule // ohr_reg1



Clone Blocks 6:
oh/common/hdl/oh_reg0.v@18:32
			    .clk(clk),
			    .in(in[DW-1:0]),
			    .out(out[DW-1:0]));
`else
   reg [DW-1:0]      out_reg;	   
   always @ (negedge clk or negedge nreset)
     if(~nreset)
       out_reg[DW-1:0] <= 'b0;
     else	      
       out_reg[DW-1:0] <= in[DW-1:0];
   assign out[DW-1:0] = out_reg[DW-1:0];	 
`endif

endmodule // ohr_reg0


