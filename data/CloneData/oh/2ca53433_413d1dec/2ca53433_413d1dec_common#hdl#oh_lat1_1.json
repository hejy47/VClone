{"Source Block": ["oh/common/hdl/oh_lat1.v@16:27@HdlStmProcess", "   asic_lat1 i_lat [DW-1:0] (.clk(clk),\n\t\t\t     .in(in[DW-1:0]),\n\t\t\t     .out(out[DW-1:0]));\n`else\n   reg [DW-1:0]      out_reg;\t   \n   always @ (clk or in)\n     if (clk)\n       out_reg[DW-1:0] <= in[DW-1:0];\n   assign out[DW-1:0] = out_reg[DW-1:0];\t\n`endif\n   \nendmodule // oh_lat1\n"], "Clone Blocks": [["oh/common/hdl/oh_lat1.v@15:25", "`ifdef CFG_ASIC\n   asic_lat1 i_lat [DW-1:0] (.clk(clk),\n\t\t\t     .in(in[DW-1:0]),\n\t\t\t     .out(out[DW-1:0]));\n`else\n   reg [DW-1:0]      out_reg;\t   \n   always @ (clk or in)\n     if (clk)\n       out_reg[DW-1:0] <= in[DW-1:0];\n   assign out[DW-1:0] = out_reg[DW-1:0];\t\n`endif\n"], ["oh/common/hdl/oh_fall2pulse.v@13:27", "      output [DW-1:0] out     // one cycle pulse\n    );\n   \n   reg [DW-1:0]    in_reg;\n\n   always @ (posedge clk or negedge nreset)\n     if(!nreset)\n       in_reg[DW-1:0]  <= 'b0 ;\n     else\n       in_reg[DW-1:0]  <= in[DW-1:0] ;\n   \n   assign out[DW-1:0]  = ~in[DW-1:0] & in_reg[DW-1:0] ;\n   \nendmodule // oh_fall2pulse\n\n"], ["oh/common/hdl/oh_rise2pulse.v@13:27", "      output [DW-1:0] out     // one cycle pulse\n      );\n  \n   reg [DW-1:0]    in_reg;\n   \n   always @ (posedge clk or negedge nreset)\n     if(!nreset)\n       in_reg[DW-1:0]  <= 'b0 ;\n     else\n       in_reg[DW-1:0]  <= in[DW-1:0] ;\n   \n   assign out[DW-1:0]  = in[DW-1:0] & ~in_reg[DW-1:0] ;\n   \nendmodule // oh_rise2pulse\n\n"], ["oh/common/hdl/oh_edge2pulse.v@13:26", "    output [DW-1:0] out     // one cycle pulse\n    );\n     \n   reg [DW-1:0]    in_reg;   \n\n   always @ (posedge clk or negedge nreset)\n     if(!nreset)\n       in_reg[DW-1:0]  <= 'b0 ;\n     else\n       in_reg[DW-1:0]  <= in[DW-1:0] ;\n     \n   assign out[DW-1:0]  = in_reg[DW-1:0]  ^ in[DW-1:0] ;\n   \nendmodule // oh_edge2pulse\n"], ["oh/common/hdl/oh_reg1.v@13:27", "     input [DW-1:0]  in, // input data\n     output [DW-1:0] out  // output data (stable/latched when clk=1)\n     );\n   \n   reg [DW-1:0]      out_reg;\t   \n   always @ (posedge clk or negedge nreset)\n     if(!nreset)\n       out_reg[DW-1:0] <= 'b0;\n     else if(en)\t      \n       out_reg[DW-1:0] <= in[DW-1:0];\n   assign out[DW-1:0] = out_reg[DW-1:0];\t   \n   \nendmodule // ohr_reg1\n\n\n"], ["oh/common/hdl/oh_reg0.v@18:32", "\t\t\t    .clk(clk),\n\t\t\t    .in(in[DW-1:0]),\n\t\t\t    .out(out[DW-1:0]));\n`else\n   reg [DW-1:0]      out_reg;\t   \n   always @ (negedge clk or negedge nreset)\n     if(~nreset)\n       out_reg[DW-1:0] <= 'b0;\n     else\t      \n       out_reg[DW-1:0] <= in[DW-1:0];\n   assign out[DW-1:0] = out_reg[DW-1:0];\t \n`endif\n\nendmodule // ohr_reg0\n\n"]], "Diff Content": {"Delete": [[21, "   always @ (clk or in)\n"]], "Add": [[21, "   always_latch\n"]]}}