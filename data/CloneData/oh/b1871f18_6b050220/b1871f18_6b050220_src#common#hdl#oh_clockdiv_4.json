{"Source Block": ["oh/src/common/hdl/oh_clockdiv.v@104:116@HdlStmAssign", "   // creating divide by 2 shifted clock with negedge\n   always @ (negedge clk)\n     clkout1_shift <= clkout1_reg;\n      \n   //TODO: Fix clock glitch!\n   assign clkout1 = (clkdiv[7:0]==8'd0) ? clk           : //bypass\n\t\t    (clkdiv[7:0]==8'd1) ? clkout1_shift : //div2\n\t\t                          clkout1_reg;    //all others\n      \nendmodule // oh_clockdiv\n\n\n\n"], "Clone Blocks": [["oh/src/common/hdl/oh_clockdiv.v@100:111", "       clkout1_reg <= 1'b1;\n     else if(clkfall1)\n       clkout1_reg <= 1'b0;\n   \n   // creating divide by 2 shifted clock with negedge\n   always @ (negedge clk)\n     clkout1_shift <= clkout1_reg;\n      \n   //TODO: Fix clock glitch!\n   assign clkout1 = (clkdiv[7:0]==8'd0) ? clk           : //bypass\n\t\t    (clkdiv[7:0]==8'd1) ? clkout1_shift : //div2\n\t\t                          clkout1_reg;    //all others\n"]], "Diff Content": {"Delete": [[109, "   assign clkout1 = (clkdiv[7:0]==8'd0) ? clk           : //bypass\n"], [110, "\t\t    (clkdiv[7:0]==8'd1) ? clkout1_shift : //div2\n"], [111, "\t\t                          clkout1_reg;    //all others\n"]], "Add": [[111, "   assign clk1_sel[3] =  1'b0;               // not implemented\n"], [111, "   assign clk1_sel[2] = (clkdiv[7:0]==8'd0); // div1 (bypass)\n"], [111, "   assign clk1_sel[1] = (clkdiv[7:0]==8'd1); // div2 clock \n"], [111, "   assign clk1_sel[0] = |clkdiv[7:1];        // all others\n"], [111, "   oh_clockmux #(.N(4))\n"], [111, "   iclkmux1 (.clkout(clkout1),\n"], [111, "\t     .clk(clk),\n"], [111, "             .en( clk1_sel[3:0]),\n"], [111, "             .clkin({1'b0, clk, clkout1_shift, clkout1_reg}));\n"]]}}