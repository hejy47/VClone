{"Source Block": ["oh/elink/hdl/erx_io.v@111:188@HdlStmFor", "   wire [63:0]   rx_data_des;\n   wire [7:0]    rx_frame_des;\n   wire          rx_lclk_sn = ~rx_lclk_s;//TODO: Not important, only for MEMORY_QDR mode?\n   \n   genvar        i;\n   generate for(i=0; i<8; i=i+1)\n     begin : gen_serdes\n        ISERDESE2 \n          #(\n            .DATA_RATE(\"DDR\"),  // DDR, SDR\n            .DATA_WIDTH(8),     // Parallel data width (2-8,10,14)\n            .DYN_CLKDIV_INV_EN(\"FALSE\"), // Enable DYNCLKDIVINVSEL inversion (FALSE, TRUE)\n            .DYN_CLK_INV_EN(\"FALSE\"),  // Enable DYNCLKINVSEL inversion (FALSE, TRUE)\n            // INIT_Q1 - INIT_Q4: Initial value on the Q outputs (0/1)\n            .INIT_Q1(1'b0),\n            .INIT_Q2(1'b0),\n            .INIT_Q3(1'b0),\n            .INIT_Q4(1'b0),\n            .INTERFACE_TYPE(\"NETWORKING\"),\n            // MEMORY, MEMORY_DDR3, MEMORY_QDR, NETWORKING, OVERSAMPLE\n            .IOBDELAY(\"NONE\"),  // NONE, BOTH, IBUF, IFD\n            .NUM_CE(2),         // Number of clock enables (1,2)\n            .OFB_USED(\"FALSE\"), // Select OFB path (FALSE, TRUE)\n            .SERDES_MODE(\"MASTER\"),  // MASTER, SLAVE\n            // SRVAL_Q1 - SRVAL_Q4: Q output values when SR is used (0/1)\n            .SRVAL_Q1(1'b0),\n            .SRVAL_Q2(1'b0),\n            .SRVAL_Q3(1'b0),\n            .SRVAL_Q4(1'b0)\n            )\n        ISERDESE2_rxdata\n          (\n           .O(),  // 1-bit output: Combinatorial output\n           // Q1 - Q8: 1-bit (each) output: Registered data outputs\n           .Q1(rx_data_des[i]),      // Last data in?\n           .Q2(rx_data_des[i+8]),\n           .Q3(rx_data_des[i+16]),\n           .Q4(rx_data_des[i+24]),\n           .Q5(rx_data_des[i+32]),\n           .Q6(rx_data_des[i+40]),\n           .Q7(rx_data_des[i+48]),\n           .Q8(rx_data_des[i+56]),   // First data in?\n           // SHIFTOUT1, SHIFTOUT2: 1-bit (each) output: Data width expansion output ports\n           .SHIFTOUT1(),\n           .SHIFTOUT2(),\n           .BITSLIP(1'b0), // 1-bit input: The BITSLIP pin performs a Bitslip operation \n           // synchronous to CLKDIV when asserted (active High). Subsequently, the data \n           // seen on the Q1 to Q8 output ports will shift, as in a barrel-shifter \n           // operation, one position every time Bitslip is invoked.  DDR operation is \n           // different from SDR.\n           // CE1, CE2: 1-bit (each) input: Data register clock enable inputs\n           .CE1(1'b1),\n           .CE2(1'b1),\n           .CLKDIVP(1'b0),  // 1-bit input: TBD\n           // Clocks: 1-bit (each) input: ISERDESE2 clock input ports\n           .CLK(rx_lclk_s),   // 1-bit input: High-speed clock\n           .CLKB(rx_lclk_sn),     // 1-bit input: High-speed secondary clock\n           .CLKDIV(rx_lclk_div4), // 1-bit input: Divided clock\n           .OCLK(1'b0),     // 1-bit input: High speed output clock used when INTERFACE_TYPE=\"MEMORY\"\n           // Dynamic Clock Inversions: 1-bit (each) input: Dynamic clock inversion pins to switch clock polarity\n           .DYNCLKDIVSEL(1'b0), // 1-bit input: Dynamic CLKDIV inversion\n           .DYNCLKSEL(1'b0),    // 1-bit input: Dynamic CLK/CLKB inversion\n           // Input Data: 1-bit (each) input: ISERDESE2 data input ports\n           .D(rx_data[i]),      // 1-bit input: Data input\n           .DDLY(1'b0),         // 1-bit input: Serial data from IDELAYE2\n           .OFB(1'b0),          // 1-bit input: Data feedback from OSERDESE2\n           .OCLKB(1'b0),   // 1-bit input: High speed negative edge output clock\n           .RST(serdes_reset), // 1-bit input: Active high asynchronous reset\n           // SHIFTIN1, SHIFTIN2: 1-bit (each) input: Data width expansion input ports\n           .SHIFTIN1(1'b0),\n           .SHIFTIN2(1'b0)\n           );\n     end // block: gen_serdes\n   endgenerate\n   \n   ISERDESE2 \n     #(\n       .DATA_RATE(\"DDR\"),  // DDR, SDR\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[145, "           .Q1(rx_data_des[i]),      // Last data in?\n"], [146, "           .Q2(rx_data_des[i+8]),\n"], [147, "           .Q3(rx_data_des[i+16]),\n"], [148, "           .Q4(rx_data_des[i+24]),\n"], [149, "           .Q5(rx_data_des[i+32]),\n"], [150, "           .Q6(rx_data_des[i+40]),\n"], [151, "           .Q7(rx_data_des[i+48]),\n"], [152, "           .Q8(rx_data_des[i+56]),   // First data in?\n"], [167, "           .CLKB(rx_lclk_sn),     // 1-bit input: High-speed secondary clock\n"], [177, "           .OCLKB(1'b0),   // 1-bit input: High speed negative edge output clock\n"], [178, "           .RST(serdes_reset), // 1-bit input: Active high asynchronous reset\n"]], "Add": [[152, "           .Q1(rx_data_par[i]),      // Last data in?\n"], [152, "           .Q2(rx_data_par[i+8]),\n"], [152, "           .Q3(rx_data_par[i+16]),\n"], [152, "           .Q4(rx_data_par[i+24]),\n"], [152, "           .Q5(rx_data_par[i+32]),\n"], [152, "           .Q6(rx_data_par[i+40]),\n"], [152, "           .Q7(rx_data_par[i+48]),\n"], [152, "           .Q8(rx_data_par[i+56]),   // First data in?\n"], [167, "           .CLKB(~rx_lclk_s),     // 1-bit input: High-speed secondary clock\n"], [178, "           .OCLKB(1'b0),       // 1-bit input: High speed negative edge output clock\n"], [178, "           .RST(reset),        // 1-bit input: Active high asynchronous reset\n"]]}}