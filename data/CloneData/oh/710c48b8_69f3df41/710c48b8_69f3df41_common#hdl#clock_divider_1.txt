Source Block: oh/common/hdl/clock_divider.v@36:56@HdlStmProcess

   // ###################
   // # Decode divcfg
   // ###################

   always @ (divcfg[3:0])
     casez (divcfg[3:0])
	  4'b0111 : divcfg_dec[7:0] = 8'b00000010;  // Divide by 2
	  4'b0110 : divcfg_dec[7:0] = 8'b00000100;  // Divide by 4
	  4'b0101 : divcfg_dec[7:0] = 8'b00001000;  // Divide by 8
	  4'b0100 : divcfg_dec[7:0] = 8'b00010000;  // Divide by 16
	  4'b0011 : divcfg_dec[7:0] = 8'b00100000;  // Divide by 32
          4'b0010 : divcfg_dec[7:0] = 8'b01000000;  // Divide by 64
          4'b0001 : divcfg_dec[7:0] = 8'b10000000;  // Divide by 128
	  default : divcfg_dec[7:0] = 8'b0000000;   // others
	endcase
   
   //Divide by two special case
   assign div2_sel = divcfg[3:0]==4'b0111;
   assign div1_sel = divcfg[3:0]==4'b1000;//TODO: may change
    

Diff Content:
- 43 	  4'b0111 : divcfg_dec[7:0] = 8'b00000010;  // Divide by 2
- 44 	  4'b0110 : divcfg_dec[7:0] = 8'b00000100;  // Divide by 4
- 45 	  4'b0101 : divcfg_dec[7:0] = 8'b00001000;  // Divide by 8
- 46 	  4'b0100 : divcfg_dec[7:0] = 8'b00010000;  // Divide by 16
- 47 	  4'b0011 : divcfg_dec[7:0] = 8'b00100000;  // Divide by 32
- 48           4'b0010 : divcfg_dec[7:0] = 8'b01000000;  // Divide by 64
- 49           4'b0001 : divcfg_dec[7:0] = 8'b10000000;  // Divide by 128
+ 49 	  4'b0110 : divcfg_dec[7:0] = 8'b00000010;  // Divide by 2
+ 49 	  4'b0101 : divcfg_dec[7:0] = 8'b00000100;  // Divide by 4
+ 49 	  4'b0100 : divcfg_dec[7:0] = 8'b00001000;  // Divide by 8
+ 49 	  4'b0011 : divcfg_dec[7:0] = 8'b00010000;  // Divide by 16
+ 49 	  4'b0010 : divcfg_dec[7:0] = 8'b00100000;  // Divide by 32
+ 49           4'b0001 : divcfg_dec[7:0] = 8'b01000000;  // Divide by 64
+ 49           4'b0000 : divcfg_dec[7:0] = 8'b10000000;  // Divide by 128

Clone Blocks:
