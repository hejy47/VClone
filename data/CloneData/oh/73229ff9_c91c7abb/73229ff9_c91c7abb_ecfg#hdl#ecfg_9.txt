Source Block: oh/ecfg/hdl/ecfg.v@207:217@HdlStmAssign
   /*ADDRESS DECODE LOGIC       */
   /*****************************/

   //read/write decode
   assign ecfg_write      = mi_en & mi_we[0];
   assign ecfg_read       = mi_en & ~mi_we[0];   

   //Write enables
   assign ecfg_reset_write     = ecfg_write & (mi_addr[RFAW-1:2]==`ESYSRESET);
   assign ecfg_cfgtx_write     = ecfg_write & (mi_addr[RFAW-1:2]==`ESYSCFGTX);
   assign ecfg_cfgrx_write     = ecfg_write & (mi_addr[RFAW-1:2]==`ESYSCFGRX);

Diff Content:
- 212    assign ecfg_read       = mi_en & ~mi_we[0];   
+ 212    assign ecfg_write  = mi_en &  mi_we;
+ 212    assign ecfg_read   = mi_en & ~mi_we;   
+ 212    assign ecfg_reset_write    = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSRESET);
+ 212    assign ecfg_cfgtx_write    = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSTX);
+ 212    assign ecfg_cfgrx_write    = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSRX);
+ 212    assign ecfg_cfgclk_write   = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSCLK);
+ 212    assign ecfg_coreid_write   = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSCOREID);
+ 212    assign ecfg_dataout_write  = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSDATAOUT);
+ 212     always @ (posedge clk)
+ 212       if(hw_reset)
+ 212 	ecfg_reset_reg <= 1'b0;   
+ 212       else if (ecfg_reset_write)
+ 212 	ecfg_reset_reg <= mi_din[0];  

Clone Blocks:
Clone Blocks 1:
oh/ecfg/hdl/ecfg.v@206:216
   /*****************************/
   /*ADDRESS DECODE LOGIC       */
   /*****************************/

   //read/write decode
   assign ecfg_write      = mi_en & mi_we[0];
   assign ecfg_read       = mi_en & ~mi_we[0];   

   //Write enables
   assign ecfg_reset_write     = ecfg_write & (mi_addr[RFAW-1:2]==`ESYSRESET);
   assign ecfg_cfgtx_write     = ecfg_write & (mi_addr[RFAW-1:2]==`ESYSCFGTX);

