{"Source Block": ["oh/etx/hdl/etx_arbiter.v@100:110@HdlStmAssign", "   //############\n\n   // priority-based ready signals\n   assign     rr_ready = ~emrr_empty & ~e_tx_wr_wait;\n   assign     rq_ready = ~emrq_empty & ~e_tx_rd_wait & ~rr_ready;\n   assign     wr_ready = ~emwr_empty & ~e_tx_wr_wait & ~rr_ready & ~rq_ready;\n\n   // FIFO read enables, when we're idle or done with the current datum\n   assign     emrr_rd_en = rr_ready & (~ready | e_tx_ack);\n   assign     emrq_rd_en = rq_ready & (~ready | e_tx_ack);\n   assign     emwr_rd_en = wr_ready & (~ready | e_tx_ack);\n"], "Clone Blocks": [["oh/etx/hdl/etx_arbiter.v@104:114", "   assign     rq_ready = ~emrq_empty & ~e_tx_rd_wait & ~rr_ready;\n   assign     wr_ready = ~emwr_empty & ~e_tx_wr_wait & ~rr_ready & ~rq_ready;\n\n   // FIFO read enables, when we're idle or done with the current datum\n   assign     emrr_rd_en = rr_ready & (~ready | e_tx_ack);\n   assign     emrq_rd_en = rq_ready & (~ready | e_tx_ack);\n   assign     emwr_rd_en = wr_ready & (~ready | e_tx_ack);\n   \n   always @ (posedge tx_lclk_par) begin\n      if( reset ) begin\n\n"], ["oh/etx/hdl/etx_arbiter.v@99:109", "   //# Arbitrate & forward\n   //############\n\n   // priority-based ready signals\n   assign     rr_ready = ~emrr_empty & ~e_tx_wr_wait;\n   assign     rq_ready = ~emrq_empty & ~e_tx_rd_wait & ~rr_ready;\n   assign     wr_ready = ~emwr_empty & ~e_tx_wr_wait & ~rr_ready & ~rq_ready;\n\n   // FIFO read enables, when we're idle or done with the current datum\n   assign     emrr_rd_en = rr_ready & (~ready | e_tx_ack);\n   assign     emrq_rd_en = rq_ready & (~ready | e_tx_ack);\n"], ["oh/etx/hdl/etx_arbiter.v@103:113", "   assign     rr_ready = ~emrr_empty & ~e_tx_wr_wait;\n   assign     rq_ready = ~emrq_empty & ~e_tx_rd_wait & ~rr_ready;\n   assign     wr_ready = ~emwr_empty & ~e_tx_wr_wait & ~rr_ready & ~rq_ready;\n\n   // FIFO read enables, when we're idle or done with the current datum\n   assign     emrr_rd_en = rr_ready & (~ready | e_tx_ack);\n   assign     emrq_rd_en = rq_ready & (~ready | e_tx_ack);\n   assign     emwr_rd_en = wr_ready & (~ready | e_tx_ack);\n   \n   always @ (posedge tx_lclk_par) begin\n      if( reset ) begin\n"], ["oh/etx/hdl/etx_arbiter.v@105:115", "   assign     wr_ready = ~emwr_empty & ~e_tx_wr_wait & ~rr_ready & ~rq_ready;\n\n   // FIFO read enables, when we're idle or done with the current datum\n   assign     emrr_rd_en = rr_ready & (~ready | e_tx_ack);\n   assign     emrq_rd_en = rq_ready & (~ready | e_tx_ack);\n   assign     emwr_rd_en = wr_ready & (~ready | e_tx_ack);\n   \n   always @ (posedge tx_lclk_par) begin\n      if( reset ) begin\n\n         ready     <= 1'b0;\n"]], "Diff Content": {"Delete": [[105, "   assign     wr_ready = ~emwr_empty & ~e_tx_wr_wait & ~rr_ready & ~rq_ready;\n"]], "Add": [[105, "   assign     wr_ready = ~emwr_empty & ~e_tx_wr_wait;                        //highest\n"], [105, "   assign     rq_ready = ~emrq_empty & ~e_tx_rd_wait & ~wr_ready;\n"], [105, "   assign     rr_ready = ~emrr_empty & ~e_tx_wr_wait & ~wr_ready & ~rq_ready;//lowest\n"]]}}