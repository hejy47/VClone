{"Source Block": ["oh/ecfg/hdl/ecfg.v@207:217@HdlStmAssign", "   /*ADDRESS DECODE LOGIC       */\n   /*****************************/\n\n   //read/write decode\n   assign ecfg_write      = mi_en & mi_we[0];\n   assign ecfg_read       = mi_en & ~mi_we[0];   \n\n   //Write enables\n   assign ecfg_reset_write     = ecfg_write & (mi_addr[RFAW-1:2]==`ESYSRESET);\n   assign ecfg_cfgtx_write     = ecfg_write & (mi_addr[RFAW-1:2]==`ESYSCFGTX);\n   assign ecfg_cfgrx_write     = ecfg_write & (mi_addr[RFAW-1:2]==`ESYSCFGRX);\n"], "Clone Blocks": [["oh/ecfg/hdl/ecfg.v@206:216", "   /*****************************/\n   /*ADDRESS DECODE LOGIC       */\n   /*****************************/\n\n   //read/write decode\n   assign ecfg_write      = mi_en & mi_we[0];\n   assign ecfg_read       = mi_en & ~mi_we[0];   \n\n   //Write enables\n   assign ecfg_reset_write     = ecfg_write & (mi_addr[RFAW-1:2]==`ESYSRESET);\n   assign ecfg_cfgtx_write     = ecfg_write & (mi_addr[RFAW-1:2]==`ESYSCFGTX);\n"]], "Diff Content": {"Delete": [[212, "   assign ecfg_read       = mi_en & ~mi_we[0];   \n"]], "Add": [[212, "   assign ecfg_write  = mi_en &  mi_we;\n"], [212, "   assign ecfg_read   = mi_en & ~mi_we;   \n"], [212, "   assign ecfg_reset_write    = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSRESET);\n"], [212, "   assign ecfg_cfgtx_write    = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSTX);\n"], [212, "   assign ecfg_cfgrx_write    = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSRX);\n"], [212, "   assign ecfg_cfgclk_write   = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSCLK);\n"], [212, "   assign ecfg_coreid_write   = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSCOREID);\n"], [212, "   assign ecfg_dataout_write  = ecfg_write & (mi_addr[RFAW+1:2]==`ESYSDATAOUT);\n"], [212, "    always @ (posedge clk)\n"], [212, "      if(hw_reset)\n"], [212, "\tecfg_reset_reg <= 1'b0;   \n"], [212, "      else if (ecfg_reset_write)\n"], [212, "\tecfg_reset_reg <= mi_din[0];  \n"]]}}