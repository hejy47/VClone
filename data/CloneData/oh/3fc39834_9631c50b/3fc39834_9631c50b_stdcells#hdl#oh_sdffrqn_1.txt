Source Block: oh/stdcells/hdl/oh_sdffrqn.v@11:22@HdlStmProcess
    input [DW-1:0] 	clk,
    input [DW-1:0] 	nreset,
    output reg [DW-1:0] qn
    );
   
   always @ (posedge clk or negedge nreset)
     if(!nreset)
       qn <= {{(DW)}{1'b1}};
     else
       qn <=  se ? ~si : ~d;
   
endmodule

Diff Content:
- 18        qn <= {{(DW)}{1'b1}};
+ 18        qn <= {DW{1'b1}};

Clone Blocks:
Clone Blocks 1:
oh/stdcells/hdl/oh_sdffsqn.v@13:24
    input [DW-1:0] 	clk,
    input [DW-1:0] 	nset,
    output reg [DW-1:0] qn
    );
   
   always @ (posedge clk or negedge nset)
     if(!nset)
       qn <= 'b0;   
     else
       qn <= se ? ~si : ~d;
   
endmodule

Clone Blocks 2:
oh/stdcells/hdl/oh_sdffsq.v@13:24
    input [DW-1:0] 	clk,
    input [DW-1:0] 	nset,
    output reg [DW-1:0] q
    );
   
   always @ (posedge clk or negedge nset)
     if(!nset)
       q <= {{(DW)}{1'b1}};
     else
       q <= se ? si : d;
      
endmodule

Clone Blocks 3:
oh/stdcells/hdl/oh_dffrq.v@12:23
    input [DW-1:0] 	clk,
    input [DW-1:0] 	nreset,
    output reg [DW-1:0] q
    );
   
   always @ (posedge clk or negedge nreset)
     if(!nreset)
       q <= 'b0;
     else
       q <= d;
      
endmodule

Clone Blocks 4:
oh/common/hdl/oh_edge2pulse.v@11:21
    input 	    nreset, // async active low reset   
    input [DW-1:0]  in, // edge input
    output [DW-1:0] out     // one cycle pulse
    );
     
   reg [DW-1:0]    in_reg;   

   always @ (posedge clk or negedge nreset)
     if(!nreset)
       in_reg[DW-1:0]  <= 'b0 ;
     else

Clone Blocks 5:
oh/common/hdl/oh_reg1.v@12:22
     input 	     en, // write enable
     input [DW-1:0]  in, // input data
     output [DW-1:0] out  // output data (stable/latched when clk=1)
     );
   
   reg [DW-1:0]      out_reg;	   
   always @ (posedge clk or negedge nreset)
     if(!nreset)
       out_reg[DW-1:0] <= 'b0;
     else if(en)	      
       out_reg[DW-1:0] <= in[DW-1:0];

Clone Blocks 6:
oh/stdcells/hdl/oh_dffsq.v@11:22
    input [DW-1:0]     clk,
    input [DW-1:0]     nset,
    output reg [DW-1:0] q
    );
   
   always @ (posedge clk or negedge nset)
     if(!nset)
       q <= {{(DW)}{1'b1}};
     else
       q <= d;
      
endmodule

Clone Blocks 7:
oh/common/hdl/oh_fall2pulse.v@11:21
      input 	      nreset, // async active low reset   
      input [DW-1:0]  in, // edge input
      output [DW-1:0] out     // one cycle pulse
    );
   
   reg [DW-1:0]    in_reg;

   always @ (posedge clk or negedge nreset)
     if(!nreset)
       in_reg[DW-1:0]  <= 'b0 ;
     else

Clone Blocks 8:
oh/stdcells/hdl/oh_sdffrq.v@14:25
    input [DW-1:0] 	clk,
    input [DW-1:0] 	nreset,
    output reg [DW-1:0] q
    );
   
   always @ (posedge clk or negedge nreset)
     if(!nreset)
       q <= 'b0;
     else
       q <= se ? si : d;
      
endmodule

Clone Blocks 9:
oh/stdcells/hdl/oh_dffrqn.v@11:22
    input [DW-1:0] 	clk,
    input [DW-1:0] 	nreset,
    output reg [DW-1:0] qn
    );
   
   always @ (posedge clk or negedge nreset)
     if(!nreset)
       qn <= {{(DW)}{1'b1}};
     else
       qn <= ~d;
   
endmodule

Clone Blocks 10:
oh/stdcells/hdl/oh_dffsqn.v@11:22
    input [DW-1:0] 	clk,
    input [DW-1:0] 	nset,
    output reg [DW-1:0] qn
    );
   
   always @ (posedge clk or negedge nset)
     if(!nset)
       qn <= 'b0;
     else
       qn <= ~d;
   
endmodule

Clone Blocks 11:
oh/common/hdl/oh_rise2pulse.v@11:21
      input 	      nreset, // async active low reset   
      input [DW-1:0]  in, // edge input
      output [DW-1:0] out     // one cycle pulse
      );
  
   reg [DW-1:0]    in_reg;
   
   always @ (posedge clk or negedge nreset)
     if(!nreset)
       in_reg[DW-1:0]  <= 'b0 ;
     else

