{"Source Block": ["oh/elink/hdl/esaxi.v@388:435@HdlStmProcess", "   //###################################################\n   //#WRITE DATA\n   //###################################################  \n   assign emwr_write         = 1'b1;\n   \n   always @( posedge s_axi_aclk ) \n     if (~s_axi_aresetn) \n       begin\n          emwr_data_reg[31:0]     <= 32'd0;\t  \n          emwr_dstaddr_reg[31:0]  <= 32'd0;\t \n\t  emwr_ctrlmode_reg[3:0]  <= 4'd0;\n          emwr_datamode_reg[1:0]  <= 2'd0;\n          emwr_access_all         <= 1'b0;\n          pre_wr_en               <= 1'b0;\n       end \n     else \n       begin\n\t  pre_wr_en                 <= s_axi_wready & s_axi_wvalid;\n          emwr_access_all           <= pre_wr_en;\n\t  emwr_ctrlmode_reg[3:0]    <= ecfg_tx_ctrlmode[3:0];//static\n\t  emwr_datamode_reg[1:0]    <= axi_awsize[1:0];\t\n          emwr_dstaddr_reg[31:2]    <= axi_awaddr[31:2]; //set lsbs of address based on write strobes\t \n\t  if(s_axi_wstrb[0] | (axi_awsize[1:0]==2'b10))\n\t    begin\n\t       emwr_data_reg[31:0]   <= s_axi_wdata[31:0];\n\t       emwr_dstaddr_reg[1:0] <= 2'd0;\n\t    end\n\t  else if(s_axi_wstrb[1])\n\t    begin\n\t       emwr_data_reg[31:0]   <= {8'd0, s_axi_wdata[31:8]};\n\t       emwr_dstaddr_reg[1:0] <= 2'd1;\n\t    end\n\t  else if(s_axi_wstrb[2])\n\t    begin\n\t       emwr_data_reg[31:0]   <= {16'd0, s_axi_wdata[31:16]};\n\t       emwr_dstaddr_reg[1:0] <= 2'd2;\n\t    end\n\t  else\n\t    begin\n\t       emwr_data_reg[31:0]   <= {24'd0, s_axi_wdata[31:24]};\n\t       emwr_dstaddr_reg[1:0] <= 2'd3;\n\t    end\n       end // else: !if(~s_axi_aresetn)\n\n//Pipeline stage\n always @( posedge s_axi_aclk ) \n     if (~s_axi_aresetn)\n       begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[396, "          emwr_data_reg[31:0]     <= 32'd0;\t  \n"], [397, "          emwr_dstaddr_reg[31:0]  <= 32'd0;\t \n"], [398, "\t  emwr_ctrlmode_reg[3:0]  <= 4'd0;\n"], [399, "          emwr_datamode_reg[1:0]  <= 2'd0;\n"], [400, "          emwr_access_all         <= 1'b0;\n"], [406, "          emwr_access_all           <= pre_wr_en;\n"], [407, "\t  emwr_ctrlmode_reg[3:0]    <= ecfg_tx_ctrlmode[3:0];//static\n"], [408, "\t  emwr_datamode_reg[1:0]    <= axi_awsize[1:0];\t\n"], [409, "          emwr_dstaddr_reg[31:2]    <= axi_awaddr[31:2]; //set lsbs of address based on write strobes\t \n"], [412, "\t       emwr_data_reg[31:0]   <= s_axi_wdata[31:0];\n"], [413, "\t       emwr_dstaddr_reg[1:0] <= 2'd0;\n"], [417, "\t       emwr_data_reg[31:0]   <= {8'd0, s_axi_wdata[31:8]};\n"], [418, "\t       emwr_dstaddr_reg[1:0] <= 2'd1;\n"], [422, "\t       emwr_data_reg[31:0]   <= {16'd0, s_axi_wdata[31:16]};\n"], [423, "\t       emwr_dstaddr_reg[1:0] <= 2'd2;\n"], [427, "\t       emwr_data_reg[31:0]   <= {24'd0, s_axi_wdata[31:24]};\n"], [428, "\t       emwr_dstaddr_reg[1:0] <= 2'd3;\n"]], "Add": [[400, "          txwr_data_reg[31:0]     <= 32'd0;\t  \n"], [400, "          txwr_dstaddr_reg[31:0]  <= 32'd0;\t \n"], [400, "          txwr_datamode_reg[1:0]  <= 2'd0;\n"], [400, "          txwr_access             <= 1'b0;\n"], [409, "          txwr_access               <= pre_wr_en;\n"], [409, "\t  txwr_datamode_reg[1:0]    <= axi_awsize[1:0];\t\n"], [409, "          txwr_dstaddr_reg[31:2]    <= axi_awaddr[31:2]; //set lsbs of address based on write strobes\t \n"], [413, "\t       txwr_data_reg[31:0]   <= s_axi_wdata[31:0];\n"], [413, "\t       txwr_dstaddr_reg[1:0] <= 2'd0;\n"], [418, "\t       txwr_data_reg[31:0]   <= {8'd0, s_axi_wdata[31:8]};\n"], [418, "\t       txwr_dstaddr_reg[1:0] <= 2'd1;\n"], [423, "\t       txwr_data_reg[31:0]   <= {16'd0, s_axi_wdata[31:16]};\n"], [423, "\t       txwr_dstaddr_reg[1:0] <= 2'd2;\n"], [428, "\t       txwr_data_reg[31:0]   <= {24'd0, s_axi_wdata[31:24]};\n"], [428, "\t       txwr_dstaddr_reg[1:0] <= 2'd3;\n"]]}}