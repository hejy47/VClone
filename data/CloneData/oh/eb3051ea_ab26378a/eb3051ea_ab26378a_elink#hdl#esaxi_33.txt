Source Block: oh/elink/hdl/esaxi.v@471:501@HdlStmProcess
   assign emrr_rd_en = emrr_access & ~mi_rd_reg;   //TODO: Verify this assumption!!!
   
   assign emrq_write         = 1'b0;
   assign emrq_data[31:0]    = 32'b0;
   
   always @( posedge s_axi_aclk )
     if (~s_axi_aresetn) 
       begin
	  emrq_access_all     <= 1'b0;      
	  emrq_datamode[1:0]  <= 2'd0;
	  emrq_ctrlmode[3:0]  <= 4'd0;
	  emrq_dstaddr[31:0]  <= 32'd0;
	  emrq_srcaddr[31:0]  <= 32'd0;	 
          ractive_reg         <= 1'b0;
          rnext               <= 1'b0;          
      end 
     else 
       begin
          ractive_reg         <= read_active; //read request state machone
          rnext               <= s_axi_rvalid & s_axi_rready & ~s_axi_rlast;         
          emrq_access_all     <= ( ~ractive_reg & read_active ) | rnext;         
	  emrq_datamode[1:0]  <= axi_arsize[1:0];
	  emrq_ctrlmode[3:0]  <= ecfg_tx_ctrlmode;	  
	  emrq_dstaddr[31:0]  <= axi_araddr[31:0];
	  emrq_srcaddr[31:0]  <= {c_read_tag_addr[11:0], 20'd0};//TODO? What can we do with lower 32 bits?
       end

   ///Only letting through proper read requests
   assign emrq_access=emrq_access_all & ~(emrq_dstaddr[31:20]==elinkid[11:0]);
  
   //Read response AXI state machine

Diff Content:
- 479 	  emrq_access_all     <= 1'b0;      
- 480 	  emrq_datamode[1:0]  <= 2'd0;
- 481 	  emrq_ctrlmode[3:0]  <= 4'd0;
- 482 	  emrq_dstaddr[31:0]  <= 32'd0;
- 483 	  emrq_srcaddr[31:0]  <= 32'd0;	 
- 489           ractive_reg         <= read_active; //read request state machone
- 490           rnext               <= s_axi_rvalid & s_axi_rready & ~s_axi_rlast;         
- 491           emrq_access_all     <= ( ~ractive_reg & read_active ) | rnext;         
- 492 	  emrq_datamode[1:0]  <= axi_arsize[1:0];
- 493 	  emrq_ctrlmode[3:0]  <= ecfg_tx_ctrlmode;	  
- 494 	  emrq_dstaddr[31:0]  <= axi_araddr[31:0];
- 495 	  emrq_srcaddr[31:0]  <= {c_read_tag_addr[11:0], 20'd0};//TODO? What can we do with lower 32 bits?
+ 483 	  txrd_access         <= 1'b0;      
+ 483 	  txrd_datamode[1:0]  <= 2'd0;
+ 483 	  txrd_dstaddr[31:0]  <= 32'd0;
+ 483 	  txrd_srcaddr[31:0]  <= 32'd0;	 
+ 495           ractive_reg         <= read_active;
+ 495           rnext               <= s_axi_rvalid & s_axi_rready & ~s_axi_rlast;        
+ 495           txrd_access         <= ( ~ractive_reg & read_active ) | rnext;         
+ 495 	  txrd_datamode[1:0]  <= axi_arsize[1:0];
+ 495 	  txrd_dstaddr[31:0]  <= axi_araddr[31:0];
+ 495 	  txrd_srcaddr[31:0]  <= {RETURN_ADDR, 16'd0};

Clone Blocks:
