{"Source Block": ["oh/elink/hdl/esaxi.v@343:390@HdlStmProcess", "          else if( last_rd_beat )\n            read_active <= 1'b0;         \n       end // else: !if( s_axi_aresetn == 1'b0 )\n   \n   //Read address channel state machine\n   always @( posedge s_axi_aclk ) \n      if (~s_axi_aresetn) \n\tbegin\n           axi_araddr[31:0] <= 0;\n           axi_arlen        <= 8'd0;\n           axi_arburst      <= 2'd0;\n           axi_arsize[2:0]  <= 3'b0;\n           s_axi_rlast      <= 1'b0;\n           //s_axi_rid        <= 'd0;         \n\tend\n      else \n\tbegin         \n         if( s_axi_arready & s_axi_arvalid ) \n\t   begin\n\t      //NOTE: upper 2 bits get chopped by Zynq\n              axi_araddr[31:0]  <= s_axi_araddr[31:0]; //transfer start address\n              axi_arlen         <= s_axi_arlen;\n              axi_arburst       <= s_axi_arburst;\n              axi_arsize        <= s_axi_arsize;\n              s_axi_rlast       <= ~(|s_axi_arlen);\n              //s_axi_rid     <= s_axi_arid;              \n         end \n\t else if( s_axi_rvalid & s_axi_rready) \n\t   begin\t      \n              axi_arlen <= axi_arlen - 1;\n              if(axi_arlen == 8'd1)\n\t\ts_axi_rlast <= 1'b1;              \n              if( s_axi_arburst == 2'b01) \n\t\tbegin //incremental burst\n\t\t   // the read address for all the beats in the transaction are increments by awsize\n\t\t   // note: this should be based on awsize instead to support narrow bursts, i think?\n\t\t   axi_araddr[c_s_axi_addr_width - 1:addr_lsb] <= axi_araddr[c_s_axi_addr_width - 1:addr_lsb] + 1;\n\t\t   //araddr aligned to 4 byte boundary\n\t\t   axi_araddr[addr_lsb-1:0]  <= {addr_lsb{1'b0}};   \n\t\t   //for awsize = 4 bytes (010)\n\t\tend\n           end // if ( s_axi_rvalid & s_axi_rready)\n\tend // else: !if( s_axi_aresetn == 1'b0 )\n   \n\n   //###################################################\n   //#WRITE DATA\n   //###################################################  \n"], "Clone Blocks": [], "Diff Content": {"Delete": [[361, "\t   begin\n"], [363, "              axi_araddr[31:0]  <= s_axi_araddr[31:0]; //transfer start address\n"], [379, "\t\t   axi_araddr[c_s_axi_addr_width - 1:addr_lsb] <= axi_araddr[c_s_axi_addr_width - 1:addr_lsb] + 1;\n"], [381, "\t\t   axi_araddr[addr_lsb-1:0]  <= {addr_lsb{1'b0}};   \n"]], "Add": [[363, "\t   begin\t      \n"], [363, "              axi_araddr[31:0]  <= s_axi_araddr[31:0]; //NOTE: upper 2 bits get chopped by Zynq\n"], [379, "\t\t   axi_araddr[31:2] <= axi_araddr[31:2] + 1;\n"], [381, "\t\t   axi_araddr[1:0]  <= 2'b0;   \n"]]}}