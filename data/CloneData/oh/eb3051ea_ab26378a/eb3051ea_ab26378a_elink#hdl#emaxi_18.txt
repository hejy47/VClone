Source Block: oh/elink/hdl/emaxi.v@145:155@HdlStmAssign
   wire 		readinfo_full;
   wire [47:0] 		readinfo_out;
   wire [47:0] 		readinfo_in;

   //i/o connections. write address (aw)
   assign m_axi_awburst[1:0]	= 2'b01;
   assign m_axi_awcache[3:0]	= 4'b0010;//TODO??update value to 4'b0011 if coherent accesses to be used via the zynq acp port
   assign m_axi_awprot[2:0]	= 3'h0;
   assign m_axi_awqos[3:0]	= 4'h0;
   assign m_axi_bready    	= 1'b1;   //TODO? axi_bready, why constant
   

Diff Content:
- 150    assign m_axi_awburst[1:0]	= 2'b01;
+ 150    wire 	       aw_go;
+ 150    wire 	       w_go;
+ 150    wire 	       readinfo_wren;
+ 150    wire 	       readinfo_rden;
+ 150    wire 	       readinfo_full;
+ 150    wire [47:0] 	       readinfo_out;
+ 150    wire [47:0] 	       readinfo_in;
+ 150    wire [1:0] 	       rxwr_datamode;
+ 150    wire [AW-1:0]       rxwr_dstaddr;
+ 150    wire [DW-1:0]       rxwr_data;
+ 150    wire [AW-1:0]       rxwr_srcaddr;
+ 150    wire [1:0] 	       rxrd_datamode;
+ 150    wire [3:0] 	       rxrd_ctrlmode;
+ 150    wire [AW-1:0]       rxrd_dstaddr;
+ 150    wire [AW-1:0]       rxrd_srcaddr;
+ 150    wire [1:0] 	       txrr_datamode;
+ 150    wire [3:0] 	       txrr_ctrlmode;
+ 150    wire [31:0] 	       txrr_dstaddr;
+ 150    packet2emesh p2e_rxwr (
+ 150 			  .access_out		(),
+ 150 			  .write_out		(),
+ 150 			  .datamode_out		(rxwr_datamode[1:0]),
+ 150 			  .ctrlmode_out		(),
+ 150 			  .dstaddr_out		(rxwr_dstaddr[AW-1:0]),
+ 150 			  .data_out		(rxwr_data[DW-1:0]),
+ 150 			  .srcaddr_out		(rxwr_srcaddr[AW-1:0]),
+ 150 			  .packet_in		(rxwr_packet[PW-1:0])
+ 150 			  );
+ 150    packet2emesh p2e_rxrd (
+ 150 			  .access_out		(),
+ 150 			  .write_out		(),
+ 150 			  .datamode_out		(rxrd_datamode[1:0]),
+ 150 			  .ctrlmode_out		(rxrd_ctrlmode[3:0]),
+ 150 			  .dstaddr_out		(rxrd_dstaddr[AW-1:0]),
+ 150 			  .data_out		(),
+ 150 			  .srcaddr_out		(rxrd_srcaddr[AW-1:0]),
+ 150 			  .packet_in		(rxrd_packet[PW-1:0])
+ 150 			  );
+ 150    emesh2packet e2p (
+ 150 		     .packet_out	(txrr_packet[PW-1:0]),
+ 150 		     .access_in		(txrr_access),
+ 150 		     .write_in		(txrr_write),
+ 150 		     .datamode_in	(txrr_datamode[1:0]),
+ 150 		     .ctrlmode_in	(txrr_ctrlmode[3:0]),
+ 150 		     .dstaddr_in	(txrr_dstaddr[AW-1:0]),
+ 150 		     .data_in		(txrr_data[DW-1:0]),
+ 150 		     .srcaddr_in	(txrr_srcaddr[AW-1:0])
+ 150 		     );
+ 150    assign m_axi_awburst[1:0]	= 2'b01;  //TODO???

Clone Blocks:
Clone Blocks 1:
oh/elink/hdl/emaxi.v@147:157
   wire [47:0] 		readinfo_in;

   //i/o connections. write address (aw)
   assign m_axi_awburst[1:0]	= 2'b01;
   assign m_axi_awcache[3:0]	= 4'b0010;//TODO??update value to 4'b0011 if coherent accesses to be used via the zynq acp port
   assign m_axi_awprot[2:0]	= 3'h0;
   assign m_axi_awqos[3:0]	= 4'h0;
   assign m_axi_bready    	= 1'b1;   //TODO? axi_bready, why constant
   
   assign m_axi_arburst[1:0]	= 2'b01;
   assign m_axi_arcache[3:0]	= 4'b0010;

Clone Blocks 2:
oh/elink/hdl/emaxi.v@142:152
   wire 		w_go;
   wire 		readinfo_wren;
   wire 		readinfo_rden;
   wire 		readinfo_full;
   wire [47:0] 		readinfo_out;
   wire [47:0] 		readinfo_in;

   //i/o connections. write address (aw)
   assign m_axi_awburst[1:0]	= 2'b01;
   assign m_axi_awcache[3:0]	= 4'b0010;//TODO??update value to 4'b0011 if coherent accesses to be used via the zynq acp port
   assign m_axi_awprot[2:0]	= 3'h0;

Clone Blocks 3:
oh/elink/hdl/emaxi.v@146:156
   wire [47:0] 		readinfo_out;
   wire [47:0] 		readinfo_in;

   //i/o connections. write address (aw)
   assign m_axi_awburst[1:0]	= 2'b01;
   assign m_axi_awcache[3:0]	= 4'b0010;//TODO??update value to 4'b0011 if coherent accesses to be used via the zynq acp port
   assign m_axi_awprot[2:0]	= 3'h0;
   assign m_axi_awqos[3:0]	= 4'h0;
   assign m_axi_bready    	= 1'b1;   //TODO? axi_bready, why constant
   
   assign m_axi_arburst[1:0]	= 2'b01;

