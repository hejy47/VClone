{"Source Block": ["oh/src/elink/hdl/etx_clocks.v@169:288@HdlStmIf", "\t\t     .clk\t\t(tx_lclk_div4),\n\t\t     .nrst_in\t\t(tx_nreset));\n   \n\n  generate\n      if(TARGET==\"XILINX\")\n\tbegin\n   \n   //###########################\n   // MMCM FOR TXCLK + CCLK\n   //###########################\n   MMCME2_ADV\n     #(\n       .BANDWIDTH(\"OPTIMIZED\"),          \n       .CLKFBOUT_MULT_F(MMCM_VCO_MULT),\n       .CLKFBOUT_PHASE(0.0),\n       .CLKIN1_PERIOD(SYSCLK_PERIOD),   \n       .CLKOUT0_DIVIDE_F(CCLK_DIVIDE),   //cclk_c\n       .CLKOUT1_DIVIDE(TXCLK_DIVIDE),    //tx_lclk\n       .CLKOUT2_DIVIDE(TXCLK_DIVIDE),    //tx_lclk90\n       .CLKOUT3_DIVIDE(TXCLK_DIVIDE*4),  //tx_lclk_div4\n       .CLKOUT4_DIVIDE(128),             //N/A\n       .CLKOUT5_DIVIDE(128),             //N/A\n       .CLKOUT6_DIVIDE(128),             //N/A\n       .CLKOUT0_DUTY_CYCLE(0.5),         \n       .CLKOUT1_DUTY_CYCLE(0.5),\n       .CLKOUT2_DUTY_CYCLE(0.5),\n       .CLKOUT3_DUTY_CYCLE(0.5),\n       .CLKOUT4_DUTY_CYCLE(0.5),\n       .CLKOUT5_DUTY_CYCLE(0.5),\n       .CLKOUT6_DUTY_CYCLE(0.5),\n       .CLKOUT0_PHASE(0.0),\n       .CLKOUT1_PHASE(0.0),\n       .CLKOUT2_PHASE(TXCLK_PHASE),\n       .CLKOUT3_PHASE(0.0),\n       .CLKOUT4_PHASE(0.0),\n       .CLKOUT5_PHASE(0.0),\n       .CLKOUT6_PHASE(0.0),\n       .DIVCLK_DIVIDE(1.0), \n       .REF_JITTER1(0.01), \n       .STARTUP_WAIT(\"FALSE\") \n       ) mmcm_cclk\n       (\n        .CLKOUT0(cclk_mmcm),\n\t.CLKOUT0B(),\n        .CLKOUT1(tx_lclk_mmcm),\n\t.CLKOUT1B(),\n        .CLKOUT2(tx_lclk90_mmcm),//goes directly to IO\n\t.CLKOUT2B(),\n        .CLKOUT3(tx_lclk_div4_mmcm),\n\t.CLKOUT3B(),\n        .CLKOUT4(),\n        .CLKOUT5(),\n\t.CLKOUT6(),\n\t.PWRDWN(1'b0),\n        .RST(mmcm_reset),     //reset\n        .CLKFBIN(cclk_fb),\n        .CLKFBOUT(cclk_fb),  //feedback clock\n\t.CLKFBOUTB(),        //inverted output feedback clock     \n        .CLKIN1(sys_clk),    //input clock\n\t.CLKIN2(1'b0),\n\t.CLKINSEL(1'b1),      \n\t.DADDR(7'b0),\n        .DCLK(1'b0),\n\t.DEN(1'b0),\n\t.DI(16'b0),\n\t.DWE(1'b0),\n\t.DRDY(),\n\t.DO(), \n\t.LOCKED(mmcm_locked), //locked indicator\n\t.PSCLK(1'b0),\n\t.PSEN(1'b0),\n\t.PSDONE(),\n\t.PSINCDEC(1'b0),\n\t.CLKFBSTOPPED(),\n\t.CLKINSTOPPED()\n        );\n        \n\n   //Tx clock buffers\n   BUFG i_lclk_bufg      (.I(tx_lclk_mmcm),     .O(tx_lclk_io));   //300MHz\n   BUFG i_lclk_div4_bufg (.I(tx_lclk_div4_mmcm),.O(tx_lclk_div4)); //75MHz\n   BUFG i_lclk90_bufg    (.I(tx_lclk90_mmcm),   .O(tx_lclk90));    //300MHz 90deg clock\n//   BUFG i_fb_buf           (.I(cclk_fb_out), .O(cclk_fb_in));    //FB\n\n   //###########################\n   // CCLK\n   //###########################\n\n   //CCLK bufio\n   BUFIO bufio_cclk(.O(cclk_bufio), .I(cclk_mmcm));\n\n   //CCLK oddr \n   ODDRE1\n   oddr_lclk (\n              .Q  (cclk_oddr),\n              .C  (cclk_bufio),\n              .D1 (1'b1),\n              .D2 (1'b0));\n\t    \n   //CCLK differential buffer\n   OBUFDS  cclk_obuf (.O   (cclk_p),\n                      .OB  (cclk_n),\n                      .I   (cclk_oddr)\n                      );\n\n\tend // if (TARGET==\"XILINX\")\n      else\n\tbegin\n\t   assign cclk_p       = sys_clk;\n\t   assign cclk_n       = sys_clk;\n\t   assign tx_lclk_io   = sys_clk;\n\t   assign tx_lclk_div4 = sys_clk;\n\t   assign tx_lclk90    = sys_clk;\n\tend\n  endgenerate\n   \n\t   \n \n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[180, "   MMCME2_ADV\n"], [181, "     #(\n"], [182, "       .BANDWIDTH(\"OPTIMIZED\"),          \n"], [183, "       .CLKFBOUT_MULT_F(MMCM_VCO_MULT),\n"], [184, "       .CLKFBOUT_PHASE(0.0),\n"], [185, "       .CLKIN1_PERIOD(SYSCLK_PERIOD),   \n"], [186, "       .CLKOUT0_DIVIDE_F(CCLK_DIVIDE),   //cclk_c\n"], [187, "       .CLKOUT1_DIVIDE(TXCLK_DIVIDE),    //tx_lclk\n"], [188, "       .CLKOUT2_DIVIDE(TXCLK_DIVIDE),    //tx_lclk90\n"], [189, "       .CLKOUT3_DIVIDE(TXCLK_DIVIDE*4),  //tx_lclk_div4\n"], [190, "       .CLKOUT4_DIVIDE(128),             //N/A\n"], [191, "       .CLKOUT5_DIVIDE(128),             //N/A\n"], [192, "       .CLKOUT6_DIVIDE(128),             //N/A\n"], [193, "       .CLKOUT0_DUTY_CYCLE(0.5),         \n"], [194, "       .CLKOUT1_DUTY_CYCLE(0.5),\n"], [195, "       .CLKOUT2_DUTY_CYCLE(0.5),\n"], [196, "       .CLKOUT3_DUTY_CYCLE(0.5),\n"], [197, "       .CLKOUT4_DUTY_CYCLE(0.5),\n"], [198, "       .CLKOUT5_DUTY_CYCLE(0.5),\n"], [199, "       .CLKOUT6_DUTY_CYCLE(0.5),\n"], [200, "       .CLKOUT0_PHASE(0.0),\n"], [201, "       .CLKOUT1_PHASE(0.0),\n"], [202, "       .CLKOUT2_PHASE(TXCLK_PHASE),\n"], [203, "       .CLKOUT3_PHASE(0.0),\n"], [204, "       .CLKOUT4_PHASE(0.0),\n"], [205, "       .CLKOUT5_PHASE(0.0),\n"], [206, "       .CLKOUT6_PHASE(0.0),\n"], [207, "       .DIVCLK_DIVIDE(1.0), \n"], [208, "       .REF_JITTER1(0.01), \n"], [209, "       .STARTUP_WAIT(\"FALSE\") \n"], [210, "       ) mmcm_cclk\n"], [211, "       (\n"], [212, "        .CLKOUT0(cclk_mmcm),\n"], [213, "\t.CLKOUT0B(),\n"], [214, "        .CLKOUT1(tx_lclk_mmcm),\n"], [215, "\t.CLKOUT1B(),\n"], [216, "        .CLKOUT2(tx_lclk90_mmcm),//goes directly to IO\n"], [217, "\t.CLKOUT2B(),\n"], [218, "        .CLKOUT3(tx_lclk_div4_mmcm),\n"], [219, "\t.CLKOUT3B(),\n"], [220, "        .CLKOUT4(),\n"], [221, "        .CLKOUT5(),\n"], [222, "\t.CLKOUT6(),\n"], [223, "\t.PWRDWN(1'b0),\n"], [224, "        .RST(mmcm_reset),     //reset\n"], [225, "        .CLKFBIN(cclk_fb),\n"], [226, "        .CLKFBOUT(cclk_fb),  //feedback clock\n"], [227, "\t.CLKFBOUTB(),        //inverted output feedback clock     \n"], [228, "        .CLKIN1(sys_clk),    //input clock\n"], [229, "\t.CLKIN2(1'b0),\n"], [230, "\t.CLKINSEL(1'b1),      \n"], [231, "\t.DADDR(7'b0),\n"], [232, "        .DCLK(1'b0),\n"], [233, "\t.DEN(1'b0),\n"], [234, "\t.DI(16'b0),\n"], [235, "\t.DWE(1'b0),\n"], [236, "\t.DRDY(),\n"], [237, "\t.DO(), \n"], [238, "\t.LOCKED(mmcm_locked), //locked indicator\n"], [239, "\t.PSCLK(1'b0),\n"], [240, "\t.PSEN(1'b0),\n"], [241, "\t.PSDONE(),\n"], [242, "\t.PSINCDEC(1'b0),\n"], [243, "\t.CLKFBSTOPPED(),\n"], [244, "\t.CLKINSTOPPED()\n"], [245, "        );\n"], [249, "   BUFG i_lclk_bufg      (.I(tx_lclk_mmcm),     .O(tx_lclk_io));   //300MHz\n"], [250, "   BUFG i_lclk_div4_bufg (.I(tx_lclk_div4_mmcm),.O(tx_lclk_div4)); //75MHz\n"], [251, "   BUFG i_lclk90_bufg    (.I(tx_lclk90_mmcm),   .O(tx_lclk90));    //300MHz 90deg clock\n"], [259, "   BUFIO bufio_cclk(.O(cclk_bufio), .I(cclk_mmcm));\n"], [262, "   ODDRE1\n"], [263, "   oddr_lclk (\n"], [264, "              .Q  (cclk_oddr),\n"], [265, "              .C  (cclk_bufio),\n"], [266, "              .D1 (1'b1),\n"], [267, "              .D2 (1'b0));\n"], [270, "   OBUFDS  cclk_obuf (.O   (cclk_p),\n"], [271, "                      .OB  (cclk_n),\n"], [272, "                      .I   (cclk_oddr)\n"], [273, "                      );\n"]], "Add": [[259, "\t   MMCME2_ADV\n"], [259, "\t     #(\n"], [259, "\t       .BANDWIDTH(\"OPTIMIZED\"),          \n"], [259, "\t       .CLKFBOUT_MULT_F(MMCM_VCO_MULT),\n"], [259, "\t       .CLKFBOUT_PHASE(0.0),\n"], [259, "\t       .CLKIN1_PERIOD(SYSCLK_PERIOD),   \n"], [259, "\t       .CLKOUT0_DIVIDE_F(CCLK_DIVIDE),   //cclk_c\n"], [259, "\t       .CLKOUT1_DIVIDE(TXCLK_DIVIDE),    //tx_lclk\n"], [259, "\t       .CLKOUT2_DIVIDE(TXCLK_DIVIDE),    //tx_lclk90\n"], [259, "\t       .CLKOUT3_DIVIDE(TXCLK_DIVIDE*4),  //tx_lclk_div4\n"], [259, "\t       .CLKOUT4_DIVIDE(128),             //N/A\n"], [259, "\t       .CLKOUT5_DIVIDE(128),             //N/A\n"], [259, "\t       .CLKOUT6_DIVIDE(128),             //N/A\n"], [259, "\t       .CLKOUT0_DUTY_CYCLE(0.5),         \n"], [259, "\t       .CLKOUT1_DUTY_CYCLE(0.5),\n"], [259, "\t       .CLKOUT2_DUTY_CYCLE(0.5),\n"], [259, "\t       .CLKOUT3_DUTY_CYCLE(0.5),\n"], [259, "\t       .CLKOUT4_DUTY_CYCLE(0.5),\n"], [259, "\t       .CLKOUT5_DUTY_CYCLE(0.5),\n"], [259, "\t       .CLKOUT6_DUTY_CYCLE(0.5),\n"], [259, "\t       .CLKOUT0_PHASE(0.0),\n"], [259, "\t       .CLKOUT1_PHASE(0.0),\n"], [259, "\t       .CLKOUT2_PHASE(TXCLK_PHASE),\n"], [259, "\t       .CLKOUT3_PHASE(0.0),\n"], [259, "\t       .CLKOUT4_PHASE(0.0),\n"], [259, "\t       .CLKOUT5_PHASE(0.0),\n"], [259, "\t       .CLKOUT6_PHASE(0.0),\n"], [259, "\t       .DIVCLK_DIVIDE(1.0), \n"], [259, "\t       .REF_JITTER1(0.01), \n"], [259, "\t       .STARTUP_WAIT(\"FALSE\") \n"], [259, "\t       ) mmcm_cclk\n"], [259, "\t       (\n"], [259, "\t\t.CLKOUT0(cclk_mmcm),\n"], [259, "\t\t.CLKOUT0B(),\n"], [259, "\t\t.CLKOUT1(tx_lclk_mmcm),\n"], [259, "\t\t.CLKOUT1B(),\n"], [259, "\t\t.CLKOUT2(tx_lclk90_mmcm),//goes directly to IO\n"], [259, "\t\t.CLKOUT2B(),\n"], [259, "\t\t.CLKOUT3(tx_lclk_div4_mmcm),\n"], [259, "\t\t.CLKOUT3B(),\n"], [259, "\t\t.CLKOUT4(),\n"], [259, "\t\t.CLKOUT5(),\n"], [259, "\t\t.CLKOUT6(),\n"], [259, "\t\t.PWRDWN(1'b0),\n"], [259, "\t\t.RST(mmcm_reset),     //reset\n"], [259, "\t\t.CLKFBIN(cclk_fb),\n"], [259, "\t\t.CLKFBOUT(cclk_fb),  //feedback clock\n"], [259, "\t\t.CLKFBOUTB(),        //inverted output feedback clock     \n"], [259, "\t\t.CLKIN1(sys_clk),    //input clock\n"], [259, "\t\t.CLKIN2(1'b0),\n"], [259, "\t\t.CLKINSEL(1'b1),      \n"], [259, "\t\t.DADDR(7'b0),\n"], [259, "\t\t.DCLK(1'b0),\n"], [259, "\t\t.DEN(1'b0),\n"], [259, "\t\t.DI(16'b0),\n"], [259, "\t\t.DWE(1'b0),\n"], [259, "\t\t.DRDY(),\n"], [259, "\t\t.DO(), \n"], [259, "\t\t.LOCKED(mmcm_locked), //locked indicator\n"], [259, "\t\t.PSCLK(1'b0),\n"], [259, "\t\t.PSEN(1'b0),\n"], [259, "\t\t.PSDONE(),\n"], [259, "\t\t.PSINCDEC(1'b0),\n"], [259, "\t\t.CLKFBSTOPPED(),\n"], [259, "\t\t.CLKINSTOPPED()\n"], [259, "\t\t);\n"], [273, "\t   BUFG i_lclk_bufg      (.I(tx_lclk_mmcm),     .O(tx_lclk_io));   //300MHz\n"], [273, "\t   BUFG i_lclk_div4_bufg (.I(tx_lclk_div4_mmcm),.O(tx_lclk_div4)); //75MHz\n"], [273, "\t   BUFG i_lclk90_bufg    (.I(tx_lclk90_mmcm),   .O(tx_lclk90));    //300MHz 90deg clock\n"], [273, "\t   BUFIO bufio_cclk(.O(cclk_bufio), .I(cclk_mmcm));\n"], [273, "\t   if(PLATFORM==\"ULTRASCALE\")\n"], [273, "\t     begin : gen_ultrascale\n"], [273, "\t\tODDRE1 oddr_lclk (\n"], [273, "\t\t\t\t  .Q  (cclk_oddr),\n"], [273, "\t\t\t\t  .C  (cclk_bufio),\n"], [273, "\t\t\t\t  .D1 (1'b1),\n"], [273, "\t\t\t\t  .D2 (1'b0));\n"], [273, "\t     end\n"], [273, "\t   else\n"], [273, "\t     begin : gen_zynq\n"], [273, "\t\tODDR #(.DDR_CLK_EDGE  (\"SAME_EDGE\"), .SRTYPE(\"ASYNC\"))\n"], [273, "\t\toddr_lclk (\n"], [273, "\t\t\t   .Q  (cclk_oddr),\n"], [273, "\t\t\t   .C  (cclk_bufio),\n"], [273, "\t\t\t   .CE (1'b1),\n"], [273, "\t\t\t   .D1 (1'b1),\n"], [273, "\t\t\t   .D2 (1'b0),\n"], [273, "\t\t\t   .R  (1'b0),\n"], [273, "\t\t\t   .S  (1'b0));\t\n"], [273, "\t     end\n"], [273, "\t   OBUFDS  cclk_obuf (.O   (cclk_p),\n"], [273, "\t\t\t      .OB  (cclk_n),\n"], [273, "\t\t\t      .I   (cclk_oddr)\n"], [273, "\t\t\t      );\n"]]}}