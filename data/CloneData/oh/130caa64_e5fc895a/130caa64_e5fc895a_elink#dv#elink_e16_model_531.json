{"Source Block": ["oh/elink/dv/elink_e16_model.v@4293:4303@HdlStmAssign", "\t  txo_launch_ack_del1 <= txo_launch_ack      & ~make_gap;\n\t  txo_launch_ack_del2 <= txo_launch_ack_del1 & ~burst_req_denied;\n       end\n\n   assign txo_op_ack       = txo_launch_ack      &  txo_launch_ack_del1;\n   assign txo_op_ack_first = txo_launch_ack_del1 & ~txo_launch_ack_del2;\n\n   //# Request and rotate disable\n   //# On the first cycle of the acknowledge the launch count is not incremented\n   //# yet, therefore we have to force request and rotate disable \"artificially\"\n   always @ (posedge txo_lclk or posedge reset)\n"], "Clone Blocks": [["oh/elink/dv/elink_e16_model.v@4292:4302", "       begin\n\t  txo_launch_ack_del1 <= txo_launch_ack      & ~make_gap;\n\t  txo_launch_ack_del2 <= txo_launch_ack_del1 & ~burst_req_denied;\n       end\n\n   assign txo_op_ack       = txo_launch_ack      &  txo_launch_ack_del1;\n   assign txo_op_ack_first = txo_launch_ack_del1 & ~txo_launch_ack_del2;\n\n   //# Request and rotate disable\n   //# On the first cycle of the acknowledge the launch count is not incremented\n   //# yet, therefore we have to force request and rotate disable \"artificially\"\n"]], "Diff Content": {"Delete": [[4298, "   assign txo_op_ack_first = txo_launch_ack_del1 & ~txo_launch_ack_del2;\n"]], "Add": [[4298, "   always @ (posedge cclk)\n"], [4298, "     if (cclk_en)\n"], [4298, "       if (wr_write)\n"], [4298, "\t fifo_mem[wr_addr[FAD-1:0]] <= {even_byte[LW-1:0],tran_in[2*LW-1:LW]};\n"], [4298, "   assign fifo_out_tlc[2*LW-1:0] = fifo_mem[rd_addr_tlc[FAD-1:0]];\n"]]}}