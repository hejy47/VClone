{"Source Block": ["oh/elink/dv/elink_e16_model.v@4254:4264@HdlIdDef", "   wire [LW-1:0]  byte_even_mux;\n   wire [LW-1:0]  byte_odd_mux;\n   wire [LW-1:0]  byte_even;\n   wire [LW-1:0]  byte_odd;\n   wire \t  make_gap;     // make gap in the transaction frame\n   wire \t  single_write; // single write transaction\n   wire \t  double_write; // double write transaction\n   wire \t  burst_req_denied; // request of burst transaction is not acknowledged\n   wire \t  burst_backup_inc; // burst transaction backup counter increment\n   wire [1:0] \t  burst_backup_inc_cnt;  // Incremented burst backup counter\n   wire [1:0] \t  burst_backup_next_cnt; // Next burst backup counter value\n"], "Clone Blocks": [["oh/elink/dv/elink_e16_model.v@4252:4262", "   wire \t  txo_op_ack;       // \"operation\" acknowledge\n   wire \t  txo_op_ack_first; // first \"operation\" acknowledge cycle\n   wire [LW-1:0]  byte_even_mux;\n   wire [LW-1:0]  byte_odd_mux;\n   wire [LW-1:0]  byte_even;\n   wire [LW-1:0]  byte_odd;\n   wire \t  make_gap;     // make gap in the transaction frame\n   wire \t  single_write; // single write transaction\n   wire \t  double_write; // double write transaction\n   wire \t  burst_req_denied; // request of burst transaction is not acknowledged\n   wire \t  burst_backup_inc; // burst transaction backup counter increment\n"], ["oh/elink/dv/elink_e16_model.v@4251:4261", "   wire [2:0] \t  jump_value;  // value of the jump for read pointer\n   wire \t  txo_op_ack;       // \"operation\" acknowledge\n   wire \t  txo_op_ack_first; // first \"operation\" acknowledge cycle\n   wire [LW-1:0]  byte_even_mux;\n   wire [LW-1:0]  byte_odd_mux;\n   wire [LW-1:0]  byte_even;\n   wire [LW-1:0]  byte_odd;\n   wire \t  make_gap;     // make gap in the transaction frame\n   wire \t  single_write; // single write transaction\n   wire \t  double_write; // double write transaction\n   wire \t  burst_req_denied; // request of burst transaction is not acknowledged\n"], ["oh/elink/dv/elink_e16_model.v@4257:4267", "   wire [LW-1:0]  byte_odd;\n   wire \t  make_gap;     // make gap in the transaction frame\n   wire \t  single_write; // single write transaction\n   wire \t  double_write; // double write transaction\n   wire \t  burst_req_denied; // request of burst transaction is not acknowledged\n   wire \t  burst_backup_inc; // burst transaction backup counter increment\n   wire [1:0] \t  burst_backup_inc_cnt;  // Incremented burst backup counter\n   wire [1:0] \t  burst_backup_next_cnt; // Next burst backup counter value\n   wire \t  freeze_fifo;           // FIFO and main counter advance should stoped\n   wire sel_ref_byte0; // select byte0 from the reference information of the transaction \n   wire sel_ref_byte1; // select byte1 from the reference information of the transaction \n"], ["oh/elink/dv/elink_e16_model.v@4253:4263", "   wire \t  txo_op_ack_first; // first \"operation\" acknowledge cycle\n   wire [LW-1:0]  byte_even_mux;\n   wire [LW-1:0]  byte_odd_mux;\n   wire [LW-1:0]  byte_even;\n   wire [LW-1:0]  byte_odd;\n   wire \t  make_gap;     // make gap in the transaction frame\n   wire \t  single_write; // single write transaction\n   wire \t  double_write; // double write transaction\n   wire \t  burst_req_denied; // request of burst transaction is not acknowledged\n   wire \t  burst_backup_inc; // burst transaction backup counter increment\n   wire [1:0] \t  burst_backup_inc_cnt;  // Incremented burst backup counter\n"], ["oh/elink/dv/elink_e16_model.v@4258:4268", "   wire \t  make_gap;     // make gap in the transaction frame\n   wire \t  single_write; // single write transaction\n   wire \t  double_write; // double write transaction\n   wire \t  burst_req_denied; // request of burst transaction is not acknowledged\n   wire \t  burst_backup_inc; // burst transaction backup counter increment\n   wire [1:0] \t  burst_backup_inc_cnt;  // Incremented burst backup counter\n   wire [1:0] \t  burst_backup_next_cnt; // Next burst backup counter value\n   wire \t  freeze_fifo;           // FIFO and main counter advance should stoped\n   wire sel_ref_byte0; // select byte0 from the reference information of the transaction \n   wire sel_ref_byte1; // select byte1 from the reference information of the transaction \n   wire sel_ref_byte2; // select byte2 from the reference information of the transaction \n"], ["oh/elink/dv/elink_e16_model.v@4255:4265", "   wire [LW-1:0]  byte_odd_mux;\n   wire [LW-1:0]  byte_even;\n   wire [LW-1:0]  byte_odd;\n   wire \t  make_gap;     // make gap in the transaction frame\n   wire \t  single_write; // single write transaction\n   wire \t  double_write; // double write transaction\n   wire \t  burst_req_denied; // request of burst transaction is not acknowledged\n   wire \t  burst_backup_inc; // burst transaction backup counter increment\n   wire [1:0] \t  burst_backup_inc_cnt;  // Incremented burst backup counter\n   wire [1:0] \t  burst_backup_next_cnt; // Next burst backup counter value\n   wire \t  freeze_fifo;           // FIFO and main counter advance should stoped\n"], ["oh/elink/dv/elink_e16_model.v@4259:4269", "   wire \t  single_write; // single write transaction\n   wire \t  double_write; // double write transaction\n   wire \t  burst_req_denied; // request of burst transaction is not acknowledged\n   wire \t  burst_backup_inc; // burst transaction backup counter increment\n   wire [1:0] \t  burst_backup_inc_cnt;  // Incremented burst backup counter\n   wire [1:0] \t  burst_backup_next_cnt; // Next burst backup counter value\n   wire \t  freeze_fifo;           // FIFO and main counter advance should stoped\n   wire sel_ref_byte0; // select byte0 from the reference information of the transaction \n   wire sel_ref_byte1; // select byte1 from the reference information of the transaction \n   wire sel_ref_byte2; // select byte2 from the reference information of the transaction \n   wire sel_ref_byte3; // select byte3 from the reference information of the transaction \n"], ["oh/elink/dv/elink_e16_model.v@4249:4259", "   wire \t  jump_3entries_read;  // jump over data part of the transaction on read\n   wire \t  jump_1entry; // single entry \"jump\"\n   wire [2:0] \t  jump_value;  // value of the jump for read pointer\n   wire \t  txo_op_ack;       // \"operation\" acknowledge\n   wire \t  txo_op_ack_first; // first \"operation\" acknowledge cycle\n   wire [LW-1:0]  byte_even_mux;\n   wire [LW-1:0]  byte_odd_mux;\n   wire [LW-1:0]  byte_even;\n   wire [LW-1:0]  byte_odd;\n   wire \t  make_gap;     // make gap in the transaction frame\n   wire \t  single_write; // single write transaction\n"], ["oh/elink/dv/elink_e16_model.v@4250:4260", "   wire \t  jump_1entry; // single entry \"jump\"\n   wire [2:0] \t  jump_value;  // value of the jump for read pointer\n   wire \t  txo_op_ack;       // \"operation\" acknowledge\n   wire \t  txo_op_ack_first; // first \"operation\" acknowledge cycle\n   wire [LW-1:0]  byte_even_mux;\n   wire [LW-1:0]  byte_odd_mux;\n   wire [LW-1:0]  byte_even;\n   wire [LW-1:0]  byte_odd;\n   wire \t  make_gap;     // make gap in the transaction frame\n   wire \t  single_write; // single write transaction\n   wire \t  double_write; // double write transaction\n"], ["oh/elink/dv/elink_e16_model.v@4256:4266", "   wire [LW-1:0]  byte_even;\n   wire [LW-1:0]  byte_odd;\n   wire \t  make_gap;     // make gap in the transaction frame\n   wire \t  single_write; // single write transaction\n   wire \t  double_write; // double write transaction\n   wire \t  burst_req_denied; // request of burst transaction is not acknowledged\n   wire \t  burst_backup_inc; // burst transaction backup counter increment\n   wire [1:0] \t  burst_backup_inc_cnt;  // Incremented burst backup counter\n   wire [1:0] \t  burst_backup_next_cnt; // Next burst backup counter value\n   wire \t  freeze_fifo;           // FIFO and main counter advance should stoped\n   wire sel_ref_byte0; // select byte0 from the reference information of the transaction \n"]], "Diff Content": {"Delete": [[4259, "   wire \t  single_write; // single write transaction\n"]], "Add": []}}