Source Block: oh/elink/dv/elink_e16_model.v@1665:1675@HdlStmAssign
       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);

   //########################################
   //# Transaction assembly and distribution
   //########################################


Diff Content:
- 1670    assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);
+ 1670    link_rxi_rd link_rxi_rd(/*AUTOINST*/
+ 1670 			   .rxi_rd_wait		(rxi_rd_wait),
+ 1670 			   .c0_rdmesh_frame_out	(c0_rdmesh_frame_out),
+ 1670 			   .c0_rdmesh_tran_out	(c0_rdmesh_tran_out[2*LW-1:0]),
+ 1670 			   .c1_rdmesh_frame_out	(c1_rdmesh_frame_out),
+ 1670 			   .c1_rdmesh_tran_out	(c1_rdmesh_tran_out[2*LW-1:0]),
+ 1670 			   .c2_rdmesh_frame_out	(c2_rdmesh_frame_out),
+ 1670 			   .c2_rdmesh_tran_out	(c2_rdmesh_tran_out[2*LW-1:0]),
+ 1670 			   .c3_rdmesh_frame_out	(c3_rdmesh_frame_out),
+ 1670 			   .c3_rdmesh_tran_out	(c3_rdmesh_tran_out[2*LW-1:0]),
+ 1670 			   .reset		(reset),
+ 1670 			   .ext_yid_k		(ext_yid_k[3:0]),
+ 1670 			   .ext_xid_k		(ext_xid_k[3:0]),
+ 1670 			   .vertical_k		(vertical_k),
+ 1670 			   .who_am_i		(who_am_i[3:0]),
+ 1670 			   .cfg_extcomp_dis	(cfg_extcomp_dis),
+ 1670 			   .rxi_data		(rxi_data[LW-1:0]),
+ 1670 			   .rxi_lclk		(rxi_lclk),
+ 1670 			   .rxi_frame		(rxi_frame),
+ 1670 			   .c0_clk_in		(c0_clk_in),
+ 1670 			   .c1_clk_in		(c1_clk_in),
+ 1670 			   .c2_clk_in		(c2_clk_in),
+ 1670 			   .c3_clk_in		(c3_clk_in),
+ 1670 			   .c0_rdmesh_wait_in	(c0_rdmesh_wait_in),
+ 1670 			   .c1_rdmesh_wait_in	(c1_rdmesh_wait_in),
+ 1670 			   .c2_rdmesh_wait_in	(c2_rdmesh_wait_in),
+ 1670 			   .c3_rdmesh_wait_in	(c3_rdmesh_wait_in));

Clone Blocks:
Clone Blocks 1:
oh/elink/dv/elink_e16_model.v@2283:2293

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   //# Gray Pointer Conversion (for more reliable synchronization)!
   assign rd_gray_next[FAD:0]  = {1'b0,rd_binary_next[FAD:1]} ^ rd_binary_next[FAD:0];

   //# FIFO empty indication
   assign fifo_empty_next = (rd_gray_next[FAD:0]==wr_gray_pointer[FAD:0]);

   always @ (posedge cclk or posedge reset)

Clone Blocks 2:
oh/elink/dv/elink_e16_model.v@1662:1672
     if(reset)
       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
     else if(fifo_read)
       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);

   //########################################

Clone Blocks 3:
oh/elink/dv/elink_e16_model.v@3985:3996

   assign rd_addr_tlc[FAD-1:0]       = rd_binary_pointer_tlc[FAD-1:0];
   assign rd_binary_next_tlc[FAD:0]  = rd_binary_pointer_tlc[FAD:0] + rd_read_tlc[FAD:0];

   //# Gray Pointer Conversion (for more reliable synchronization)!
   assign rd_gray_next_tlc[FAD:0]  = {1'b0,rd_binary_next_tlc[FAD:1]} ^ 
                                           rd_binary_next_tlc[FAD:0];

   //#
   //# address and controls of the next transaction to be dispatch
   //# * the size is actually FAD-1:0 but since FAD=3 causes syntax
   //#   error for (FAD-3){1'b0} expression, we use a biger range

Clone Blocks 4:
oh/elink/dv/elink_e16_model.v@1663:1673
       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
     else if(fifo_read)
       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);

   //########################################
   //# Transaction assembly and distribution

Clone Blocks 5:
oh/elink/dv/elink_e16_model.v@1662:1672
     if(reset)
       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
     else if(fifo_read)
       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);

   //########################################

Clone Blocks 6:
oh/elink/dv/elink_e16_model.v@1663:1673
       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
     else if(fifo_read)
       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);

   //########################################
   //# Transaction assembly and distribution

