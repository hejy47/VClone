{"Source Block": ["oh/elink/dv/elink_e16_model.v@2266:2287@HdlStmProcess", "\n   //#############################\n   //# FIFO Read State Machine\n   //#############################\n    \n   always @(posedge cclk or posedge reset)\n     if(reset)\n       begin\n\t  rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n\t  rd_gray_pointer[FAD:0]    <= {(FAD+1){1'b0}};\n       end\n     else if(cclk_en)\n       if(fifo_read)\n\t begin\n\t    rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\t    rd_gray_pointer[FAD:0]    <= rd_gray_next[FAD:0];\t  \n\t end\n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n"], "Clone Blocks": [["oh/memory/hdl/fifo_empty_block.v@38:58", "   wire [AW:0]     rd_binary_next;\n   wire [AW:0]     rd_gray_next;\n   \n   \n   //Counter States\n   always @(posedge rd_clk or posedge reset)\n     if(reset)\n       begin\n\t  rd_binary_pointer[AW:0]     <= {(AW+1){1'b0}};\n\t  rd_gray_pointer[AW:0]       <= {(AW+1){1'b0}};\n       end\n     else if(rd_read)\n       begin\n\t  rd_binary_pointer[AW:0]     <= rd_binary_next[AW:0];\t  \n\t  rd_gray_pointer[AW:0]       <= rd_gray_next[AW:0];\t  \n       end\n\n   //Read Address\n   assign rd_addr[AW-1:0]        = rd_binary_pointer[AW-1:0];\n\n   //Updating binary pointer\n"], ["oh/elink/dv/elink_e16_model.v@1662:1672", "     if(reset)\n       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n"], ["oh/elink/dv/elink_e16_model.v@1663:1673", "       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n   //# Transaction assembly and distribution\n"], ["oh/elink/dv/elink_e16_model.v@1656:1670", "     if(reset)\n       fifo_read <= 1'b0;\n     else\n       fifo_read <= ~(fifo_empty | stop_fifo_read);\n\n   always @(posedge rxi_lclk or posedge reset)\n     if(reset)\n       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n"], ["oh/elink/dv/elink_e16_model.v@3969:3989", "\n   //#############################\n   //# FIFO Read State Machine\n   //#############################\n    \n   always @(posedge txo_lclk or posedge reset)\n     if(reset)\n       begin\n\t  rd_binary_pointer_tlc[FAD:0]  <= {(FAD+1){1'b0}};\n\t  rd_gray_pointer_tlc[FAD:0]    <= {(FAD+1){1'b0}};\n       end\n     else if(|(rd_read_tlc[FAD:0]))\n       begin\n\t  rd_binary_pointer_tlc[FAD:0]  <= rd_binary_next_tlc[FAD:0];\t  \n\t  rd_gray_pointer_tlc[FAD:0]    <= rd_gray_next_tlc[FAD:0];\t  \n       end\n\n   assign rd_addr_tlc[FAD-1:0]       = rd_binary_pointer_tlc[FAD-1:0];\n   assign rd_binary_next_tlc[FAD:0]  = rd_binary_pointer_tlc[FAD:0] + rd_read_tlc[FAD:0];\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n"], ["oh/elink/dv/elink_e16_model.v@1662:1672", "     if(reset)\n       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n"], ["oh/elink/dv/elink_e16_model.v@1663:1673", "       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n   //# Transaction assembly and distribution\n"]], "Diff Content": {"Delete": [[2271, "   always @(posedge cclk or posedge reset)\n"], [2274, "\t  rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n"], [2275, "\t  rd_gray_pointer[FAD:0]    <= {(FAD+1){1'b0}};\n"], [2277, "     else if(cclk_en)\n"], [2278, "       if(fifo_read)\n"], [2279, "\t begin\n"], [2280, "\t    rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n"], [2281, "\t    rd_gray_pointer[FAD:0]    <= rd_gray_next[FAD:0];\t  \n"], [2282, "\t end\n"]], "Add": [[2275, "\t  frame_reg     <= 1'b0;\n"], [2275, "\t  frame_reg_del <= 1'b0;\n"], [2275, "       end\n"], [2275, "     else\n"], [2275, "       begin\n"], [2275, "\t  frame_reg     <= rxi_frame;\n"], [2275, "\t  frame_reg_del <= frame_reg;\n"]]}}