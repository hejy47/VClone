{"Source Block": ["oh/elink/dv/elink_e16_model.v@1665:1675@HdlStmAssign", "       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n   //# Transaction assembly and distribution\n   //########################################\n\n"], "Clone Blocks": [["oh/elink/dv/elink_e16_model.v@2283:2293", "\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n   assign rd_gray_next[FAD:0]  = {1'b0,rd_binary_next[FAD:1]} ^ rd_binary_next[FAD:0];\n\n   //# FIFO empty indication\n   assign fifo_empty_next = (rd_gray_next[FAD:0]==wr_gray_pointer[FAD:0]);\n\n   always @ (posedge cclk or posedge reset)\n"], ["oh/elink/dv/elink_e16_model.v@1662:1672", "     if(reset)\n       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n"], ["oh/elink/dv/elink_e16_model.v@3985:3996", "\n   assign rd_addr_tlc[FAD-1:0]       = rd_binary_pointer_tlc[FAD-1:0];\n   assign rd_binary_next_tlc[FAD:0]  = rd_binary_pointer_tlc[FAD:0] + rd_read_tlc[FAD:0];\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n   assign rd_gray_next_tlc[FAD:0]  = {1'b0,rd_binary_next_tlc[FAD:1]} ^ \n                                           rd_binary_next_tlc[FAD:0];\n\n   //#\n   //# address and controls of the next transaction to be dispatch\n   //# * the size is actually FAD-1:0 but since FAD=3 causes syntax\n   //#   error for (FAD-3){1'b0} expression, we use a biger range\n"], ["oh/elink/dv/elink_e16_model.v@1663:1673", "       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n   //# Transaction assembly and distribution\n"], ["oh/elink/dv/elink_e16_model.v@1662:1672", "     if(reset)\n       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n"], ["oh/elink/dv/elink_e16_model.v@1663:1673", "       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n   //# Transaction assembly and distribution\n"]], "Diff Content": {"Delete": [[1670, "   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n"]], "Add": [[1670, "   link_rxi_rd link_rxi_rd(/*AUTOINST*/\n"], [1670, "\t\t\t   .rxi_rd_wait\t\t(rxi_rd_wait),\n"], [1670, "\t\t\t   .c0_rdmesh_frame_out\t(c0_rdmesh_frame_out),\n"], [1670, "\t\t\t   .c0_rdmesh_tran_out\t(c0_rdmesh_tran_out[2*LW-1:0]),\n"], [1670, "\t\t\t   .c1_rdmesh_frame_out\t(c1_rdmesh_frame_out),\n"], [1670, "\t\t\t   .c1_rdmesh_tran_out\t(c1_rdmesh_tran_out[2*LW-1:0]),\n"], [1670, "\t\t\t   .c2_rdmesh_frame_out\t(c2_rdmesh_frame_out),\n"], [1670, "\t\t\t   .c2_rdmesh_tran_out\t(c2_rdmesh_tran_out[2*LW-1:0]),\n"], [1670, "\t\t\t   .c3_rdmesh_frame_out\t(c3_rdmesh_frame_out),\n"], [1670, "\t\t\t   .c3_rdmesh_tran_out\t(c3_rdmesh_tran_out[2*LW-1:0]),\n"], [1670, "\t\t\t   .reset\t\t(reset),\n"], [1670, "\t\t\t   .ext_yid_k\t\t(ext_yid_k[3:0]),\n"], [1670, "\t\t\t   .ext_xid_k\t\t(ext_xid_k[3:0]),\n"], [1670, "\t\t\t   .vertical_k\t\t(vertical_k),\n"], [1670, "\t\t\t   .who_am_i\t\t(who_am_i[3:0]),\n"], [1670, "\t\t\t   .cfg_extcomp_dis\t(cfg_extcomp_dis),\n"], [1670, "\t\t\t   .rxi_data\t\t(rxi_data[LW-1:0]),\n"], [1670, "\t\t\t   .rxi_lclk\t\t(rxi_lclk),\n"], [1670, "\t\t\t   .rxi_frame\t\t(rxi_frame),\n"], [1670, "\t\t\t   .c0_clk_in\t\t(c0_clk_in),\n"], [1670, "\t\t\t   .c1_clk_in\t\t(c1_clk_in),\n"], [1670, "\t\t\t   .c2_clk_in\t\t(c2_clk_in),\n"], [1670, "\t\t\t   .c3_clk_in\t\t(c3_clk_in),\n"], [1670, "\t\t\t   .c0_rdmesh_wait_in\t(c0_rdmesh_wait_in),\n"], [1670, "\t\t\t   .c1_rdmesh_wait_in\t(c1_rdmesh_wait_in),\n"], [1670, "\t\t\t   .c2_rdmesh_wait_in\t(c2_rdmesh_wait_in),\n"], [1670, "\t\t\t   .c3_rdmesh_wait_in\t(c3_rdmesh_wait_in));\n"]]}}