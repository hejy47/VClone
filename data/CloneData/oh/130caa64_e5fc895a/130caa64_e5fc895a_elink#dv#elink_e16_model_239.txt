Source Block: oh/elink/dv/elink_e16_model.v@2266:2287@HdlStmProcess

   //#############################
   //# FIFO Read State Machine
   //#############################
    
   always @(posedge cclk or posedge reset)
     if(reset)
       begin
	  rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
	  rd_gray_pointer[FAD:0]    <= {(FAD+1){1'b0}};
       end
     else if(cclk_en)
       if(fifo_read)
	 begin
	    rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  
	    rd_gray_pointer[FAD:0]    <= rd_gray_next[FAD:0];	  
	 end

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   //# Gray Pointer Conversion (for more reliable synchronization)!

Diff Content:
- 2271    always @(posedge cclk or posedge reset)
- 2274 	  rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
- 2275 	  rd_gray_pointer[FAD:0]    <= {(FAD+1){1'b0}};
- 2277      else if(cclk_en)
- 2278        if(fifo_read)
- 2279 	 begin
- 2280 	    rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  
- 2281 	    rd_gray_pointer[FAD:0]    <= rd_gray_next[FAD:0];	  
- 2282 	 end
+ 2275 	  frame_reg     <= 1'b0;
+ 2275 	  frame_reg_del <= 1'b0;
+ 2275        end
+ 2275      else
+ 2275        begin
+ 2275 	  frame_reg     <= rxi_frame;
+ 2275 	  frame_reg_del <= frame_reg;

Clone Blocks:
Clone Blocks 1:
oh/memory/hdl/fifo_empty_block.v@38:58
   wire [AW:0]     rd_binary_next;
   wire [AW:0]     rd_gray_next;
   
   
   //Counter States
   always @(posedge rd_clk or posedge reset)
     if(reset)
       begin
	  rd_binary_pointer[AW:0]     <= {(AW+1){1'b0}};
	  rd_gray_pointer[AW:0]       <= {(AW+1){1'b0}};
       end
     else if(rd_read)
       begin
	  rd_binary_pointer[AW:0]     <= rd_binary_next[AW:0];	  
	  rd_gray_pointer[AW:0]       <= rd_gray_next[AW:0];	  
       end

   //Read Address
   assign rd_addr[AW-1:0]        = rd_binary_pointer[AW-1:0];

   //Updating binary pointer

Clone Blocks 2:
oh/elink/dv/elink_e16_model.v@1662:1672
     if(reset)
       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
     else if(fifo_read)
       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);

   //########################################

Clone Blocks 3:
oh/elink/dv/elink_e16_model.v@1663:1673
       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
     else if(fifo_read)
       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);

   //########################################
   //# Transaction assembly and distribution

Clone Blocks 4:
oh/elink/dv/elink_e16_model.v@1656:1670
     if(reset)
       fifo_read <= 1'b0;
     else
       fifo_read <= ~(fifo_empty | stop_fifo_read);

   always @(posedge rxi_lclk or posedge reset)
     if(reset)
       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
     else if(fifo_read)
       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);

Clone Blocks 5:
oh/elink/dv/elink_e16_model.v@3969:3989

   //#############################
   //# FIFO Read State Machine
   //#############################
    
   always @(posedge txo_lclk or posedge reset)
     if(reset)
       begin
	  rd_binary_pointer_tlc[FAD:0]  <= {(FAD+1){1'b0}};
	  rd_gray_pointer_tlc[FAD:0]    <= {(FAD+1){1'b0}};
       end
     else if(|(rd_read_tlc[FAD:0]))
       begin
	  rd_binary_pointer_tlc[FAD:0]  <= rd_binary_next_tlc[FAD:0];	  
	  rd_gray_pointer_tlc[FAD:0]    <= rd_gray_next_tlc[FAD:0];	  
       end

   assign rd_addr_tlc[FAD-1:0]       = rd_binary_pointer_tlc[FAD-1:0];
   assign rd_binary_next_tlc[FAD:0]  = rd_binary_pointer_tlc[FAD:0] + rd_read_tlc[FAD:0];

   //# Gray Pointer Conversion (for more reliable synchronization)!

Clone Blocks 6:
oh/elink/dv/elink_e16_model.v@1662:1672
     if(reset)
       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
     else if(fifo_read)
       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);

   //########################################

Clone Blocks 7:
oh/elink/dv/elink_e16_model.v@1663:1673
       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};
     else if(fifo_read)
       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];	  

   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];
   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};

   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);

   //########################################
   //# Transaction assembly and distribution

