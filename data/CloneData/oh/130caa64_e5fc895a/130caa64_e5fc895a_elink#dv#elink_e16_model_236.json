{"Source Block": ["oh/elink/dv/elink_e16_model.v@2247:2258@HdlStmAssign", "   assign wr_addr_rlc[FAD-1:0]       = wr_binary_pointer_rlc[FAD-1:0];\n   assign wr_binary_next_rlc[FAD:0]  = wr_binary_pointer_rlc[FAD:0] + \n\t\t\t\t       {{(FAD){1'b0}},wr_write_rlc};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n   assign wr_gray_next_rlc[FAD:0] = {1'b0,wr_binary_next_rlc[FAD:1]} ^ \n\t\t\t\t    wr_binary_next_rlc[FAD:0];\n\n   //# FIFO full indication\n   assign fifo_full_next_rlc = \n\t\t\t   (wr_gray_next_rlc[FAD-2:0] == rd_gray_pointer_rlc[FAD-2:0]) &\n                           (wr_gray_next_rlc[FAD]     ^  rd_gray_pointer_rlc[FAD])     &\n"], "Clone Blocks": [["oh/elink/dv/elink_e16_model.v@2243:2254", "\t  wr_binary_pointer_rlc[FAD:0] <= wr_binary_next_rlc[FAD:0];\t  \n\t  wr_gray_pointer_rlc[FAD:0]   <= wr_gray_next_rlc[FAD:0];\t  \n       end\t  \n\n   assign wr_addr_rlc[FAD-1:0]       = wr_binary_pointer_rlc[FAD-1:0];\n   assign wr_binary_next_rlc[FAD:0]  = wr_binary_pointer_rlc[FAD:0] + \n\t\t\t\t       {{(FAD){1'b0}},wr_write_rlc};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n   assign wr_gray_next_rlc[FAD:0] = {1'b0,wr_binary_next_rlc[FAD:1]} ^ \n\t\t\t\t    wr_binary_next_rlc[FAD:0];\n\n"], ["oh/elink/dv/elink_e16_model.v@2251:2264", "   //# Gray Pointer Conversion (for more reliable synchronization)!\n   assign wr_gray_next_rlc[FAD:0] = {1'b0,wr_binary_next_rlc[FAD:1]} ^ \n\t\t\t\t    wr_binary_next_rlc[FAD:0];\n\n   //# FIFO full indication\n   assign fifo_full_next_rlc = \n\t\t\t   (wr_gray_next_rlc[FAD-2:0] == rd_gray_pointer_rlc[FAD-2:0]) &\n                           (wr_gray_next_rlc[FAD]     ^  rd_gray_pointer_rlc[FAD])     &\n                           (wr_gray_next_rlc[FAD-1]   ^  rd_gray_pointer_rlc[FAD-1]);\n\t\t\t      \n   always @ (posedge rxi_lclk or posedge reset)\n     if(reset)\n       fifo_full_rlc <= 1'b0;\n     else \n"], ["oh/elink/dv/elink_e16_model.v@2242:2252", "       begin\n\t  wr_binary_pointer_rlc[FAD:0] <= wr_binary_next_rlc[FAD:0];\t  \n\t  wr_gray_pointer_rlc[FAD:0]   <= wr_gray_next_rlc[FAD:0];\t  \n       end\t  \n\n   assign wr_addr_rlc[FAD-1:0]       = wr_binary_pointer_rlc[FAD-1:0];\n   assign wr_binary_next_rlc[FAD:0]  = wr_binary_pointer_rlc[FAD:0] + \n\t\t\t\t       {{(FAD){1'b0}},wr_write_rlc};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n   assign wr_gray_next_rlc[FAD:0] = {1'b0,wr_binary_next_rlc[FAD:1]} ^ \n"], ["oh/elink/dv/elink_e16_model.v@3952:3962", "   \n   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];\n   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},wr_write};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n   assign wr_gray_next[FAD:0] = {1'b0,wr_binary_next[FAD:1]} ^ wr_binary_next[FAD:0];\n\n   //# FIFO full indication\n   assign wr_fifo_full_next = (wr_gray_next[FAD-2:0] == rd_gray_pointer[FAD-2:0]) &\n                              (wr_gray_next[FAD]     ^  rd_gray_pointer[FAD])     &\n                              (wr_gray_next[FAD-1]   ^  rd_gray_pointer[FAD-1]);\n"]], "Diff Content": {"Delete": [[2252, "   assign wr_gray_next_rlc[FAD:0] = {1'b0,wr_binary_next_rlc[FAD:1]} ^ \n"], [2253, "\t\t\t\t    wr_binary_next_rlc[FAD:0];\n"]], "Add": [[2253, "   wire \t   my_tran;      // this transaction is dedicated to current rxi_buffer\n"], [2253, "   wire \t   new_tran;     // first cycle of the new transaction\n"], [2253, "   wire [2*LW:0]   fifo_data_in; // even and odd bytes combined into short words for fifo \n"], [2253, "   wire [2*LW:0]   fifo_data_out;// output of the fifo\n"], [2253, "   wire [FAD:0]\t   wr_binary_next; // next value of the write pointer\n"], [2253, "   wire [FAD:0]    rd_binary_next; // next value of the read pointer\n"], [2253, "   wire \t   fifo_write; // write into the fifo\n"], [2253, "   wire [FAD-1:0]  wr_addr; // write address of the fifo\n"], [2253, "   wire [FAD-1:0]  rd_addr; // read address of the fifo\n"], [2253, "   wire \t   fifo_empty; // indication of the empty fifo\n"], [2253, "   wire \t   stop_fifo_read; //one of the secondary fifos is full (stop reading)\n"]]}}