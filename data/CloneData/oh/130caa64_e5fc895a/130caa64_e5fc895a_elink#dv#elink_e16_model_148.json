{"Source Block": ["oh/elink/dv/elink_e16_model.v@1511:1521@HdlIdDef", "\n   wire \t   my_tran;      // this transaction is dedicated to current rxi_buffer\n   wire \t   new_tran;     // first cycle of the new transaction\n   wire [2*LW:0]   fifo_data_in; // even and odd bytes combined into short words for fifo \n   wire [2*LW:0]   fifo_data_out;// output of the fifo\n   wire [FAD:0]\t   wr_binary_next; // next value of the write pointer\n   wire [FAD:0]    rd_binary_next; // next value of the read pointer\n   wire \t   fifo_write; // write into the fifo\n   wire [FAD-1:0]  wr_addr; // write address of the fifo\n   wire [FAD-1:0]  rd_addr; // read address of the fifo\n   wire \t   fifo_empty; // indication of the empty fifo\n"], "Clone Blocks": [["oh/elink/dv/elink_e16_model.v@1510:1520", "   // #########\n\n   wire \t   my_tran;      // this transaction is dedicated to current rxi_buffer\n   wire \t   new_tran;     // first cycle of the new transaction\n   wire [2*LW:0]   fifo_data_in; // even and odd bytes combined into short words for fifo \n   wire [2*LW:0]   fifo_data_out;// output of the fifo\n   wire [FAD:0]\t   wr_binary_next; // next value of the write pointer\n   wire [FAD:0]    rd_binary_next; // next value of the read pointer\n   wire \t   fifo_write; // write into the fifo\n   wire [FAD-1:0]  wr_addr; // write address of the fifo\n   wire [FAD-1:0]  rd_addr; // read address of the fifo\n"], ["oh/elink/dv/elink_e16_model.v@2176:2186", "\n   wire \t      wr_write_rlc; // FIFO write control\n   wire [FAD-1:0]     wr_addr_rlc;\n   wire [FAD:0]       wr_binary_next_rlc;\n   wire [FAD:0]       wr_gray_next_rlc;\n   wire \t      fifo_full_next_rlc;\n   wire [FAD:0]       rd_gray_pointer_rlc;\n\n   wire [FAD-1:0]     rd_addr;\n   wire [FAD:0]       rd_binary_next;\n   wire [FAD:0]       rd_gray_next;\n"], ["oh/elink/dv/elink_e16_model.v@1509:1519", "   // # Wires\n   // #########\n\n   wire \t   my_tran;      // this transaction is dedicated to current rxi_buffer\n   wire \t   new_tran;     // first cycle of the new transaction\n   wire [2*LW:0]   fifo_data_in; // even and odd bytes combined into short words for fifo \n   wire [2*LW:0]   fifo_data_out;// output of the fifo\n   wire [FAD:0]\t   wr_binary_next; // next value of the write pointer\n   wire [FAD:0]    rd_binary_next; // next value of the read pointer\n   wire \t   fifo_write; // write into the fifo\n   wire [FAD-1:0]  wr_addr; // write address of the fifo\n"], ["oh/elink/dv/elink_e16_model.v@1515:1525", "   wire [2*LW:0]   fifo_data_out;// output of the fifo\n   wire [FAD:0]\t   wr_binary_next; // next value of the write pointer\n   wire [FAD:0]    rd_binary_next; // next value of the read pointer\n   wire \t   fifo_write; // write into the fifo\n   wire [FAD-1:0]  wr_addr; // write address of the fifo\n   wire [FAD-1:0]  rd_addr; // read address of the fifo\n   wire \t   fifo_empty; // indication of the empty fifo\n   wire \t   stop_fifo_read; //one of the secondary fifos is full (stop reading)\n   \n   // ####################################################\n   // #        Sample input transaction\n"], ["oh/elink/dv/elink_e16_model.v@1512:1522", "   wire \t   my_tran;      // this transaction is dedicated to current rxi_buffer\n   wire \t   new_tran;     // first cycle of the new transaction\n   wire [2*LW:0]   fifo_data_in; // even and odd bytes combined into short words for fifo \n   wire [2*LW:0]   fifo_data_out;// output of the fifo\n   wire [FAD:0]\t   wr_binary_next; // next value of the write pointer\n   wire [FAD:0]    rd_binary_next; // next value of the read pointer\n   wire \t   fifo_write; // write into the fifo\n   wire [FAD-1:0]  wr_addr; // write address of the fifo\n   wire [FAD-1:0]  rd_addr; // read address of the fifo\n   wire \t   fifo_empty; // indication of the empty fifo\n   wire \t   stop_fifo_read; //one of the secondary fifos is full (stop reading)\n"], ["oh/elink/dv/elink_e16_model.v@1513:1523", "   wire \t   new_tran;     // first cycle of the new transaction\n   wire [2*LW:0]   fifo_data_in; // even and odd bytes combined into short words for fifo \n   wire [2*LW:0]   fifo_data_out;// output of the fifo\n   wire [FAD:0]\t   wr_binary_next; // next value of the write pointer\n   wire [FAD:0]    rd_binary_next; // next value of the read pointer\n   wire \t   fifo_write; // write into the fifo\n   wire [FAD-1:0]  wr_addr; // write address of the fifo\n   wire [FAD-1:0]  rd_addr; // read address of the fifo\n   wire \t   fifo_empty; // indication of the empty fifo\n   wire \t   stop_fifo_read; //one of the secondary fifos is full (stop reading)\n   \n"], ["oh/elink/dv/elink_e16_model.v@3864:3874", "   wire [2*LW-1:0] traninfo1_tlc;\n   wire [2*LW-1:0] traninfo2_tlc;\n\n   wire [FAD-1:0] wr_addr;\t\n   wire \t  wr_write;\n   wire \t  tran_written;\n   wire [FAD:0]   rd_gray_pointer;\t\n   wire \t  wr_fifo_full_next;\n   wire [FAD:0]   wr_gray_next;\n   wire [FAD:0]   wr_binary_next;\n\n"], ["oh/elink/dv/elink_e16_model.v@1514:1524", "   wire [2*LW:0]   fifo_data_in; // even and odd bytes combined into short words for fifo \n   wire [2*LW:0]   fifo_data_out;// output of the fifo\n   wire [FAD:0]\t   wr_binary_next; // next value of the write pointer\n   wire [FAD:0]    rd_binary_next; // next value of the read pointer\n   wire \t   fifo_write; // write into the fifo\n   wire [FAD-1:0]  wr_addr; // write address of the fifo\n   wire [FAD-1:0]  rd_addr; // read address of the fifo\n   wire \t   fifo_empty; // indication of the empty fifo\n   wire \t   stop_fifo_read; //one of the secondary fifos is full (stop reading)\n   \n   // ####################################################\n"]], "Diff Content": {"Delete": [[1516, "   wire [FAD:0]\t   wr_binary_next; // next value of the write pointer\n"]], "Add": []}}