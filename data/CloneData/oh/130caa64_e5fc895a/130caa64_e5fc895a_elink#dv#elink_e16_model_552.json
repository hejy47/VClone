{"Source Block": ["oh/elink/dv/elink_e16_model.v@4419:4430@HdlStmAssign", "\n   //# 4 entries jump on burst transaction (counter comparison is redundant but used\n   //# here to underline the mutex between different jumps)\n   assign jump_4entries = burst_tran & (txo_launch_cnt[2:0] == 3'b110);\n   //# 3 entries jump on single write or read\n   assign jump_3entries = jump_3entries_write | \n\t\t\t  jump_3entries_read;\n   //# single write will jump 3 entries to the end of the transaction\n   assign jump_3entries_write = single_write & (txo_launch_cnt[2:0] == 3'b100); \n   //# read transaction will jump 3 entries over the data part of that transaction\n   //assign jump_3entries_read = ~ref_write & (txo_launch_cnt[2:0] == 3'b010);\n   //# read jump over data feature is disabled because of the test-and-set instr.\n"], "Clone Blocks": [["oh/elink/dv/elink_e16_model.v@4426:4436", "   //# single write will jump 3 entries to the end of the transaction\n   assign jump_3entries_write = single_write & (txo_launch_cnt[2:0] == 3'b100); \n   //# read transaction will jump 3 entries over the data part of that transaction\n   //assign jump_3entries_read = ~ref_write & (txo_launch_cnt[2:0] == 3'b010);\n   //# read jump over data feature is disabled because of the test-and-set instr.\n   assign jump_3entries_read = 1'b0;\n   //# single jump when acknowledged and no other jumps and no freeze control\n   assign jump_1entry = ~(jump_4entries | jump_3entries | freeze_fifo) & txo_op_ack;\n\n   //###########################################################\n   //# Counter/FIFO Read Pointer increment prevention mechanism\n"], ["oh/elink/dv/elink_e16_model.v@4422:4432", "   assign jump_4entries = burst_tran & (txo_launch_cnt[2:0] == 3'b110);\n   //# 3 entries jump on single write or read\n   assign jump_3entries = jump_3entries_write | \n\t\t\t  jump_3entries_read;\n   //# single write will jump 3 entries to the end of the transaction\n   assign jump_3entries_write = single_write & (txo_launch_cnt[2:0] == 3'b100); \n   //# read transaction will jump 3 entries over the data part of that transaction\n   //assign jump_3entries_read = ~ref_write & (txo_launch_cnt[2:0] == 3'b010);\n   //# read jump over data feature is disabled because of the test-and-set instr.\n   assign jump_3entries_read = 1'b0;\n   //# single jump when acknowledged and no other jumps and no freeze control\n"], ["oh/elink/dv/elink_e16_model.v@4417:4427", "   //#            --------------------------------------------\n   //####################################################################\n\n   //# 4 entries jump on burst transaction (counter comparison is redundant but used\n   //# here to underline the mutex between different jumps)\n   assign jump_4entries = burst_tran & (txo_launch_cnt[2:0] == 3'b110);\n   //# 3 entries jump on single write or read\n   assign jump_3entries = jump_3entries_write | \n\t\t\t  jump_3entries_read;\n   //# single write will jump 3 entries to the end of the transaction\n   assign jump_3entries_write = single_write & (txo_launch_cnt[2:0] == 3'b100); \n"]], "Diff Content": {"Delete": [[4424, "   assign jump_3entries = jump_3entries_write | \n"], [4425, "\t\t\t  jump_3entries_read;\n"]], "Add": []}}