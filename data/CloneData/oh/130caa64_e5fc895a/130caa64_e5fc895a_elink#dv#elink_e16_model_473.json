{"Source Block": ["oh/elink/dv/elink_e16_model.v@4130:4144@HdlStmProcess", " \t  data_even_lsl[LW-1:0]  <= data_even_in[LW-1:0];\n\t  data_odd_lsl[LW-1:0]   <= data_odd_in[LW-1:0];\n       end\n\n   // # Creating data that is stable high\n   always @ (negedge txo_lclk or posedge reset)\n     if (reset)\n       data_even_lsh[LW-1:0] <= {(LW){1'b0}};\n     else\n       data_even_lsh[LW-1:0]  <= data_even_lsl[LW-1:0];\n\n   // #################################\n   // # Dual data rate implementation\n   // #################################\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[4135, "   always @ (negedge txo_lclk or posedge reset)\n"], [4136, "     if (reset)\n"], [4137, "       data_even_lsh[LW-1:0] <= {(LW){1'b0}};\n"], [4138, "     else\n"], [4139, "       data_even_lsh[LW-1:0]  <= data_even_lsl[LW-1:0];\n"]], "Add": [[4139, "module link_txo_channel (/*AUTOARG*/\n"], [4139, "   emesh_wait_out, txo_launch_req_tlc, txo_rotate_dis, tran_frame_tlc,\n"], [4139, "   tran_byte_even_tlc, tran_byte_odd_tlc,\n"], [4139, "   cclk, cclk_en, txo_lclk, reset, txo_rd, txo_cid, cfg_burst_dis,\n"], [4139, "   emesh_tran_in, emesh_frame_in, txo_launch_ack_tlc\n"], [4139, "   );\n"], [4139, "   parameter AW   = `CFG_AW  ;//address width\n"], [4139, "   parameter DW   = `CFG_DW  ;//data width  \n"], [4139, "   parameter LW   = `CFG_LW  ;//lvds tranceiver pairs per side\n"], [4139, "   parameter FW   = `CFG_NW*`CFG_LW;\n"], [4139, "   parameter FAD  = 5; // Number of bits to access all the entries (2^FAD + 1) > AE*PE\n"], [4139, "   input \t  cclk;     // clock of the score the emesh comes from\n"], [4139, "   input \t  cclk_en;  // clock enable \n"], [4139, "   input \t  txo_lclk; // clock of the link transmitter\n"], [4139, "   input          reset;\n"], [4139, "   input \t  txo_rd;  // this is read transactions channel\n"], [4139, "   input [1:0] \t  txo_cid; // transmitter channel ID\n"], [4139, "   input \t  cfg_burst_dis; // control register bursting disable\n"], [4139, "   input [2*LW-1:0] emesh_tran_in;  // serialized transaction\n"], [4139, "   input \t    emesh_frame_in; // transaction frame\n"], [4139, "   input \t    txo_launch_ack_tlc;\n"], [4139, "   output \t    emesh_wait_out; // wait to the emesh   \n"], [4139, "   output \t    txo_launch_req_tlc; // Launch request\n"], [4139, "   output \t    txo_rotate_dis; // Arbiter's rotate disable \n"], [4139, "   output \t    tran_frame_tlc;       // Frame of the transaction\n"], [4139, "   output [LW-1:0]  tran_byte_even_tlc;  // Even byte of the transaction\n"], [4139, "   output [LW-1:0]  tran_byte_odd_tlc;   // Odd byte of the transaction\n"], [4139, "   /*AUTOINPUT*/\n"], [4139, "   /*AUTOWIRE*/\n"], [4139, "   wire\t\t\tcheck_next_dstaddr_tlc;\t// From link_txo_launcher of link_txo_launcher.v\n"], [4139, "   wire [2*LW-1:0]\tfifo_out_tlc;\t\t// From link_txo_fifo of link_txo_fifo.v\n"], [4139, "   wire\t\t\tframe_in;\t\t// From emesh_interface of emesh_interface.v\n"], [4139, "   wire\t\t\tnext_access_tlc;\t// From link_txo_fifo of link_txo_fifo.v\n"], [4139, "   wire [3:0]\t\tnext_ctrlmode_tlc;\t// From link_txo_fifo of link_txo_fifo.v\n"], [4139, "   wire [1:0]\t\tnext_datamode_tlc;\t// From link_txo_fifo of link_txo_fifo.v\n"], [4139, "   wire [AW-1:0]\tnext_dstaddr_tlc;\t// From link_txo_fifo of link_txo_fifo.v\n"], [4139, "   wire\t\t\tnext_write_tlc;\t\t// From link_txo_fifo of link_txo_fifo.v\n"], [4139, "   wire [FAD:0]\t\trd_read_tlc;\t\t// From link_txo_launcher of link_txo_launcher.v\n"], [4139, "   wire [2*LW-1:0]\ttran_in;\t\t// From emesh_interface of emesh_interface.v\n"], [4139, "   wire\t\t\ttran_written_tlc;\t// From link_txo_fifo of link_txo_fifo.v\n"], [4139, "   wire\t\t\twr_fifo_full;\t\t// From link_txo_fifo of link_txo_fifo.v\n"]]}}