Source Block: oh/elink/dv/elink_e16_model.v@4369:4379@HdlStmAssign

   assign next_inc8_match = (ref_dstaddr_inc8[AW-1:0] == next_dstaddr[AW-1:0]);
   assign next_inc0_match = (ref_dstaddr[AW-1:0]      == next_dstaddr[AW-1:0]);

   assign ref_ctrl[7:0]  = {ref_ctrlmode[3:0], ref_datamode[1:0], ref_write, ref_access};
   assign next_ctrl[7:0] = {next_ctrlmode[3:0],next_datamode[1:0],next_write,next_access};

   assign type_match = (ref_ctrl[7:0] == next_ctrl[7:0]);

   //# burst mode determination
   assign burst_tran = ~cfg_burst_dis  & // bursting is enabled by user

Diff Content:
- 4374    assign next_ctrl[7:0] = {next_ctrlmode[3:0],next_datamode[1:0],next_write,next_access};
+ 4374    assign wr_fifo_full_next = (wr_gray_next[FAD-2:0] == rd_gray_pointer[FAD-2:0]) &
+ 4374                               (wr_gray_next[FAD]     ^  rd_gray_pointer[FAD])     &
+ 4374                               (wr_gray_next[FAD-1]   ^  rd_gray_pointer[FAD-1]);
+ 4374    always @ (posedge cclk or posedge reset)
+ 4374      if(reset)
+ 4374        wr_fifo_full <= 1'b0;
+ 4374      else if(cclk_en)
+ 4374        wr_fifo_full <=wr_fifo_full_next;

Clone Blocks:
Clone Blocks 1:
oh/elink/dv/elink_e16_model.v@4366:4376

   //# compare address
   assign ref_dstaddr_inc8[AW-1:0] = ref_dstaddr[AW-1:0]+{{(AW-4){1'b0}},4'b1000};

   assign next_inc8_match = (ref_dstaddr_inc8[AW-1:0] == next_dstaddr[AW-1:0]);
   assign next_inc0_match = (ref_dstaddr[AW-1:0]      == next_dstaddr[AW-1:0]);

   assign ref_ctrl[7:0]  = {ref_ctrlmode[3:0], ref_datamode[1:0], ref_write, ref_access};
   assign next_ctrl[7:0] = {next_ctrlmode[3:0],next_datamode[1:0],next_write,next_access};

   assign type_match = (ref_ctrl[7:0] == next_ctrl[7:0]);

Clone Blocks 2:
oh/elink/dv/elink_e16_model.v@4371:4381
   assign next_inc0_match = (ref_dstaddr[AW-1:0]      == next_dstaddr[AW-1:0]);

   assign ref_ctrl[7:0]  = {ref_ctrlmode[3:0], ref_datamode[1:0], ref_write, ref_access};
   assign next_ctrl[7:0] = {next_ctrlmode[3:0],next_datamode[1:0],next_write,next_access};

   assign type_match = (ref_ctrl[7:0] == next_ctrl[7:0]);

   //# burst mode determination
   assign burst_tran = ~cfg_burst_dis  & // bursting is enabled by user
		        start_new_read & // valid cycle
		        tran_read      & // only continuous burst is supported

Clone Blocks 3:
oh/elink/dv/elink_e16_model.v@4365:4375
   assign double_write = next_access & next_write &  (&(next_datamode[1:0]));

   //# compare address
   assign ref_dstaddr_inc8[AW-1:0] = ref_dstaddr[AW-1:0]+{{(AW-4){1'b0}},4'b1000};

   assign next_inc8_match = (ref_dstaddr_inc8[AW-1:0] == next_dstaddr[AW-1:0]);
   assign next_inc0_match = (ref_dstaddr[AW-1:0]      == next_dstaddr[AW-1:0]);

   assign ref_ctrl[7:0]  = {ref_ctrlmode[3:0], ref_datamode[1:0], ref_write, ref_access};
   assign next_ctrl[7:0] = {next_ctrlmode[3:0],next_datamode[1:0],next_write,next_access};


Clone Blocks 4:
oh/elink/dv/elink_e16_model.v@4363:4373
//   assign single_write = ref_access  & ref_write  & ~(&(ref_datamode[1:0]));
   assign single_write = 1'b0; // No special treatment for single write
   assign double_write = next_access & next_write &  (&(next_datamode[1:0]));

   //# compare address
   assign ref_dstaddr_inc8[AW-1:0] = ref_dstaddr[AW-1:0]+{{(AW-4){1'b0}},4'b1000};

   assign next_inc8_match = (ref_dstaddr_inc8[AW-1:0] == next_dstaddr[AW-1:0]);
   assign next_inc0_match = (ref_dstaddr[AW-1:0]      == next_dstaddr[AW-1:0]);

   assign ref_ctrl[7:0]  = {ref_ctrlmode[3:0], ref_datamode[1:0], ref_write, ref_access};

Clone Blocks 5:
oh/elink/dv/elink_e16_model.v@4368:4378
   assign ref_dstaddr_inc8[AW-1:0] = ref_dstaddr[AW-1:0]+{{(AW-4){1'b0}},4'b1000};

   assign next_inc8_match = (ref_dstaddr_inc8[AW-1:0] == next_dstaddr[AW-1:0]);
   assign next_inc0_match = (ref_dstaddr[AW-1:0]      == next_dstaddr[AW-1:0]);

   assign ref_ctrl[7:0]  = {ref_ctrlmode[3:0], ref_datamode[1:0], ref_write, ref_access};
   assign next_ctrl[7:0] = {next_ctrlmode[3:0],next_datamode[1:0],next_write,next_access};

   assign type_match = (ref_ctrl[7:0] == next_ctrl[7:0]);

   //# burst mode determination

