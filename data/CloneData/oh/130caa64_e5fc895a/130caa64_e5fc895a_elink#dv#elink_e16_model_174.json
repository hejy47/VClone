{"Source Block": ["oh/elink/dv/elink_e16_model.v@1656:1670@HdlStmProcess", "     if(reset)\n       fifo_read <= 1'b0;\n     else\n       fifo_read <= ~(fifo_empty | stop_fifo_read);\n\n   always @(posedge rxi_lclk or posedge reset)\n     if(reset)\n       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n"], "Clone Blocks": [["oh/elink/dv/elink_e16_model.v@2266:2287", "\n   //#############################\n   //# FIFO Read State Machine\n   //#############################\n    \n   always @(posedge cclk or posedge reset)\n     if(reset)\n       begin\n\t  rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n\t  rd_gray_pointer[FAD:0]    <= {(FAD+1){1'b0}};\n       end\n     else if(cclk_en)\n       if(fifo_read)\n\t begin\n\t    rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\t    rd_gray_pointer[FAD:0]    <= rd_gray_next[FAD:0];\t  \n\t end\n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n"], ["oh/elink/dv/elink_e16_model.v@1662:1672", "     if(reset)\n       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n"], ["oh/elink/dv/elink_e16_model.v@1663:1673", "       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n   //# Transaction assembly and distribution\n"], ["oh/elink/dv/elink_e16_model.v@1662:1672", "     if(reset)\n       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n"], ["oh/elink/dv/elink_e16_model.v@1663:1673", "       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n     else if(fifo_read)\n       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n\n   assign rd_addr[FAD-1:0]       = rd_binary_pointer[FAD-1:0];\n   assign rd_binary_next[FAD:0]  = rd_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_read};\n\n   assign fifo_empty = (rd_binary_next[FAD:0] == wr_binary_next[FAD:0]);\n\n   //########################################\n   //# Transaction assembly and distribution\n"]], "Diff Content": {"Delete": [[1661, "   always @(posedge rxi_lclk or posedge reset)\n"], [1662, "     if(reset)\n"], [1663, "       rd_binary_pointer[FAD:0]  <= {(FAD+1){1'b0}};\n"], [1664, "     else if(fifo_read)\n"], [1665, "       rd_binary_pointer[FAD:0]  <= rd_binary_next[FAD:0];\t  \n"]], "Add": [[1665, "   link_rxi_wr link_rxi_wr(/*AUTOINST*/\n"], [1665, "\t\t\t   .rxi_wr_wait\t\t(rxi_wr_wait),\n"], [1665, "\t\t\t   .c0_emesh_frame_out\t(c0_emesh_frame_out),\n"], [1665, "\t\t\t   .c0_emesh_tran_out\t(c0_emesh_tran_out[2*LW-1:0]),\n"], [1665, "\t\t\t   .c3_emesh_frame_out\t(c3_emesh_frame_out),\n"], [1665, "\t\t\t   .c3_emesh_tran_out\t(c3_emesh_tran_out[2*LW-1:0]),\n"], [1665, "\t\t\t   .c0_mesh_access_out\t(c0_mesh_access_out),\n"], [1665, "\t\t\t   .c0_mesh_write_out\t(c0_mesh_write_out),\n"], [1665, "\t\t\t   .c0_mesh_dstaddr_out\t(c0_mesh_dstaddr_out[AW-1:0]),\n"], [1665, "\t\t\t   .c0_mesh_srcaddr_out\t(c0_mesh_srcaddr_out[AW-1:0]),\n"], [1665, "\t\t\t   .c0_mesh_data_out\t(c0_mesh_data_out[DW-1:0]),\n"], [1665, "\t\t\t   .c0_mesh_datamode_out(c0_mesh_datamode_out[1:0]),\n"], [1665, "\t\t\t   .c0_mesh_ctrlmode_out(c0_mesh_ctrlmode_out[3:0]),\n"], [1665, "\t\t\t   .c3_mesh_access_out\t(c3_mesh_access_out),\n"], [1665, "\t\t\t   .c3_mesh_write_out\t(c3_mesh_write_out),\n"], [1665, "\t\t\t   .c3_mesh_dstaddr_out\t(c3_mesh_dstaddr_out[AW-1:0]),\n"], [1665, "\t\t\t   .c3_mesh_srcaddr_out\t(c3_mesh_srcaddr_out[AW-1:0]),\n"], [1665, "\t\t\t   .c3_mesh_data_out\t(c3_mesh_data_out[DW-1:0]),\n"], [1665, "\t\t\t   .c3_mesh_datamode_out(c3_mesh_datamode_out[1:0]),\n"], [1665, "\t\t\t   .c3_mesh_ctrlmode_out(c3_mesh_ctrlmode_out[3:0]),\n"], [1665, "\t\t\t   .reset\t\t(reset),\n"], [1665, "\t\t\t   .ext_yid_k\t\t(ext_yid_k[3:0]),\n"], [1665, "\t\t\t   .ext_xid_k\t\t(ext_xid_k[3:0]),\n"], [1665, "\t\t\t   .vertical_k\t\t(vertical_k),\n"], [1665, "\t\t\t   .who_am_i\t\t(who_am_i[3:0]),\n"], [1665, "\t\t\t   .cfg_extcomp_dis\t(cfg_extcomp_dis),\n"], [1665, "\t\t\t   .rxi_data\t\t(rxi_data[LW-1:0]),\n"], [1665, "\t\t\t   .rxi_lclk\t\t(rxi_lclk),\n"], [1665, "\t\t\t   .rxi_frame\t\t(rxi_frame),\n"], [1665, "\t\t\t   .c0_clk_in\t\t(c0_clk_in),\n"], [1665, "\t\t\t   .c3_clk_in\t\t(c3_clk_in),\n"], [1665, "\t\t\t   .c0_emesh_wait_in\t(c0_emesh_wait_in),\n"], [1665, "\t\t\t   .c3_emesh_wait_in\t(c3_emesh_wait_in),\n"], [1665, "\t\t\t   .c0_mesh_wait_in\t(c0_mesh_wait_in),\n"], [1665, "\t\t\t   .c3_mesh_wait_in\t(c3_mesh_wait_in));\n"]]}}