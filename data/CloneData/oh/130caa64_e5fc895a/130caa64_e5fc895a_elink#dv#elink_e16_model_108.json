{"Source Block": ["oh/elink/dv/elink_e16_model.v@1364:1374@HdlStmAssign", "   assign data_1500_en     = (rxi_assemble_cnt[2:0] == 3'b100);\n   assign srcaddr_3116_en  = (rxi_assemble_cnt[2:0] == 3'b101);\n   assign srcaddr_1500_en  = (rxi_assemble_cnt[2:0] == 3'b110);\n\n   //# Assemble counter\n   assign rxi_assemble_cnt_inc[2:0]  = rxi_assemble_cnt[2:0] + 3'b001;\n\n   assign rxi_assemble_cnt_next[2:0] = burst_tran           ? 3'b100 :\n\t\t\t\t       tran_assembled       ? 3'b000 :\n\t\t\t\t       read_jump            ? 3'b101 :\n\t\t\t\t                              rxi_assemble_cnt_inc[2:0];\n"], "Clone Blocks": [["oh/elink/dv/elink_e16_model.v@1366:1379", "   assign srcaddr_1500_en  = (rxi_assemble_cnt[2:0] == 3'b110);\n\n   //# Assemble counter\n   assign rxi_assemble_cnt_inc[2:0]  = rxi_assemble_cnt[2:0] + 3'b001;\n\n   assign rxi_assemble_cnt_next[2:0] = burst_tran           ? 3'b100 :\n\t\t\t\t       tran_assembled       ? 3'b000 :\n\t\t\t\t       read_jump            ? 3'b101 :\n\t\t\t\t                              rxi_assemble_cnt_inc[2:0];\n   always @ (posedge rxi_lclk or posedge reset)\n     if (reset)\n       rxi_assemble_cnt[2:0] <= 3'b000;\n     else if(fifo_data_val)\n       rxi_assemble_cnt[2:0] <= rxi_assemble_cnt_next[2:0];\n"], ["oh/elink/dv/elink_e16_model.v@1354:1364", "   //# Entry \"n\"         byte0[7:0],ctrlmode[3:0],dstaddr[31:28],\n   //#            --------------------------------------------\n   //####################################################################\n\n   assign dstaddr_2712_en  = (rxi_assemble_cnt[2:0] == 3'b001);\n   assign dstaddr_1100_en  = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign datamode_en      = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign write_en         = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign access_en        = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign data_3116_en     = (rxi_assemble_cnt[2:0] == 3'b011);\n   assign data_1500_en     = (rxi_assemble_cnt[2:0] == 3'b100);\n"], ["oh/elink/dv/elink_e16_model.v@1360:1370", "   assign datamode_en      = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign write_en         = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign access_en        = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign data_3116_en     = (rxi_assemble_cnt[2:0] == 3'b011);\n   assign data_1500_en     = (rxi_assemble_cnt[2:0] == 3'b100);\n   assign srcaddr_3116_en  = (rxi_assemble_cnt[2:0] == 3'b101);\n   assign srcaddr_1500_en  = (rxi_assemble_cnt[2:0] == 3'b110);\n\n   //# Assemble counter\n   assign rxi_assemble_cnt_inc[2:0]  = rxi_assemble_cnt[2:0] + 3'b001;\n\n"], ["oh/elink/dv/elink_e16_model.v@1361:1371", "   assign write_en         = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign access_en        = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign data_3116_en     = (rxi_assemble_cnt[2:0] == 3'b011);\n   assign data_1500_en     = (rxi_assemble_cnt[2:0] == 3'b100);\n   assign srcaddr_3116_en  = (rxi_assemble_cnt[2:0] == 3'b101);\n   assign srcaddr_1500_en  = (rxi_assemble_cnt[2:0] == 3'b110);\n\n   //# Assemble counter\n   assign rxi_assemble_cnt_inc[2:0]  = rxi_assemble_cnt[2:0] + 3'b001;\n\n   assign rxi_assemble_cnt_next[2:0] = burst_tran           ? 3'b100 :\n"], ["oh/elink/dv/elink_e16_model.v@1355:1365", "   //#            --------------------------------------------\n   //####################################################################\n\n   assign dstaddr_2712_en  = (rxi_assemble_cnt[2:0] == 3'b001);\n   assign dstaddr_1100_en  = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign datamode_en      = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign write_en         = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign access_en        = (rxi_assemble_cnt[2:0] == 3'b010);\n   assign data_3116_en     = (rxi_assemble_cnt[2:0] == 3'b011);\n   assign data_1500_en     = (rxi_assemble_cnt[2:0] == 3'b100);\n   assign srcaddr_3116_en  = (rxi_assemble_cnt[2:0] == 3'b101);\n"]], "Diff Content": {"Delete": [[1369, "   assign rxi_assemble_cnt_inc[2:0]  = rxi_assemble_cnt[2:0] + 3'b001;\n"]], "Add": [[1369, "   input  [DW-1:0] in;   \n"], [1369, "   input           clk;      \n"], [1369, "   input           reset;//asynchronous signal\n"], [1369, "   output [DW-1:0] out;\n"]]}}