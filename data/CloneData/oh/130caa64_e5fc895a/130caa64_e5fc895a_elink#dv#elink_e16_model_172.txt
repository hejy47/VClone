Source Block: oh/elink/dv/elink_e16_model.v@1644:1654@HdlStmAssign
       wr_binary_pointer[FAD:0]     <= {(FAD+1){1'b0}};
     else if(fifo_write)
       wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];	  

   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];
   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_write};

   //#############################
   //# FIFO Read State Machine
   //#############################
   

Diff Content:
- 1649    assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_write};
+ 1649    output            c0_emesh_frame_out; // transaction frame
+ 1649    output [2*LW-1:0] c0_emesh_tran_out;  // serialized transaction
+ 1649    output            c3_emesh_frame_out; // transaction frame
+ 1649    output [2*LW-1:0] c3_emesh_tran_out;  // serialized transaction
+ 1649    output            c0_rdmesh_frame_out; // transaction frame
+ 1649    output [2*LW-1:0] c0_rdmesh_tran_out;  // serialized transaction
+ 1649    output            c1_rdmesh_frame_out; // transaction frame
+ 1649    output [2*LW-1:0] c1_rdmesh_tran_out;  // serialized transaction
+ 1649    output            c2_rdmesh_frame_out; // transaction frame
+ 1649    output [2*LW-1:0] c2_rdmesh_tran_out;  // serialized transaction
+ 1649    output            c3_rdmesh_frame_out; // transaction frame
+ 1649    output [2*LW-1:0] c3_rdmesh_tran_out;  // serialized transaction
+ 1649    output 	     c0_mesh_access_out;  // access control to the mesh
+ 1649    output 	     c0_mesh_write_out;   // write control to the mesh
+ 1649    output [AW-1:0]   c0_mesh_dstaddr_out; // destination address to the mesh
+ 1649    output [AW-1:0]   c0_mesh_srcaddr_out; // source address to the mesh
+ 1649    output [DW-1:0]   c0_mesh_data_out;    // data to the mesh
+ 1649    output [1:0]      c0_mesh_datamode_out;// data mode to the mesh 
+ 1649    output [3:0]      c0_mesh_ctrlmode_out;// ctrl mode to the mesh
+ 1649    output 	     c3_mesh_access_out;  // access control to the mesh
+ 1649    output 	     c3_mesh_write_out;   // write control to the mesh
+ 1649    output [AW-1:0]   c3_mesh_dstaddr_out; // destination address to the mesh
+ 1649    output [AW-1:0]   c3_mesh_srcaddr_out; // source address to the mesh
+ 1649    output [DW-1:0]   c3_mesh_data_out;    // data to the mesh
+ 1649    output [1:0]      c3_mesh_datamode_out;// data mode to the mesh 
+ 1649    output [3:0]      c3_mesh_ctrlmode_out;// ctrl mode to the mesh
+ 1649    /*AUTOINPUT*/
+ 1649    /*AUTOWIRE*/

Clone Blocks:
Clone Blocks 1:
oh/elink/dv/elink_e16_model.v@1643:1653
     if(reset)
       wr_binary_pointer[FAD:0]     <= {(FAD+1){1'b0}};
     else if(fifo_write)
       wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];	  

   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];
   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_write};

   //#############################
   //# FIFO Read State Machine
   //#############################

Clone Blocks 2:
oh/elink/dv/elink_e16_model.v@1643:1653
     if(reset)
       wr_binary_pointer[FAD:0]     <= {(FAD+1){1'b0}};
     else if(fifo_write)
       wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];	  

   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];
   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_write};

   //#############################
   //# FIFO Read State Machine
   //#############################

Clone Blocks 3:
oh/elink/dv/elink_e16_model.v@3941:3956
   //# While for the actual address calculation we use [FAD-1:0] bits only,
   //# the bit FAD of the counter is needed in order to distinguish
   //# between the fifo entry currently being written and the one
   //# written in the previous "round" (FAD is a carry-out bit and is
   //# switched every "round")
   always @(posedge cclk or posedge reset)
     if(reset)
       wr_binary_pointer[FAD:0]     <= {(FAD+1){1'b0}};
     else if(cclk_en)
       if(wr_write)
	 wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];	  
   
   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];
   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},wr_write};

   //# Gray Pointer Conversion (for more reliable synchronization)!

Clone Blocks 4:
oh/elink/dv/elink_e16_model.v@1637:1651
   //# all of the transactions sent by the transmitter in that case.
   //######################################################################

   assign fifo_write = my_tran & frame_reg;
   
   always @(posedge rxi_lclk or posedge reset)
     if(reset)
       wr_binary_pointer[FAD:0]     <= {(FAD+1){1'b0}};
     else if(fifo_write)
       wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];	  

   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];
   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_write};

   //#############################

Clone Blocks 5:
oh/elink/dv/elink_e16_model.v@3949:3959
     else if(cclk_en)
       if(wr_write)
	 wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];	  
   
   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];
   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},wr_write};

   //# Gray Pointer Conversion (for more reliable synchronization)!
   assign wr_gray_next[FAD:0] = {1'b0,wr_binary_next[FAD:1]} ^ wr_binary_next[FAD:0];

   //# FIFO full indication

