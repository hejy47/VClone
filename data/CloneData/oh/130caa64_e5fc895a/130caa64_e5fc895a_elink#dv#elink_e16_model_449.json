{"Source Block": ["oh/elink/dv/elink_e16_model.v@3949:3959@HdlStmAssign", "     else if(cclk_en)\n       if(wr_write)\n\t wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];\t  \n   \n   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];\n   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},wr_write};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n   assign wr_gray_next[FAD:0] = {1'b0,wr_binary_next[FAD:1]} ^ wr_binary_next[FAD:0];\n\n   //# FIFO full indication\n"], "Clone Blocks": [["oh/elink/dv/elink_e16_model.v@1643:1653", "     if(reset)\n       wr_binary_pointer[FAD:0]     <= {(FAD+1){1'b0}};\n     else if(fifo_write)\n       wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];\t  \n\n   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];\n   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_write};\n\n   //#############################\n   //# FIFO Read State Machine\n   //#############################\n"], ["oh/elink/dv/elink_e16_model.v@2242:2252", "       begin\n\t  wr_binary_pointer_rlc[FAD:0] <= wr_binary_next_rlc[FAD:0];\t  \n\t  wr_gray_pointer_rlc[FAD:0]   <= wr_gray_next_rlc[FAD:0];\t  \n       end\t  \n\n   assign wr_addr_rlc[FAD-1:0]       = wr_binary_pointer_rlc[FAD-1:0];\n   assign wr_binary_next_rlc[FAD:0]  = wr_binary_pointer_rlc[FAD:0] + \n\t\t\t\t       {{(FAD){1'b0}},wr_write_rlc};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n   assign wr_gray_next_rlc[FAD:0] = {1'b0,wr_binary_next_rlc[FAD:1]} ^ \n"], ["oh/elink/dv/elink_e16_model.v@3941:3956", "   //# While for the actual address calculation we use [FAD-1:0] bits only,\n   //# the bit FAD of the counter is needed in order to distinguish\n   //# between the fifo entry currently being written and the one\n   //# written in the previous \"round\" (FAD is a carry-out bit and is\n   //# switched every \"round\")\n   always @(posedge cclk or posedge reset)\n     if(reset)\n       wr_binary_pointer[FAD:0]     <= {(FAD+1){1'b0}};\n     else if(cclk_en)\n       if(wr_write)\n\t wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];\t  \n   \n   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];\n   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},wr_write};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n"], ["oh/elink/dv/elink_e16_model.v@2243:2254", "\t  wr_binary_pointer_rlc[FAD:0] <= wr_binary_next_rlc[FAD:0];\t  \n\t  wr_gray_pointer_rlc[FAD:0]   <= wr_gray_next_rlc[FAD:0];\t  \n       end\t  \n\n   assign wr_addr_rlc[FAD-1:0]       = wr_binary_pointer_rlc[FAD-1:0];\n   assign wr_binary_next_rlc[FAD:0]  = wr_binary_pointer_rlc[FAD:0] + \n\t\t\t\t       {{(FAD){1'b0}},wr_write_rlc};\n\n   //# Gray Pointer Conversion (for more reliable synchronization)!\n   assign wr_gray_next_rlc[FAD:0] = {1'b0,wr_binary_next_rlc[FAD:1]} ^ \n\t\t\t\t    wr_binary_next_rlc[FAD:0];\n\n"], ["oh/elink/dv/elink_e16_model.v@1644:1654", "       wr_binary_pointer[FAD:0]     <= {(FAD+1){1'b0}};\n     else if(fifo_write)\n       wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];\t  \n\n   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];\n   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_write};\n\n   //#############################\n   //# FIFO Read State Machine\n   //#############################\n   \n"], ["oh/elink/dv/elink_e16_model.v@1643:1653", "     if(reset)\n       wr_binary_pointer[FAD:0]     <= {(FAD+1){1'b0}};\n     else if(fifo_write)\n       wr_binary_pointer[FAD:0]     <= wr_binary_next[FAD:0];\t  \n\n   assign wr_addr[FAD-1:0]       = wr_binary_pointer[FAD-1:0];\n   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},fifo_write};\n\n   //#############################\n   //# FIFO Read State Machine\n   //#############################\n"]], "Diff Content": {"Delete": [[3954, "   assign wr_binary_next[FAD:0]  = wr_binary_pointer[FAD:0] + {{(FAD){1'b0}},wr_write};\n"]], "Add": [[3954, "   /*AUTOINPUT*/\n"], [3954, "   /*AUTOWIRE*/\n"]]}}