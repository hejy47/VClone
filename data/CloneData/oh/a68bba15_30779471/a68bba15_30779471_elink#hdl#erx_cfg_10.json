{"Source Block": ["oh/elink/hdl/erx_cfg.v@87:97@HdlStmAssign", "   /*ADDRESS DECODE LOGIC       */\n   /*****************************/\n\n   //read/write decode\n   assign ecfg_write  = mi_en &  mi_we;\n   assign ecfg_read   = mi_en & ~mi_we;   \n\n   //Config write enables\n   assign rx_cfg_write      = ecfg_write & (mi_addr[RFAW+1:2]==`ERX_CFG);\n   assign rx_offset_write   = ecfg_write & (mi_addr[RFAW+1:2]==`ERX_OFFSET);\n   assign rx_idelay0_write  = ecfg_write & (mi_addr[RFAW+1:2]==`ERX_IDELAY0);\n"], "Clone Blocks": [["oh/elink/hdl/elink_cfg.v@84:94", "\t\t  (mi_addr[10:8]==3'h2);\n   \n\n   //read/write decode\n   assign ecfg_write  = mi_en &  mi_we;\n   assign ecfg_read   = mi_en & ~mi_we;   \n\n   //Config write enables\n   assign ecfg_reset_write    = ecfg_write & (mi_addr[RFAW+1:2]==`E_RESET);\n   assign ecfg_clk_write      = ecfg_write & (mi_addr[RFAW+1:2]==`E_CLK);\n   assign ecfg_chipid_write   = ecfg_write & (mi_addr[RFAW+1:2]==`E_CHIPID);\n"], ["oh/elink/hdl/etx_cfg.v@81:91", "   /*ADDRESS DECODE LOGIC       */\n   /*****************************/\n\n   //read/write decode\n   assign ecfg_write  = mi_en &  mi_we;\n   assign ecfg_read   = mi_en & ~mi_we;   \n\n   //Config write enables \n   assign tx_version_write  = ecfg_write & (mi_addr[RFAW+1:2]==`E_VERSION);\n   assign tx_cfg_write      = ecfg_write & (mi_addr[RFAW+1:2]==`ETX_CFG);\n   assign tx_status_write   = ecfg_write & (mi_addr[RFAW+1:2]==`ETX_STATUS);\n"], ["oh/elink/hdl/elink_cfg.v@83:93", "\t\t  (mi_addr[31:20]==ID) &\n\t\t  (mi_addr[10:8]==3'h2);\n   \n\n   //read/write decode\n   assign ecfg_write  = mi_en &  mi_we;\n   assign ecfg_read   = mi_en & ~mi_we;   \n\n   //Config write enables\n   assign ecfg_reset_write    = ecfg_write & (mi_addr[RFAW+1:2]==`E_RESET);\n   assign ecfg_clk_write      = ecfg_write & (mi_addr[RFAW+1:2]==`E_CLK);\n"], ["oh/elink/hdl/erx_cfg.v@86:96", "   /*****************************/\n   /*ADDRESS DECODE LOGIC       */\n   /*****************************/\n\n   //read/write decode\n   assign ecfg_write  = mi_en &  mi_we;\n   assign ecfg_read   = mi_en & ~mi_we;   \n\n   //Config write enables\n   assign rx_cfg_write      = ecfg_write & (mi_addr[RFAW+1:2]==`ERX_CFG);\n   assign rx_offset_write   = ecfg_write & (mi_addr[RFAW+1:2]==`ERX_OFFSET);\n"]], "Diff Content": {"Delete": [[92, "   assign ecfg_read   = mi_en & ~mi_we;   \n"]], "Add": [[92, "   assign cfg_access     = erx_cfg_access &\n"], [92, "\t\t         (dstaddr_in[19:16] ==`EGROUP_MMR) &\n"], [92, "\t\t         (dstaddr_in[10:8]  ==`EGROUP_RX)  &\n"], [92, "\t\t\t ~dstaddr_in[5];  //reserveed for mailbox\n"], [92, "   assign mailbox_access = erx_cfg_access &\n"], [92, "\t\t          (dstaddr_in[19:16] ==`EGROUP_MMR) &\n"], [92, "\t\t          (dstaddr_in[10:8]  ==`EGROUP_RX)  &\n"], [92, "\t\t\t  dstaddr_in[5];\n"], [92, "   assign dma_access     =  erx_cfg_access & \n"], [92, "\t\t\t  (dstaddr_in[19:16] ==`EGROUP_MMR) &\n"], [92, "\t\t\t  (dstaddr_in[10:8]  ==`EGROUP_DMA);\n"], [92, "   assign ecfg_read      = cfg_access & ~write_in;\n"], [92, "   assign ecfg_write     = cfg_access & write_in;\n"]]}}