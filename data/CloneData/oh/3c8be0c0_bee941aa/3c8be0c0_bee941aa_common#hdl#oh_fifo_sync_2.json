{"Source Block": ["oh/common/hdl/oh_fifo_sync.v@28:38@HdlStmAssign", "   reg [AW-1:0]        rd_addr;\n   wire \t       fifo_read;\n   wire \t       fifo_write;\n   \n   assign empty       = (rd_count[AW-1:0] == 0);   \n   assign prog_full   = (rd_count[AW-1:0] >= PROG_FULL);   \n   assign full        = (rd_count[AW-1:0] == (DEPTH-1));\n   assign fifo_read   = rd_en & ~empty;\n   assign fifo_write  = wr_en & ~full;\n   \n   always @ (posedge clk or negedge nreset) \n"], "Clone Blocks": [["oh/common/hdl/oh_fifo_sync.v@30:40", "   wire \t       fifo_write;\n   \n   assign empty       = (rd_count[AW-1:0] == 0);   \n   assign prog_full   = (rd_count[AW-1:0] >= PROG_FULL);   \n   assign full        = (rd_count[AW-1:0] == (DEPTH-1));\n   assign fifo_read   = rd_en & ~empty;\n   assign fifo_write  = wr_en & ~full;\n   \n   always @ (posedge clk or negedge nreset) \n     if(~nreset) \n       begin\t   \n"], ["oh/common/hdl/oh_fifo_sync.v@24:34", "   output reg [AW-1:0] rd_count     // valid entries in fifo\n );\n   \n   reg [AW-1:0]        wr_addr;\n   reg [AW-1:0]        rd_addr;\n   wire \t       fifo_read;\n   wire \t       fifo_write;\n   \n   assign empty       = (rd_count[AW-1:0] == 0);   \n   assign prog_full   = (rd_count[AW-1:0] >= PROG_FULL);   \n   assign full        = (rd_count[AW-1:0] == (DEPTH-1));\n"], ["oh/common/hdl/oh_fifo_sync.v@31:41", "   \n   assign empty       = (rd_count[AW-1:0] == 0);   \n   assign prog_full   = (rd_count[AW-1:0] >= PROG_FULL);   \n   assign full        = (rd_count[AW-1:0] == (DEPTH-1));\n   assign fifo_read   = rd_en & ~empty;\n   assign fifo_write  = wr_en & ~full;\n   \n   always @ (posedge clk or negedge nreset) \n     if(~nreset) \n       begin\t   \n          wr_addr[AW-1:0]   <= 'd0;\n"], ["oh/common/hdl/oh_fifo_sync.v@29:39", "   wire \t       fifo_read;\n   wire \t       fifo_write;\n   \n   assign empty       = (rd_count[AW-1:0] == 0);   \n   assign prog_full   = (rd_count[AW-1:0] >= PROG_FULL);   \n   assign full        = (rd_count[AW-1:0] == (DEPTH-1));\n   assign fifo_read   = rd_en & ~empty;\n   assign fifo_write  = wr_en & ~full;\n   \n   always @ (posedge clk or negedge nreset) \n     if(~nreset) \n"], ["oh/common/hdl/oh_fifo_sync.v@27:37", "   reg [AW-1:0]        wr_addr;\n   reg [AW-1:0]        rd_addr;\n   wire \t       fifo_read;\n   wire \t       fifo_write;\n   \n   assign empty       = (rd_count[AW-1:0] == 0);   \n   assign prog_full   = (rd_count[AW-1:0] >= PROG_FULL);   \n   assign full        = (rd_count[AW-1:0] == (DEPTH-1));\n   assign fifo_read   = rd_en & ~empty;\n   assign fifo_write  = wr_en & ~full;\n   \n"], ["oh/common/hdl/oh_fifo_sync.v@25:35", " );\n   \n   reg [AW-1:0]        wr_addr;\n   reg [AW-1:0]        rd_addr;\n   wire \t       fifo_read;\n   wire \t       fifo_write;\n   \n   assign empty       = (rd_count[AW-1:0] == 0);   \n   assign prog_full   = (rd_count[AW-1:0] >= PROG_FULL);   \n   assign full        = (rd_count[AW-1:0] == (DEPTH-1));\n   assign fifo_read   = rd_en & ~empty;\n"]], "Diff Content": {"Delete": [[33, "   assign prog_full   = (rd_count[AW-1:0] >= PROG_FULL);   \n"]], "Add": []}}