{"Source Block": ["oh/emaxi/hdl/emaxi_v1_0_M00_AXI.v@290:331@HdlStmProcess", "      | ( ~emwr_empty & axi_awvalid & M_AXI_AWREADY & axi_wvalid & M_AXI_WREADY)\n      | ( ~emwr_empty & axi_awvalid & M_AXI_AWREADY & w_wait )\n      | ( ~emwr_empty & axi_wvalid  & M_AXI_WREADY & aw_wait );\n\n   // Generate valid signals, internal waits\n   always @( posedge M_AXI_ACLK ) begin\n\t  if( M_AXI_ARESETN == 1'b0 ) begin\n\n         axi_awvalid <= 1'b0;\n         axi_wvalid  <= 1'b0;\n         aw_wait     <= 1'b0;\n         w_wait      <= 1'b0;\n         \n      end else begin\n\n         if( ~axi_awvalid & emwr_rd_en )\n           axi_awvalid <= 1'b1;\n         else if( axi_awvalid & M_AXI_AWREADY & ( emwr_empty | aw_wait ))\n           axi_awvalid <= 1'b0;\n\n         if( ~emwr_empty & axi_awvalid & M_AXI_AWREADY & ~M_AXI_WREADY )\n           aw_wait <= 1'b1;\n         else if( emwr_rd_en )\n           aw_wait <= 1'b0;\n\n         if( ~axi_wvalid & emwr_rd_en )\n           axi_wvalid <= 1'b1;\n         else if( axi_wvalid & M_AXI_WREADY & ( emwr_empty | w_wait ))\n           axi_wvalid <= 1'b0;\n\n         if( ~emwr_empty & axi_wvalid & M_AXI_WREADY & ~M_AXI_AWREADY )\n           w_wait <= 1'b1;\n         else if( emwr_rd_en )\n           w_wait <= 1'b0;\n         \n      end // else: !if( M_AXI_ARESETN == 1'b0 )\n   end // always @ ( posedge M_AXI_ACLK )\n\n   // Put the address, info, & data on the AXI signals\n   always @( posedge M_AXI_ACLK ) begin\n\t  if( M_AXI_ARESETN == 1'b0 ) begin\n        \n"], "Clone Blocks": [], "Diff Content": {"Delete": [[299, "         axi_wvalid  <= 1'b0;\n"], [300, "         aw_wait     <= 1'b0;\n"], [301, "         w_wait      <= 1'b0;\n"], [305, "         if( ~axi_awvalid & emwr_rd_en )\n"], [306, "           axi_awvalid <= 1'b1;\n"], [307, "         else if( axi_awvalid & M_AXI_AWREADY & ( emwr_empty | aw_wait ))\n"], [308, "           axi_awvalid <= 1'b0;\n"], [310, "         if( ~emwr_empty & axi_awvalid & M_AXI_AWREADY & ~M_AXI_WREADY )\n"], [311, "           aw_wait <= 1'b1;\n"], [312, "         else if( emwr_rd_en )\n"], [313, "           aw_wait <= 1'b0;\n"], [315, "         if( ~axi_wvalid & emwr_rd_en )\n"], [316, "           axi_wvalid <= 1'b1;\n"], [317, "         else if( axi_wvalid & M_AXI_WREADY & ( emwr_empty | w_wait ))\n"], [318, "           axi_wvalid <= 1'b0;\n"], [320, "         if( ~emwr_empty & axi_wvalid & M_AXI_WREADY & ~M_AXI_AWREADY )\n"], [321, "           w_wait <= 1'b1;\n"], [322, "         else if( emwr_rd_en )\n"], [323, "           w_wait <= 1'b0;\n"]], "Add": [[301, "         axi_awaddr  <= 'd0;\n"], [301, "         axi_awlen   <= 'd0;\n"], [301, "         axi_awsize  <= 'd0;\n"], [301, "         awvalid_b   <= 1'b0;\n"], [301, "         awaddr_b    <= 'd0;\n"], [301, "         awlen_b     <= 'd0;\n"], [301, "         awsize_b    <= 'd0;\n"], [323, "         if( ~axi_awvalid | aw_go ) begin\n"], [323, "            if( awvalid_b ) begin\n"], [323, "               axi_awvalid <= 1'b1;\n"], [323, "               axi_awaddr  <= awaddr_b;\n"], [323, "               axi_awlen   <= awlen_b;\n"], [323, "               axi_awsize  <= awsize_b;\n"], [323, "            end else begin\n"], [323, "               axi_awvalid <= emwr_rd_en;\n"], [323, "               axi_awaddr  <= emwr_rd_data[`DSTADDR_RANGE];\n"], [323, "               axi_awlen   <= 'd0;\n"], [323, "               axi_awsize  <= { 1'b0, emwr_rd_data[`DATAMODE_RANGE] };\n"], [323, "            end // else: !if(awvalid_b)\n"], [323, "         end // if (~axi_awvalid | aw_go)\n"], [323, "         if( emwr_rd_en & axi_awvalid & ~aw_go )\n"], [323, "           awvalid_b <= 1'b1;\n"], [323, "         else if( aw_go )\n"], [323, "           awvalid_b <= 1'b0;\n"], [323, "         if( emwr_rd_en ) begin\n"], [323, "            awaddr_b  <= emwr_rd_data[`DSTADDR_RANGE];\n"], [323, "            awlen_b   <= 'd0;\n"], [323, "            awsize_b  <= { 1'b0, emwr_rd_data[`DATAMODE_RANGE] };\n"], [323, "         end\n"], [326, "   reg [C_M_AXI_DATA_WIDTH-1 : 0]   wdata_aligned;\n"], [326, "   reg [C_M_AXI_DATA_WIDTH/8-1 : 0] wstrb_aligned;\n"], [326, "   always @ ( emwr_rd_data ) begin\n"], [326, "      case( emwr_rd_data[`DATAMODE_RANGE] )\n"], [326, "        2'd0: wdata_aligned = { 8{emwr_rd_data[`DATA_LSB+7 -: 8]}};\n"], [326, "        2'd1: wdata_aligned = { 4{emwr_rd_data[`DATA_LSB+15 -: 16]}};\n"], [326, "        2'd2: wdata_aligned = { 2{emwr_rd_data[`DATA_LSB+31 -: 32]}};\n"], [326, "        default: wdata_aligned = { emwr_rd_data[`SRCADDR_RANGE],\n"], [326, "                                emwr_rd_data[`DATA_RANGE]};\n"], [326, "      endcase // case ( emwr_rd_data[`DATAMODE_RANGE] )\n"], [326, "      case( emwr_rd_data[`DATAMODE_RANGE] )\n"], [326, "        2'd0: // BYTE\n"], [326, "          case( emwr_rd_data[`DSTADDR_LSB+2 -: 3] )\n"], [326, "            3'd0: wstrb_aligned = 8'h01;\n"], [326, "            3'd1: wstrb_aligned = 8'h02;\n"], [326, "            3'd2: wstrb_aligned = 8'h04;\n"], [326, "            3'd3: wstrb_aligned = 8'h08;\n"], [326, "            3'd4: wstrb_aligned = 8'h10;\n"], [326, "            3'd5: wstrb_aligned = 8'h20;\n"], [326, "            3'd6: wstrb_aligned = 8'h40;\n"], [326, "            default: wstrb_aligned = 8'h80;\n"], [326, "          endcase\n"], [326, "        2'd1: // 16b HWORD\n"], [326, "          case( emwr_rd_data[`DSTADDR_LSB+2 -: 2] )\n"], [326, "            2'd0: wstrb_aligned = 8'h03;\n"], [326, "            2'd1: wstrb_aligned = 8'h0C;\n"], [326, "            2'd2: wstrb_aligned = 8'h30;\n"], [326, "            default: wstrb_aligned = 8'hC0;\n"], [326, "          endcase\n"], [326, "        2'd2: // 32b WORD\n"], [326, "          if( emwr_rd_data[`DSTADDR_LSB+2] )\n"], [326, "            wstrb_aligned = 8'hF0;\n"], [326, "          else\n"], [326, "            wstrb_aligned = 8'h0F;\n"], [326, "        default: // 64b DWORD\n"], [326, "          wstrb_aligned = 8'hFF;\n"], [326, "      endcase // case ( emwr_rd_data[`DATAMODE_RANGE] )\n"], [326, "   end // always @ (...\n"]]}}