Source Block: oh/src/common/hdl/oh_clockdiv.v@114:124@HdlStmAssign
   
   // clock mux
   assign clk1_sel[3] =  1'b0;               // not implemented
   assign clk1_sel[2] = (clkdiv[7:0]==8'd0); // div1 (bypass)
   assign clk1_sel[1] = (clkdiv[7:0]==8'd1); // div2 clock 
   assign clk1_sel[0] = |clkdiv[7:1];        // all others
   
   oh_clockmux #(.N(4))
   oh_clockmux1 (.clkout(clkout1),
		 .clk(clk),
		 .en( clk1_sel[3:0]),

Diff Content:
+ 119    oh_lat0 #(.DW(4)) 
+ 119    latch_clk1 (.out (clk1_sel_sh[3:0]),
+ 119 	       .clk (clk),
+ 119 	       .in  (clk1_sel[3:0]));

Clone Blocks:
Clone Blocks 1:
oh/src/common/hdl/oh_clockdiv.v@113:123
     clkout1_shift <= clkout1_reg;
   
   // clock mux
   assign clk1_sel[3] =  1'b0;               // not implemented
   assign clk1_sel[2] = (clkdiv[7:0]==8'd0); // div1 (bypass)
   assign clk1_sel[1] = (clkdiv[7:0]==8'd1); // div2 clock 
   assign clk1_sel[0] = |clkdiv[7:1];        // all others
   
   oh_clockmux #(.N(4))
   oh_clockmux1 (.clkout(clkout1),
		 .clk(clk),

Clone Blocks 2:
oh/src/common/hdl/oh_clockdiv.v@112:122
   always @ (negedge clk)
     clkout1_shift <= clkout1_reg;
   
   // clock mux
   assign clk1_sel[3] =  1'b0;               // not implemented
   assign clk1_sel[2] = (clkdiv[7:0]==8'd0); // div1 (bypass)
   assign clk1_sel[1] = (clkdiv[7:0]==8'd1); // div2 clock 
   assign clk1_sel[0] = |clkdiv[7:1];        // all others
   
   oh_clockmux #(.N(4))
   oh_clockmux1 (.clkout(clkout1),

Clone Blocks 3:
oh/src/common/hdl/oh_clockdiv.v@111:121
   // creating divide by 2 shifted clock with negedge
   always @ (negedge clk)
     clkout1_shift <= clkout1_reg;
   
   // clock mux
   assign clk1_sel[3] =  1'b0;               // not implemented
   assign clk1_sel[2] = (clkdiv[7:0]==8'd0); // div1 (bypass)
   assign clk1_sel[1] = (clkdiv[7:0]==8'd1); // div2 clock 
   assign clk1_sel[0] = |clkdiv[7:1];        // all others
   
   oh_clockmux #(.N(4))

