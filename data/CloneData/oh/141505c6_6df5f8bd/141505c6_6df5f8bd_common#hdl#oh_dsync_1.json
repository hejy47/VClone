{"Source Block": ["oh/common/hdl/oh_dsync.v@16:41@HdlStmIf", "    input  din, // input data\n    output dout    // synchronized data\n    );\n\n   generate\n      if(TYPE==\"soft\")\n\tbegin\n\t   reg [PS:0] sync_pipe;\n\t   always @ (posedge clk or negedge nreset)\n\t     if(!nreset)\n\t       sync_pipe[PS:0] <= 'b0;\n\t     else\n\t       sync_pipe[PS:0] <= {sync_pipe[PS-1:0],din};\n\t   // drive randomize delay from testbench\n\t   assign dout = (DELAY & sync_pipe[PS]) |  //extra cycle\n\t\t\t (~DELAY & sync_pipe[PS-1]); //default\n\tend // block: reg\n      else\n\tbegin\n\t   asic_dsync asic_dsync (.clk(clk),\n\t\t\t\t  .nreset(nreset),\n\t\t\t\t  .din(din),\n\t\t\t\t  .dout(dout));\n\tend\n   endgenerate\nendmodule // oh_dsync\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[21, "      if(TYPE==\"soft\")\n"], [23, "\t   reg [PS:0] sync_pipe;\n"], [26, "\t       sync_pipe[PS:0] <= 'b0;\n"], [28, "\t       sync_pipe[PS:0] <= {sync_pipe[PS-1:0],din};\n"], [30, "\t   assign dout = (DELAY & sync_pipe[PS]) |  //extra cycle\n"], [31, "\t\t\t (~DELAY & sync_pipe[PS-1]); //default\n"], [35, "\t   asic_dsync asic_dsync (.clk(clk),\n"], [36, "\t\t\t\t  .nreset(nreset),\n"], [37, "\t\t\t\t  .din(din),\n"], [38, "\t\t\t\t  .dout(dout));\n"]], "Add": [[21, "      if(SYN==\"true\")\n"], [23, "\t   reg [SYNCPIPE:0] sync_pipe;\n"], [26, "\t       sync_pipe[SYNCPIPE:0] <= 'b0;\n"], [28, "\t       sync_pipe[SYNCPIPE:0] <= {sync_pipe[SYNCPIPE-1:0],din};\n"], [31, "\t   assign dout = (DELAY & sync_pipe[SYNCPIPE]) |  //extra cycle\n"], [31, "\t\t\t (~DELAY & sync_pipe[SYNCPIPE-1]); //default\n"], [38, "\t   asic_dsync  #(.TYPE(TYPE),\n"], [38, "\t\t\t .SYNCPIPE(SYNCPIPE))\n"], [38, "\t   asic_dsync (.clk(clk),\n"], [38, "\t\t       .nreset(nreset),\n"], [38, "\t\t       .din(din),\n"], [38, "\t\t       .dout(dout));\n"]]}}