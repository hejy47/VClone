Source Block: oh/elink/hdl/etx_protocol.v@118:130@HdlStmAssign

   assign burst_addr[31:0]   = (last_dstaddr[31:0] + 4'd8);
   
   assign burst_addr_match  = (burst_addr[31:0] == etx_dstaddr[31:0]);

   assign burst_type_match = {last_ctrlmode[3:0],last_datamode[1:0],last_write}
			      ==
		   	      {etx_ctrlmode[3:0],etx_datamode[1:0], etx_write};
   			      

   //#############################
   //# Wait signals (async)
   //#############################

Diff Content:
- 123    assign burst_type_match = {last_ctrlmode[3:0],last_datamode[1:0],last_write}
- 124 			      ==
+ 124    assign burst_type_match  = {last_ctrlmode[3:0],last_datamode[1:0],last_write}
+ 124 			       ==

Clone Blocks:
Clone Blocks 1:
oh/elink/hdl/etx_protocol.v@116:126
		     .srcaddr_out	(),
		     .packet_in		(tx_packet[PW-1:0]));//input

   assign burst_addr[31:0]   = (last_dstaddr[31:0] + 4'd8);
   
   assign burst_addr_match  = (burst_addr[31:0] == etx_dstaddr[31:0]);

   assign burst_type_match = {last_ctrlmode[3:0],last_datamode[1:0],last_write}
			      ==
		   	      {etx_ctrlmode[3:0],etx_datamode[1:0], etx_write};
   			      

Clone Blocks 2:
oh/elink/hdl/etx_protocol.v@114:124
		     .dstaddr_out	(last_dstaddr[31:0]),
		     .data_out		(),
		     .srcaddr_out	(),
		     .packet_in		(tx_packet[PW-1:0]));//input

   assign burst_addr[31:0]   = (last_dstaddr[31:0] + 4'd8);
   
   assign burst_addr_match  = (burst_addr[31:0] == etx_dstaddr[31:0]);

   assign burst_type_match = {last_ctrlmode[3:0],last_datamode[1:0],last_write}
			      ==

