{"Source Block": ["oh/etx/hdl/etx_io.v@112:171@HdlStmFor", "      end // else: !if(txgpio)\n\n   end // always @ (posedge txlclk_p)\n   \n   genvar        i;\n   generate for(i=0; i<8; i=i+1)\n     begin : gen_serdes\n        OSERDESE2 \n          #(\n            .DATA_RATE_OQ(\"DDR\"),  // DDR, SDR\n            .DATA_RATE_TQ(\"BUF\"),  // DDR, BUF, SDR\n            .DATA_WIDTH(8),        // Parallel data width (2-8,10,14)\n            .INIT_OQ(1'b0),        // Initial value of OQ output (1'b0,1'b1)\n            .INIT_TQ(1'b1),        // Initial value of TQ output (1'b0,1'b1)\n            .SERDES_MODE(\"MASTER\"), // MASTER, SLAVE\n            .SRVAL_OQ(1'b0),       // OQ output value when SR is used (1'b0,1'b1)\n            .SRVAL_TQ(1'b1),       // TQ output value when SR is used (1'b0,1'b1)\n            .TBYTE_CTL(\"FALSE\"),   // Enable tristate byte operation (FALSE, TRUE)\n            .TBYTE_SRC(\"FALSE\"),   // Tristate byte source (FALSE, TRUE)\n            .TRISTATE_WIDTH(1)     // 3-state converter width (1,4)\n            ) OSERDESE2_txdata \n            (\n             .OFB(),   // 1-bit output: Feedback path for data\n             .OQ(tx_data[i]),     // 1-bit output: Data path output\n             // SHIFTOUT1 / SHIFTOUT2: 1-bit (each) output: Data output expansion (1-bit each)\n             .SHIFTOUT1(),\n             .SHIFTOUT2(),\n             .TBYTEOUT(),       // 1-bit output: Byte group tristate\n             .TFB(),            // 1-bit output: 3-state control\n             .TQ(tx_data_t[i]), // 1-bit output: 3-state control\n             .CLK(txlclk_s),    // 1-bit input: High speed clock\n             .CLKDIV(txlclk_p), // 1-bit input: Divided clock\n             // D1 - D8: 1-bit (each) input: Parallel data inputs (1-bit each)\n             .D1(pdata[i+56]),  // First data out\n             .D2(pdata[i+48]),\n             .D3(pdata[i+40]),\n             .D4(pdata[i+32]),\n             .D5(pdata[i+24]),\n             .D6(pdata[i+16]),\n             .D7(pdata[i+8]),\n             .D8(pdata[i]),   // Last data out\n             .OCE(1'b1),      // 1-bit input: Output data clock enable\n             .RST(ioreset),   // 1-bit input: Reset\n             // SHIFTIN1 / SHIFTIN2: 1-bit (each) input: Data input expansion (1-bit each)\n             .SHIFTIN1(1'b0),\n             .SHIFTIN2(1'b0),\n             // T1 - T4: 1-bit (each) input: Parallel 3-state inputs\n             .T1(~ecfg_tx_enable),\n             .T2(1'b0),\n             .T3(1'b0),\n             .T4(1'b0),\n             .TBYTEIN(1'b0),   // 1-bit input: Byte group tristate\n             .TCE(1'b1)          // 1-bit input: 3-state clock enable\n             );     \n     end // block: gen_serdes\n   endgenerate\n   \n   OSERDESE2 \n     #(\n       .DATA_RATE_OQ(\"DDR\"),  // DDR, SDR\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[142, "             .CLK(txlclk_s),    // 1-bit input: High speed clock\n"], [143, "             .CLKDIV(txlclk_p), // 1-bit input: Divided clock\n"], [154, "             .RST(ioreset),   // 1-bit input: Reset\n"], [159, "             .T1(~ecfg_tx_enable),\n"]], "Add": [[143, "             .CLK(tx_lclk),      // 1-bit input: High speed clock\n"], [143, "             .CLKDIV(tx_lclk_par), // 1-bit input: Divided clock\n"], [154, "             .RST(reset),   // 1-bit input: Reset\n"], [159, "             .T1(~ecfg_tx_enable), //TODO: Which clock is this one??\n"]]}}