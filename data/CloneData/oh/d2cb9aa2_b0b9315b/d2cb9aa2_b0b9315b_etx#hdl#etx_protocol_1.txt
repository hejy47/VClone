Source Block: oh/etx/hdl/etx_protocol.v@77:124@HdlStmProcess
   //# Logic
   //############

   // TODO: Bursts

   always @( posedge txlclk_p or posedge reset ) begin

      if( reset ) begin

         e_tx_ack    <= 1'b0;
         txframe_p   <= 'd0;
         txdata_p    <= 'd0;

      end else begin

         if( e_tx_access & ~e_tx_ack ) begin

            e_tx_ack  <= 1'b1;
            txframe_p <= 8'h3F;
            txdata_p  <=
               { 8'd0,  // Not used
                 8'd0,
                 ~e_tx_write, 7'd0,   // B0- TODO: For bursts, add the inc bit
                 e_tx_ctrlmode, e_tx_dstaddr[31:28], // B1
                 e_tx_dstaddr[27:4],  // B2, B3, B4
                 e_tx_dstaddr[3:0], e_tx_datamode, e_tx_write, e_tx_access // B5
                 };
         end else if( e_tx_ack ) begin // if ( e_tx_access & ~e_tx_ack )

            e_tx_ack  <= 1'b0;
            txframe_p <= 8'hFF;
            txdata_p  <= { e_tx_data, e_tx_srcaddr };
            
         end else begin

            e_tx_ack    <= 1'b0;
            txframe_p <= 8'h00;
            txdata_p  <= 64'd0;

         end

      end // else: !if( reset )
   end // always @ ( posedge txlclk_p or reset )
   
   //#############################
   //# Wait signals
   //#############################


Diff Content:
- 82    always @( posedge txlclk_p or posedge reset ) begin
- 84       if( reset ) begin
- 86          e_tx_ack    <= 1'b0;
- 87          txframe_p   <= 'd0;
- 88          txdata_p    <= 'd0;
- 90       end else begin
- 92          if( e_tx_access & ~e_tx_ack ) begin
- 94             e_tx_ack  <= 1'b1;
- 95             txframe_p <= 8'h3F;
- 96             txdata_p  <=
- 97                { 8'd0,  // Not used
- 98                  8'd0,
- 99                  ~e_tx_write, 7'd0,   // B0- TODO: For bursts, add the inc bit
- 100                  e_tx_ctrlmode, e_tx_dstaddr[31:28], // B1
- 101                  e_tx_dstaddr[27:4],  // B2, B3, B4
- 102                  e_tx_dstaddr[3:0], e_tx_datamode, e_tx_write, e_tx_access // B5
- 103                  };
- 104          end else if( e_tx_ack ) begin // if ( e_tx_access & ~e_tx_ack )
- 106             e_tx_ack  <= 1'b0;
- 107             txframe_p <= 8'hFF;
- 108             txdata_p  <= { e_tx_data, e_tx_srcaddr };
- 110          end else begin
- 112             e_tx_ack    <= 1'b0;
- 113             txframe_p <= 8'h00;
- 114             txdata_p  <= 64'd0;
- 116          end
- 118       end // else: !if( reset )
- 119    end // always @ ( posedge txlclk_p or reset )
+ 119    always @( posedge tx_lclk_par or posedge reset ) 
+ 119      begin
+ 119 	if(reset) 
+ 119 	  begin	     
+ 119              e_tx_ack          <= 1'b0;
+ 119              tx_frame_par[7:0] <= 8'd0;
+ 119              tx_data_par[63:0] <= 64'd0;	     
+ 119 	  end 
+ 119 	else 
+ 119 	  begin
+ 119              if( e_tx_access & ~e_tx_ack ) 
+ 119 	       begin
+ 119 		  e_tx_ack  <= 1'b1;
+ 119 		  tx_frame_par[7:0] <= 8'h3F;
+ 119 		  tx_data_par[63:0]  <= {8'd0,  // Not used
+ 119 					 8'd0,
+ 119 					 ~e_tx_write, 7'd0, // B0-TODO: For bursts, add the inc bit
+ 119 					 e_tx_ctrlmode[3:0], e_tx_dstaddr[31:28], // B1
+ 119 					 e_tx_dstaddr[27:4],  // B2, B3, B4
+ 119 					 e_tx_dstaddr[3:0], e_tx_datamode[1:0], e_tx_write, e_tx_access // B5
+ 119 				   };
+ 119                end 
+ 119 	     else if( e_tx_ack ) 
+ 119 	       begin
+ 119 		  e_tx_ack  <= 1'b0;
+ 119 		  tx_frame_par[7:0] <= 8'hFF;
+ 119 		  tx_data_par[63:0]  <= { e_tx_data[31:0], e_tx_srcaddr[31:0]};   
+ 119                end 
+ 119 	     else 
+ 119 	       begin
+ 119 		  e_tx_ack    <= 1'b0;
+ 119 		  tx_frame_par[7:0] <= 8'h00;
+ 119 		  tx_data_par[63:0]  <= 64'd0;
+ 119                end
+ 119 	  end // else: !if(reset)	
+ 119      end // always @ ( posedge txlclk_p or posedge reset )

Clone Blocks:
