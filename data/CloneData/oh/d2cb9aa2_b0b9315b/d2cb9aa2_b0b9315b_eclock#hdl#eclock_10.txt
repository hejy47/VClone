Source Block: oh/eclock/hdl/eclock.v@153:244@HdlStmIf
   BUFG lclk_p_buf
     (.O   (lclk_p),
      .I   (lclk_p_src));

generate
   if( FEATURE_CCLK_DIV ) begin : gen_cclk_div

         // Create adjustable (but fast) CCLK
   wire      rxi_cclk_out;
   reg [8:1] cclk_pattern;
   reg [3:0] clk_div_sync;
   reg       enb_sync;
   
   always @ (posedge cclk_p) begin  // Might need x-clock TIG here

      clk_div_sync <= ecfg_cclk_div;
      enb_sync     <= ecfg_cclk_en;

      if(enb_sync)
        case(clk_div_sync)
          4'h0:    cclk_pattern <= 8'd0;         // Clock OFF
          4'h7:    cclk_pattern <= 8'b10101010;  // Divide by 1
          4'h6:    cclk_pattern <= 8'b11001100;  // Divide by 2
          4'h5:    cclk_pattern <= 8'b11110000;  // Divide by 4
          default: cclk_pattern <= {8{~cclk_pattern[1]}}; // /8
        endcase
      else
        cclk_pattern <= 8'b00000000;

   end // always @ (posedge lclk_p)
         
   OSERDESE2 
     #(
       .DATA_RATE_OQ("DDR"),  // DDR, SDR
       .DATA_RATE_TQ("SDR"),  // DDR, BUF, SDR
       .DATA_WIDTH(8),        // Parallel data width (2-8,10,14)
       .INIT_OQ(1'b0),        // Initial value of OQ output (1'b0,1'b1)
       .INIT_TQ(1'b0),        // Initial value of TQ output (1'b0,1'b1)
       .SERDES_MODE("MASTER"), // MASTER, SLAVE
       .SRVAL_OQ(1'b0),       // OQ output value when SR is used (1'b0,1'b1)
       .SRVAL_TQ(1'b0),       // TQ output value when SR is used (1'b0,1'b1)
       .TBYTE_CTL("FALSE"),   // Enable tristate byte operation (FALSE, TRUE)
       .TBYTE_SRC("FALSE"),   // Tristate byte source (FALSE, TRUE)
       .TRISTATE_WIDTH(1)     // 3-state converter width (1,4)
       ) OSERDESE2_inst 
       (
        .OFB(),             // 1-bit output: Feedback path for data
        .OQ(cclk),          // 1-bit output: Data path output
        .SHIFTOUT1(),       // SHIFTOUTn: 1-bit (each): Data output expansion
        .SHIFTOUT2(),
        .TBYTEOUT(),        // 1-bit output: Byte group tristate
        .TFB(),             // 1-bit output: 3-state control
        .TQ(),              // 1-bit output: 3-state control
        .CLK(cclk_base),    // 1-bit input: High speed clock
        .CLKDIV(cclk_p),    // 1-bit input: Divided clock
        .D1(cclk_pattern[1]), // D1 - D8: Parallel data inputs (1-bit each)
        .D2(cclk_pattern[2]),
        .D3(cclk_pattern[3]),
        .D4(cclk_pattern[4]),
        .D5(cclk_pattern[5]),
        .D6(cclk_pattern[6]),
        .D7(cclk_pattern[7]),
        .D8(cclk_pattern[8]),
        .OCE(1'b1),         // 1-bit input: Output data clock enable
        .RST(reset),        // 1-bit input: Reset
        .SHIFTIN1(1'b0),    // SHIFTINn: Data input expansion (1-bit each)
        .SHIFTIN2(1'b0),
        .T1(1'b0),          // T1 - T4: Parallel 3-state inputs
        .T2(1'b0),
        .T3(1'b0),
        .T4(1'b0),
        .TBYTEIN(1'b0),     // 1-bit input: Byte group tristate
        .TCE(1'b0)          // 1-bit input: 3-state clock enable
        );

   end else begin : gen_fixed_cclk // Non-dividable CCLK

   reg       enb_sync;

   always @ (posedge cclk_p)
      enb_sync     <= ecfg_cclk_en;

   // The following does not result in timing failures,
   //  but doesn't seem glitch-safe
   assign cclk = cclk_base & enb_sync;
   
   end
endgenerate
   
   // xilinx OBUFDS instantiation
   //
   OBUFDS

Diff Content:
- 161    wire      rxi_cclk_out;
- 162    reg [8:1] cclk_pattern;
- 163    reg [3:0] clk_div_sync;
- 164    reg       enb_sync;
- 166    always @ (posedge cclk_p) begin  // Might need x-clock TIG here
- 168       clk_div_sync <= ecfg_cclk_div;
- 169       enb_sync     <= ecfg_cclk_en;
- 171       if(enb_sync)
- 172         case(clk_div_sync)
- 173           4'h0:    cclk_pattern <= 8'd0;         // Clock OFF
- 174           4'h7:    cclk_pattern <= 8'b10101010;  // Divide by 1
- 175           4'h6:    cclk_pattern <= 8'b11001100;  // Divide by 2
- 176           4'h5:    cclk_pattern <= 8'b11110000;  // Divide by 4
- 177           default: cclk_pattern <= {8{~cclk_pattern[1]}}; // /8
- 178         endcase
- 180         cclk_pattern <= 8'b00000000;
- 182    end // always @ (posedge lclk_p)
- 186        .DATA_RATE_OQ("DDR"),  // DDR, SDR
- 187        .DATA_RATE_TQ("SDR"),  // DDR, BUF, SDR
- 188        .DATA_WIDTH(8),        // Parallel data width (2-8,10,14)
- 189        .INIT_OQ(1'b0),        // Initial value of OQ output (1'b0,1'b1)
- 190        .INIT_TQ(1'b0),        // Initial value of TQ output (1'b0,1'b1)
- 191        .SERDES_MODE("MASTER"), // MASTER, SLAVE
- 192        .SRVAL_OQ(1'b0),       // OQ output value when SR is used (1'b0,1'b1)
- 193        .SRVAL_TQ(1'b0),       // TQ output value when SR is used (1'b0,1'b1)
- 194        .TBYTE_CTL("FALSE"),   // Enable tristate byte operation (FALSE, TRUE)
- 195        .TBYTE_SRC("FALSE"),   // Tristate byte source (FALSE, TRUE)
- 196        .TRISTATE_WIDTH(1)     // 3-state converter width (1,4)
- 199         .OFB(),             // 1-bit output: Feedback path for data
- 200         .OQ(cclk),          // 1-bit output: Data path output
- 201         .SHIFTOUT1(),       // SHIFTOUTn: 1-bit (each): Data output expansion
- 203         .TBYTEOUT(),        // 1-bit output: Byte group tristate
- 204         .TFB(),             // 1-bit output: 3-state control
- 205         .TQ(),              // 1-bit output: 3-state control
- 206         .CLK(cclk_base),    // 1-bit input: High speed clock
- 207         .CLKDIV(cclk_p),    // 1-bit input: Divided clock
- 208         .D1(cclk_pattern[1]), // D1 - D8: Parallel data inputs (1-bit each)
- 216         .OCE(1'b1),         // 1-bit input: Output data clock enable
- 217         .RST(reset),        // 1-bit input: Reset
- 218         .SHIFTIN1(1'b0),    // SHIFTINn: Data input expansion (1-bit each)
- 220         .T1(1'b0),          // T1 - T4: Parallel 3-state inputs
- 224         .TBYTEIN(1'b0),     // 1-bit input: Byte group tristate
- 225         .TCE(1'b0)          // 1-bit input: 3-state clock enable
- 228    end else begin : gen_fixed_cclk // Non-dividable CCLK
- 230    reg       enb_sync;
- 232    always @ (posedge cclk_p)
- 233       enb_sync     <= ecfg_cclk_en;
- 237    assign cclk = cclk_base & enb_sync;
- 239    end
+ 164       wire      rxi_cclk_out;
+ 164       reg [8:1] cclk_pattern;
+ 164       reg [3:0] clk_div_sync;
+ 164       reg       enb_sync;
+ 178       always @ (posedge cclk_div) begin  // Might need x-clock TIG here
+ 178 	 clk_div_sync <= ecfg_cclk_div;
+ 178 	 enb_sync     <= ecfg_cclk_en;
+ 178 	 if(enb_sync)
+ 178            case(clk_div_sync)
+ 178              4'h0:    cclk_pattern <= 8'd0;         // Clock OFF
+ 178              4'h7:    cclk_pattern <= 8'b10101010;  // Divide by 1
+ 178              4'h6:    cclk_pattern <= 8'b11001100;  // Divide by 2
+ 178              4'h5:    cclk_pattern <= 8'b11110000;  // Divide by 4
+ 178              default: cclk_pattern <= {8{~cclk_pattern[1]}}; // /8
+ 178            endcase
+ 182         cclk_pattern <= 8'b00000000;	 
+ 182       end // always @ (posedge cclk_div)
+ 196        .DATA_RATE_OQ("DDR"),     // DDR, SDR
+ 196        .DATA_RATE_TQ("SDR"),     // DDR, BUF, SDR
+ 196        .DATA_WIDTH(8),           // Parallel data width (2-8,10,14)
+ 196        .INIT_OQ(1'b0),           // Initial value of OQ output (1'b0,1'b1)
+ 196        .INIT_TQ(1'b0),           // Initial value of TQ output (1'b0,1'b1)
+ 196        .SERDES_MODE("MASTER"),   // MASTER, SLAVE
+ 196        .SRVAL_OQ(1'b0),          // OQ output value when SR is used (1'b0,1'b1)
+ 196        .SRVAL_TQ(1'b0),          // TQ output value when SR is used (1'b0,1'b1)
+ 196        .TBYTE_CTL("FALSE"),      // Enable tristate byte operation (FALSE, TRUE)
+ 196        .TBYTE_SRC("FALSE"),      // Tristate byte source (FALSE, TRUE)
+ 196        .TRISTATE_WIDTH(1)        // 3-state converter width (1,4)
+ 201         .OFB(),                  // Feedback path for data
+ 201         .OQ(cclk),               // Data path output
+ 201         .SHIFTOUT1(),            
+ 208         .TBYTEOUT(),             // Byte group tristate
+ 208         .TFB(),                  // 1-bit output: 3-state control
+ 208         .TQ(),                   // 3-state control
+ 208         .CLK(cclk_base),         // High speed clock
+ 208         .CLKDIV(cclk_div),       // Divided clock
+ 208         .D1(cclk_pattern[1]),    // Parallel data inputs
+ 218         .OCE(1'b1),             // Output data clock enable TODO: gating?
+ 218         .RST(reset),            // Reset
+ 218         .SHIFTIN1(1'b0),        // Data input expansion (1-bit each)
+ 220         .T1(1'b0),              // Parallel 3-state inputs
+ 225         .TBYTEIN(1'b0),         // Byte group tristate
+ 225         .TCE(1'b0)              // 3-state clock enable
+ 239    end else 
+ 239      begin : gen_fixed_cclk // Non-dividable CCLK
+ 239 	reg       enb_sync;
+ 239 	always @ (posedge cclk_div)
+ 239 	  enb_sync     <= ecfg_cclk_en;
+ 239 	assign cclk = cclk_base & enb_sync;
+ 239      end   

Clone Blocks:
Clone Blocks 1:
oh/elink/hdl/eclock.v@156:247
   BUFG lclk_p_buf
     (.O   (txlclk_p),
      .I   (lclk_p_src));

generate
   if( FEATURE_CCLK_DIV ) begin : gen_cclk_div

         // Create adjustable (but fast) CCLK
   wire      rxi_cclk_out;
   reg [8:1] cclk_pattern;
   reg [3:0] clk_div_sync;
   reg       enb_sync;
   
   always @ (posedge cclk_p) begin  // Might need x-clock TIG here

      clk_div_sync <= ecfg_cclk_div;
      enb_sync     <= ecfg_cclk_en;

      if(enb_sync)
        case(clk_div_sync)
          4'h0:    cclk_pattern <= 8'd0;         // Clock OFF
          4'h7:    cclk_pattern <= 8'b10101010;  // Divide by 1
          4'h6:    cclk_pattern <= 8'b11001100;  // Divide by 2
          4'h5:    cclk_pattern <= 8'b11110000;  // Divide by 4
          default: cclk_pattern <= {8{~cclk_pattern[1]}}; // /8
        endcase
      else
        cclk_pattern <= 8'b00000000;

   end // always @ (posedge lclk_p)
         
   OSERDESE2 
     #(
       .DATA_RATE_OQ("DDR"),  // DDR, SDR
       .DATA_RATE_TQ("SDR"),  // DDR, BUF, SDR
       .DATA_WIDTH(8),        // Parallel data width (2-8,10,14)
       .INIT_OQ(1'b0),        // Initial value of OQ output (1'b0,1'b1)
       .INIT_TQ(1'b0),        // Initial value of TQ output (1'b0,1'b1)
       .SERDES_MODE("MASTER"), // MASTER, SLAVE
       .SRVAL_OQ(1'b0),       // OQ output value when SR is used (1'b0,1'b1)
       .SRVAL_TQ(1'b0),       // TQ output value when SR is used (1'b0,1'b1)
       .TBYTE_CTL("FALSE"),   // Enable tristate byte operation (FALSE, TRUE)
       .TBYTE_SRC("FALSE"),   // Tristate byte source (FALSE, TRUE)
       .TRISTATE_WIDTH(1)     // 3-state converter width (1,4)
       ) OSERDESE2_inst 
       (
        .OFB(),             // 1-bit output: Feedback path for data
        .OQ(cclk),          // 1-bit output: Data path output
        .SHIFTOUT1(),       // SHIFTOUTn: 1-bit (each): Data output expansion
        .SHIFTOUT2(),
        .TBYTEOUT(),        // 1-bit output: Byte group tristate
        .TFB(),             // 1-bit output: 3-state control
        .TQ(),              // 1-bit output: 3-state control
        .CLK(cclk_base),    // 1-bit input: High speed clock
        .CLKDIV(cclk_p),    // 1-bit input: Divided clock
        .D1(cclk_pattern[1]), // D1 - D8: Parallel data inputs (1-bit each)
        .D2(cclk_pattern[2]),
        .D3(cclk_pattern[3]),
        .D4(cclk_pattern[4]),
        .D5(cclk_pattern[5]),
        .D6(cclk_pattern[6]),
        .D7(cclk_pattern[7]),
        .D8(cclk_pattern[8]),
        .OCE(1'b1),         // 1-bit input: Output data clock enable
        .RST(reset),        // 1-bit input: Reset
        .SHIFTIN1(1'b0),    // SHIFTINn: Data input expansion (1-bit each)
        .SHIFTIN2(1'b0),
        .T1(1'b0),          // T1 - T4: Parallel 3-state inputs
        .T2(1'b0),
        .T3(1'b0),
        .T4(1'b0),
        .TBYTEIN(1'b0),     // 1-bit input: Byte group tristate
        .TCE(1'b0)          // 1-bit input: 3-state clock enable
        );

   end else begin : gen_fixed_cclk // Non-dividable CCLK

   reg       enb_sync;

   always @ (posedge cclk_p)
      enb_sync     <= ecfg_cclk_en;

   // The following does not result in timing failures,
   //  but doesn't seem glitch-safe
   assign cclk = cclk_base & enb_sync;
   
   end
endgenerate
   
   // xilinx OBUFDS instantiation
   //
   OBUFDS

