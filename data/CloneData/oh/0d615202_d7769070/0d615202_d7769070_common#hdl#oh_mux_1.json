{"Source Block": ["oh/common/hdl/oh_mux.v@15:30@HdlStmProcess", "    );\n   \n   reg [DW-1:0]     out;\n   \n   integer \t    i;   \n   always @*\n     begin\n\tout[DW-1:0] = 'b0;\n\tfor(i=0;i<N;i=i+1)\n\t  out[DW-1:0] |= {(DW){sel[i]}} & in[((i+1)*DW-1)-:DW];\n     end\n\nendmodule // oh_mux\n\n\n\n"], "Clone Blocks": [["oh/common/hdl/oh_gray2bin.v@9:19", "   (\n    input [DW-1:0]  in,  //gray encoded input\n    output [DW-1:0] out  //binary encoded output\n    );\n   \n   reg [DW-1:0]     bin;\n   wire [DW-1:0]    gray;\n   \n   integer \t   i,j;\n\n   assign gray[DW-1:0] = in[DW-1:0];\n"], ["oh/common/hdl/oh_rise2pulse.v@19:27", "     if(!nreset)\n       in_reg[DW-1:0]  <= 'b0 ;\n     else\n       in_reg[DW-1:0]  <= in[DW-1:0] ;\n   \n   assign out[DW-1:0]  = in[DW-1:0] & ~in_reg[DW-1:0] ;\n   \nendmodule // oh_rise2pulse\n\n"], ["oh/common/hdl/oh_gray2bin.v@12:22", "    );\n   \n   reg [DW-1:0]     bin;\n   wire [DW-1:0]    gray;\n   \n   integer \t   i,j;\n\n   assign gray[DW-1:0] = in[DW-1:0];\n   assign out[DW-1:0]  = bin[DW-1:0];\n\n   always @*\n"], ["oh/common/hdl/oh_bin2gray.v@13:23", "    );\n   \n   reg [DW-1:0]    gray; \n   wire [DW-1:0]   bin;\n\n   integer \t   i;   \n\n   assign bin[DW-1:0]  = in[DW-1:0];\n   assign out[DW-1:0]  = gray[DW-1:0];\n  \n   always @*\n"], ["oh/common/hdl/oh_bin2gray.v@10:20", "   (\n    input [DW-1:0]  in, //binary encoded input\n    output [DW-1:0] out //gray encoded output\n    );\n   \n   reg [DW-1:0]    gray; \n   wire [DW-1:0]   bin;\n\n   integer \t   i;   \n\n   assign bin[DW-1:0]  = in[DW-1:0];\n"], ["oh/common/hdl/oh_bin2gray.v@18:30", "   integer \t   i;   \n\n   assign bin[DW-1:0]  = in[DW-1:0];\n   assign out[DW-1:0]  = gray[DW-1:0];\n  \n   always @*\n     begin\n\tgray[DW-1] = bin[DW-1];   \n\tfor (i=0; i<(DW-1); i=i+1)\n\t  gray[i] = bin[i] ^ bin[i+1];\t      \n     end\n   \nendmodule // oh_bin2gray\n"], ["oh/common/hdl/oh_mux.v@14:24", "    output [DW-1:0]  out  // output\n    );\n   \n   reg [DW-1:0]     out;\n   \n   integer \t    i;   \n   always @*\n     begin\n\tout[DW-1:0] = 'b0;\n\tfor(i=0;i<N;i=i+1)\n\t  out[DW-1:0] |= {(DW){sel[i]}} & in[((i+1)*DW-1)-:DW];\n"], ["oh/common/hdl/oh_edge2pulse.v@19:26", "     if(!nreset)\n       in_reg[DW-1:0]  <= 'b0 ;\n     else\n       in_reg[DW-1:0]  <= in[DW-1:0] ;\n     \n   assign out[DW-1:0]  = in_reg[DW-1:0]  ^ in[DW-1:0] ;\n   \nendmodule // oh_edge2pulse\n"], ["oh/common/hdl/oh_fall2pulse.v@19:27", "     if(!nreset)\n       in_reg[DW-1:0]  <= 'b0 ;\n     else\n       in_reg[DW-1:0]  <= in[DW-1:0] ;\n   \n   assign out[DW-1:0]  = ~in[DW-1:0] & in_reg[DW-1:0] ;\n   \nendmodule // oh_fall2pulse\n\n"], ["oh/common/hdl/oh_gray2bin.v@12:22", "    );\n   \n   reg [DW-1:0]     bin;\n   wire [DW-1:0]    gray;\n   \n   integer \t   i,j;\n\n   assign gray[DW-1:0] = in[DW-1:0];\n   assign out[DW-1:0]  = bin[DW-1:0];\n\n   always @*\n"]], "Diff Content": {"Delete": [[24, "\t  out[DW-1:0] |= {(DW){sel[i]}} & in[((i+1)*DW-1)-:DW];\n"]], "Add": [[24, "\t  out[DW-1:0] = out[DW-1:0] | {(DW){sel[i]}} & in[((i+1)*DW-1)-:DW];\n"]]}}