Source Block: oh/common/hdl/oh_memory_dp.v@38:78@HdlStmIf
    input [7:0]     memconfig, // generic memory config
    input [7:0]     memrepair // repair vector
    );

   generate
      if(SYN=="true") begin: soft
	 //#########################################
	 // Generic RAM for synthesis
	 //#########################################
	 //local variables
	 reg [DW-1:0]        ram    [0:DEPTH-1];
	 wire [DW-1:0] 	     rdata;
	 integer 	     i;

	 //write port
	 always @(posedge wr_clk)
	   for (i=0;i<DW;i=i+1)
	     if (wr_en & wr_wem[i])
               ram[wr_addr[AW-1:0]][i] <= wr_din[i];
	 //read port
	 assign rdata[DW-1:0] = ram[rd_addr[AW-1:0]];

	 //Configurable output register
	 reg [DW-1:0] 	     rd_reg;
	 always @ (posedge rd_clk)
	   if(rd_en)
	     rd_reg[DW-1:0] <= rdata[DW-1:0];

	 //Drive output from register or RAM directly
	 assign rd_dout[DW-1:0] = (REG==1) ? rd_reg[DW-1:0] :
		                  rdata[DW-1:0];
      end // block: soft
      else begin: hard
	 asic_memory_dp #(.DW(DW),
			  .DEPTH(DEPTH),
			  .SHAPE(SHAPE),
			  .REG(REG))
	 asic_memory_dp ();
      end // block: hard
   endgenerate
endmodule // oh_memory_dp

Diff Content:
- 43       if(SYN=="true") begin: soft
- 56                ram[wr_addr[AW-1:0]][i] <= wr_din[i];
- 70       else begin: hard
+ 43       if(SYN=="true") begin
+ 56                ram[wr_addr[AW-1:0]][i] = wr_din[i];
+ 70       else begin

Clone Blocks:
Clone Blocks 1:
oh/common/hdl/oh_memory_sp.v@35:75
    input [7:0]     memconfig, // generic memory config
    input [7:0]     memrepair // repair vector
    );

   generate
      if(SYN=="true") begin: soft
	 //#########################################
	 // Generic RAM for synthesis
	 //#########################################
	 //local variables
	 reg [DW-1:0]        ram    [0:DEPTH-1];
	 wire [DW-1:0] 	     rdata;
	 integer 	     i;

	 //write port
	 always @(posedge clk)
	   for (i=0;i<DW;i=i+1)
	     if (en & wem[i])
               ram[addr[AW-1:0]][i] <= din[i];
	 //read port
	 assign rdata[DW-1:0] = ram[addr[AW-1:0]];

	 //Configurable output register
	 reg [DW-1:0] 	     rd_reg;
	 always @ (posedge clk)
	   if(en)
	     rd_reg[DW-1:0] <= rdata[DW-1:0];

	 //Drive output from register or RAM directly
	 assign dout[DW-1:0] = (REG==1) ? rd_reg[DW-1:0] :
		                          rdata[DW-1:0];
      end // block: soft
      else begin: hard
	 asic_memory_sp #(.DW(DW),
			  .DEPTH(DEPTH),
			  .SHAPE(SHAPE),
			  .REG(REG))
	 asic_memory_sp ();
      end // block: hard
   endgenerate
endmodule // oh_memory_dp

