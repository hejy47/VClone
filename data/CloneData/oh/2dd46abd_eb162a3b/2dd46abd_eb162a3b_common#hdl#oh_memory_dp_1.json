{"Source Block": ["oh/common/hdl/oh_memory_dp.v@38:78@HdlStmIf", "    input [7:0]     memconfig, // generic memory config\n    input [7:0]     memrepair // repair vector\n    );\n\n   generate\n      if(SYN==\"true\") begin: soft\n\t //#########################################\n\t // Generic RAM for synthesis\n\t //#########################################\n\t //local variables\n\t reg [DW-1:0]        ram    [0:DEPTH-1];\n\t wire [DW-1:0] \t     rdata;\n\t integer \t     i;\n\n\t //write port\n\t always @(posedge wr_clk)\n\t   for (i=0;i<DW;i=i+1)\n\t     if (wr_en & wr_wem[i])\n               ram[wr_addr[AW-1:0]][i] <= wr_din[i];\n\t //read port\n\t assign rdata[DW-1:0] = ram[rd_addr[AW-1:0]];\n\n\t //Configurable output register\n\t reg [DW-1:0] \t     rd_reg;\n\t always @ (posedge rd_clk)\n\t   if(rd_en)\n\t     rd_reg[DW-1:0] <= rdata[DW-1:0];\n\n\t //Drive output from register or RAM directly\n\t assign rd_dout[DW-1:0] = (REG==1) ? rd_reg[DW-1:0] :\n\t\t                  rdata[DW-1:0];\n      end // block: soft\n      else begin: hard\n\t asic_memory_dp #(.DW(DW),\n\t\t\t  .DEPTH(DEPTH),\n\t\t\t  .SHAPE(SHAPE),\n\t\t\t  .REG(REG))\n\t asic_memory_dp ();\n      end // block: hard\n   endgenerate\nendmodule // oh_memory_dp\n"], "Clone Blocks": [["oh/common/hdl/oh_memory_sp.v@35:75", "    input [7:0]     memconfig, // generic memory config\n    input [7:0]     memrepair // repair vector\n    );\n\n   generate\n      if(SYN==\"true\") begin: soft\n\t //#########################################\n\t // Generic RAM for synthesis\n\t //#########################################\n\t //local variables\n\t reg [DW-1:0]        ram    [0:DEPTH-1];\n\t wire [DW-1:0] \t     rdata;\n\t integer \t     i;\n\n\t //write port\n\t always @(posedge clk)\n\t   for (i=0;i<DW;i=i+1)\n\t     if (en & wem[i])\n               ram[addr[AW-1:0]][i] <= din[i];\n\t //read port\n\t assign rdata[DW-1:0] = ram[addr[AW-1:0]];\n\n\t //Configurable output register\n\t reg [DW-1:0] \t     rd_reg;\n\t always @ (posedge clk)\n\t   if(en)\n\t     rd_reg[DW-1:0] <= rdata[DW-1:0];\n\n\t //Drive output from register or RAM directly\n\t assign dout[DW-1:0] = (REG==1) ? rd_reg[DW-1:0] :\n\t\t                          rdata[DW-1:0];\n      end // block: soft\n      else begin: hard\n\t asic_memory_sp #(.DW(DW),\n\t\t\t  .DEPTH(DEPTH),\n\t\t\t  .SHAPE(SHAPE),\n\t\t\t  .REG(REG))\n\t asic_memory_sp ();\n      end // block: hard\n   endgenerate\nendmodule // oh_memory_dp\n"]], "Diff Content": {"Delete": [[43, "      if(SYN==\"true\") begin: soft\n"], [56, "               ram[wr_addr[AW-1:0]][i] <= wr_din[i];\n"], [70, "      else begin: hard\n"]], "Add": [[43, "      if(SYN==\"true\") begin\n"], [56, "               ram[wr_addr[AW-1:0]][i] = wr_din[i];\n"], [70, "      else begin\n"]]}}