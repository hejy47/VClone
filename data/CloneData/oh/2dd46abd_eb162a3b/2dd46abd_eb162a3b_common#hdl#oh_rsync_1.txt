Source Block: oh/common/hdl/oh_rsync.v@14:37@HdlStmIf
    input  nrst_in,
    output nrst_out
    );

   generate
      if(SYN=="true") begin: soft
	 reg [SYNCPIPE-1:0] sync_pipe;
	 always @ (posedge clk or negedge nrst_in)
	   if(!nrst_in)
	     sync_pipe[SYNCPIPE-1:0] <= 1'b0;
	   else
	     sync_pipe[SYNCPIPE-1:0] <= {sync_pipe[SYNCPIPE-2:0],1'b1};
	 assign nrst_out = sync_pipe[SYNCPIPE-1];
      end
      else
	begin: hard
	   asic_rsync #(.TYPE(TYPE),
			.SYNCPIPE(SYNCPIPE))
	   asic_rsync (.clk(clk),
		       .nrst_in(nrst_in),
		       .nrst_out(nrst_out));
	end
   endgenerate
endmodule // oh_rsync

Diff Content:
- 19       if(SYN=="true") begin: soft
- 20 	 reg [SYNCPIPE-1:0] sync_pipe;
- 21 	 always @ (posedge clk or negedge nrst_in)
- 22 	   if(!nrst_in)
- 23 	     sync_pipe[SYNCPIPE-1:0] <= 1'b0;
- 24 	   else
- 25 	     sync_pipe[SYNCPIPE-1:0] <= {sync_pipe[SYNCPIPE-2:0],1'b1};
- 26 	 assign nrst_out = sync_pipe[SYNCPIPE-1];
- 27       end
- 29 	begin: hard
+ 27       if(SYN=="true")
+ 27 	begin
+ 27 	   reg [SYNCPIPE-1:0] sync_pipe;
+ 27 	   always @ (posedge clk or negedge nrst_in)
+ 27 	     if(!nrst_in)
+ 27 	       sync_pipe[SYNCPIPE-1:0] <= 'b0;
+ 27 	     else
+ 27 	       sync_pipe[SYNCPIPE-1:0] <= {sync_pipe[SYNCPIPE-2:0],1'b1};
+ 27 	   assign nrst_out = sync_pipe[SYNCPIPE-1];
+ 27 	end
+ 29 	begin

Clone Blocks:
