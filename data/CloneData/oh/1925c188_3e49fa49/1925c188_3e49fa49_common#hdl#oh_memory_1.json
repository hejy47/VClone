{"Source Block": ["oh/common/hdl/oh_memory.v@40:89@HdlStmIf", "    input [7:0]     memconfig, // generic memory config      \n    input [7:0]     memrepair // repair vector\n    );\n   \n   generate\n      if(TYPE==\"soft\") begin: soft\n\t oh_ram #(.DW(DW),\n\t\t  .DEPTH(DEPTH),\n\t\t  .REG(REG),\n\t\t  .DUALPORT(DUALPORT))\n\t oh_ram(/*AUTOINST*/\n\t\t// Outputs\n\t\t.rd_dout\t\t(rd_dout[DW-1:0]),\n\t\t// Inputs\n\t\t.rd_clk\t\t\t(rd_clk),\n\t\t.rd_en\t\t\t(rd_en),\n\t\t.rd_addr\t\t(rd_addr[AW-1:0]),\n\t\t.wr_clk\t\t\t(wr_clk),\n\t\t.wr_en\t\t\t(wr_en),\n\t\t.wr_addr\t\t(wr_addr[AW-1:0]),\n\t\t.wr_wem\t\t\t(wr_wem[DW-1:0]),\n\t\t.wr_din\t\t\t(wr_din[DW-1:0]));\n      end // block: soft\n      else begin: hard\n\t //#########################################\n\t // Hard coded RAM Macros\n\t //#########################################\n\t asic_ram #(.DW(DW),\n\t\t    .DEPTH(DEPTH),\n\t\t    .REG(REG),\n\t\t    .DUALPORT(DUALPORT),\n\t\t    .CONFIG(CONFIG),\n\t\t    .SHAPE(SHAPE))\n\t asic_ram(// Outputs\n\t\t  .rd_dout   (rd_dout[DW-1:0]),\n\t\t  // Inputs\n\t\t  .rd_clk    (rd_clk),\n\t\t  .rd_en     (rd_en),\n\t\t  .rd_addr   (rd_addr[AW-1:0]),\n\t\t  .wr_clk    (wr_clk),\n\t\t  .wr_en     (wr_en),\n\t\t  .wr_addr   (wr_addr[AW-1:0]),\n\t\t  .wr_wem    (wr_wem[DW-1:0]),\n\t\t  .wr_din    (wr_din[DW-1:0]));\n      end // block: hard\n   endgenerate\n   \nendmodule // oh_memory_dp\n\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[45, "      if(TYPE==\"soft\") begin: soft\n"], [63, "      else begin: hard\n"]], "Add": [[45, "      if(TYPE==\"soft\") begin: ram_soft\n"], [63, "      else begin: ram_hard\n"]]}}