{"Source Block": ["oh/elink/hdl/etx_protocol.v@109:119@HdlStmAssign", "     if(!nreset)\n       done <= 1'b0;                 \n     else\n       done <= tx_access & ~done & ~tx_burst;\n  \n   assign tx_io_wait = tx_access & ~done & ~tx_burst;//tx_burst_reg\n\n   //Ugly hack. When there is an async wait coming in and we are in the middle of a transction\n   //we sample in a new value to realign the pipeline since the current transaction already went\n   //out to the IO.(must be a better way???)\n   assign adjust     = tx_io_wait_reg & (tx_rd_wait | tx_wr_wait);\n"], "Clone Blocks": [["oh/elink/hdl/etx_protocol.v@103:117", "   //if burst, you get immediate \"ack\"\n   //otherwise you get ack in one cycle (since it takes 2 clocks for trans to exit IO)  \n   reg \t\t done;\n   wire \t tx_io_wait;\n\n   always @ (posedge clk or negedge nreset)\n     if(!nreset)\n       done <= 1'b0;                 \n     else\n       done <= tx_access & ~done & ~tx_burst;\n  \n   assign tx_io_wait = tx_access & ~done & ~tx_burst;//tx_burst_reg\n\n   //Ugly hack. When there is an async wait coming in and we are in the middle of a transction\n   //we sample in a new value to realign the pipeline since the current transaction already went\n"]], "Diff Content": {"Delete": [[114, "   assign tx_io_wait = tx_access & ~done & ~tx_burst;//tx_burst_reg\n"]], "Add": []}}