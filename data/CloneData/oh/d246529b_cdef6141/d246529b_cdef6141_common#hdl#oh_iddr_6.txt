Source Block: oh/common/hdl/oh_iddr.v@46:55@HdlStmAssign
     if(ce)
       q2_sl[DW-1:0] <= #0.2 q2_sh[DW-1:0];

   // driving vectors
   assign q1[DW-1:0] = q1_sl[DW-1:0];   
   assign q2[DW-1:0] = q2_sl[DW-1:0];
            
endmodule // oh_iddr



Diff Content:
- 51    assign q2[DW-1:0] = q2_sl[DW-1:0];
+ 51        begin
+ 51 	  q1[DW-1:0] <= q1_sl[DW-1:0];
+ 51 	  q2[DW-1:0] <= q2_sh[DW-1:0];
+ 51        end

Clone Blocks:
Clone Blocks 1:
oh/common/hdl/oh_iddr.v@45:55
   always @ (posedge clk)
     if(ce)
       q2_sl[DW-1:0] <= #0.2 q2_sh[DW-1:0];

   // driving vectors
   assign q1[DW-1:0] = q1_sl[DW-1:0];   
   assign q2[DW-1:0] = q2_sl[DW-1:0];
            
endmodule // oh_iddr



Clone Blocks 2:
oh/common/hdl/oh_iddr.v@27:37
   output [DW-1:0]  q2;     // iddr falling edge sampled data
   
   //regs("sl"=stable low, "sh"=stable high)
   reg [DW-1:0]     q1_sl;
   reg [DW-1:0]     q2_sh;
   reg [DW-1:0]     q2_sl;
   
   // sample on rising edge
   always @ (posedge clk)
     if(ce)
       q1_sl[DW-1:0] <= #0.2  din[DW-1:0];

Clone Blocks 3:
oh/common/hdl/oh_oddr.v@37:47
     end
   
   always @ (negedge clk)
     q2_sh[DW-1:0] <= #(0.1) q2_sl[DW-1:0];
       
   assign out[DW-1:0] = clk ? q1_sl[DW-1:0] : 
	                      q2_sh[DW-1:0];
      
endmodule // oh_oddr



Clone Blocks 4:
oh/common/hdl/oh_iddr.v@25:35
   input [DW-1:0]   din;    // data input 
   output [DW-1:0]  q1;     // iddr rising edge sampled data
   output [DW-1:0]  q2;     // iddr falling edge sampled data
   
   //regs("sl"=stable low, "sh"=stable high)
   reg [DW-1:0]     q1_sl;
   reg [DW-1:0]     q2_sh;
   reg [DW-1:0]     q2_sl;
   
   // sample on rising edge
   always @ (posedge clk)

