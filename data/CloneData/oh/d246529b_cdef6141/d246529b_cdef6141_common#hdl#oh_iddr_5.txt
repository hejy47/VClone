Source Block: oh/common/hdl/oh_iddr.v@45:55@HdlStmAssign
   always @ (posedge clk)
     if(ce)
       q2_sl[DW-1:0] <= #0.2 q2_sh[DW-1:0];

   // driving vectors
   assign q1[DW-1:0] = q1_sl[DW-1:0];   
   assign q2[DW-1:0] = q2_sl[DW-1:0];
            
endmodule // oh_iddr



Diff Content:
- 50    assign q1[DW-1:0] = q1_sl[DW-1:0];   

Clone Blocks:
Clone Blocks 1:
oh/common/hdl/oh_iddr.v@27:37
   output [DW-1:0]  q2;     // iddr falling edge sampled data
   
   //regs("sl"=stable low, "sh"=stable high)
   reg [DW-1:0]     q1_sl;
   reg [DW-1:0]     q2_sh;
   reg [DW-1:0]     q2_sl;
   
   // sample on rising edge
   always @ (posedge clk)
     if(ce)
       q1_sl[DW-1:0] <= #0.2  din[DW-1:0];

Clone Blocks 2:
oh/common/hdl/oh_oddr.v@37:47
     end
   
   always @ (negedge clk)
     q2_sh[DW-1:0] <= #(0.1) q2_sl[DW-1:0];
       
   assign out[DW-1:0] = clk ? q1_sl[DW-1:0] : 
	                      q2_sh[DW-1:0];
      
endmodule // oh_oddr



Clone Blocks 3:
oh/common/hdl/oh_iddr.v@40:52
   always @ (negedge clk)
     if(ce)
       q2_sh[DW-1:0] <= #0.2  din[DW-1:0];
              
   // same phase sampling the negedge
   always @ (posedge clk)
     if(ce)
       q2_sl[DW-1:0] <= #0.2 q2_sh[DW-1:0];

   // driving vectors
   assign q1[DW-1:0] = q1_sl[DW-1:0];   
   assign q2[DW-1:0] = q2_sl[DW-1:0];
            

Clone Blocks 4:
oh/common/hdl/oh_lat1.v@44:53
   always @ (posedge clk)
     out_dv_sl[DW-1:0] <= in_sh[DW-1:0];
   assign out_sl[DW-1:0] = out_dv_sl[DW-1:0];

`else 
   assign out_sl[DW-1:0] = out_real_sl[DW-1:0];
`endif // !`ifdef CFG_FAKELAT

endmodule // lat1


Clone Blocks 5:
oh/common/hdl/oh_iddr.v@26:36
   output [DW-1:0]  q1;     // iddr rising edge sampled data
   output [DW-1:0]  q2;     // iddr falling edge sampled data
   
   //regs("sl"=stable low, "sh"=stable high)
   reg [DW-1:0]     q1_sl;
   reg [DW-1:0]     q2_sh;
   reg [DW-1:0]     q2_sl;
   
   // sample on rising edge
   always @ (posedge clk)
     if(ce)

Clone Blocks 6:
oh/common/hdl/oh_oddr.v@23:33
   input [DW-1:0]  din1;  // data input1
   input [DW-1:0]  din2;  // data input2
   output [DW-1:0] out;   // ddr output

   //regs("sl"=stable low, "sh"=stable high)
   reg [DW-1:0]    q1_sl;   
   reg [DW-1:0]    q2_sl;
   reg [DW-1:0]    q2_sh;
      
   //Generate different logic based on parameters
   always @ (posedge clk)

Clone Blocks 7:
oh/common/hdl/oh_iddr.v@25:35
   input [DW-1:0]   din;    // data input 
   output [DW-1:0]  q1;     // iddr rising edge sampled data
   output [DW-1:0]  q2;     // iddr falling edge sampled data
   
   //regs("sl"=stable low, "sh"=stable high)
   reg [DW-1:0]     q1_sl;
   reg [DW-1:0]     q2_sh;
   reg [DW-1:0]     q2_sl;
   
   // sample on rising edge
   always @ (posedge clk)

Clone Blocks 8:
oh/common/hdl/oh_oddr.v@25:35
   output [DW-1:0] out;   // ddr output

   //regs("sl"=stable low, "sh"=stable high)
   reg [DW-1:0]    q1_sl;   
   reg [DW-1:0]    q2_sl;
   reg [DW-1:0]    q2_sh;
      
   //Generate different logic based on parameters
   always @ (posedge clk)
     begin
	q1_sl[DW-1:0] <= #(0.1) din1[DW-1:0];

Clone Blocks 9:
oh/common/hdl/oh_iddr.v@46:55
     if(ce)
       q2_sl[DW-1:0] <= #0.2 q2_sh[DW-1:0];

   // driving vectors
   assign q1[DW-1:0] = q1_sl[DW-1:0];   
   assign q2[DW-1:0] = q2_sl[DW-1:0];
            
endmodule // oh_iddr



