{"Source Block": ["hdl/library/axi_adc_trigger/axi_adc_trigger.v@134:144@HdlIdDef", "  reg               trigger_a_d3;\n  reg               trigger_b_d1; // synchronization flip flop\n  reg               trigger_b_d2; // synchronization flip flop\n  reg               trigger_b_d3;\n  reg               passthrough_high_a; // trigger when rising through the limit\n  reg               passthrough_low_a;  // trigger when fallingh thorugh the limit\n  reg               low_a; // signal was under the limit, so if it goes through, assert rising\n  reg               high_a; // signal was over the limit, so if it passes through, assert falling\n  reg               comp_high_a;  // signal is over the limit\n  reg               comp_low_a;   // signal is under the limit\n  reg               passthrough_high_b; // trigger when rising through the limit\n"], "Clone Blocks": [["hdl/library/axi_adc_trigger/axi_adc_trigger.v@131:141", "\n  reg               trigger_a_d1; // synchronization flip flop\n  reg               trigger_a_d2; // synchronization flip flop\n  reg               trigger_a_d3;\n  reg               trigger_b_d1; // synchronization flip flop\n  reg               trigger_b_d2; // synchronization flip flop\n  reg               trigger_b_d3;\n  reg               passthrough_high_a; // trigger when rising through the limit\n  reg               passthrough_low_a;  // trigger when fallingh thorugh the limit\n  reg               low_a; // signal was under the limit, so if it goes through, assert rising\n  reg               high_a; // signal was over the limit, so if it passes through, assert falling\n"], ["hdl/library/axi_adc_trigger/axi_adc_trigger.v@132:142", "  reg               trigger_a_d1; // synchronization flip flop\n  reg               trigger_a_d2; // synchronization flip flop\n  reg               trigger_a_d3;\n  reg               trigger_b_d1; // synchronization flip flop\n  reg               trigger_b_d2; // synchronization flip flop\n  reg               trigger_b_d3;\n  reg               passthrough_high_a; // trigger when rising through the limit\n  reg               passthrough_low_a;  // trigger when fallingh thorugh the limit\n  reg               low_a; // signal was under the limit, so if it goes through, assert rising\n  reg               high_a; // signal was over the limit, so if it passes through, assert falling\n  reg               comp_high_a;  // signal is over the limit\n"], ["hdl/library/axi_adc_trigger/axi_adc_trigger.v@130:140", "  wire              streaming;\n\n  reg               trigger_a_d1; // synchronization flip flop\n  reg               trigger_a_d2; // synchronization flip flop\n  reg               trigger_a_d3;\n  reg               trigger_b_d1; // synchronization flip flop\n  reg               trigger_b_d2; // synchronization flip flop\n  reg               trigger_b_d3;\n  reg               passthrough_high_a; // trigger when rising through the limit\n  reg               passthrough_low_a;  // trigger when fallingh thorugh the limit\n  reg               low_a; // signal was under the limit, so if it goes through, assert rising\n"], ["hdl/library/axi_adc_trigger/axi_adc_trigger.v@135:145", "  reg               trigger_b_d1; // synchronization flip flop\n  reg               trigger_b_d2; // synchronization flip flop\n  reg               trigger_b_d3;\n  reg               passthrough_high_a; // trigger when rising through the limit\n  reg               passthrough_low_a;  // trigger when fallingh thorugh the limit\n  reg               low_a; // signal was under the limit, so if it goes through, assert rising\n  reg               high_a; // signal was over the limit, so if it passes through, assert falling\n  reg               comp_high_a;  // signal is over the limit\n  reg               comp_low_a;   // signal is under the limit\n  reg               passthrough_high_b; // trigger when rising through the limit\n  reg               passthrough_low_b;  // trigger when fallingh thorugh the limit\n"], ["hdl/library/axi_adc_trigger/axi_adc_trigger.v@136:146", "  reg               trigger_b_d2; // synchronization flip flop\n  reg               trigger_b_d3;\n  reg               passthrough_high_a; // trigger when rising through the limit\n  reg               passthrough_low_a;  // trigger when fallingh thorugh the limit\n  reg               low_a; // signal was under the limit, so if it goes through, assert rising\n  reg               high_a; // signal was over the limit, so if it passes through, assert falling\n  reg               comp_high_a;  // signal is over the limit\n  reg               comp_low_a;   // signal is under the limit\n  reg               passthrough_high_b; // trigger when rising through the limit\n  reg               passthrough_low_b;  // trigger when fallingh thorugh the limit\n  reg               low_b;   // signal was under the limit, so if it goes through, assert rising\n"], ["hdl/library/axi_adc_trigger/axi_adc_trigger.v@133:143", "  reg               trigger_a_d2; // synchronization flip flop\n  reg               trigger_a_d3;\n  reg               trigger_b_d1; // synchronization flip flop\n  reg               trigger_b_d2; // synchronization flip flop\n  reg               trigger_b_d3;\n  reg               passthrough_high_a; // trigger when rising through the limit\n  reg               passthrough_low_a;  // trigger when fallingh thorugh the limit\n  reg               low_a; // signal was under the limit, so if it goes through, assert rising\n  reg               high_a; // signal was over the limit, so if it passes through, assert falling\n  reg               comp_high_a;  // signal is over the limit\n  reg               comp_low_a;   // signal is under the limit\n"], ["hdl/library/axi_adc_trigger/axi_adc_trigger.v@137:147", "  reg               trigger_b_d3;\n  reg               passthrough_high_a; // trigger when rising through the limit\n  reg               passthrough_low_a;  // trigger when fallingh thorugh the limit\n  reg               low_a; // signal was under the limit, so if it goes through, assert rising\n  reg               high_a; // signal was over the limit, so if it passes through, assert falling\n  reg               comp_high_a;  // signal is over the limit\n  reg               comp_low_a;   // signal is under the limit\n  reg               passthrough_high_b; // trigger when rising through the limit\n  reg               passthrough_low_b;  // trigger when fallingh thorugh the limit\n  reg               low_b;   // signal was under the limit, so if it goes through, assert rising\n  reg               high_b;   // signal was over the limit, so if it passes through, assert falling\n"]], "Diff Content": {"Delete": [[139, "  reg               passthrough_low_a;  // trigger when fallingh thorugh the limit\n"]], "Add": []}}