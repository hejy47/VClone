{"Source Block": ["hdl/library/axi_dacfifo/axi_dacfifo_wr.v@252:279@HdlStmProcess", "  assign dma_mem_raddr_s = (MEM_RATIO == 1) ?  dma_mem_raddr :\n                           (MEM_RATIO == 2) ? {dma_mem_raddr, 1'b0} :\n                           (MEM_RATIO == 4) ? {dma_mem_raddr, 2'b0} :\n                                              {dma_mem_raddr, 3'b0};\n\n  always @(posedge dma_clk) begin\n    if (dma_rst == 1'b1) begin\n      dma_mem_addr_diff <= 'b0;\n      dma_mem_raddr_m1 <= 'b0;\n      dma_mem_raddr_m2 <= 'b0;\n      dma_mem_raddr <= 'b0;\n    end else begin\n      dma_mem_raddr_m1 <= g2b(axi_mem_raddr_g);\n      dma_mem_raddr_m2 <= dma_mem_raddr_m1;\n      dma_mem_raddr <= dma_mem_raddr_m2;\n      dma_mem_addr_diff <= dma_mem_addr_diff_s[DMA_MADDRESS_WIDTH-1:0];\n      if (dma_mem_addr_diff >= 180) begin\n        dma_ready <= 1'b0;\n      end else begin\n        dma_ready <= 1'b1;\n      end\n    end\n  end\n\n  // read address generation for the asymetric memory\n\n  always @(posedge axi_clk) begin\n    if (axi_resetn == 1'b0) begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[258, "    if (dma_rst == 1'b1) begin\n"]], "Add": [[258, "    if (dma_rst_s == 1'b1) begin\n"]]}}