Source Block: hdl/library/common/ad_mux.v@71:117@HdlStmFor
genvar j;

generate


  for (i = 0; i < NUM_STAGES; i = i + 1) begin: g_stage

    wire [CLOG2_CH_CNT-1:0] ch_sel_cur;
    assign ch_sel_cur = ch_sel_pln[i*CLOG2_CH_CNT+:CLOG2_CH_CNT];

    wire [CLOG2_MUX_SZ-1:0] ch_sel_w;
    assign ch_sel_w = ch_sel_cur >> i*CLOG2_MUX_SZ;

    if (EN_REG) begin
      reg [CLOG2_CH_CNT-1:0] ch_sel_d;
      always @(posedge clk) begin
        ch_sel_d <= ch_sel_cur;
      end
      if (i<NUM_STAGES-1) begin
        assign ch_sel_pln[(i+1)*CLOG2_CH_CNT+:CLOG2_CH_CNT] = ch_sel_d;
      end
    end else begin
      if (i<NUM_STAGES-1) begin
        assign ch_sel_pln[(i+1)*CLOG2_CH_CNT+:CLOG2_CH_CNT] = ch_sel_cur;
      end
    end

    for (j = 0; j < MUX_SZ**(NUM_STAGES-i); j = j + MUX_SZ) begin: g_mux

      ad_mux_core #(
        .CH_W (CH_W),
        .CH_CNT (MUX_SZ),
        .EN_REG (EN_REG)
      ) i_mux (
        .clk (clk),
        .data_in (mux_in[i*DW+j*CH_W+:MUX_SZ*CH_W]),
        .ch_sel (ch_sel_w),
        .data_out (mux_in[(i+1)*DW+(j/MUX_SZ)*CH_W+:CH_W])
      );

    end
  end

endgenerate

assign data_out = mux_in[NUM_STAGES*DW+:CH_W];


Diff Content:
- 98     for (j = 0; j < MUX_SZ**(NUM_STAGES-i); j = j + MUX_SZ) begin: g_mux
+ 98     localparam MAX_RANGE_PER_STAGE=MUX_SZ**(NUM_STAGES-i);
+ 98     for (j = 0; j < `MIN(MAX_RANGE_PER_STAGE,CH_CNT); j = j + MUX_SZ) begin: g_mux

Clone Blocks:
