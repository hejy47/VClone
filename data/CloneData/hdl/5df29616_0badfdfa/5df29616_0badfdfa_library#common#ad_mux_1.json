{"Source Block": ["hdl/library/common/ad_mux.v@71:117@HdlStmFor", "genvar j;\n\ngenerate\n\n\n  for (i = 0; i < NUM_STAGES; i = i + 1) begin: g_stage\n\n    wire [CLOG2_CH_CNT-1:0] ch_sel_cur;\n    assign ch_sel_cur = ch_sel_pln[i*CLOG2_CH_CNT+:CLOG2_CH_CNT];\n\n    wire [CLOG2_MUX_SZ-1:0] ch_sel_w;\n    assign ch_sel_w = ch_sel_cur >> i*CLOG2_MUX_SZ;\n\n    if (EN_REG) begin\n      reg [CLOG2_CH_CNT-1:0] ch_sel_d;\n      always @(posedge clk) begin\n        ch_sel_d <= ch_sel_cur;\n      end\n      if (i<NUM_STAGES-1) begin\n        assign ch_sel_pln[(i+1)*CLOG2_CH_CNT+:CLOG2_CH_CNT] = ch_sel_d;\n      end\n    end else begin\n      if (i<NUM_STAGES-1) begin\n        assign ch_sel_pln[(i+1)*CLOG2_CH_CNT+:CLOG2_CH_CNT] = ch_sel_cur;\n      end\n    end\n\n    for (j = 0; j < MUX_SZ**(NUM_STAGES-i); j = j + MUX_SZ) begin: g_mux\n\n      ad_mux_core #(\n        .CH_W (CH_W),\n        .CH_CNT (MUX_SZ),\n        .EN_REG (EN_REG)\n      ) i_mux (\n        .clk (clk),\n        .data_in (mux_in[i*DW+j*CH_W+:MUX_SZ*CH_W]),\n        .ch_sel (ch_sel_w),\n        .data_out (mux_in[(i+1)*DW+(j/MUX_SZ)*CH_W+:CH_W])\n      );\n\n    end\n  end\n\nendgenerate\n\nassign data_out = mux_in[NUM_STAGES*DW+:CH_W];\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[98, "    for (j = 0; j < MUX_SZ**(NUM_STAGES-i); j = j + MUX_SZ) begin: g_mux\n"]], "Add": [[98, "    localparam MAX_RANGE_PER_STAGE=MUX_SZ**(NUM_STAGES-i);\n"], [98, "    for (j = 0; j < `MIN(MAX_RANGE_PER_STAGE,CH_CNT); j = j + MUX_SZ) begin: g_mux\n"]]}}