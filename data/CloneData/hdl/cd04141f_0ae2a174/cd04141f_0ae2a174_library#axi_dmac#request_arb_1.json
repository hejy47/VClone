{"Source Block": ["hdl/library/axi_dmac/request_arb.v@332:489@HdlStmIf", "begin\n  eot_mem_dest[source_id] <= source_eot;\nend\n\n\ngenerate if (DMA_TYPE_DEST == DMA_TYPE_MM_AXI) begin\n\nwire                                  dest_bl_valid;\nwire                                  dest_bl_ready;\nwire [BEATS_PER_BURST_WIDTH_DEST-1:0] dest_burst_length;\nwire [BEATS_PER_BURST_WIDTH_SRC-1:0] dest_src_burst_length;\n\nassign dest_clk = m_dest_axi_aclk;\nassign dest_ext_resetn = m_dest_axi_aresetn;\n\nwire [ID_WIDTH-1:0] dest_address_id;\nwire dest_address_eot = eot_mem_dest[dest_address_id];\nwire dest_response_eot = eot_mem_dest[dest_response_id];\n\nassign dbg_dest_address_id = dest_address_id;\nassign dbg_dest_data_id = dest_data_response_id;\n\nassign dest_data_request_id = dest_address_id;\n\ndest_axi_mm #(\n  .ID_WIDTH(ID_WIDTH),\n  .DMA_DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n  .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST),\n  .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_DEST),\n  .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST),\n  .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST)\n) i_dest_dma_mm (\n  .m_axi_aclk(m_dest_axi_aclk),\n  .m_axi_aresetn(dest_resetn),\n\n  .enable(dest_enable),\n  .enabled(dest_enabled),\n\n  .req_valid(dest_req_valid),\n  .req_ready(dest_req_ready),\n  .req_address(dest_req_dest_address),\n\n  .bl_valid(dest_bl_valid),\n  .bl_ready(dest_bl_ready),\n  .measured_last_burst_length(dest_burst_length),\n\n  .response_valid(dest_response_valid),\n  .response_ready(dest_response_ready),\n  .response_resp(dest_response_resp),\n  .response_resp_eot(dest_response_resp_eot),\n  .response_resp_partial(dest_response_partial),\n  .response_data_burst_length(dest_response_data_burst_length),\n\n  .request_id(dest_request_id),\n  .response_id(dest_response_id),\n\n  .address_id(dest_address_id),\n\n  .address_eot(dest_address_eot),\n  .response_eot(dest_response_eot),\n\n  .fifo_valid(dest_valid),\n  .fifo_ready(dest_ready),\n  .fifo_data(dest_data),\n  .fifo_strb(dest_strb),\n  .fifo_last(dest_last),\n\n  .dest_burst_info_length(dest_burst_info_length),\n  .dest_burst_info_partial(dest_burst_info_partial),\n  .dest_burst_info_id(dest_burst_info_id),\n  .dest_burst_info_write(dest_burst_info_write),\n\n  .m_axi_awready(m_axi_awready),\n  .m_axi_awvalid(m_axi_awvalid),\n  .m_axi_awaddr(m_axi_awaddr),\n  .m_axi_awlen(m_axi_awlen),\n  .m_axi_awsize(m_axi_awsize),\n  .m_axi_awburst(m_axi_awburst),\n  .m_axi_awprot(m_axi_awprot),\n  .m_axi_awcache(m_axi_awcache),\n  .m_axi_wready(m_axi_wready),\n  .m_axi_wvalid(m_axi_wvalid),\n  .m_axi_wdata(m_axi_wdata),\n  .m_axi_wstrb(m_axi_wstrb),\n  .m_axi_wlast(m_axi_wlast),\n\n  .m_axi_bvalid(m_axi_bvalid),\n  .m_axi_bresp(m_axi_bresp),\n  .m_axi_bready(m_axi_bready)\n);\n\nutil_axis_fifo #(\n  .DATA_WIDTH(BEATS_PER_BURST_WIDTH_SRC),\n  .ADDRESS_WIDTH(0),\n  .ASYNC_CLK(ASYNC_CLK_SRC_DEST)\n) i_src_dest_bl_fifo (\n  .s_axis_aclk(src_clk),\n  .s_axis_aresetn(src_resetn),\n  .s_axis_valid(src_bl_valid),\n  .s_axis_ready(src_bl_ready),\n  .s_axis_full(),\n  .s_axis_data(src_burst_length),\n  .s_axis_room(),\n\n  .m_axis_aclk(dest_clk),\n  .m_axis_aresetn(dest_resetn),\n  .m_axis_valid(dest_bl_valid),\n  .m_axis_ready(dest_bl_ready),\n  .m_axis_data(dest_src_burst_length),\n  .m_axis_level(),\n  .m_axis_empty()\n);\n\n// Adapt burst length from source width to destination width by either\n// truncation or completion with ones.\nif (BEATS_PER_BURST_WIDTH_SRC == BEATS_PER_BURST_WIDTH_DEST) begin\nassign dest_burst_length = dest_src_burst_length;\nend\n\nif (BEATS_PER_BURST_WIDTH_SRC < BEATS_PER_BURST_WIDTH_DEST) begin\nassign dest_burst_length = {dest_src_burst_length,\n                           {BEATS_PER_BURST_WIDTH_DEST - BEATS_PER_BURST_WIDTH_SRC{1'b1}}};\nend\n\nif (BEATS_PER_BURST_WIDTH_SRC > BEATS_PER_BURST_WIDTH_DEST) begin\nassign dest_burst_length = dest_src_burst_length[BEATS_PER_BURST_WIDTH_SRC-1 -: BEATS_PER_BURST_WIDTH_DEST];\nend\n\nend else begin\n\nassign m_axi_awvalid = 1'b0;\nassign m_axi_awaddr = 'h00;\nassign m_axi_awlen = 'h00;\nassign m_axi_awsize = 'h00;\nassign m_axi_awburst = 'h00;\nassign m_axi_awprot = 'h00;\nassign m_axi_awcache = 'h00;\n\nassign m_axi_wvalid = 1'b0;\nassign m_axi_wdata = 'h00;\nassign m_axi_wstrb = 'h00;\nassign m_axi_wlast = 1'b0;\n\nassign m_axi_bready = 1'b0;\n\nassign src_bl_ready = 1'b1;\n\nassign dest_response_partial = 1'b0;\nassign dest_response_data_burst_length = 'h0;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin\n\nassign dest_clk = m_axis_aclk;\nassign dest_ext_resetn = 1'b1;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[364, "  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST)\n"]], "Add": [[364, "  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST),\n"], [364, "  .CACHE_COHERENT(CACHE_COHERENT_DEST)\n"]]}}