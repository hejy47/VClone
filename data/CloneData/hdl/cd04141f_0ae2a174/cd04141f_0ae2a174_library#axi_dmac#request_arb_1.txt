Source Block: hdl/library/axi_dmac/request_arb.v@332:489@HdlStmIf
begin
  eot_mem_dest[source_id] <= source_eot;
end


generate if (DMA_TYPE_DEST == DMA_TYPE_MM_AXI) begin

wire                                  dest_bl_valid;
wire                                  dest_bl_ready;
wire [BEATS_PER_BURST_WIDTH_DEST-1:0] dest_burst_length;
wire [BEATS_PER_BURST_WIDTH_SRC-1:0] dest_src_burst_length;

assign dest_clk = m_dest_axi_aclk;
assign dest_ext_resetn = m_dest_axi_aresetn;

wire [ID_WIDTH-1:0] dest_address_id;
wire dest_address_eot = eot_mem_dest[dest_address_id];
wire dest_response_eot = eot_mem_dest[dest_response_id];

assign dbg_dest_address_id = dest_address_id;
assign dbg_dest_data_id = dest_data_response_id;

assign dest_data_request_id = dest_address_id;

dest_axi_mm #(
  .ID_WIDTH(ID_WIDTH),
  .DMA_DATA_WIDTH(DMA_DATA_WIDTH_DEST),
  .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),
  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST),
  .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_DEST),
  .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST),
  .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),
  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST)
) i_dest_dma_mm (
  .m_axi_aclk(m_dest_axi_aclk),
  .m_axi_aresetn(dest_resetn),

  .enable(dest_enable),
  .enabled(dest_enabled),

  .req_valid(dest_req_valid),
  .req_ready(dest_req_ready),
  .req_address(dest_req_dest_address),

  .bl_valid(dest_bl_valid),
  .bl_ready(dest_bl_ready),
  .measured_last_burst_length(dest_burst_length),

  .response_valid(dest_response_valid),
  .response_ready(dest_response_ready),
  .response_resp(dest_response_resp),
  .response_resp_eot(dest_response_resp_eot),
  .response_resp_partial(dest_response_partial),
  .response_data_burst_length(dest_response_data_burst_length),

  .request_id(dest_request_id),
  .response_id(dest_response_id),

  .address_id(dest_address_id),

  .address_eot(dest_address_eot),
  .response_eot(dest_response_eot),

  .fifo_valid(dest_valid),
  .fifo_ready(dest_ready),
  .fifo_data(dest_data),
  .fifo_strb(dest_strb),
  .fifo_last(dest_last),

  .dest_burst_info_length(dest_burst_info_length),
  .dest_burst_info_partial(dest_burst_info_partial),
  .dest_burst_info_id(dest_burst_info_id),
  .dest_burst_info_write(dest_burst_info_write),

  .m_axi_awready(m_axi_awready),
  .m_axi_awvalid(m_axi_awvalid),
  .m_axi_awaddr(m_axi_awaddr),
  .m_axi_awlen(m_axi_awlen),
  .m_axi_awsize(m_axi_awsize),
  .m_axi_awburst(m_axi_awburst),
  .m_axi_awprot(m_axi_awprot),
  .m_axi_awcache(m_axi_awcache),
  .m_axi_wready(m_axi_wready),
  .m_axi_wvalid(m_axi_wvalid),
  .m_axi_wdata(m_axi_wdata),
  .m_axi_wstrb(m_axi_wstrb),
  .m_axi_wlast(m_axi_wlast),

  .m_axi_bvalid(m_axi_bvalid),
  .m_axi_bresp(m_axi_bresp),
  .m_axi_bready(m_axi_bready)
);

util_axis_fifo #(
  .DATA_WIDTH(BEATS_PER_BURST_WIDTH_SRC),
  .ADDRESS_WIDTH(0),
  .ASYNC_CLK(ASYNC_CLK_SRC_DEST)
) i_src_dest_bl_fifo (
  .s_axis_aclk(src_clk),
  .s_axis_aresetn(src_resetn),
  .s_axis_valid(src_bl_valid),
  .s_axis_ready(src_bl_ready),
  .s_axis_full(),
  .s_axis_data(src_burst_length),
  .s_axis_room(),

  .m_axis_aclk(dest_clk),
  .m_axis_aresetn(dest_resetn),
  .m_axis_valid(dest_bl_valid),
  .m_axis_ready(dest_bl_ready),
  .m_axis_data(dest_src_burst_length),
  .m_axis_level(),
  .m_axis_empty()
);

// Adapt burst length from source width to destination width by either
// truncation or completion with ones.
if (BEATS_PER_BURST_WIDTH_SRC == BEATS_PER_BURST_WIDTH_DEST) begin
assign dest_burst_length = dest_src_burst_length;
end

if (BEATS_PER_BURST_WIDTH_SRC < BEATS_PER_BURST_WIDTH_DEST) begin
assign dest_burst_length = {dest_src_burst_length,
                           {BEATS_PER_BURST_WIDTH_DEST - BEATS_PER_BURST_WIDTH_SRC{1'b1}}};
end

if (BEATS_PER_BURST_WIDTH_SRC > BEATS_PER_BURST_WIDTH_DEST) begin
assign dest_burst_length = dest_src_burst_length[BEATS_PER_BURST_WIDTH_SRC-1 -: BEATS_PER_BURST_WIDTH_DEST];
end

end else begin

assign m_axi_awvalid = 1'b0;
assign m_axi_awaddr = 'h00;
assign m_axi_awlen = 'h00;
assign m_axi_awsize = 'h00;
assign m_axi_awburst = 'h00;
assign m_axi_awprot = 'h00;
assign m_axi_awcache = 'h00;

assign m_axi_wvalid = 1'b0;
assign m_axi_wdata = 'h00;
assign m_axi_wstrb = 'h00;
assign m_axi_wlast = 1'b0;

assign m_axi_bready = 1'b0;

assign src_bl_ready = 1'b1;

assign dest_response_partial = 1'b0;
assign dest_response_data_burst_length = 'h0;

end

if (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin

assign dest_clk = m_axis_aclk;
assign dest_ext_resetn = 1'b1;

Diff Content:
- 364   .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST)
+ 364   .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST),
+ 364   .CACHE_COHERENT(CACHE_COHERENT_DEST)

Clone Blocks:
