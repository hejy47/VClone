Source Block: hdl/library/common/ad_dds.v@75:132@HdlStmIf
  end

  genvar i;
  generate

    if (DISABLE == 1) begin
      assign dac_dds_data_s = {(DDS_DW*CLK_RATIO-1){1'b0}};
    end else begin

      // enable dds

      reg  [PHASE_DW-1:0]  dac_dds_phase_0[1:CLK_RATIO];
      reg  [PHASE_DW-1:0]  dac_dds_phase_1[1:CLK_RATIO];
      reg  [PHASE_DW-1:0]  dac_dds_incr_0 = 'd0;
      reg  [PHASE_DW-1:0]  dac_dds_incr_1 = 'd0;

      always @(posedge clk) begin
        dac_dds_incr_0 <= tone_1_freq_word * CLK_RATIO;
        dac_dds_incr_1 <= tone_2_freq_word * CLK_RATIO;
      end

      //  phase accumulator
      for (i=1; i <= CLK_RATIO; i=i+1) begin: dds_phase
        always @(posedge clk) begin
          if (dac_data_sync == 1'b1) begin
            if (i == 1) begin
              dac_dds_phase_0[1] <= tone_1_init_offset;
              dac_dds_phase_1[1] <= tone_2_init_offset;
            end else if (CLK_RATIO > 1)begin
              dac_dds_phase_0[i] <= dac_dds_phase_0[i-1] + tone_1_freq_word;
              dac_dds_phase_1[i] <= dac_dds_phase_1[i-1] + tone_2_freq_word;
            end
          end else if (dac_valid == 1'b1) begin
            dac_dds_phase_0[i] <= dac_dds_phase_0[i] + dac_dds_incr_0;
            dac_dds_phase_1[i] <= dac_dds_phase_1[i] + dac_dds_incr_1;
          end
        end

        // phase to amplitude convertor
         ad_dds_2 #(
           .DDS_DW (DDS_DW),
           .PHASE_DW (PHASE_DW),
           .DDS_TYPE (DDS_TYPE),
           .CORDIC_DW (CORDIC_DW),
           .CORDIC_PHASE_DW (CORDIC_PHASE_DW))
         i_dds_2 (
          .clk (clk),
          .dds_format (dac_dds_format),
          .dds_phase_0 (dac_dds_phase_0[i]),
          .dds_scale_0 (tone_1_scale),
          .dds_phase_1 (dac_dds_phase_1[i]),
          .dds_scale_1 (tone_2_scale),
          .dds_data (dac_dds_data_s[(DDS_DW*i)-1:DDS_DW*(i-1)]));
      end
    end
  endgenerate

endmodule

Diff Content:
- 99           if (dac_data_sync == 1'b1) begin
- 100             if (i == 1) begin
- 101               dac_dds_phase_0[1] <= tone_1_init_offset;
- 102               dac_dds_phase_1[1] <= tone_2_init_offset;
- 103             end else if (CLK_RATIO > 1)begin
- 104               dac_dds_phase_0[i] <= dac_dds_phase_0[i-1] + tone_1_freq_word;
- 105               dac_dds_phase_1[i] <= dac_dds_phase_1[i-1] + tone_2_freq_word;
- 107           end else if (dac_valid == 1'b1) begin
- 108             dac_dds_phase_0[i] <= dac_dds_phase_0[i] + dac_dds_incr_0;
- 109             dac_dds_phase_1[i] <= dac_dds_phase_1[i] + dac_dds_incr_1;
+ 89       reg                  sync_min_pulse_m[1:CLK_RATIO];
+ 89       always @(posedge clk) begin
+ 89         dac_data_sync_m <= dac_data_sync;
+ 89         sync_min_pulse_m[1] <= dac_data_sync_m & !dac_data_sync |
+ 89                                sync_min_pulse_m[1] & !sync_min_pulse_m[CLK_RATIO];
+ 89       end
+ 89       for (i=1; i <= CLK_RATIO; i=i+1) begin: sync_delay
+ 89         always @(posedge clk) begin
+ 89           sync_min_pulse_m[i+1] <= sync_min_pulse_m[i];
+ 89         end
+ 89       end
+ 105           if (dac_valid == 1'b1) begin
+ 105             if (dac_data_sync == 1'b1) begin
+ 105               dac_dds_phase_0[i] <= 'd0;
+ 105               dac_dds_phase_1[i] <= 'd0;
+ 105             end else if (sync_min_pulse_m[1] == 1'b1) begin
+ 105               if (i == 1) begin
+ 105                 dac_dds_phase_0[1] <= tone_1_init_offset;
+ 105                 dac_dds_phase_1[1] <= tone_2_init_offset;
+ 105               end else if (CLK_RATIO > 1)begin
+ 105                 dac_dds_phase_0[i] <= dac_dds_phase_0[i-1] + tone_1_freq_word;
+ 105                 dac_dds_phase_1[i] <= dac_dds_phase_1[i-1] + tone_2_freq_word;
+ 105               end
+ 105             end else begin
+ 105               dac_dds_phase_0[i] <= dac_dds_phase_0[i] + dac_dds_incr_0;
+ 105               dac_dds_phase_1[i] <= dac_dds_phase_1[i] + dac_dds_incr_1;

Clone Blocks:
