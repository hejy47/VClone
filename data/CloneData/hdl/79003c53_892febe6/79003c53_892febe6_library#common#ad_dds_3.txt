Source Block: hdl/library/common/ad_dds.v@76:143@HdlStmIf

  genvar i;

  generate

    if (DISABLE == 1) begin
      always @(posedge clk) begin
        dac_dds_data <= {(DDS_DW*CLK_RATIO-1){1'b0}};
      end
    end else begin
      // enable dds

      reg  [PHASE_DW-1:0]  dac_dds_phase_0[1:CLK_RATIO];
      reg  [PHASE_DW-1:0]  dac_dds_phase_1[1:CLK_RATIO];
      wire [  DDS_DW-1:0]  dac_dds_data_s[1:CLK_RATIO];

      for (i=1; i <= CLK_RATIO; i=i+1) begin: dds_phase

        always @(posedge clk) begin
             if (dac_data_sync == 1'b1) begin
               dac_dds_data[DDS_DW*i-1:DDS_DW*(i-1)] <= {(DDS_DW-1){1'b0}};
             end else begin
               dac_dds_data[DDS_DW*i-1:DDS_DW*(i-1)] <= dac_dds_data_s[i];
             end
        end

        //  phase accumulator
        always @(posedge clk) begin
          // phase incrementaion accross 2^N (0<N<5) phase clock ratio
          dac_dds_incr_0 <= tone_1_freq_word * CLK_RATIO;
          dac_dds_incr_1 <= tone_2_freq_word * CLK_RATIO;

            if (dac_data_sync == 1'b1) begin
              if (i == 1) begin
                dac_dds_phase_0[1] <= tone_1_init_offset;
                dac_dds_phase_1[1] <= tone_2_init_offset;
              end else begin
                dac_dds_phase_0[i] <= dac_dds_phase_0[i-1] + tone_1_freq_word;
                dac_dds_phase_1[i] <= dac_dds_phase_1[i-1] + tone_2_freq_word;
              end
            end else begin
              dac_dds_phase_0[i] <= dac_dds_phase_0[i] + dac_dds_incr_0;
              dac_dds_phase_1[i] <= dac_dds_phase_1[i] + dac_dds_incr_1;
            end
        end

        // phase to amplitude convertor
         ad_dds_2 #(
           .DDS_DW (DDS_DW),
           .PHASE_DW (PHASE_DW),
           .DDS_TYPE (DDS_TYPE),
           .CORDIC_DW (CORDIC_DW),
           .CORDIC_PHASE_DW (CORDIC_PHASE_DW))
         i_dds_2 (
          .clk (clk),
          .dds_format (dac_dds_format),
          .dds_phase_0 (dac_dds_phase_0[i]),
          .dds_scale_0 (tone_1_scale),
          .dds_phase_1 (dac_dds_phase_1[i]),
          .dds_scale_1 (tone_2_scale),
          .dds_data (dac_dds_data_s[i])
        );

      end
    end
  endgenerate

endmodule

Diff Content:
- 82       always @(posedge clk) begin
- 83         dac_dds_data <= {(DDS_DW*CLK_RATIO-1){1'b0}};
- 84       end
- 90       wire [  DDS_DW-1:0]  dac_dds_data_s[1:CLK_RATIO];
- 92       for (i=1; i <= CLK_RATIO; i=i+1) begin: dds_phase
- 94         always @(posedge clk) begin
- 95              if (dac_data_sync == 1'b1) begin
- 96                dac_dds_data[DDS_DW*i-1:DDS_DW*(i-1)] <= {(DDS_DW-1){1'b0}};
- 97              end else begin
- 98                dac_dds_data[DDS_DW*i-1:DDS_DW*(i-1)] <= dac_dds_data_s[i];
- 99              end
- 100         end
- 105           dac_dds_incr_0 <= tone_1_freq_word * CLK_RATIO;
- 106           dac_dds_incr_1 <= tone_2_freq_word * CLK_RATIO;
- 108             if (dac_data_sync == 1'b1) begin
- 109               if (i == 1) begin
- 110                 dac_dds_phase_0[1] <= tone_1_init_offset;
- 111                 dac_dds_phase_1[1] <= tone_2_init_offset;
- 112               end else begin
- 113                 dac_dds_phase_0[i] <= dac_dds_phase_0[i-1] + tone_1_freq_word;
- 114                 dac_dds_phase_1[i] <= dac_dds_phase_1[i-1] + tone_2_freq_word;
- 115               end
- 116             end else begin
- 117               dac_dds_phase_0[i] <= dac_dds_phase_0[i] + dac_dds_incr_0;
- 118               dac_dds_phase_1[i] <= dac_dds_phase_1[i] + dac_dds_incr_1;
- 136           .dds_data (dac_dds_data_s[i])
- 137         );
+ 84       assign dac_dds_data_s = {(DDS_DW*CLK_RATIO-1){1'b0}};
+ 92       reg  [PHASE_DW-1:0]  dac_dds_incr_0 = 'd0;
+ 92       reg  [PHASE_DW-1:0]  dac_dds_incr_1 = 'd0;
+ 100       always @(posedge clk) begin
+ 100         dac_dds_incr_0 <= tone_1_freq_word * CLK_RATIO;
+ 100         dac_dds_incr_1 <= tone_2_freq_word * CLK_RATIO;
+ 100       end
+ 100       for (i=1; i <= CLK_RATIO; i=i+1) begin: dds_phase
+ 118           if (dac_data_sync == 1'b1) begin
+ 118             if (i == 1) begin
+ 118               dac_dds_phase_0[1] <= tone_1_init_offset;
+ 118               dac_dds_phase_1[1] <= tone_2_init_offset;
+ 118             end else if (CLK_RATIO > 1)begin
+ 118               dac_dds_phase_0[i] <= dac_dds_phase_0[i-1] + tone_1_freq_word;
+ 118               dac_dds_phase_1[i] <= dac_dds_phase_1[i-1] + tone_2_freq_word;
+ 119           end else if (dac_valid == 1'b1) begin
+ 119             dac_dds_phase_0[i] <= dac_dds_phase_0[i] + dac_dds_incr_0;
+ 119             dac_dds_phase_1[i] <= dac_dds_phase_1[i] + dac_dds_incr_1;
+ 119           end
+ 137           .dds_data (dac_dds_data_s[(DDS_DW*i)-1:DDS_DW*(i-1)]));

Clone Blocks:
