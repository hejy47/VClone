{"Source Block": ["hdl/library/common/ad_dds.v@76:143@HdlStmIf", "\n  genvar i;\n\n  generate\n\n    if (DISABLE == 1) begin\n      always @(posedge clk) begin\n        dac_dds_data <= {(DDS_DW*CLK_RATIO-1){1'b0}};\n      end\n    end else begin\n      // enable dds\n\n      reg  [PHASE_DW-1:0]  dac_dds_phase_0[1:CLK_RATIO];\n      reg  [PHASE_DW-1:0]  dac_dds_phase_1[1:CLK_RATIO];\n      wire [  DDS_DW-1:0]  dac_dds_data_s[1:CLK_RATIO];\n\n      for (i=1; i <= CLK_RATIO; i=i+1) begin: dds_phase\n\n        always @(posedge clk) begin\n             if (dac_data_sync == 1'b1) begin\n               dac_dds_data[DDS_DW*i-1:DDS_DW*(i-1)] <= {(DDS_DW-1){1'b0}};\n             end else begin\n               dac_dds_data[DDS_DW*i-1:DDS_DW*(i-1)] <= dac_dds_data_s[i];\n             end\n        end\n\n        //  phase accumulator\n        always @(posedge clk) begin\n          // phase incrementaion accross 2^N (0<N<5) phase clock ratio\n          dac_dds_incr_0 <= tone_1_freq_word * CLK_RATIO;\n          dac_dds_incr_1 <= tone_2_freq_word * CLK_RATIO;\n\n            if (dac_data_sync == 1'b1) begin\n              if (i == 1) begin\n                dac_dds_phase_0[1] <= tone_1_init_offset;\n                dac_dds_phase_1[1] <= tone_2_init_offset;\n              end else begin\n                dac_dds_phase_0[i] <= dac_dds_phase_0[i-1] + tone_1_freq_word;\n                dac_dds_phase_1[i] <= dac_dds_phase_1[i-1] + tone_2_freq_word;\n              end\n            end else begin\n              dac_dds_phase_0[i] <= dac_dds_phase_0[i] + dac_dds_incr_0;\n              dac_dds_phase_1[i] <= dac_dds_phase_1[i] + dac_dds_incr_1;\n            end\n        end\n\n        // phase to amplitude convertor\n         ad_dds_2 #(\n           .DDS_DW (DDS_DW),\n           .PHASE_DW (PHASE_DW),\n           .DDS_TYPE (DDS_TYPE),\n           .CORDIC_DW (CORDIC_DW),\n           .CORDIC_PHASE_DW (CORDIC_PHASE_DW))\n         i_dds_2 (\n          .clk (clk),\n          .dds_format (dac_dds_format),\n          .dds_phase_0 (dac_dds_phase_0[i]),\n          .dds_scale_0 (tone_1_scale),\n          .dds_phase_1 (dac_dds_phase_1[i]),\n          .dds_scale_1 (tone_2_scale),\n          .dds_data (dac_dds_data_s[i])\n        );\n\n      end\n    end\n  endgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[82, "      always @(posedge clk) begin\n"], [83, "        dac_dds_data <= {(DDS_DW*CLK_RATIO-1){1'b0}};\n"], [84, "      end\n"], [90, "      wire [  DDS_DW-1:0]  dac_dds_data_s[1:CLK_RATIO];\n"], [92, "      for (i=1; i <= CLK_RATIO; i=i+1) begin: dds_phase\n"], [94, "        always @(posedge clk) begin\n"], [95, "             if (dac_data_sync == 1'b1) begin\n"], [96, "               dac_dds_data[DDS_DW*i-1:DDS_DW*(i-1)] <= {(DDS_DW-1){1'b0}};\n"], [97, "             end else begin\n"], [98, "               dac_dds_data[DDS_DW*i-1:DDS_DW*(i-1)] <= dac_dds_data_s[i];\n"], [99, "             end\n"], [100, "        end\n"], [105, "          dac_dds_incr_0 <= tone_1_freq_word * CLK_RATIO;\n"], [106, "          dac_dds_incr_1 <= tone_2_freq_word * CLK_RATIO;\n"], [108, "            if (dac_data_sync == 1'b1) begin\n"], [109, "              if (i == 1) begin\n"], [110, "                dac_dds_phase_0[1] <= tone_1_init_offset;\n"], [111, "                dac_dds_phase_1[1] <= tone_2_init_offset;\n"], [112, "              end else begin\n"], [113, "                dac_dds_phase_0[i] <= dac_dds_phase_0[i-1] + tone_1_freq_word;\n"], [114, "                dac_dds_phase_1[i] <= dac_dds_phase_1[i-1] + tone_2_freq_word;\n"], [115, "              end\n"], [116, "            end else begin\n"], [117, "              dac_dds_phase_0[i] <= dac_dds_phase_0[i] + dac_dds_incr_0;\n"], [118, "              dac_dds_phase_1[i] <= dac_dds_phase_1[i] + dac_dds_incr_1;\n"], [136, "          .dds_data (dac_dds_data_s[i])\n"], [137, "        );\n"]], "Add": [[84, "      assign dac_dds_data_s = {(DDS_DW*CLK_RATIO-1){1'b0}};\n"], [92, "      reg  [PHASE_DW-1:0]  dac_dds_incr_0 = 'd0;\n"], [92, "      reg  [PHASE_DW-1:0]  dac_dds_incr_1 = 'd0;\n"], [100, "      always @(posedge clk) begin\n"], [100, "        dac_dds_incr_0 <= tone_1_freq_word * CLK_RATIO;\n"], [100, "        dac_dds_incr_1 <= tone_2_freq_word * CLK_RATIO;\n"], [100, "      end\n"], [100, "      for (i=1; i <= CLK_RATIO; i=i+1) begin: dds_phase\n"], [118, "          if (dac_data_sync == 1'b1) begin\n"], [118, "            if (i == 1) begin\n"], [118, "              dac_dds_phase_0[1] <= tone_1_init_offset;\n"], [118, "              dac_dds_phase_1[1] <= tone_2_init_offset;\n"], [118, "            end else if (CLK_RATIO > 1)begin\n"], [118, "              dac_dds_phase_0[i] <= dac_dds_phase_0[i-1] + tone_1_freq_word;\n"], [118, "              dac_dds_phase_1[i] <= dac_dds_phase_1[i-1] + tone_2_freq_word;\n"], [119, "          end else if (dac_valid == 1'b1) begin\n"], [119, "            dac_dds_phase_0[i] <= dac_dds_phase_0[i] + dac_dds_incr_0;\n"], [119, "            dac_dds_phase_1[i] <= dac_dds_phase_1[i] + dac_dds_incr_1;\n"], [119, "          end\n"], [137, "          .dds_data (dac_dds_data_s[(DDS_DW*i)-1:DDS_DW*(i-1)]));\n"]]}}