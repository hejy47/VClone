Source Block: hdl/library/axi_dmac/request_arb.v@356:542@HdlStmIf
end

end endgenerate


generate if (C_DMA_TYPE_DEST == DMA_TYPE_MM_AXI) begin

assign dest_clk = m_dest_axi_aclk;
assign dest_resetn = m_dest_axi_aresetn;

wire [C_ID_WIDTH-1:0] dest_data_id;
wire [C_ID_WIDTH-1:0] dest_address_id;
wire dest_address_eot = eot_mem_dest[dest_address_id];
wire dest_data_eot = eot_mem_dest[dest_data_id];
wire dest_response_eot = eot_mem_dest[dest_response_id];

assign dbg_dest_address_id = dest_address_id;
assign dbg_dest_data_id = dest_data_id;

dmac_dest_mm_axi #(
	.C_ID_WIDTH(C_ID_WIDTH),
	.C_DMA_DATA_WIDTH(C_DMA_DATA_WIDTH_DEST),
	.C_ADDR_ALIGN_BITS(C_ADDR_ALIGN_BITS),
	.C_BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST),
	.C_BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_DEST)
) i_dest_dma_mm (
	.m_axi_aclk(m_dest_axi_aclk),
	.m_axi_aresetn(m_dest_axi_aresetn),

	.enable(dest_enable),
	.enabled(dest_enabled),
	.pause(dest_pause),

	.req_valid(dest_req_valid),
	.req_ready(dest_req_ready),
	.req_address(dest_req_address),
	.req_last_burst_length(dest_req_last_burst_length),
	.req_last_beat_bytes(dest_req_last_beat_bytes),

	.response_valid(dest_response_valid),
	.response_ready(dest_response_ready),
	.response_resp(dest_response_resp),
	.response_resp_eot(dest_response_resp_eot),

	.request_id(dest_request_id),
	.response_id(dest_response_id),
	.sync_id(dest_sync_id),
	.sync_id_ret(dest_sync_id_ret),

	.data_id(dest_data_id),
	.address_id(dest_address_id),

	.address_eot(dest_address_eot),
	.data_eot(dest_data_eot),
	.response_eot(dest_response_eot),

	.fifo_valid(dest_valid),
	.fifo_ready(dest_ready),
	.fifo_data(dest_data),

	.m_axi_awready(m_axi_awready),
	.m_axi_awvalid(m_axi_awvalid),
	.m_axi_awaddr(m_axi_awaddr),
	.m_axi_awlen(m_axi_awlen),
	.m_axi_awsize(m_axi_awsize),
	.m_axi_awburst(m_axi_awburst),
	.m_axi_awprot(m_axi_awprot),
	.m_axi_awcache(m_axi_awcache),
	.m_axi_wready(m_axi_wready),
	.m_axi_wvalid(m_axi_wvalid),
	.m_axi_wdata(m_axi_wdata),
	.m_axi_wstrb(m_axi_wstrb),
	.m_axi_wlast(m_axi_wlast),

	.m_axi_bvalid(m_axi_bvalid),
	.m_axi_bresp(m_axi_bresp),
	.m_axi_bready(m_axi_bready)
);

end else if (C_DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin


assign dest_clk = m_axis_aclk;

wire [C_ID_WIDTH-1:0] data_id;

wire data_eot = eot_mem_dest[data_id];
wire response_eot = eot_mem_dest[dest_response_id];

assign dbg_dest_address_id = 'h00;
assign dbg_dest_data_id = data_id;

dmac_dest_axi_stream #(
	.C_ID_WIDTH(C_ID_WIDTH),
	.C_S_AXIS_DATA_WIDTH(C_DMA_DATA_WIDTH_DEST),
	.C_BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)
) i_dest_dma_stream (
	.s_axis_aclk(m_axis_aclk),
	.s_axis_aresetn(dest_resetn),

	.enable(dest_enable),
	.enabled(dest_enabled),

	.req_valid(dest_req_valid),
	.req_ready(dest_req_ready),
	.req_last_burst_length(dest_req_last_burst_length),

	.response_valid(dest_response_valid),
	.response_ready(dest_response_ready),
	.response_resp(dest_response_resp),
	.response_resp_eot(dest_response_resp_eot),

	.request_id(dest_request_id),
	.response_id(dest_response_id),
	.data_id(data_id),
	.sync_id(dest_sync_id),
	.sync_id_ret(dest_sync_id_ret),

	.data_eot(data_eot),
	.response_eot(response_eot),

	.fifo_valid(dest_valid),
	.fifo_ready(dest_ready),
	.fifo_data(dest_data),

	.m_axis_valid(m_axis_valid),
	.m_axis_ready(m_axis_ready),
	.m_axis_data(m_axis_data)
);

end else /* if (C_DMA_TYPE_DEST == DMA_TYPE_FIFO) */ begin

assign dest_clk = fifo_rd_clk;

wire [C_ID_WIDTH-1:0] data_id;

wire data_eot = eot_mem_dest[data_id];
wire response_eot = eot_mem_dest[dest_response_id];

assign dbg_dest_address_id = 'h00;
assign dbg_dest_data_id = data_id;

dmac_dest_fifo_inf #(
	.C_ID_WIDTH(C_ID_WIDTH),
	.C_DATA_WIDTH(C_DMA_DATA_WIDTH_DEST),
	.C_BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)
) i_dest_dma_fifo (
	.clk(fifo_rd_clk),
	.resetn(dest_resetn),

	.enable(dest_enable),
	.enabled(dest_enabled),

	.req_valid(dest_req_valid),
	.req_ready(dest_req_ready),
	.req_last_burst_length(dest_req_last_burst_length),

	.response_valid(dest_response_valid),
	.response_ready(dest_response_ready),
	.response_resp(dest_response_resp),
	.response_resp_eot(dest_response_resp_eot),

	.request_id(dest_request_id),
	.response_id(dest_response_id),
	.data_id(data_id),
	.sync_id(dest_sync_id),
	.sync_id_ret(dest_sync_id_ret),

	.data_eot(data_eot),
	.response_eot(response_eot),

	.fifo_valid(dest_valid),
	.fifo_ready(dest_ready),
	.fifo_data(dest_data),

	.en(fifo_rd_en),
	.valid(fifo_rd_valid),
	.dout(fifo_rd_dout),
	.underflow(fifo_rd_underflow)
);

end endgenerate

generate if (C_DMA_TYPE_SRC == DMA_TYPE_MM_AXI) begin

assign src_clk = m_src_axi_aclk;
assign src_resetn = m_src_axi_aresetn;

Diff Content:
- 435 end else if (C_DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin
- 486 end else /* if (C_DMA_TYPE_DEST == DMA_TYPE_FIFO) */ begin
+ 435 end else begin
+ 435 assign m_axi_awvalid = 1'b0;
+ 435 assign m_axi_awaddr = 'h00;
+ 435 assign m_axi_awlen = 'h00;
+ 435 assign m_axi_awsize = 'h00;
+ 435 assign m_axi_awburst = 'h00;
+ 435 assign m_axi_awprot = 'h00;
+ 435 assign m_axi_awcache = 'h00;
+ 435 assign m_axi_wvalid = 1'b0;
+ 435 assign m_axi_wdata = 'h00;
+ 435 assign m_axi_wstrb = 'h00;
+ 435 assign m_axi_wlast = 1'b0;
+ 435 assign m_axi_bready = 1'b0;
+ 435 end
+ 435 if (C_DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin
+ 486 end else begin
+ 486 assign m_axis_valid = 1'b0;
+ 486 assign m_axis_data = 'h00;
+ 486 end 
+ 486 if (C_DMA_TYPE_DEST == DMA_TYPE_FIFO) begin
+ 535 end else begin
+ 535 assign fifo_rd_valid = 1'b0;
+ 535 assign fifo_rd_dout = 'h0;
+ 535 assign fifo_rd_underflow = 1'b0;

Clone Blocks:
