{"Source Block": ["hdl/library/jesd204/jesd204_rx/jesd204_rx.v@278:438@HdlStmIf", ");\n\ngenerate\ngenvar i;\n\nif (LINK_MODE[0] == 1) begin : mode_8b10b\n\njesd204_rx_ctrl #(\n  .NUM_LANES(NUM_LANES),\n  .NUM_LINKS(NUM_LINKS)\n) i_rx_ctrl (\n  .clk(clk),\n  .reset(core_reset),\n\n  .cfg_lanes_disable(cfg_lanes_disable),\n  .cfg_links_disable(cfg_links_disable),\n\n  .phy_ready(1'b1),\n  .phy_en_char_align(phy_en_char_align),\n\n  .lmfc_edge(lmfc_edge),\n  .sync(sync),\n\n  .latency_monitor_reset(latency_monitor_reset),\n\n  .cgs_reset(cgs_reset),\n  .cgs_ready(cgs_ready),\n\n  .ifs_reset(ifs_reset),\n\n  .status_state(status_ctrl_state)\n);\n\n// Reset core when frame alignment errors occur\nif(ENABLE_FRAME_ALIGN_CHECK && ENABLE_FRAME_ALIGN_ERR_RESET) begin : gen_frame_align_err_reset\n\n  reg [7:0] reset_cnt;\n\n  always @(posedge clk) begin\n    if(reset) begin\n      reset_cnt <= 8'h00;\n    end else begin\n      if(|frame_align_err_thresh_met) begin\n        reset_cnt <= 8'hFF;\n      end else if(reset_cnt != 0) begin\n        reset_cnt <= reset_cnt - 1'b1;\n      end\n    end\n\n    core_reset <= reset | (reset_cnt != 0);\n  end\n\nend else begin : gen_no_frame_align_err_reset\n  always @(*) begin\n    core_reset = reset;\n  end\nend\n\nfor (i = 0; i < NUM_LANES; i = i + 1) begin: gen_lane\n\n  localparam D_START = i * DATA_PATH_WIDTH*8;\n  localparam D_STOP = D_START + DATA_PATH_WIDTH*8-1;\n  localparam C_START = i * DATA_PATH_WIDTH;\n  localparam C_STOP = C_START + DATA_PATH_WIDTH-1;\n\n  jesd204_rx_lane #(\n    .DATA_PATH_WIDTH(DATA_PATH_WIDTH),\n    .CHAR_INFO_REGISTERED(CHAR_INFO_REGISTERED),\n    .ALIGN_MUX_REGISTERED(ALIGN_MUX_REGISTERED),\n    .SCRAMBLER_REGISTERED(SCRAMBLER_REGISTERED),\n    .ELASTIC_BUFFER_SIZE(ELASTIC_BUFFER_SIZE),\n    .ENABLE_FRAME_ALIGN_CHECK(ENABLE_FRAME_ALIGN_CHECK)\n  ) i_lane (\n    .clk(clk),\n    .reset(core_reset),\n\n    .phy_data(phy_data_r[D_STOP:D_START]),\n    .phy_charisk(phy_charisk_r[C_STOP:C_START]),\n    .phy_notintable(phy_notintable_r[C_STOP:C_START]),\n    .phy_disperr(phy_disperr_r[C_STOP:C_START]),\n\n    .cgs_reset(cgs_reset[i]),\n    .cgs_ready(cgs_ready[i]),\n\n    .ifs_reset(ifs_reset[i]),\n\n    .rx_data(rx_data_s[D_STOP:D_START]),\n\n    .buffer_release_n(buffer_release_n),\n    .buffer_ready_n(buffer_ready_n[i]),\n\n    .cfg_beats_per_multiframe(cfg_beats_per_multiframe),\n    .cfg_octets_per_frame(cfg_octets_per_frame),\n    .cfg_disable_scrambler(cfg_disable_scrambler),\n\n    .ctrl_err_statistics_reset(ctrl_err_statistics_reset),\n    .ctrl_err_statistics_mask(ctrl_err_statistics_mask[2:0]),\n    .status_err_statistics_cnt(status_err_statistics_cnt[32*i+31:32*i]),\n\n    .ilas_config_valid(ilas_config_valid[i]),\n    .ilas_config_addr(ilas_config_addr[2*i+1:2*i]),\n    .ilas_config_data(ilas_config_data[D_STOP:D_START]),\n\n    .status_cgs_state(status_lane_cgs_state[2*i+1:2*i]),\n    .status_ifs_ready(ifs_ready[i]),\n    .status_frame_align(frame_align[2*i+1:2*i]),\n\n    .status_frame_align_err_cnt(status_lane_frame_align_err_cnt[8*i+7:8*i])\n  );\n\n  if(ENABLE_FRAME_ALIGN_CHECK) begin : gen_frame_align_err_thresh\n    always @(posedge clk) begin\n      if (status_lane_frame_align_err_cnt[8*i+7:8*i] >= cfg_frame_align_err_threshold) begin\n        frame_align_err_thresh_met[i] <= 1'b1;\n        event_frame_alignment_error_per_lane[i] <= ~frame_align_err_thresh_met[i];\n      end else begin\n        frame_align_err_thresh_met[i] <= 1'b0;\n        event_frame_alignment_error_per_lane[i] <= 1'b0;\n      end\n    end\n  end\nend\n\nassign event_frame_alignment_error = |event_frame_alignment_error_per_lane;\n\n/* Delay matching based on the number of pipeline stages */\nreg [NUM_LANES-1:0] ifs_ready_d1 = 1'b0;\nreg [NUM_LANES-1:0] ifs_ready_d2 = 1'b0;\nreg [NUM_LANES-1:0] ifs_ready_mux;\n\nalways @(posedge clk) begin\n  ifs_ready_d1 <= ifs_ready;\n  ifs_ready_d2 <= ifs_ready_d1;\nend\n\nalways @(*) begin\n  case (SCRAMBLER_REGISTERED + ALIGN_MUX_REGISTERED)\n  1: ifs_ready_mux <= ifs_ready_d1;\n  2: ifs_ready_mux <= ifs_ready_d2;\n  default: ifs_ready_mux <= ifs_ready;\n  endcase\nend\n\njesd204_lane_latency_monitor #(\n  .NUM_LANES(NUM_LANES)\n) i_lane_latency_monitor (\n  .clk(clk),\n  .reset(latency_monitor_reset),\n\n  .lane_ready(ifs_ready_mux),\n  .lane_frame_align(frame_align),\n  .lane_latency_ready(status_lane_ifs_ready),\n  .lane_latency(status_lane_latency)\n);\n\nend\n\nif (LINK_MODE[1] == 1) begin : mode_64b66b\n\nwire [NUM_LANES-1:0] emb_lock;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [], "Add": [[283, "wire unexpected_lane_state_error;\n"], [283, "reg unexpected_lane_state_error_d = 1'b0;\n"], [401, "/* If one of the enabled lanes falls out of DATA phase while the link is in DATA phase\n"], [401, " * report an error event */\n"], [401, "assign unexpected_lane_state_error = |(~(cgs_ready|cfg_lanes_disable)) & &status_ctrl_state;\n"], [401, "always @(posedge clk) begin\n"], [401, "  unexpected_lane_state_error_d <= unexpected_lane_state_error;\n"], [401, "end\n"], [401, "assign event_unexpected_lane_state_error = unexpected_lane_state_error & ~unexpected_lane_state_error_d;\n"]]}}