Source Block: hdl/library/jesd204/jesd204_rx/jesd204_rx.v@278:438@HdlStmIf
);

generate
genvar i;

if (LINK_MODE[0] == 1) begin : mode_8b10b

jesd204_rx_ctrl #(
  .NUM_LANES(NUM_LANES),
  .NUM_LINKS(NUM_LINKS)
) i_rx_ctrl (
  .clk(clk),
  .reset(core_reset),

  .cfg_lanes_disable(cfg_lanes_disable),
  .cfg_links_disable(cfg_links_disable),

  .phy_ready(1'b1),
  .phy_en_char_align(phy_en_char_align),

  .lmfc_edge(lmfc_edge),
  .sync(sync),

  .latency_monitor_reset(latency_monitor_reset),

  .cgs_reset(cgs_reset),
  .cgs_ready(cgs_ready),

  .ifs_reset(ifs_reset),

  .status_state(status_ctrl_state)
);

// Reset core when frame alignment errors occur
if(ENABLE_FRAME_ALIGN_CHECK && ENABLE_FRAME_ALIGN_ERR_RESET) begin : gen_frame_align_err_reset

  reg [7:0] reset_cnt;

  always @(posedge clk) begin
    if(reset) begin
      reset_cnt <= 8'h00;
    end else begin
      if(|frame_align_err_thresh_met) begin
        reset_cnt <= 8'hFF;
      end else if(reset_cnt != 0) begin
        reset_cnt <= reset_cnt - 1'b1;
      end
    end

    core_reset <= reset | (reset_cnt != 0);
  end

end else begin : gen_no_frame_align_err_reset
  always @(*) begin
    core_reset = reset;
  end
end

for (i = 0; i < NUM_LANES; i = i + 1) begin: gen_lane

  localparam D_START = i * DATA_PATH_WIDTH*8;
  localparam D_STOP = D_START + DATA_PATH_WIDTH*8-1;
  localparam C_START = i * DATA_PATH_WIDTH;
  localparam C_STOP = C_START + DATA_PATH_WIDTH-1;

  jesd204_rx_lane #(
    .DATA_PATH_WIDTH(DATA_PATH_WIDTH),
    .CHAR_INFO_REGISTERED(CHAR_INFO_REGISTERED),
    .ALIGN_MUX_REGISTERED(ALIGN_MUX_REGISTERED),
    .SCRAMBLER_REGISTERED(SCRAMBLER_REGISTERED),
    .ELASTIC_BUFFER_SIZE(ELASTIC_BUFFER_SIZE),
    .ENABLE_FRAME_ALIGN_CHECK(ENABLE_FRAME_ALIGN_CHECK)
  ) i_lane (
    .clk(clk),
    .reset(core_reset),

    .phy_data(phy_data_r[D_STOP:D_START]),
    .phy_charisk(phy_charisk_r[C_STOP:C_START]),
    .phy_notintable(phy_notintable_r[C_STOP:C_START]),
    .phy_disperr(phy_disperr_r[C_STOP:C_START]),

    .cgs_reset(cgs_reset[i]),
    .cgs_ready(cgs_ready[i]),

    .ifs_reset(ifs_reset[i]),

    .rx_data(rx_data_s[D_STOP:D_START]),

    .buffer_release_n(buffer_release_n),
    .buffer_ready_n(buffer_ready_n[i]),

    .cfg_beats_per_multiframe(cfg_beats_per_multiframe),
    .cfg_octets_per_frame(cfg_octets_per_frame),
    .cfg_disable_scrambler(cfg_disable_scrambler),

    .ctrl_err_statistics_reset(ctrl_err_statistics_reset),
    .ctrl_err_statistics_mask(ctrl_err_statistics_mask[2:0]),
    .status_err_statistics_cnt(status_err_statistics_cnt[32*i+31:32*i]),

    .ilas_config_valid(ilas_config_valid[i]),
    .ilas_config_addr(ilas_config_addr[2*i+1:2*i]),
    .ilas_config_data(ilas_config_data[D_STOP:D_START]),

    .status_cgs_state(status_lane_cgs_state[2*i+1:2*i]),
    .status_ifs_ready(ifs_ready[i]),
    .status_frame_align(frame_align[2*i+1:2*i]),

    .status_frame_align_err_cnt(status_lane_frame_align_err_cnt[8*i+7:8*i])
  );

  if(ENABLE_FRAME_ALIGN_CHECK) begin : gen_frame_align_err_thresh
    always @(posedge clk) begin
      if (status_lane_frame_align_err_cnt[8*i+7:8*i] >= cfg_frame_align_err_threshold) begin
        frame_align_err_thresh_met[i] <= 1'b1;
        event_frame_alignment_error_per_lane[i] <= ~frame_align_err_thresh_met[i];
      end else begin
        frame_align_err_thresh_met[i] <= 1'b0;
        event_frame_alignment_error_per_lane[i] <= 1'b0;
      end
    end
  end
end

assign event_frame_alignment_error = |event_frame_alignment_error_per_lane;

/* Delay matching based on the number of pipeline stages */
reg [NUM_LANES-1:0] ifs_ready_d1 = 1'b0;
reg [NUM_LANES-1:0] ifs_ready_d2 = 1'b0;
reg [NUM_LANES-1:0] ifs_ready_mux;

always @(posedge clk) begin
  ifs_ready_d1 <= ifs_ready;
  ifs_ready_d2 <= ifs_ready_d1;
end

always @(*) begin
  case (SCRAMBLER_REGISTERED + ALIGN_MUX_REGISTERED)
  1: ifs_ready_mux <= ifs_ready_d1;
  2: ifs_ready_mux <= ifs_ready_d2;
  default: ifs_ready_mux <= ifs_ready;
  endcase
end

jesd204_lane_latency_monitor #(
  .NUM_LANES(NUM_LANES)
) i_lane_latency_monitor (
  .clk(clk),
  .reset(latency_monitor_reset),

  .lane_ready(ifs_ready_mux),
  .lane_frame_align(frame_align),
  .lane_latency_ready(status_lane_ifs_ready),
  .lane_latency(status_lane_latency)
);

end

if (LINK_MODE[1] == 1) begin : mode_64b66b

wire [NUM_LANES-1:0] emb_lock;


Diff Content:
+ 283 wire unexpected_lane_state_error;
+ 283 reg unexpected_lane_state_error_d = 1'b0;
+ 401 /* If one of the enabled lanes falls out of DATA phase while the link is in DATA phase
+ 401  * report an error event */
+ 401 assign unexpected_lane_state_error = |(~(cgs_ready|cfg_lanes_disable)) & &status_ctrl_state;
+ 401 always @(posedge clk) begin
+ 401   unexpected_lane_state_error_d <= unexpected_lane_state_error;
+ 401 end
+ 401 assign event_unexpected_lane_state_error = unexpected_lane_state_error & ~unexpected_lane_state_error_d;

Clone Blocks:
