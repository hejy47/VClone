Source Block: hdl/library/common/util_pulse_gen.v@56:66@HdlIdDef
  reg     [31:0]               pulse_period_read = 32'b0;
  reg     [31:0]               pulse_width_read = 32'b0;
  reg     [31:0]               pulse_period_d = 32'b0;
  reg     [31:0]               pulse_width_d = 32'b0;

  wire                         end_of_period_s;

  // flop the desired period

  always @(posedge clk) begin
    if (rstn == 1'b0) begin

Diff Content:
- 61   wire                         end_of_period_s;

Clone Blocks:
Clone Blocks 1:
hdl/library/common/util_pulse_gen.v@54:64

  reg     [31:0]               pulse_period_cnt = 32'h0;
  reg     [31:0]               pulse_period_read = 32'b0;
  reg     [31:0]               pulse_width_read = 32'b0;
  reg     [31:0]               pulse_period_d = 32'b0;
  reg     [31:0]               pulse_width_d = 32'b0;

  wire                         end_of_period_s;

  // flop the desired period


Clone Blocks 2:
hdl/library/common/util_pulse_gen.v@52:62

  // internal registers

  reg     [31:0]               pulse_period_cnt = 32'h0;
  reg     [31:0]               pulse_period_read = 32'b0;
  reg     [31:0]               pulse_width_read = 32'b0;
  reg     [31:0]               pulse_period_d = 32'b0;
  reg     [31:0]               pulse_width_d = 32'b0;

  wire                         end_of_period_s;


Clone Blocks 3:
hdl/library/common/util_pulse_gen.v@50:60
  output      [31:0]  pulse_counter
);

  // internal registers

  reg     [31:0]               pulse_period_cnt = 32'h0;
  reg     [31:0]               pulse_period_read = 32'b0;
  reg     [31:0]               pulse_width_read = 32'b0;
  reg     [31:0]               pulse_period_d = 32'b0;
  reg     [31:0]               pulse_width_d = 32'b0;


Clone Blocks 4:
hdl/library/axi_pwm_gen/axi_pwm_gen_1.v@54:64

  // internal registers

  reg     [31:0]               pulse_period_cnt = 32'h0;
  reg     [31:0]               pulse_period_read =  PULSE_PERIOD;
  reg     [31:0]               pulse_width_read = PULSE_WIDTH;
  reg     [31:0]               pulse_period_d = PULSE_PERIOD;
  reg     [31:0]               pulse_width_d = PULSE_WIDTH;
  reg                          phase_align_armed = 1'b1;

  // internal wires

Clone Blocks 5:
hdl/library/common/util_pulse_gen.v@51:61
);

  // internal registers

  reg     [31:0]               pulse_period_cnt = 32'h0;
  reg     [31:0]               pulse_period_read = 32'b0;
  reg     [31:0]               pulse_width_read = 32'b0;
  reg     [31:0]               pulse_period_d = 32'b0;
  reg     [31:0]               pulse_width_d = 32'b0;

  wire                         end_of_period_s;

Clone Blocks 6:
hdl/library/axi_pwm_gen/axi_pwm_gen_1.v@55:65
  // internal registers

  reg     [31:0]               pulse_period_cnt = 32'h0;
  reg     [31:0]               pulse_period_read =  PULSE_PERIOD;
  reg     [31:0]               pulse_width_read = PULSE_WIDTH;
  reg     [31:0]               pulse_period_d = PULSE_PERIOD;
  reg     [31:0]               pulse_width_d = PULSE_WIDTH;
  reg                          phase_align_armed = 1'b1;

  // internal wires


Clone Blocks 7:
hdl/library/common/util_pulse_gen.v@53:63
  // internal registers

  reg     [31:0]               pulse_period_cnt = 32'h0;
  reg     [31:0]               pulse_period_read = 32'b0;
  reg     [31:0]               pulse_width_read = 32'b0;
  reg     [31:0]               pulse_period_d = 32'b0;
  reg     [31:0]               pulse_width_d = 32'b0;

  wire                         end_of_period_s;

  // flop the desired period

Clone Blocks 8:
hdl/library/axi_pwm_gen/axi_pwm_gen_1.v@53:63
);

  // internal registers

  reg     [31:0]               pulse_period_cnt = 32'h0;
  reg     [31:0]               pulse_period_read =  PULSE_PERIOD;
  reg     [31:0]               pulse_width_read = PULSE_WIDTH;
  reg     [31:0]               pulse_period_d = PULSE_PERIOD;
  reg     [31:0]               pulse_width_d = PULSE_WIDTH;
  reg                          phase_align_armed = 1'b1;


