{"Source Block": ["hdl/library/axi_dmac/request_arb.v@381:480@HdlStmIf", "\nend else begin\nassign dest_resetn = req_aresetn;\nend endgenerate\n\ngenerate if (DMA_TYPE_DEST == DMA_TYPE_MM_AXI) begin\n\nassign dest_clk = m_dest_axi_aclk;\n\nwire [ID_WIDTH-1:0] dest_data_id;\nwire [ID_WIDTH-1:0] dest_address_id;\nwire dest_address_eot = eot_mem[dest_address_id];\nwire dest_data_eot = eot_mem[dest_data_id];\nwire dest_response_eot = eot_mem[dest_response_id];\n\nassign dbg_dest_address_id = dest_address_id;\nassign dbg_dest_data_id = dest_data_id;\n\ndmac_dest_mm_axi #(\n  .ID_WIDTH(ID_WIDTH),\n  .DMA_DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n  .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST),\n  .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_DEST),\n  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH)\n) i_dest_dma_mm (\n  .m_axi_aclk(m_dest_axi_aclk),\n  .m_axi_aresetn(dest_resetn),\n\n  .enable(dest_enable),\n  .enabled(dest_enabled),\n\n  .req_valid(dest_req_valid),\n  .req_ready(dest_req_ready),\n  .req_address(dest_req_address),\n  .req_last_burst_length(dest_req_last_burst_length),\n\n  .response_valid(dest_response_valid),\n  .response_ready(dest_response_ready),\n  .response_resp(dest_response_resp),\n  .response_resp_eot(dest_response_resp_eot),\n\n  .request_id(dest_request_id),\n  .response_id(dest_response_id),\n  .sync_id(dest_sync_id),\n  .sync_id_ret(dest_sync_id_ret),\n\n  .data_id(dest_data_id),\n  .address_id(dest_address_id),\n\n  .address_eot(dest_address_eot),\n  .data_eot(dest_data_eot),\n  .response_eot(dest_response_eot),\n\n  .fifo_valid(dest_valid),\n  .fifo_ready(dest_ready),\n  .fifo_data(dest_data),\n\n  .m_axi_awready(m_axi_awready),\n  .m_axi_awvalid(m_axi_awvalid),\n  .m_axi_awaddr(m_axi_awaddr),\n  .m_axi_awlen(m_axi_awlen),\n  .m_axi_awsize(m_axi_awsize),\n  .m_axi_awburst(m_axi_awburst),\n  .m_axi_awprot(m_axi_awprot),\n  .m_axi_awcache(m_axi_awcache),\n  .m_axi_wready(m_axi_wready),\n  .m_axi_wvalid(m_axi_wvalid),\n  .m_axi_wdata(m_axi_wdata),\n  .m_axi_wstrb(m_axi_wstrb),\n  .m_axi_wlast(m_axi_wlast),\n\n  .m_axi_bvalid(m_axi_bvalid),\n  .m_axi_bresp(m_axi_bresp),\n  .m_axi_bready(m_axi_bready)\n);\n\nend else begin\n\nassign m_axi_awvalid = 1'b0;\nassign m_axi_awaddr = 'h00;\nassign m_axi_awlen = 'h00;\nassign m_axi_awsize = 'h00;\nassign m_axi_awburst = 'h00;\nassign m_axi_awprot = 'h00;\nassign m_axi_awcache = 'h00;\n\nassign m_axi_wvalid = 1'b0;\nassign m_axi_wdata = 'h00;\nassign m_axi_wstrb = 'h00;\nassign m_axi_wlast = 1'b0;\n\nassign m_axi_bready = 1'b0;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin\n\nassign dest_clk = m_axis_aclk;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[405, "  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH)\n"]], "Add": [[405, "  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST)\n"]]}}