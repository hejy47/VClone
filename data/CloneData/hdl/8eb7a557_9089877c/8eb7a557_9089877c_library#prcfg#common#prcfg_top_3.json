{"Source Block": ["hdl/library/prcfg/common/prcfg_top.v@107:185@HdlStmFor", "  wire    [31:0]                    dac_status_s[(NUM_CHANNEL - 1):0];\n\n  genvar l_inst;\n\n  generate\n    for(l_inst = 0; l_inst < NUM_CHANNEL; l_inst = l_inst + 1) begin: tx_rx_data_path\n      if(ADC_EN == ENABELED) begin\n        if(l_inst == 0) begin\n          prcfg_adc #(\n            .CHANNEL_ID(l_inst)\n          ) i_prcfg_adc_1 (\n            .clk(clk),\n            .control(gpio_input),\n            .status(adc_status_s[l_inst]),\n            .src_adc_dwr(core_adc_dwr),\n            .src_adc_dsync(core_adc_dsync),\n            .src_adc_ddata(core_adc_ddata[(DATA_WIDTH - 1):0]),\n            .src_adc_dovf(core_adc_ovf),\n            .dst_adc_dwr(dma_adc_dwr),\n            .dst_adc_dsync(dma_adc_dsync),\n            .dst_adc_ddata(dma_adc_ddata[(DATA_WIDTH - 1):0]),\n            .dst_adc_dovf(dma_adc_ovf)\n          );\n        end else begin\n           prcfg_adc #(\n            .CHANNEL_ID(l_inst)\n          ) i_prcfg_adc_1 (\n            .clk(clk),\n            .control(gpio_input),\n            .status(adc_status_s[l_inst]),\n            .src_adc_dwr(core_adc_dwr),\n            .src_adc_dsync(core_adc_dsync),\n            .src_adc_ddata(core_adc_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n            .src_adc_dovf(),\n            .dst_adc_dwr(),\n            .dst_adc_dsync(),\n            .dst_adc_ddata(dma_adc_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n            .dst_adc_dovf(dma_adc_ovf)\n          );\n        end\n      end\n      if(DAC_EN == ENABELED) begin\n        if(l_inst == 0) begin\n          prcfg_dac #(\n            .CHANNEL_ID(l_inst)\n          ) i_prcfg_dac_1 (\n            .clk(clk),\n            .control(gpio_input),\n            .status(dac_status_s[l_inst]),\n            .src_dac_drd(dma_dac_drd),\n            .src_dac_ddata(dma_dac_ddata[(DATA_WIDTH - 1):0]),\n            .src_dac_dunf(dma_dac_dunf),\n            .dst_dac_drd(core_dac_drd),\n            .dst_dac_ddata(core_dac_ddata[(DATA_WIDTH - 1):0]),\n            .dst_dac_dunf(core_dac_dunf)\n          );\n        end else begin\n          prcfg_dac #(\n            .CHANNEL_ID(l_inst)\n          ) i_prcfg_dac_1 (\n            .clk(clk),\n            .control(gpio_input),\n            .status(dac_status_s[l_inst]),\n            .src_dac_drd(),\n            .src_dac_ddata(dma_dac_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n            .src_dac_dunf(dma_dac_dunf),\n            .dst_dac_drd(core_dac_drd),\n            .dst_dac_ddata(core_dac_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n            .dst_dac_dunf()\n          );\n        end\n      end\n      always @(posedge clk) begin\n        gpio_output <= gpio_output | adc_status_s[l_inst] | dac_status_s[l_inst];\n      end\n    end\n  endgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[179, "      always @(posedge clk) begin\n"], [180, "        gpio_output <= gpio_output | adc_status_s[l_inst] | dac_status_s[l_inst];\n"], [181, "      end\n"]], "Add": [[181, "      assign gpio_output_s[l_inst] = adc_status_s[l_inst] | dac_status_s[l_inst];\n"], [181, "    end\n"], [181, "  endgenerate\n"], [181, "  genvar i;\n"], [181, "  genvar j;\n"], [181, "  generate\n"], [181, "  for(i = 0; i < 32; i = i + 1) begin\n"], [181, "    for(j = 0; j < NUM_CHANNEL; j = j + 1) begin\n"], [181, "      assign gpio_output_s_inv[i][j] = gpio_output_s[j][i];\n"], [182, "  end\n"], [182, "  endgenerate\n"], [182, "  generate\n"], [182, "  for(i = 0; i < 32; i = i + 1) begin\n"], [182, "    assign gpio_output[i] = |gpio_output_s_inv[i];\n"], [182, "  end\n"]]}}