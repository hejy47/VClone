Source Block: hdl/library/xilinx/common/ad_mmcm_drp.v@172:241@HdlStmIf
    .CLKFBSTOPPED (),
    .PWRDWN (1'b0),
    .RST (mmcm_rst));
  end

  if (MMCM_DEVICE_TYPE == MMCM_DEVICE_7SERIES) begin
  MMCME2_ADV #(
    .BANDWIDTH ("OPTIMIZED"),
    .CLKOUT4_CASCADE ("FALSE"),
    .COMPENSATION ("ZHOLD"),
    .STARTUP_WAIT ("FALSE"),
    .DIVCLK_DIVIDE (MMCM_VCO_DIV),
    .CLKFBOUT_MULT_F (MMCM_VCO_MUL),
    .CLKFBOUT_PHASE (0.000),
    .CLKFBOUT_USE_FINE_PS ("FALSE"),
    .CLKOUT0_DIVIDE_F (MMCM_CLK0_DIV),
    .CLKOUT0_PHASE (MMCM_CLK0_PHASE),
    .CLKOUT0_DUTY_CYCLE (0.500),
    .CLKOUT0_USE_FINE_PS ("FALSE"),
    .CLKOUT1_DIVIDE (MMCM_CLK1_DIV),
    .CLKOUT1_PHASE (MMCM_CLK1_PHASE),
    .CLKOUT1_DUTY_CYCLE (0.500),
    .CLKOUT1_USE_FINE_PS ("FALSE"),
    .CLKOUT2_DIVIDE (MMCM_CLK2_DIV),
    .CLKOUT2_PHASE (MMCM_CLK2_PHASE),
    .CLKOUT2_DUTY_CYCLE (0.500),
    .CLKOUT2_USE_FINE_PS ("FALSE"),
    .CLKIN1_PERIOD (MMCM_CLKIN_PERIOD),
    .CLKIN2_PERIOD (MMCM_CLKIN2_PERIOD),
    .REF_JITTER1 (0.010))
  i_mmcm (
    .CLKIN1 (clk),
    .CLKFBIN (bufg_fb_clk_s),
    .CLKFBOUT (mmcm_fb_clk_s),
    .CLKOUT0 (mmcm_clk_0_s),
    .CLKOUT1 (mmcm_clk_1_s),
    .CLKOUT2 (mmcm_clk_2_s),
    .LOCKED (mmcm_locked_s),
    .DCLK (up_clk),
    .DEN (up_drp_sel),
    .DADDR (up_drp_addr[6:0]),
    .DWE (up_drp_wr),
    .DI (up_drp_wdata),
    .DO (up_drp_rdata_s),
    .DRDY (up_drp_ready_s),
    .CLKFBOUTB (),
    .CLKOUT0B (),
    .CLKOUT1B (),
    .CLKOUT2B (),
    .CLKOUT3 (),
    .CLKOUT3B (),
    .CLKOUT4 (),
    .CLKOUT5 (),
    .CLKOUT6 (),
    .CLKIN2 (clk2),
    .CLKINSEL (clk_sel),
    .PSCLK (1'b0),
    .PSEN (1'b0),
    .PSINCDEC (1'b0),
    .PSDONE (),
    .CLKINSTOPPED (),
    .CLKFBSTOPPED (),
    .PWRDWN (1'b0),
    .RST (mmcm_rst));
  end
  endgenerate

  BUFG i_fb_clk_bufg  (.I (mmcm_fb_clk_s),  .O (bufg_fb_clk_s));
  BUFG i_clk_0_bufg   (.I (mmcm_clk_0_s),   .O (mmcm_clk_0)); 
  BUFG i_clk_1_bufg   (.I (mmcm_clk_1_s),   .O (mmcm_clk_1));

Diff Content:
- 178   MMCME2_ADV #(
- 179     .BANDWIDTH ("OPTIMIZED"),
- 180     .CLKOUT4_CASCADE ("FALSE"),
- 181     .COMPENSATION ("ZHOLD"),
- 182     .STARTUP_WAIT ("FALSE"),
- 183     .DIVCLK_DIVIDE (MMCM_VCO_DIV),
- 184     .CLKFBOUT_MULT_F (MMCM_VCO_MUL),
- 185     .CLKFBOUT_PHASE (0.000),
- 186     .CLKFBOUT_USE_FINE_PS ("FALSE"),
- 187     .CLKOUT0_DIVIDE_F (MMCM_CLK0_DIV),
- 188     .CLKOUT0_PHASE (MMCM_CLK0_PHASE),
- 189     .CLKOUT0_DUTY_CYCLE (0.500),
- 190     .CLKOUT0_USE_FINE_PS ("FALSE"),
- 191     .CLKOUT1_DIVIDE (MMCM_CLK1_DIV),
- 192     .CLKOUT1_PHASE (MMCM_CLK1_PHASE),
- 193     .CLKOUT1_DUTY_CYCLE (0.500),
- 194     .CLKOUT1_USE_FINE_PS ("FALSE"),
- 195     .CLKOUT2_DIVIDE (MMCM_CLK2_DIV),
- 196     .CLKOUT2_PHASE (MMCM_CLK2_PHASE),
- 197     .CLKOUT2_DUTY_CYCLE (0.500),
- 198     .CLKOUT2_USE_FINE_PS ("FALSE"),
- 199     .CLKIN1_PERIOD (MMCM_CLKIN_PERIOD),
- 200     .CLKIN2_PERIOD (MMCM_CLKIN2_PERIOD),
- 201     .REF_JITTER1 (0.010))
- 202   i_mmcm (
- 203     .CLKIN1 (clk),
- 204     .CLKFBIN (bufg_fb_clk_s),
- 205     .CLKFBOUT (mmcm_fb_clk_s),
- 206     .CLKOUT0 (mmcm_clk_0_s),
- 207     .CLKOUT1 (mmcm_clk_1_s),
- 208     .CLKOUT2 (mmcm_clk_2_s),
- 209     .LOCKED (mmcm_locked_s),
- 210     .DCLK (up_clk),
- 211     .DEN (up_drp_sel),
- 212     .DADDR (up_drp_addr[6:0]),
- 213     .DWE (up_drp_wr),
- 214     .DI (up_drp_wdata),
- 215     .DO (up_drp_rdata_s),
- 216     .DRDY (up_drp_ready_s),
- 217     .CLKFBOUTB (),
- 218     .CLKOUT0B (),
- 219     .CLKOUT1B (),
- 220     .CLKOUT2B (),
- 221     .CLKOUT3 (),
- 222     .CLKOUT3B (),
- 223     .CLKOUT4 (),
- 224     .CLKOUT5 (),
- 225     .CLKOUT6 (),
- 226     .CLKIN2 (clk2),
- 227     .CLKINSEL (clk_sel),
- 228     .PSCLK (1'b0),
- 229     .PSEN (1'b0),
- 230     .PSINCDEC (1'b0),
- 231     .PSDONE (),
- 232     .CLKINSTOPPED (),
- 233     .CLKFBSTOPPED (),
- 234     .PWRDWN (1'b0),
- 235     .RST (mmcm_rst));
+ 235     MMCME2_ADV #(
+ 235       .BANDWIDTH ("OPTIMIZED"),
+ 235       .CLKOUT4_CASCADE ("FALSE"),
+ 235       .COMPENSATION ("ZHOLD"),
+ 235       .STARTUP_WAIT ("FALSE"),
+ 235       .DIVCLK_DIVIDE (MMCM_VCO_DIV),
+ 235       .CLKFBOUT_MULT_F (MMCM_VCO_MUL),
+ 235       .CLKFBOUT_PHASE (0.000),
+ 235       .CLKFBOUT_USE_FINE_PS ("FALSE"),
+ 235       .CLKOUT0_DIVIDE_F (MMCM_CLK0_DIV),
+ 235       .CLKOUT0_PHASE (MMCM_CLK0_PHASE),
+ 235       .CLKOUT0_DUTY_CYCLE (0.500),
+ 235       .CLKOUT0_USE_FINE_PS ("FALSE"),
+ 235       .CLKOUT1_DIVIDE (MMCM_CLK1_DIV),
+ 235       .CLKOUT1_PHASE (MMCM_CLK1_PHASE),
+ 235       .CLKOUT1_DUTY_CYCLE (0.500),
+ 235       .CLKOUT1_USE_FINE_PS ("FALSE"),
+ 235       .CLKOUT2_DIVIDE (MMCM_CLK2_DIV),
+ 235       .CLKOUT2_PHASE (MMCM_CLK2_PHASE),
+ 235       .CLKOUT2_DUTY_CYCLE (0.500),
+ 235       .CLKOUT2_USE_FINE_PS ("FALSE"),
+ 235       .CLKIN1_PERIOD (MMCM_CLKIN_PERIOD),
+ 235       .CLKIN2_PERIOD (MMCM_CLKIN2_PERIOD),
+ 235       .REF_JITTER1 (0.010))
+ 235     i_mmcm (
+ 235       .CLKIN1 (clk),
+ 235       .CLKFBIN (bufg_fb_clk_s),
+ 235       .CLKFBOUT (mmcm_fb_clk_s),
+ 235       .CLKOUT0 (mmcm_clk_0_s),
+ 235       .CLKOUT1 (mmcm_clk_1_s),
+ 235       .CLKOUT2 (mmcm_clk_2_s),
+ 235       .LOCKED (mmcm_locked_s),
+ 235       .DCLK (up_clk),
+ 235       .DEN (up_drp_sel),
+ 235       .DADDR (up_drp_addr[6:0]),
+ 235       .DWE (up_drp_wr),
+ 235       .DI (up_drp_wdata),
+ 235       .DO (up_drp_rdata_s),
+ 235       .DRDY (up_drp_ready_s),
+ 235       .CLKFBOUTB (),
+ 235       .CLKOUT0B (),
+ 235       .CLKOUT1B (),
+ 235       .CLKOUT2B (),
+ 235       .CLKOUT3 (),
+ 235       .CLKOUT3B (),
+ 235       .CLKOUT4 (),
+ 235       .CLKOUT5 (),
+ 235       .CLKOUT6 (),
+ 235       .CLKIN2 (clk2),
+ 235       .CLKINSEL (clk_sel),
+ 235       .PSCLK (1'b0),
+ 235       .PSEN (1'b0),
+ 235       .PSINCDEC (1'b0),
+ 235       .PSDONE (),
+ 235       .CLKINSTOPPED (),
+ 235       .CLKFBSTOPPED (),
+ 235       .PWRDWN (1'b0),
+ 235       .RST (mmcm_rst));
+ 235       BUFG i_fb_clk_bufg  (.I (mmcm_fb_clk_s),  .O (bufg_fb_clk_s));
+ 235       BUFG i_clk_0_bufg   (.I (mmcm_clk_0_s),   .O (mmcm_clk_0));
+ 235       BUFG i_clk_1_bufg   (.I (mmcm_clk_1_s),   .O (mmcm_clk_1));
+ 235       BUFG i_clk_2_bufg   (.I (mmcm_clk_2_s),   .O (mmcm_clk_2));
+ 235   end else begin /* MMCM_DEVICE_TYPE == 1 */
+ 235     MMCM_ADV #(
+ 235       .BANDWIDTH ("OPTIMIZED"),
+ 235       .CLKOUT4_CASCADE ("FALSE"),
+ 235       .CLOCK_HOLD ("FALSE"),
+ 235       .COMPENSATION ("ZHOLD"),
+ 235       .STARTUP_WAIT ("FALSE"),
+ 235       .DIVCLK_DIVIDE (MMCM_VCO_DIV),
+ 235       .CLKFBOUT_MULT_F (MMCM_VCO_MUL),
+ 235       .CLKFBOUT_PHASE (0.000),
+ 235       .CLKFBOUT_USE_FINE_PS ("FALSE"),
+ 235       .CLKOUT0_DIVIDE_F (MMCM_CLK0_DIV),
+ 235       .CLKOUT0_PHASE (MMCM_CLK0_PHASE),
+ 235       .CLKOUT0_DUTY_CYCLE (0.500),
+ 235       .CLKOUT0_USE_FINE_PS ("FALSE"),
+ 235       .CLKOUT1_DIVIDE (MMCM_CLK1_DIV),
+ 235       .CLKOUT1_PHASE (MMCM_CLK1_PHASE),
+ 235       .CLKOUT1_DUTY_CYCLE (0.500),
+ 235       .CLKOUT1_USE_FINE_PS ("FALSE"),
+ 235       .CLKOUT2_DIVIDE (MMCM_CLK2_DIV),
+ 235       .CLKOUT2_PHASE (MMCM_CLK2_PHASE),
+ 235       .CLKOUT2_DUTY_CYCLE (0.500),
+ 235       .CLKOUT2_USE_FINE_PS ("FALSE"),
+ 235       .CLKIN1_PERIOD (MMCM_CLKIN_PERIOD),
+ 235       .CLKIN2_PERIOD (MMCM_CLKIN2_PERIOD),
+ 235       .REF_JITTER1 (0.010))
+ 235     i_mmcm (
+ 235       .CLKIN1 (clk),
+ 235       .CLKFBIN (bufg_fb_clk_s),
+ 235       .CLKFBOUT (mmcm_fb_clk_s),
+ 235       .CLKOUT0 (mmcm_clk_0_s),
+ 235       .CLKOUT1 (mmcm_clk_1_s),
+ 235       .CLKOUT2 (mmcm_clk_2_s),
+ 235       .LOCKED (mmcm_locked_s),
+ 235       .DCLK (up_clk),
+ 235       .DEN (up_drp_sel),
+ 235       .DADDR (up_drp_addr[6:0]),
+ 235       .DWE (up_drp_wr),
+ 235       .DI (up_drp_wdata),
+ 235       .DO (up_drp_rdata_s),
+ 235       .DRDY (up_drp_ready_s),
+ 235       .CLKFBOUTB (),
+ 235       .CLKOUT0B (),
+ 235       .CLKOUT1B (),
+ 235       .CLKOUT2B (),
+ 235       .CLKOUT3 (),
+ 235       .CLKOUT3B (),
+ 235       .CLKOUT4 (),
+ 235       .CLKOUT5 (),
+ 235       .CLKOUT6 (),
+ 235       .CLKIN2 (clk2),
+ 235       .CLKINSEL (clk_sel),
+ 235       .PSCLK (1'b0),
+ 235       .PSEN (1'b0),
+ 235       .PSINCDEC (1'b0),
+ 235       .PSDONE (),
+ 235       .CLKINSTOPPED (),
+ 235       .CLKFBSTOPPED (),
+ 235       .PWRDWN (1'b0),
+ 235       .RST (mmcm_rst));
+ 235       BUFG i_fb_clk_bufg  (.I (mmcm_fb_clk_s),  .O (bufg_fb_clk_s));
+ 235       BUFG i_clk_0_bufg   (.I (mmcm_clk_0_s),   .O (mmcm_clk_0));
+ 235       BUFG i_clk_1_bufg   (.I (mmcm_clk_1_s),   .O (mmcm_clk_1));
+ 235       BUFG i_clk_2_bufg   (.I (mmcm_clk_2_s),   .O (mmcm_clk_2));

Clone Blocks:
Clone Blocks 1:
hdl/library/xilinx/common/ad_mmcm_drp.v@110:180
  end

  // instantiations

  generate
  if (MMCM_DEVICE_TYPE == MMCM_DEVICE_VIRTEX6) begin
  MMCM_ADV #(
    .BANDWIDTH ("OPTIMIZED"),
    .CLKOUT4_CASCADE ("FALSE"),
    .CLOCK_HOLD ("FALSE"),
    .COMPENSATION ("ZHOLD"),
    .STARTUP_WAIT ("FALSE"),
    .DIVCLK_DIVIDE (MMCM_VCO_DIV),
    .CLKFBOUT_MULT_F (MMCM_VCO_MUL),
    .CLKFBOUT_PHASE (0.000),
    .CLKFBOUT_USE_FINE_PS ("FALSE"),
    .CLKOUT0_DIVIDE_F (MMCM_CLK0_DIV),
    .CLKOUT0_PHASE (MMCM_CLK0_PHASE),
    .CLKOUT0_DUTY_CYCLE (0.500),
    .CLKOUT0_USE_FINE_PS ("FALSE"),
    .CLKOUT1_DIVIDE (MMCM_CLK1_DIV),
    .CLKOUT1_PHASE (MMCM_CLK1_PHASE),
    .CLKOUT1_DUTY_CYCLE (0.500),
    .CLKOUT1_USE_FINE_PS ("FALSE"),
    .CLKOUT2_DIVIDE (MMCM_CLK2_DIV),
    .CLKOUT2_PHASE (MMCM_CLK2_PHASE),
    .CLKOUT2_DUTY_CYCLE (0.500),
    .CLKOUT2_USE_FINE_PS ("FALSE"),
    .CLKIN1_PERIOD (MMCM_CLKIN_PERIOD),
    .CLKIN2_PERIOD (MMCM_CLKIN2_PERIOD),
    .REF_JITTER1 (0.010))
  i_mmcm (
    .CLKIN1 (clk),
    .CLKFBIN (bufg_fb_clk_s),
    .CLKFBOUT (mmcm_fb_clk_s),
    .CLKOUT0 (mmcm_clk_0_s),
    .CLKOUT1 (mmcm_clk_1_s),
    .CLKOUT2 (mmcm_clk_2_s),
    .LOCKED (mmcm_locked_s),
    .DCLK (up_clk),
    .DEN (up_drp_sel),
    .DADDR (up_drp_addr[6:0]),
    .DWE (up_drp_wr),
    .DI (up_drp_wdata),
    .DO (up_drp_rdata_s),
    .DRDY (up_drp_ready_s),
    .CLKFBOUTB (),
    .CLKOUT0B (),
    .CLKOUT1B (),
    .CLKOUT2B (),
    .CLKOUT3 (),
    .CLKOUT3B (),
    .CLKOUT4 (),
    .CLKOUT5 (),
    .CLKOUT6 (),
    .CLKIN2 (clk2),
    .CLKINSEL (clk_sel),
    .PSCLK (1'b0),
    .PSEN (1'b0),
    .PSINCDEC (1'b0),
    .PSDONE (),
    .CLKINSTOPPED (),
    .CLKFBSTOPPED (),
    .PWRDWN (1'b0),
    .RST (mmcm_rst));
  end

  if (MMCM_DEVICE_TYPE == MMCM_DEVICE_7SERIES) begin
  MMCME2_ADV #(
    .BANDWIDTH ("OPTIMIZED"),
    .CLKOUT4_CASCADE ("FALSE"),

