{"Source Block": ["hdl/library/xilinx/axi_dacfifo/util_dacfifo_bypass.v@165:185@HdlStmProcess", "\n  // Write address generation for the asymmetric memory\n\n  assign dma_mem_wea_s = dma_xfer_req & dma_valid & dma_ready;\n\n  always @(posedge dma_clk) begin\n    if (dma_rst == 1'b1) begin\n      dma_mem_waddr <= 'h0;\n      dma_mem_waddr_g <= 'h0;\n    end else begin\n      if (dma_mem_wea_s == 1'b1) begin\n        dma_mem_waddr <= dma_mem_waddr + 1;\n      end\n      dma_mem_waddr_g <= b2g(dma_mem_waddr);\n    end\n  end\n\n  // The memory module request data until reaches the high threshold.\n\n  always @(posedge dma_clk) begin\n    if (dma_rst == 1'b1) begin\n"], "Clone Blocks": [["hdl/library/altera/avl_dacfifo/util_dacfifo_bypass.v@160:180", "\n  // Write address generation for the asymmetric memory\n\n  assign dma_mem_wea_s = dma_xfer_req & dma_valid & dma_ready;\n\n  always @(posedge dma_clk) begin\n    if (dma_rst == 1'b1) begin\n      dma_mem_waddr <= 'h0;\n      dma_mem_waddr_g <= 'h0;\n    end else begin\n      if (dma_mem_wea_s == 1'b1) begin\n        dma_mem_waddr <= dma_mem_waddr + 1'b1;\n      end\n      dma_mem_waddr_g <= b2g(dma_mem_waddr);\n    end\n  end\n\n  // The memory module request data until reaches the high threshold.\n\n  always @(posedge dma_clk) begin\n    if (dma_rst == 1'b1) begin\n"]], "Diff Content": {"Delete": [[176, "        dma_mem_waddr <= dma_mem_waddr + 1;\n"], [178, "      dma_mem_waddr_g <= b2g(dma_mem_waddr);\n"]], "Add": [[176, "        dma_mem_waddr <= dma_mem_waddr + 1'b1;\n"], [178, "      dma_mem_waddr_g <= dma_mem_waddr_b2g_s;\n"], [180, "  ad_b2g #(\n"], [180, "    .DATA_WIDTH (DMA_ADDRESS_WIDTH))\n"], [180, "  i_dma_mem_waddr_b2g (\n"], [180, "    .din (dma_mem_waddr),\n"], [180, "    .dout (dma_mem_waddr_b2g_s));\n"]]}}