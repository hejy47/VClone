Source Block: hdl/library/xilinx/axi_dacfifo/util_dacfifo_bypass.v@224:244@HdlStmProcess

  // Read address generation for the asymmetric memory

  assign dac_mem_rea_s = dac_valid & dac_mem_ready;

  always @(posedge dac_clk) begin
    if (dac_rst == 1'b1) begin
      dac_mem_raddr <= 'h0;
      dac_mem_raddr_g <= 'h0;
    end else begin
      if (dac_mem_rea_s == 1'b1) begin
        dac_mem_raddr <= dac_mem_raddr + 1;
      end
      dac_mem_raddr_g <= b2g(dac_mem_raddr);
    end
  end

  // The memory module is ready if it's not empty

  always @(posedge dac_clk) begin
    if (dac_rst == 1'b1) begin

Diff Content:
- 237       dac_mem_raddr_g <= b2g(dac_mem_raddr);
+ 237       dac_mem_raddr_g <= dac_mem_raddr_b2g_s;
+ 239   ad_b2g #(
+ 239     .DATA_WIDTH (DAC_ADDRESS_WIDTH))
+ 239   i_dac_mem_raddr_b2g (
+ 239     .din (dac_mem_raddr),
+ 239     .dout (dac_mem_raddr_b2g_s));

Clone Blocks:
Clone Blocks 1:
hdl/library/altera/avl_dacfifo/util_dacfifo_bypass.v@219:239

  // Read address generation for the asymmetric memory

  assign dac_mem_rea_s = dac_valid & dac_mem_ready;

  always @(posedge dac_clk) begin
    if (dac_rst == 1'b1) begin
      dac_mem_raddr <= 'h0;
      dac_mem_raddr_g <= 'h0;
    end else begin
      if (dac_mem_rea_s == 1'b1) begin
        dac_mem_raddr <= dac_mem_raddr + 1'b1;
      end
      dac_mem_raddr_g <= b2g(dac_mem_raddr);
    end
  end

  // The memory module is ready if it's not empty

  always @(posedge dac_clk) begin
    if (dac_rst == 1'b1) begin

