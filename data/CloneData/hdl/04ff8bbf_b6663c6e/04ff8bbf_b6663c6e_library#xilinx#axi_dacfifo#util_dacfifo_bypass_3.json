{"Source Block": ["hdl/library/xilinx/axi_dacfifo/util_dacfifo_bypass.v@224:244@HdlStmProcess", "\n  // Read address generation for the asymmetric memory\n\n  assign dac_mem_rea_s = dac_valid & dac_mem_ready;\n\n  always @(posedge dac_clk) begin\n    if (dac_rst == 1'b1) begin\n      dac_mem_raddr <= 'h0;\n      dac_mem_raddr_g <= 'h0;\n    end else begin\n      if (dac_mem_rea_s == 1'b1) begin\n        dac_mem_raddr <= dac_mem_raddr + 1;\n      end\n      dac_mem_raddr_g <= b2g(dac_mem_raddr);\n    end\n  end\n\n  // The memory module is ready if it's not empty\n\n  always @(posedge dac_clk) begin\n    if (dac_rst == 1'b1) begin\n"], "Clone Blocks": [["hdl/library/altera/avl_dacfifo/util_dacfifo_bypass.v@219:239", "\n  // Read address generation for the asymmetric memory\n\n  assign dac_mem_rea_s = dac_valid & dac_mem_ready;\n\n  always @(posedge dac_clk) begin\n    if (dac_rst == 1'b1) begin\n      dac_mem_raddr <= 'h0;\n      dac_mem_raddr_g <= 'h0;\n    end else begin\n      if (dac_mem_rea_s == 1'b1) begin\n        dac_mem_raddr <= dac_mem_raddr + 1'b1;\n      end\n      dac_mem_raddr_g <= b2g(dac_mem_raddr);\n    end\n  end\n\n  // The memory module is ready if it's not empty\n\n  always @(posedge dac_clk) begin\n    if (dac_rst == 1'b1) begin\n"]], "Diff Content": {"Delete": [[237, "      dac_mem_raddr_g <= b2g(dac_mem_raddr);\n"]], "Add": [[237, "      dac_mem_raddr_g <= dac_mem_raddr_b2g_s;\n"], [239, "  ad_b2g #(\n"], [239, "    .DATA_WIDTH (DAC_ADDRESS_WIDTH))\n"], [239, "  i_dac_mem_raddr_b2g (\n"], [239, "    .din (dac_mem_raddr),\n"], [239, "    .dout (dac_mem_raddr_b2g_s));\n"]]}}