{"Source Block": ["hdl/library/spi_engine/axi_spi_engine/axi_spi_engine.v@275:299@HdlStmProcess", "                end\n        end\nend\n\n// the software reset should reset all the registers\nalways @(posedge clk) begin\n  if (up_sw_resetn == 1'b0) begin\n    up_irq_mask <= 'h00;\n    offload0_enable <= 1'b0;\n    offload0_mem_reset <= 1'b0;\n  end else begin\n    if (up_wreq_s) begin\n      case (up_waddr_s)\n        8'h20: up_irq_mask <= up_wdata_s;\n        8'h40: offload0_enable <= up_wdata_s[0];\n        8'h42: offload0_mem_reset <= up_wdata_s[0];\n      endcase\n    end\n  end\nend\n\nalways @(posedge clk) begin\n        if (rstn == 1'b0) begin\n                up_rack_ff <= 'd0;\n        end else begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[280, "always @(posedge clk) begin\n"], [281, "  if (up_sw_resetn == 1'b0) begin\n"], [282, "    up_irq_mask <= 'h00;\n"], [283, "    offload0_enable <= 1'b0;\n"], [284, "    offload0_mem_reset <= 1'b0;\n"], [285, "  end else begin\n"], [286, "    if (up_wreq_s) begin\n"], [287, "      case (up_waddr_s)\n"], [288, "        8'h20: up_irq_mask <= up_wdata_s;\n"], [289, "        8'h40: offload0_enable <= up_wdata_s[0];\n"], [290, "        8'h42: offload0_mem_reset <= up_wdata_s[0];\n"], [291, "      endcase\n"], [294, "end\n"]], "Add": [[291, "  localparam PCORE_VERSION = 'h010071;\n"], [291, "  localparam S_AXI = 0;\n"], [291, "  localparam UP_FIFO = 1;\n"], [291, "  wire clk;\n"], [291, "  wire rstn;\n"], [291, "  wire [CMD_FIFO_ADDRESS_WIDTH:0] cmd_fifo_room;\n"], [291, "  wire cmd_fifo_almost_empty;\n"], [291, "  wire [15:0] cmd_fifo_in_data;\n"], [291, "  wire cmd_fifo_in_ready;\n"], [291, "  wire cmd_fifo_in_valid;\n"], [291, "  wire [SDO_FIFO_ADDRESS_WIDTH:0] sdo_fifo_room;\n"], [291, "  wire sdo_fifo_almost_empty;\n"], [291, "  wire [(DATA_WIDTH-1):0] sdo_fifo_in_data;\n"], [291, "  wire sdo_fifo_in_ready;\n"], [291, "  wire sdo_fifo_in_valid;\n"], [291, "  wire [SDI_FIFO_ADDRESS_WIDTH:0] sdi_fifo_level;\n"], [291, "  wire sdi_fifo_almost_full;\n"], [291, "  wire [(NUM_OF_SDI * DATA_WIDTH-1):0] sdi_fifo_out_data;\n"], [291, "  wire sdi_fifo_out_ready;\n"], [291, "  wire sdi_fifo_out_valid;\n"], [291, "  reg up_sw_reset = 1'b1;\n"], [291, "  wire up_sw_resetn = ~up_sw_reset;\n"], [291, "  reg  [31:0]                     up_rdata_ff = 'd0;\n"], [291, "  reg                             up_wack_ff = 1'b0;\n"], [291, "  reg                             up_rack_ff = 1'b0;\n"], [291, "  wire                            up_wreq_s;\n"], [291, "  wire                            up_rreq_s;\n"], [291, "  wire [31:0]                     up_wdata_s;\n"], [291, "  wire [(UP_ADDRESS_WIDTH-1):0]   up_waddr_s;\n"], [291, "  wire [(UP_ADDRESS_WIDTH-1):0]   up_raddr_s;\n"], [291, "  reg [31:0] up_scratch = 'h00;\n"], [291, "  reg  [7:0] sync_id = 'h00;\n"], [291, "  reg        sync_id_pending = 1'b0;\n"], [291, "  generate if (MM_IF_TYPE == S_AXI) begin\n"], [291, "    assign clk = s_axi_aclk;\n"], [291, "    assign rstn = s_axi_aresetn;\n"], [291, "    up_axi #(\n"], [291, "      .ADDRESS_WIDTH (UP_ADDRESS_WIDTH)\n"], [291, "    ) i_up_axi (\n"], [291, "      .up_rstn(rstn),\n"], [291, "      .up_clk(clk),\n"], [291, "      .up_axi_awvalid(s_axi_awvalid),\n"], [291, "      .up_axi_awaddr(s_axi_awaddr),\n"], [291, "      .up_axi_awready(s_axi_awready),\n"], [291, "      .up_axi_wvalid(s_axi_wvalid),\n"], [291, "      .up_axi_wdata(s_axi_wdata),\n"], [291, "      .up_axi_wstrb(s_axi_wstrb),\n"], [291, "      .up_axi_wready(s_axi_wready),\n"], [291, "      .up_axi_bvalid(s_axi_bvalid),\n"], [291, "      .up_axi_bresp(s_axi_bresp),\n"], [291, "      .up_axi_bready(s_axi_bready),\n"], [291, "      .up_axi_arvalid(s_axi_arvalid),\n"], [291, "      .up_axi_araddr(s_axi_araddr),\n"], [291, "      .up_axi_arready(s_axi_arready),\n"], [291, "      .up_axi_rvalid(s_axi_rvalid),\n"], [291, "      .up_axi_rresp(s_axi_rresp),\n"], [291, "      .up_axi_rdata(s_axi_rdata),\n"], [291, "      .up_axi_rready(s_axi_rready),\n"], [291, "      .up_wreq(up_wreq_s),\n"], [291, "      .up_waddr(up_waddr_s),\n"], [291, "      .up_wdata(up_wdata_s),\n"], [291, "      .up_wack(up_wack_ff),\n"], [291, "      .up_rreq(up_rreq_s),\n"], [291, "      .up_raddr(up_raddr_s),\n"], [291, "      .up_rdata(up_rdata_ff),\n"], [291, "      .up_rack(up_rack_ff)\n"], [291, "    );\n"], [291, "    assign up_rdata = 32'b0;\n"], [291, "    assign up_rack = 1'b0;\n"], [291, "    assign up_wack = 1'b0;\n"], [291, "  end\n"], [291, "  endgenerate\n"], [291, "  generate if (MM_IF_TYPE == UP_FIFO) begin\n"], [291, "    assign clk = up_clk;\n"], [291, "    assign rstn = up_rstn;\n"], [291, "    assign up_wreq_s = up_wreq;\n"], [291, "    assign up_waddr_s = up_waddr;\n"], [291, "    assign up_wdata_s = up_wdata;\n"], [291, "    assign up_wack = up_wack_ff;\n"], [291, "    assign up_rreq_s = up_rreq;\n"], [291, "    assign up_raddr_s = up_raddr;\n"], [291, "    assign up_rdata = up_rdata_ff;\n"], [291, "    assign up_rack = up_rack_ff;\n"], [291, "  end\n"], [291, "  endgenerate\n"], [291, "  reg [3:0] up_irq_mask = 'h0;\n"], [291, "  wire [3:0] up_irq_source;\n"], [291, "  wire [3:0] up_irq_pending;\n"], [291, "  assign up_irq_source = {\n"], [291, "    sync_id_pending,\n"], [291, "    sdi_fifo_almost_full,\n"], [291, "    sdo_fifo_almost_empty,\n"], [291, "    cmd_fifo_almost_empty\n"], [291, "  };\n"], [291, "  assign up_irq_pending = up_irq_mask & up_irq_source;\n"], [291, "  always @(posedge clk) begin\n"], [291, "    if (rstn == 1'b0)\n"], [291, "      irq <= 1'b0;\n"], [291, "    else\n"], [291, "      irq <= |up_irq_pending;\n"], [291, "    end\n"], [291, "  always @(posedge clk) begin\n"], [291, "    if (rstn == 1'b0) begin\n"], [291, "      up_wack_ff <= 1'b0;\n"], [291, "      up_scratch <= 'h00;\n"], [291, "      up_sw_reset <= 1'b1;\n"], [291, "    end else begin\n"], [291, "      up_wack_ff <= up_wreq_s;\n"], [291, "      if (up_wreq_s) begin\n"], [291, "        case (up_waddr_s)\n"], [291, "          8'h02: up_scratch <= up_wdata_s;\n"], [291, "          8'h10: up_sw_reset <= up_wdata_s;\n"], [291, "        endcase\n"], [291, "      end\n"]]}}