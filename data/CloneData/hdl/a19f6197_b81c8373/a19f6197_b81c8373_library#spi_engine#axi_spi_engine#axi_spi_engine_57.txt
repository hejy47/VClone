Source Block: hdl/library/spi_engine/axi_spi_engine/axi_spi_engine.v@437:444@HdlStmAssign

assign offload0_cmd_wr_en = up_wreq_s == 1'b1 && up_waddr_s == 8'h44;
assign offload0_cmd_wr_data = up_wdata_s[15:0];

assign offload0_sdo_wr_en = up_wreq_s == 1'b1 && up_waddr_s == 8'h45;
assign offload0_sdo_wr_data = up_wdata_s[7:0];

endmodule

Diff Content:
- 442 assign offload0_sdo_wr_data = up_wdata_s[7:0];
+ 442       end
+ 442     end
+ 442   end
+ 442   always @(posedge clk) begin
+ 442     if (rstn == 1'b0) begin
+ 442       up_rack_ff <= 'd0;
+ 442     end else begin
+ 442       up_rack_ff <= up_rreq_s;
+ 442     end
+ 442   end
+ 442   always @(posedge clk) begin
+ 442     case (up_raddr_s)
+ 442       8'h00: up_rdata_ff <= PCORE_VERSION;
+ 442       8'h01: up_rdata_ff <= ID;
+ 442       8'h02: up_rdata_ff <= up_scratch;
+ 442       8'h03: up_rdata_ff <= DATA_WIDTH;
+ 442       8'h10: up_rdata_ff <= up_sw_reset;
+ 442       8'h20: up_rdata_ff <= up_irq_mask;
+ 442       8'h21: up_rdata_ff <= up_irq_pending;
+ 442       8'h22: up_rdata_ff <= up_irq_source;
+ 442       8'h30: up_rdata_ff <= sync_id;
+ 442       8'h34: up_rdata_ff <= cmd_fifo_room;
+ 442       8'h35: up_rdata_ff <= sdo_fifo_room;
+ 442       8'h36: up_rdata_ff <= sdi_fifo_level;
+ 442       8'h3a: up_rdata_ff <= sdi_fifo_out_data;
+ 442       8'h3c: up_rdata_ff <= sdi_fifo_out_data; /* PEEK register */
+ 442       8'h40: up_rdata_ff <= {offload0_enable};
+ 442       8'h41: up_rdata_ff <= {offload0_enabled};
+ 442       default: up_rdata_ff <= 'h00;
+ 442     endcase
+ 442   end
+ 442   always @(posedge clk) begin
+ 442     if (up_sw_resetn == 1'b0) begin
+ 442       sync_id <= 'h00;
+ 442       sync_id_pending <= 1'b0;
+ 442     end else begin
+ 442       if (sync_valid == 1'b1) begin
+ 442         sync_id <= sync_data;
+ 442         sync_id_pending <= 1'b1;
+ 442       end else if (up_wreq_s == 1'b1 && up_waddr_s == 8'h21 && up_wdata_s[3] == 1'b1) begin
+ 442         sync_id_pending <= 1'b0;
+ 442       end
+ 442     end
+ 442   end
+ 442   assign sync_ready = 1'b1;
+ 442   generate if (ASYNC_SPI_CLK) begin
+ 442     wire spi_reset;
+ 442     ad_rst i_spi_resetn (
+ 442       .preset(up_sw_reset),
+ 442       .clk(spi_clk),
+ 442       .rst(spi_reset)
+ 442     );
+ 442     assign spi_resetn = ~spi_reset;
+ 442   end else begin
+ 442     assign spi_resetn = ~up_sw_reset;
+ 442   end
+ 442   endgenerate
+ 442   /* Evaluates to true if FIFO level/room is 3/4 or above */
+ 442   `define axi_spi_engine_check_watermark(x, n) \
+ 442   (x[n] == 1'b1 || x[n-1:n-2] == 2'b11)
+ 442   assign cmd_fifo_in_valid = up_wreq_s == 1'b1 && up_waddr_s == 8'h38;
+ 442   assign cmd_fifo_in_data = up_wdata_s[15:0];
+ 442   assign cmd_fifo_almost_empty =
+ 442     `axi_spi_engine_check_watermark(cmd_fifo_room, CMD_FIFO_ADDRESS_WIDTH);
+ 442   util_axis_fifo #(
+ 442     .DATA_WIDTH(16),
+ 442     .ASYNC_CLK(ASYNC_SPI_CLK),
+ 442     .ADDRESS_WIDTH(CMD_FIFO_ADDRESS_WIDTH),
+ 442     .S_AXIS_REGISTERED(0)
+ 442   ) i_cmd_fifo (
+ 442     .s_axis_aclk(clk),
+ 442     .s_axis_aresetn(up_sw_resetn),
+ 442     .s_axis_ready(cmd_fifo_in_ready),
+ 442     .s_axis_valid(cmd_fifo_in_valid),
+ 442     .s_axis_data(cmd_fifo_in_data),
+ 442     .s_axis_room(cmd_fifo_room),
+ 442     .s_axis_empty(),
+ 442     .m_axis_aclk(spi_clk),
+ 442     .m_axis_aresetn(spi_resetn),
+ 442     .m_axis_ready(cmd_ready),
+ 442     .m_axis_valid(cmd_valid),
+ 442     .m_axis_data(cmd_data)
+ 442   );
+ 442   assign sdo_fifo_in_valid = up_wreq_s == 1'b1 && up_waddr_s == 8'h39;
+ 442   assign sdo_fifo_in_data = up_wdata_s[(DATA_WIDTH-1):0];
+ 442   assign sdo_fifo_almost_empty =
+ 442     `axi_spi_engine_check_watermark(sdo_fifo_room, SDO_FIFO_ADDRESS_WIDTH);
+ 442   util_axis_fifo #(
+ 442     .DATA_WIDTH(DATA_WIDTH),
+ 442     .ASYNC_CLK(ASYNC_SPI_CLK),
+ 442     .ADDRESS_WIDTH(SDO_FIFO_ADDRESS_WIDTH),
+ 442     .S_AXIS_REGISTERED(0)
+ 442   ) i_sdo_fifo (
+ 442     .s_axis_aclk(clk),
+ 442     .s_axis_aresetn(up_sw_resetn),
+ 442     .s_axis_ready(sdo_fifo_in_ready),
+ 442     .s_axis_valid(sdo_fifo_in_valid),
+ 442     .s_axis_data(sdo_fifo_in_data),
+ 442     .s_axis_room(sdo_fifo_room),
+ 442     .s_axis_empty(),
+ 442     .m_axis_aclk(spi_clk),
+ 442     .m_axis_aresetn(spi_resetn),
+ 442     .m_axis_ready(sdo_data_ready),
+ 442     .m_axis_valid(sdo_data_valid),
+ 442     .m_axis_data(sdo_data)
+ 442   );
+ 442   assign sdi_fifo_out_ready = up_rreq_s == 1'b1 && up_raddr_s == 8'h3a;
+ 442   assign sdi_fifo_almost_full =
+ 442     `axi_spi_engine_check_watermark(sdi_fifo_level, SDI_FIFO_ADDRESS_WIDTH);
+ 442   util_axis_fifo #(
+ 442     .DATA_WIDTH(NUM_OF_SDI * DATA_WIDTH),
+ 442     .ASYNC_CLK(ASYNC_SPI_CLK),
+ 442     .ADDRESS_WIDTH(SDI_FIFO_ADDRESS_WIDTH),
+ 442     .S_AXIS_REGISTERED(0)
+ 442   ) i_sdi_fifo (
+ 442     .s_axis_aclk(spi_clk),
+ 442     .s_axis_aresetn(spi_resetn),
+ 442     .s_axis_ready(sdi_data_ready),
+ 442     .s_axis_valid(sdi_data_valid),
+ 442     .s_axis_data(sdi_data),
+ 442     .s_axis_empty(),
+ 442     .m_axis_aclk(clk),
+ 442     .m_axis_aresetn(up_sw_resetn),
+ 442     .m_axis_ready(sdi_fifo_out_ready),
+ 442     .m_axis_valid(sdi_fifo_out_valid),
+ 442     .m_axis_data(sdi_fifo_out_data),
+ 442     .m_axis_level(sdi_fifo_level)
+ 442   );
+ 442   assign offload0_cmd_wr_en = up_wreq_s == 1'b1 && up_waddr_s == 8'h44;
+ 442   assign offload0_cmd_wr_data = up_wdata_s[15:0];
+ 442   assign offload0_sdo_wr_en = up_wreq_s == 1'b1 && up_waddr_s == 8'h45;
+ 442   assign offload0_sdo_wr_data = up_wdata_s[7:0];

Clone Blocks:
Clone Blocks 1:
hdl/library/spi_engine/axi_spi_engine/axi_spi_engine.v@434:444
        .m_axis_data(sdi_fifo_out_data),
        .m_axis_level(sdi_fifo_level)
);

assign offload0_cmd_wr_en = up_wreq_s == 1'b1 && up_waddr_s == 8'h44;
assign offload0_cmd_wr_data = up_wdata_s[15:0];

assign offload0_sdo_wr_en = up_wreq_s == 1'b1 && up_waddr_s == 8'h45;
assign offload0_sdo_wr_data = up_wdata_s[7:0];

endmodule

Clone Blocks 2:
hdl/library/spi_engine/axi_spi_engine/axi_spi_engine.v@436:444
);

assign offload0_cmd_wr_en = up_wreq_s == 1'b1 && up_waddr_s == 8'h44;
assign offload0_cmd_wr_data = up_wdata_s[15:0];

assign offload0_sdo_wr_en = up_wreq_s == 1'b1 && up_waddr_s == 8'h45;
assign offload0_sdo_wr_data = up_wdata_s[7:0];

endmodule

