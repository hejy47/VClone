{"Source Block": ["hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@110:138@HdlStmProcess", "  end\n\n\n  // internal signals\n\n  always @(posedge clk) begin\n    if (reset == 1'b1) begin\n      data_m1 <= 'd0;\n      edge_detect <= 'd0;\n      rise_edge <= 'd0;\n      fall_edge <= 'd0;\n      low_level <= 'd0;\n      high_level <= 'd0;\n    end else begin\n      if (data_valid == 1'b1) begin\n        data_m1 <= {trigger_i, data} ;\n        edge_detect <= data_m1 ^ {trigger_i, data};\n        rise_edge <= (data_m1 ^ {trigger_i, data} ) & {trigger_i, data};\n        fall_edge <= (data_m1 ^ {trigger_i, data}) & ~{trigger_i, data};\n        low_level <= ~{trigger_i, data};\n        high_level <= {trigger_i, data};\n      end\n    end\n  end\n\n\nendmodule\n\n// ***************************************************************************\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[125, "        data_m1 <= {trigger_i, data} ;\n"], [126, "        edge_detect <= data_m1 ^ {trigger_i, data};\n"], [127, "        rise_edge <= (data_m1 ^ {trigger_i, data} ) & {trigger_i, data};\n"], [128, "        fall_edge <= (data_m1 ^ {trigger_i, data}) & ~{trigger_i, data};\n"], [129, "        low_level <= ~{trigger_i, data};\n"], [130, "        high_level <= {trigger_i, data};\n"]], "Add": [[130, "        data_m1 <=  data;\n"], [130, "        edge_detect <=  data_m1 ^ data;\n"], [130, "        rise_edge   <= (data_m1 ^ data) & data;\n"], [130, "        fall_edge   <= (data_m1 ^ data) & ~data;\n"], [130, "        low_level   <= ~data;\n"], [130, "        high_level  <= data;\n"], [130, "        edge_detect_m <= edge_detect;\n"], [130, "        rise_edge_m   <= rise_edge;\n"], [130, "        fall_edge_m   <= fall_edge;\n"], [130, "        low_level_m   <= low_level;\n"], [130, "        high_level_m  <= high_level;\n"], [133, "  always @(posedge clk) begin\n"], [133, "    if (reset == 1'b1) begin\n"], [133, "      ext_t_m <= 'd0;\n"], [133, "      ext_t_edge_detect_hold <= 'd0;\n"], [133, "      ext_t_rise_edge_hold <= 'd0;\n"], [133, "      ext_t_fall_edge_hold <= 'd0;\n"], [133, "      ext_t_low_level_hold <= 'd0;\n"], [133, "      ext_t_high_level_hold <= 'd0;\n"], [133, "    end else begin\n"], [133, "      ext_t_m <=  trigger_i;\n"], [133, "      ext_t_edge_detect_hold <= ext_t_edge_detect_ack ? 2'b0 :\n"], [133, "                                (ext_t_m ^ trigger_i) | ext_t_edge_detect_hold;\n"], [133, "      ext_t_rise_edge_hold   <= ext_t_rise_edge_ack   ? 2'b0 :\n"], [133, "                                ((ext_t_m ^ trigger_i) & trigger_i) | ext_t_rise_edge_hold;\n"], [133, "      ext_t_fall_edge_hold   <= ext_t_fall_edge_ack   ? 2'b0 :\n"], [133, "                                ((ext_t_m ^ trigger_i) & ~trigger_i) | ext_t_fall_edge_hold;\n"], [133, "      ext_t_low_level_hold   <= ext_t_low_level_ack   ? 2'b0 :\n"], [133, "                                (~trigger_i) | ext_t_low_level_hold;\n"], [133, "      ext_t_high_level_hold  <= ext_t_high_level_ack  ? 2'b0 :\n"], [133, "                                (trigger_i) | ext_t_high_level_hold;\n"], [133, "      ext_t_edge_detect_ack <= data_valid & ( |ext_t_edge_detect_hold);\n"], [133, "      ext_t_rise_edge_ack   <= data_valid & ( |ext_t_rise_edge_hold);\n"], [133, "      ext_t_fall_edge_ack   <= data_valid & ( |ext_t_fall_edge_hold);\n"], [133, "      ext_t_low_level_ack   <= data_valid & ( |ext_t_low_level_hold);\n"], [133, "      ext_t_high_level_ack  <= data_valid & ( |ext_t_high_level_hold);\n"], [133, "    end\n"], [133, "  end\n"]]}}