Source Block: hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@110:138@HdlStmProcess
  end


  // internal signals

  always @(posedge clk) begin
    if (reset == 1'b1) begin
      data_m1 <= 'd0;
      edge_detect <= 'd0;
      rise_edge <= 'd0;
      fall_edge <= 'd0;
      low_level <= 'd0;
      high_level <= 'd0;
    end else begin
      if (data_valid == 1'b1) begin
        data_m1 <= {trigger_i, data} ;
        edge_detect <= data_m1 ^ {trigger_i, data};
        rise_edge <= (data_m1 ^ {trigger_i, data} ) & {trigger_i, data};
        fall_edge <= (data_m1 ^ {trigger_i, data}) & ~{trigger_i, data};
        low_level <= ~{trigger_i, data};
        high_level <= {trigger_i, data};
      end
    end
  end


endmodule

// ***************************************************************************

Diff Content:
- 125         data_m1 <= {trigger_i, data} ;
- 126         edge_detect <= data_m1 ^ {trigger_i, data};
- 127         rise_edge <= (data_m1 ^ {trigger_i, data} ) & {trigger_i, data};
- 128         fall_edge <= (data_m1 ^ {trigger_i, data}) & ~{trigger_i, data};
- 129         low_level <= ~{trigger_i, data};
- 130         high_level <= {trigger_i, data};
+ 130         data_m1 <=  data;
+ 130         edge_detect <=  data_m1 ^ data;
+ 130         rise_edge   <= (data_m1 ^ data) & data;
+ 130         fall_edge   <= (data_m1 ^ data) & ~data;
+ 130         low_level   <= ~data;
+ 130         high_level  <= data;
+ 130         edge_detect_m <= edge_detect;
+ 130         rise_edge_m   <= rise_edge;
+ 130         fall_edge_m   <= fall_edge;
+ 130         low_level_m   <= low_level;
+ 130         high_level_m  <= high_level;
+ 133   always @(posedge clk) begin
+ 133     if (reset == 1'b1) begin
+ 133       ext_t_m <= 'd0;
+ 133       ext_t_edge_detect_hold <= 'd0;
+ 133       ext_t_rise_edge_hold <= 'd0;
+ 133       ext_t_fall_edge_hold <= 'd0;
+ 133       ext_t_low_level_hold <= 'd0;
+ 133       ext_t_high_level_hold <= 'd0;
+ 133     end else begin
+ 133       ext_t_m <=  trigger_i;
+ 133       ext_t_edge_detect_hold <= ext_t_edge_detect_ack ? 2'b0 :
+ 133                                 (ext_t_m ^ trigger_i) | ext_t_edge_detect_hold;
+ 133       ext_t_rise_edge_hold   <= ext_t_rise_edge_ack   ? 2'b0 :
+ 133                                 ((ext_t_m ^ trigger_i) & trigger_i) | ext_t_rise_edge_hold;
+ 133       ext_t_fall_edge_hold   <= ext_t_fall_edge_ack   ? 2'b0 :
+ 133                                 ((ext_t_m ^ trigger_i) & ~trigger_i) | ext_t_fall_edge_hold;
+ 133       ext_t_low_level_hold   <= ext_t_low_level_ack   ? 2'b0 :
+ 133                                 (~trigger_i) | ext_t_low_level_hold;
+ 133       ext_t_high_level_hold  <= ext_t_high_level_ack  ? 2'b0 :
+ 133                                 (trigger_i) | ext_t_high_level_hold;
+ 133       ext_t_edge_detect_ack <= data_valid & ( |ext_t_edge_detect_hold);
+ 133       ext_t_rise_edge_ack   <= data_valid & ( |ext_t_rise_edge_hold);
+ 133       ext_t_fall_edge_ack   <= data_valid & ( |ext_t_fall_edge_hold);
+ 133       ext_t_low_level_ack   <= data_valid & ( |ext_t_low_level_hold);
+ 133       ext_t_high_level_ack  <= data_valid & ( |ext_t_high_level_hold);
+ 133     end
+ 133   end

Clone Blocks:
