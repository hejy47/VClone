{"Source Block": ["hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@63:73@HdlIdDef", "  reg     [ 17:0]   rise_edge = 'd0;\n  reg     [ 17:0]   fall_edge = 'd0;\n\n  reg              trigger_active;\n  reg              trigger_active_mux;\n  reg              trigger_active_d1;\n\n  always @(posedge clk) begin\n    if (data_valid == 1'b1) begin\n      trigger_active_d1 <= trigger_active_mux;\n      trigger_out <= trigger_active_d1;\n"], "Clone Blocks": [["hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@62:72", "  reg     [ 17:0]   edge_detect = 'd0;\n  reg     [ 17:0]   rise_edge = 'd0;\n  reg     [ 17:0]   fall_edge = 'd0;\n\n  reg              trigger_active;\n  reg              trigger_active_mux;\n  reg              trigger_active_d1;\n\n  always @(posedge clk) begin\n    if (data_valid == 1'b1) begin\n      trigger_active_d1 <= trigger_active_mux;\n"], ["hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@65:81", "\n  reg              trigger_active;\n  reg              trigger_active_mux;\n  reg              trigger_active_d1;\n\n  always @(posedge clk) begin\n    if (data_valid == 1'b1) begin\n      trigger_active_d1 <= trigger_active_mux;\n      trigger_out <= trigger_active_d1;\n      trigger_out_adc <= trigger_active_mux;\n    end\n  end\n\n\n  // trigger logic:\n  // 0 OR\n  // 1 AND\n"], ["hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@61:71", "  reg     [ 17:0]   high_level = 'd0;\n  reg     [ 17:0]   edge_detect = 'd0;\n  reg     [ 17:0]   rise_edge = 'd0;\n  reg     [ 17:0]   fall_edge = 'd0;\n\n  reg              trigger_active;\n  reg              trigger_active_mux;\n  reg              trigger_active_d1;\n\n  always @(posedge clk) begin\n    if (data_valid == 1'b1) begin\n"]], "Diff Content": {"Delete": [[68, "  reg              trigger_active_d1;\n"]], "Add": [[68, "  reg     [  1:0]   ext_t_m = 'd0;\n"], [68, "  reg     [  1:0]   ext_t_low_level_hold = 'd0;\n"], [68, "  reg     [  1:0]   ext_t_high_level_hold = 'd0;\n"], [68, "  reg     [  1:0]   ext_t_edge_detect_hold = 'd0;\n"], [68, "  reg     [  1:0]   ext_t_rise_edge_hold = 'd0;\n"], [68, "  reg     [  1:0]   ext_t_fall_edge_hold = 'd0;\n"], [68, "  reg               ext_t_low_level_ack = 'd0;\n"], [68, "  reg               ext_t_high_level_ack = 'd0;\n"], [68, "  reg               ext_t_edge_detect_ack = 'd0;\n"], [68, "  reg               ext_t_rise_edge_ack = 'd0;\n"], [68, "  reg               ext_t_fall_edge_ack = 'd0;\n"], [68, "  reg     [ 15:0]   data_m1 = 'd0;\n"], [68, "  reg     [ 15:0]   low_level = 'd0;\n"], [68, "  reg     [ 15:0]   high_level = 'd0;\n"], [68, "  reg     [ 15:0]   edge_detect = 'd0;\n"], [68, "  reg     [ 15:0]   rise_edge = 'd0;\n"], [68, "  reg     [ 15:0]   fall_edge = 'd0;\n"], [68, "  reg     [ 15:0]   low_level_m = 'd0;\n"], [68, "  reg     [ 15:0]   high_level_m = 'd0;\n"], [68, "  reg     [ 15:0]   edge_detect_m = 'd0;\n"], [68, "  reg     [ 15:0]   rise_edge_m = 'd0;\n"], [68, "  reg     [ 15:0]   fall_edge_m = 'd0;\n"], [68, "  reg               trigger_active;\n"], [68, "  reg               trigger_active_mux;\n"], [68, "  reg               trigger_active_d1;\n"]]}}