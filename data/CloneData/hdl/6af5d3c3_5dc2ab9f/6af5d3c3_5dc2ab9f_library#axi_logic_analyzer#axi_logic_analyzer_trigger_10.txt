Source Block: hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@78:104@HdlStmProcess

  // trigger logic:
  // 0 OR
  // 1 AND

  always @(posedge clk) begin
    if (data_valid == 1'b1) begin
      case (trigger_logic[0])
        0: trigger_active <= |((edge_detect & edge_detect_enable) |
                               (rise_edge & rise_edge_enable) |
                               (fall_edge & fall_edge_enable) |
                               (low_level & low_level_enable) |
                               (high_level & high_level_enable));
        1: trigger_active <= &((edge_detect | ~edge_detect_enable) &
                               (rise_edge | ~rise_edge_enable) &
                               (fall_edge | ~fall_edge_enable) &
                               (low_level | ~low_level_enable) &
                               (high_level | ~high_level_enable));
        default: trigger_active = 1'b1;
      endcase
    end
  end

  always @(*) begin
    case (trigger_logic[6:4])
      3'd0: trigger_active_mux = trigger_active;
      3'd1: trigger_active_mux = trigger_in;

Diff Content:
- 83   always @(posedge clk) begin
- 86         0: trigger_active <= |((edge_detect & edge_detect_enable) |
- 87                                (rise_edge & rise_edge_enable) |
- 88                                (fall_edge & fall_edge_enable) |
- 89                                (low_level & low_level_enable) |
- 90                                (high_level & high_level_enable));
- 91         1: trigger_active <= &((edge_detect | ~edge_detect_enable) &
- 92                                (rise_edge | ~rise_edge_enable) &
- 93                                (fall_edge | ~fall_edge_enable) &
- 94                                (low_level | ~low_level_enable) &
- 95                                (high_level | ~high_level_enable));
+ 83   always @(*) begin
+ 95         0: trigger_active = |(({ext_t_edge_detect_hold, edge_detect_m} & edge_detect_enable) |
+ 95                               ({ext_t_rise_edge_hold,   rise_edge_m}   & rise_edge_enable) |
+ 95                               ({ext_t_fall_edge_hold,   fall_edge_m}   & fall_edge_enable) |
+ 95                               ({ext_t_low_level_hold,   low_level_m}   & low_level_enable) |
+ 95                               ({ext_t_high_level_hold , high_level_m}  & high_level_enable));
+ 95         1: trigger_active = &(({ext_t_edge_detect_hold, edge_detect_m} | ~edge_detect_enable) &
+ 95                               ({ext_t_rise_edge_hold,   rise_edge_m}   | ~rise_edge_enable) &
+ 95                               ({ext_t_fall_edge_hold,   fall_edge_m}   | ~fall_edge_enable) &
+ 95                               ({ext_t_low_level_hold,   low_level_m}   | ~low_level_enable) &
+ 95                               ({ext_t_high_level_hold , high_level_m}  | ~high_level_enable));

Clone Blocks:
