Source Block: hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@63:73@HdlIdDef
  reg     [ 17:0]   rise_edge = 'd0;
  reg     [ 17:0]   fall_edge = 'd0;

  reg              trigger_active;
  reg              trigger_active_mux;
  reg              trigger_active_d1;

  always @(posedge clk) begin
    if (data_valid == 1'b1) begin
      trigger_active_d1 <= trigger_active_mux;
      trigger_out <= trigger_active_d1;

Diff Content:
- 68   reg              trigger_active_d1;
+ 68   reg     [  1:0]   ext_t_m = 'd0;
+ 68   reg     [  1:0]   ext_t_low_level_hold = 'd0;
+ 68   reg     [  1:0]   ext_t_high_level_hold = 'd0;
+ 68   reg     [  1:0]   ext_t_edge_detect_hold = 'd0;
+ 68   reg     [  1:0]   ext_t_rise_edge_hold = 'd0;
+ 68   reg     [  1:0]   ext_t_fall_edge_hold = 'd0;
+ 68   reg               ext_t_low_level_ack = 'd0;
+ 68   reg               ext_t_high_level_ack = 'd0;
+ 68   reg               ext_t_edge_detect_ack = 'd0;
+ 68   reg               ext_t_rise_edge_ack = 'd0;
+ 68   reg               ext_t_fall_edge_ack = 'd0;
+ 68   reg     [ 15:0]   data_m1 = 'd0;
+ 68   reg     [ 15:0]   low_level = 'd0;
+ 68   reg     [ 15:0]   high_level = 'd0;
+ 68   reg     [ 15:0]   edge_detect = 'd0;
+ 68   reg     [ 15:0]   rise_edge = 'd0;
+ 68   reg     [ 15:0]   fall_edge = 'd0;
+ 68   reg     [ 15:0]   low_level_m = 'd0;
+ 68   reg     [ 15:0]   high_level_m = 'd0;
+ 68   reg     [ 15:0]   edge_detect_m = 'd0;
+ 68   reg     [ 15:0]   rise_edge_m = 'd0;
+ 68   reg     [ 15:0]   fall_edge_m = 'd0;
+ 68   reg               trigger_active;
+ 68   reg               trigger_active_mux;
+ 68   reg               trigger_active_d1;

Clone Blocks:
Clone Blocks 1:
hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@62:72
  reg     [ 17:0]   edge_detect = 'd0;
  reg     [ 17:0]   rise_edge = 'd0;
  reg     [ 17:0]   fall_edge = 'd0;

  reg              trigger_active;
  reg              trigger_active_mux;
  reg              trigger_active_d1;

  always @(posedge clk) begin
    if (data_valid == 1'b1) begin
      trigger_active_d1 <= trigger_active_mux;

Clone Blocks 2:
hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@65:81

  reg              trigger_active;
  reg              trigger_active_mux;
  reg              trigger_active_d1;

  always @(posedge clk) begin
    if (data_valid == 1'b1) begin
      trigger_active_d1 <= trigger_active_mux;
      trigger_out <= trigger_active_d1;
      trigger_out_adc <= trigger_active_mux;
    end
  end


  // trigger logic:
  // 0 OR
  // 1 AND

Clone Blocks 3:
hdl/library/axi_logic_analyzer/axi_logic_analyzer_trigger.v@61:71
  reg     [ 17:0]   high_level = 'd0;
  reg     [ 17:0]   edge_detect = 'd0;
  reg     [ 17:0]   rise_edge = 'd0;
  reg     [ 17:0]   fall_edge = 'd0;

  reg              trigger_active;
  reg              trigger_active_mux;
  reg              trigger_active_d1;

  always @(posedge clk) begin
    if (data_valid == 1'b1) begin

