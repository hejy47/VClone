Source Block: hdl/library/xilinx/common/ad_serdes_clk.v@121:143@HdlStmIf
    .up_drp_rdata (up_drp_rdata[15:0]),
    .up_drp_ready (up_drp_ready),
    .up_drp_locked (up_drp_locked));
  end

  if (MMCM_OR_BUFR_N == 0) begin
  BUFIO i_clk_buf (
    .I (clk_in_s),
    .O (clk));

  BUFR #(.BUFR_DIVIDE("4")) i_div_clk_buf (
    .CLR (1'b0),
    .CE (1'b1),
    .I (clk_in_s),
    .O (div_clk));

  assign out_clk = clk;
  end
  endgenerate

endmodule

// ***************************************************************************

Diff Content:
- 126   if (MMCM_OR_BUFR_N == 0) begin
- 127   BUFIO i_clk_buf (
- 128     .I (clk_in_s),
- 129     .O (clk));
- 131   BUFR #(.BUFR_DIVIDE("4")) i_div_clk_buf (
- 132     .CLR (1'b0),
- 133     .CE (1'b1),
- 134     .I (clk_in_s),
- 135     .O (div_clk));
- 137   assign out_clk = clk;
+ 135     ad_mmcm_drp #(
+ 135       .MMCM_DEVICE_TYPE (DEVICE_TYPE),
+ 135       .MMCM_CLKIN_PERIOD (MMCM_CLKIN_PERIOD),
+ 135       .MMCM_CLKIN2_PERIOD (MMCM_CLKIN_PERIOD),
+ 135       .MMCM_VCO_DIV (MMCM_VCO_DIV),
+ 135       .MMCM_VCO_MUL (MMCM_VCO_MUL),
+ 135       .MMCM_CLK0_DIV (MMCM_CLK0_DIV),
+ 135       .MMCM_CLK0_PHASE (0.0),
+ 135       .MMCM_CLK1_DIV (MMCM_CLK1_DIV),
+ 135       .MMCM_CLK1_PHASE (0.0),
+ 135       .MMCM_CLK2_DIV (MMCM_CLK0_DIV),
+ 135       .MMCM_CLK2_PHASE (90.0))
+ 135     i_mmcm_drp (
+ 135       .clk (clk_in_s),
+ 135       .clk2 (1'b0),
+ 135       .clk_sel (1'b1),
+ 135       .mmcm_rst (rst),
+ 135       .mmcm_clk_0 (clk),
+ 135       .mmcm_clk_1 (div_clk),
+ 135       .mmcm_clk_2 (out_clk),
+ 135       .up_clk (up_clk),
+ 135       .up_rstn (up_rstn),
+ 135       .up_drp_sel (up_drp_sel),
+ 135       .up_drp_wr (up_drp_wr),
+ 135       .up_drp_addr (up_drp_addr),
+ 135       .up_drp_wdata (up_drp_wdata[15:0]),
+ 135       .up_drp_rdata (up_drp_rdata[15:0]),
+ 135       .up_drp_ready (up_drp_ready),
+ 135       .up_drp_locked (up_drp_locked));
+ 135     end else if (MMCM_OR_BUFR_N == 0) begin
+ 135       BUFIO i_clk_buf (
+ 135         .I (clk_in_s),
+ 135         .O (clk));
+ 135       BUFR #(.BUFR_DIVIDE("4")) i_div_clk_buf (
+ 135         .CLR (1'b0),
+ 135         .CE (1'b1),
+ 135         .I (clk_in_s),
+ 135         .O (div_clk));
+ 135       assign out_clk = clk;
+ 135       assign up_drp_rdata[15:0] = 'd0;
+ 135       assign up_drp_ready = 'd0;
+ 135       assign up_drp_locked = 'd0;

Clone Blocks:
