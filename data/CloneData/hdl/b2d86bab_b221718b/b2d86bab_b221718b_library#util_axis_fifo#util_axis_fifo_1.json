{"Source Block": ["hdl/library/util_axis_fifo/util_axis_fifo.v@55:243@HdlStmIf", "  input [DATA_WIDTH-1:0] s_axis_data,\n  output s_axis_empty,\n  output [ADDRESS_WIDTH:0] s_axis_room\n);\n\ngenerate if (ADDRESS_WIDTH == 0) begin\n\n  reg [DATA_WIDTH-1:0] cdc_sync_fifo_ram;\n  reg s_axis_waddr = 1'b0;\n  reg m_axis_raddr = 1'b0;\n\n  wire m_axis_waddr;\n  wire s_axis_raddr;\n\n  sync_bits #(\n    .NUM_OF_BITS(1),\n    .ASYNC_CLK(ASYNC_CLK)\n  ) i_waddr_sync (\n    .out_clk(m_axis_aclk),\n    .out_resetn(m_axis_aresetn),\n    .in(s_axis_waddr),\n    .out(m_axis_waddr)\n  );\n\n  sync_bits #(\n    .NUM_OF_BITS(1),\n    .ASYNC_CLK(ASYNC_CLK)\n  ) i_raddr_sync (\n    .out_clk(s_axis_aclk),\n    .out_resetn(s_axis_aresetn),\n    .in(m_axis_raddr),\n    .out(s_axis_raddr)\n  );\n\n  assign m_axis_valid = m_axis_raddr != m_axis_waddr;\n  assign m_axis_level = m_axis_valid;\n  assign s_axis_ready = s_axis_raddr == s_axis_waddr;\n  assign s_axis_empty = s_axis_ready;\n  assign s_axis_room = s_axis_ready;\n\n  always @(posedge s_axis_aclk) begin\n    if (s_axis_ready == 1'b1 && s_axis_valid == 1'b1)\n      cdc_sync_fifo_ram <= s_axis_data;\n  end\n\n  always @(posedge s_axis_aclk) begin\n    if (s_axis_aresetn == 1'b0) begin\n      s_axis_waddr <= 1'b0;\n    end else begin\n      if (s_axis_ready & s_axis_valid) begin\n        s_axis_waddr <= s_axis_waddr + 1'b1;\n      end\n    end\n  end\n\n  always @(posedge m_axis_aclk) begin\n    if (m_axis_aresetn == 1'b0) begin\n      m_axis_raddr <= 1'b0;\n    end else begin\n      if (m_axis_valid & m_axis_ready)\n        m_axis_raddr <= m_axis_raddr + 1'b1;\n    end\n  end\n\n  assign m_axis_data = cdc_sync_fifo_ram;\n\nend else begin\n\n  reg [DATA_WIDTH-1:0] ram[0:2**ADDRESS_WIDTH-1];\n\n  wire [ADDRESS_WIDTH-1:0] s_axis_waddr;\n  wire [ADDRESS_WIDTH-1:0] m_axis_raddr;\n  wire _m_axis_ready;\n  wire _m_axis_valid;\n\n  wire s_mem_write;\n  wire m_mem_read;\n\n  reg valid;\n\n  always @(posedge m_axis_aclk) begin\n    if (m_axis_aresetn == 1'b0) begin\n      valid <= 1'b0;\n    end else begin\n      if (_m_axis_valid)\n        valid <= 1'b1;\n      else if (m_axis_ready)\n        valid <= 1'b0;\n    end\n  end\n\n  assign s_mem_write = s_axis_ready & s_axis_valid;\n  assign m_mem_read = (~valid || m_axis_ready) && _m_axis_valid;\n\n  if (ASYNC_CLK == 1) begin\n\n    // The assumption is that in this mode the S_AXIS_REGISTERED is 1\n\n    fifo_address_gray_pipelined #(\n      .ADDRESS_WIDTH(ADDRESS_WIDTH)\n    ) i_address_gray (\n      .m_axis_aclk(m_axis_aclk),\n      .m_axis_aresetn(m_axis_aresetn),\n      .m_axis_ready(_m_axis_ready),\n      .m_axis_valid(_m_axis_valid),\n      .m_axis_raddr(m_axis_raddr),\n      .m_axis_level(m_axis_level),\n\n      .s_axis_aclk(s_axis_aclk),\n      .s_axis_aresetn(s_axis_aresetn),\n      .s_axis_ready(s_axis_ready),\n      .s_axis_valid(s_axis_valid),\n      .s_axis_empty(s_axis_empty),\n      .s_axis_waddr(s_axis_waddr),\n      .s_axis_room(s_axis_room)\n    );\n\n    // When the clocks are asynchronous instantiate a block RAM\n    // regardless of the requested size to make sure we threat the \n    // clock crossing correctly\n    ad_mem #(\n      .DATA_WIDTH (DATA_WIDTH),\n      .ADDRESS_WIDTH (ADDRESS_WIDTH))\n    i_mem (\n      .clka(s_axis_aclk),\n      .wea(s_mem_write),\n      .addra(s_axis_waddr),\n      .dina(s_axis_data),\n      .clkb(m_axis_aclk),\n      .reb(m_mem_read),\n      .addrb(m_axis_raddr),\n      .doutb(m_axis_data)\n    );\n\n    assign _m_axis_ready = ~valid || m_axis_ready;\n    assign m_axis_valid = valid;\n\n  end else begin\n\n    fifo_address_sync #(\n      .ADDRESS_WIDTH(ADDRESS_WIDTH)\n    ) i_address_sync (\n      .clk(m_axis_aclk),\n      .resetn(m_axis_aresetn),\n      .m_axis_ready(_m_axis_ready),\n      .m_axis_valid(_m_axis_valid),\n      .m_axis_raddr(m_axis_raddr),\n      .m_axis_level(m_axis_level),\n\n      .s_axis_ready(s_axis_ready),\n      .s_axis_valid(s_axis_valid),\n      .s_axis_empty(s_axis_empty),\n      .s_axis_waddr(s_axis_waddr),\n      .s_axis_room(s_axis_room)\n    );\n\n    // When the clocks are synchronous use behavioral modeling for the SDP RAM\n    // Let the synthesizer decide what to infer (distributed or block RAM)\n    always @(posedge s_axis_aclk) begin\n      if (s_mem_write)\n        ram[s_axis_waddr] <= s_axis_data;\n    end\n\n    if (S_AXIS_REGISTERED == 1) begin\n\n      reg [DATA_WIDTH-1:0] data;\n\n      always @(posedge m_axis_aclk) begin\n        if (m_mem_read)\n          data <= ram[m_axis_raddr];\n      end\n\n      assign _m_axis_ready = ~valid || m_axis_ready;\n      assign m_axis_data = data;\n      assign m_axis_valid = valid;\n\n    end else begin\n\n      assign _m_axis_ready = m_axis_ready;\n      assign m_axis_valid = _m_axis_valid;\n      assign m_axis_data = ram[m_axis_raddr];\n\n    end\n\n  end\n\nend endgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[161, "      .m_axis_level(m_axis_level),\n"]], "Add": [[128, "  wire [ADDRESS_WIDTH:0] _m_axis_level;\n"], [161, "      .m_axis_level(_m_axis_level),\n"], [190, "    assign m_axis_level =  (m_axis_valid) ? _m_axis_level + 1'b1 : _m_axis_level;\n"]]}}