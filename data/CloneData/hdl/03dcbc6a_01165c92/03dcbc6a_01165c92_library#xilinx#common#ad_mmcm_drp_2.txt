Source Block: hdl/library/xilinx/common/ad_mmcm_drp.v@198:267@HdlStmIf
    .CLKFBSTOPPED (),
    .PWRDWN (1'b0),
    .RST (mmcm_rst));
  end

  if (MMCM_DEVICE_TYPE == MMCM_DEVICE_7SERIES) begin
  MMCME2_ADV #(
    .BANDWIDTH ("OPTIMIZED"),
    .CLKOUT4_CASCADE ("FALSE"),
    .COMPENSATION ("ZHOLD"),
    .STARTUP_WAIT ("FALSE"),
    .DIVCLK_DIVIDE (MMCM_VCO_DIV),
    .CLKFBOUT_MULT_F (MMCM_VCO_MUL),
    .CLKFBOUT_PHASE (0.000),
    .CLKFBOUT_USE_FINE_PS ("FALSE"),
    .CLKOUT0_DIVIDE_F (MMCM_CLK0_DIV),
    .CLKOUT0_PHASE (MMCM_CLK0_PHASE),
    .CLKOUT0_DUTY_CYCLE (0.500),
    .CLKOUT0_USE_FINE_PS ("FALSE"),
    .CLKOUT1_DIVIDE (MMCM_CLK1_DIV),
    .CLKOUT1_PHASE (MMCM_CLK1_PHASE),
    .CLKOUT1_DUTY_CYCLE (0.500),
    .CLKOUT1_USE_FINE_PS ("FALSE"),
    .CLKOUT2_DIVIDE (MMCM_CLK2_DIV),
    .CLKOUT2_PHASE (MMCM_CLK2_PHASE),
    .CLKOUT2_DUTY_CYCLE (0.500),
    .CLKOUT2_USE_FINE_PS ("FALSE"),
    .CLKIN1_PERIOD (MMCM_CLKIN_PERIOD),
    .CLKIN2_PERIOD (MMCM_CLKIN2_PERIOD),
    .REF_JITTER1 (0.010))
  i_mmcm (
    .CLKIN1 (clk),
    .CLKFBIN (bufg_fb_clk_s),
    .CLKFBOUT (mmcm_fb_clk_s),
    .CLKOUT0 (mmcm_clk_0_s),
    .CLKOUT1 (mmcm_clk_1_s),
    .CLKOUT2 (mmcm_clk_2_s),
    .LOCKED (mmcm_locked_s),
    .DCLK (up_clk),
    .DEN (up_drp_sel),
    .DADDR (up_drp_addr[6:0]),
    .DWE (up_drp_wr),
    .DI (up_drp_wdata),
    .DO (up_drp_rdata_s),
    .DRDY (up_drp_ready_s),
    .CLKFBOUTB (),
    .CLKOUT0B (),
    .CLKOUT1B (),
    .CLKOUT2B (),
    .CLKOUT3 (),
    .CLKOUT3B (),
    .CLKOUT4 (),
    .CLKOUT5 (),
    .CLKOUT6 (),
    .CLKIN2 (clk2),
    .CLKINSEL (clk_sel),
    .PSCLK (1'b0),
    .PSEN (1'b0),
    .PSINCDEC (1'b0),
    .PSDONE (),
    .CLKINSTOPPED (),
    .CLKFBSTOPPED (),
    .PWRDWN (1'b0),
    .RST (mmcm_rst));
  end
  endgenerate

  BUFG i_fb_clk_bufg  (.I (mmcm_fb_clk_s),  .O (bufg_fb_clk_s));
  BUFG i_clk_0_bufg   (.I (mmcm_clk_0_s),   .O (mmcm_clk_0)); 
  BUFG i_clk_1_bufg   (.I (mmcm_clk_1_s),   .O (mmcm_clk_1));

Diff Content:
- 204   MMCME2_ADV #(
- 205     .BANDWIDTH ("OPTIMIZED"),
- 206     .CLKOUT4_CASCADE ("FALSE"),
- 207     .COMPENSATION ("ZHOLD"),
- 208     .STARTUP_WAIT ("FALSE"),
- 209     .DIVCLK_DIVIDE (MMCM_VCO_DIV),
- 210     .CLKFBOUT_MULT_F (MMCM_VCO_MUL),
- 211     .CLKFBOUT_PHASE (0.000),
- 212     .CLKFBOUT_USE_FINE_PS ("FALSE"),
- 213     .CLKOUT0_DIVIDE_F (MMCM_CLK0_DIV),
- 214     .CLKOUT0_PHASE (MMCM_CLK0_PHASE),
- 215     .CLKOUT0_DUTY_CYCLE (0.500),
- 216     .CLKOUT0_USE_FINE_PS ("FALSE"),
- 217     .CLKOUT1_DIVIDE (MMCM_CLK1_DIV),
- 218     .CLKOUT1_PHASE (MMCM_CLK1_PHASE),
- 219     .CLKOUT1_DUTY_CYCLE (0.500),
- 220     .CLKOUT1_USE_FINE_PS ("FALSE"),
- 221     .CLKOUT2_DIVIDE (MMCM_CLK2_DIV),
- 222     .CLKOUT2_PHASE (MMCM_CLK2_PHASE),
- 223     .CLKOUT2_DUTY_CYCLE (0.500),
- 224     .CLKOUT2_USE_FINE_PS ("FALSE"),
- 225     .CLKIN1_PERIOD (MMCM_CLKIN_PERIOD),
- 226     .CLKIN2_PERIOD (MMCM_CLKIN2_PERIOD),
- 227     .REF_JITTER1 (0.010))
- 228   i_mmcm (
- 229     .CLKIN1 (clk),
- 230     .CLKFBIN (bufg_fb_clk_s),
- 231     .CLKFBOUT (mmcm_fb_clk_s),
- 232     .CLKOUT0 (mmcm_clk_0_s),
- 233     .CLKOUT1 (mmcm_clk_1_s),
- 234     .CLKOUT2 (mmcm_clk_2_s),
- 235     .LOCKED (mmcm_locked_s),
- 236     .DCLK (up_clk),
- 237     .DEN (up_drp_sel),
- 238     .DADDR (up_drp_addr[6:0]),
- 239     .DWE (up_drp_wr),
- 240     .DI (up_drp_wdata),
- 241     .DO (up_drp_rdata_s),
- 242     .DRDY (up_drp_ready_s),
- 243     .CLKFBOUTB (),
- 244     .CLKOUT0B (),
- 245     .CLKOUT1B (),
- 246     .CLKOUT2B (),
- 247     .CLKOUT3 (),
- 248     .CLKOUT3B (),
- 249     .CLKOUT4 (),
- 250     .CLKOUT5 (),
- 251     .CLKOUT6 (),
- 252     .CLKIN2 (clk2),
- 253     .CLKINSEL (clk_sel),
- 254     .PSCLK (1'b0),
- 255     .PSEN (1'b0),
- 256     .PSINCDEC (1'b0),
- 257     .PSDONE (),
- 258     .CLKINSTOPPED (),
- 259     .CLKFBSTOPPED (),
- 260     .PWRDWN (1'b0),
- 261     .RST (mmcm_rst));
+ 261     MMCME2_ADV #(
+ 261       .BANDWIDTH ("OPTIMIZED"),
+ 261       .CLKOUT4_CASCADE ("FALSE"),
+ 261       .COMPENSATION ("ZHOLD"),
+ 261       .STARTUP_WAIT ("FALSE"),
+ 261       .DIVCLK_DIVIDE (MMCM_VCO_DIV),
+ 261       .CLKFBOUT_MULT_F (MMCM_VCO_MUL),
+ 261       .CLKFBOUT_PHASE (0.000),
+ 261       .CLKFBOUT_USE_FINE_PS ("FALSE"),
+ 261       .CLKOUT0_DIVIDE_F (MMCM_CLK0_DIV),
+ 261       .CLKOUT0_PHASE (MMCM_CLK0_PHASE),
+ 261       .CLKOUT0_DUTY_CYCLE (0.500),
+ 261       .CLKOUT0_USE_FINE_PS ("FALSE"),
+ 261       .CLKOUT1_DIVIDE (MMCM_CLK1_DIV),
+ 261       .CLKOUT1_PHASE (MMCM_CLK1_PHASE),
+ 261       .CLKOUT1_DUTY_CYCLE (0.500),
+ 261       .CLKOUT1_USE_FINE_PS ("FALSE"),
+ 261       .CLKOUT2_DIVIDE (MMCM_CLK2_DIV),
+ 261       .CLKOUT2_PHASE (MMCM_CLK2_PHASE),
+ 261       .CLKOUT2_DUTY_CYCLE (0.500),
+ 261       .CLKOUT2_USE_FINE_PS ("FALSE"),
+ 261       .CLKIN1_PERIOD (MMCM_CLKIN_PERIOD),
+ 261       .CLKIN2_PERIOD (MMCM_CLKIN2_PERIOD),
+ 261       .REF_JITTER1 (0.010))
+ 261     i_mmcm (
+ 261       .CLKIN1 (clk),
+ 261       .CLKFBIN (bufg_fb_clk_s),
+ 261       .CLKFBOUT (mmcm_fb_clk_s),
+ 261       .CLKOUT0 (mmcm_clk_0_s),
+ 261       .CLKOUT1 (mmcm_clk_1_s),
+ 261       .CLKOUT2 (mmcm_clk_2_s),
+ 261       .LOCKED (mmcm_locked_s),
+ 261       .DCLK (up_clk),
+ 261       .DEN (up_drp_sel),
+ 261       .DADDR (up_drp_addr[6:0]),
+ 261       .DWE (up_drp_wr),
+ 261       .DI (up_drp_wdata),
+ 261       .DO (up_drp_rdata_s),
+ 261       .DRDY (up_drp_ready_s),
+ 261       .CLKFBOUTB (),
+ 261       .CLKOUT0B (),
+ 261       .CLKOUT1B (),
+ 261       .CLKOUT2B (),
+ 261       .CLKOUT3 (),
+ 261       .CLKOUT3B (),
+ 261       .CLKOUT4 (),
+ 261       .CLKOUT5 (),
+ 261       .CLKOUT6 (),
+ 261       .CLKIN2 (clk2),
+ 261       .CLKINSEL (clk_sel),
+ 261       .PSCLK (1'b0),
+ 261       .PSEN (1'b0),
+ 261       .PSINCDEC (1'b0),
+ 261       .PSDONE (),
+ 261       .CLKINSTOPPED (),
+ 261       .CLKFBSTOPPED (),
+ 261       .PWRDWN (1'b0),
+ 261       .RST (mmcm_rst));
+ 261       BUFG i_fb_clk_bufg  (.I (mmcm_fb_clk_s),  .O (bufg_fb_clk_s));
+ 261       BUFG i_clk_0_bufg   (.I (mmcm_clk_0_s),   .O (mmcm_clk_0));
+ 261       BUFG i_clk_1_bufg   (.I (mmcm_clk_1_s),   .O (mmcm_clk_1));
+ 261       BUFG i_clk_2_bufg   (.I (mmcm_clk_2_s),   .O (mmcm_clk_2));
+ 261   end else begin /* MMCM_DEVICE_TYPE == 1 */
+ 261     MMCM_ADV #(
+ 261       .BANDWIDTH ("OPTIMIZED"),
+ 261       .CLKOUT4_CASCADE ("FALSE"),
+ 261       .CLOCK_HOLD ("FALSE"),
+ 261       .COMPENSATION ("ZHOLD"),
+ 261       .STARTUP_WAIT ("FALSE"),
+ 261       .DIVCLK_DIVIDE (MMCM_VCO_DIV),
+ 261       .CLKFBOUT_MULT_F (MMCM_VCO_MUL),
+ 261       .CLKFBOUT_PHASE (0.000),
+ 261       .CLKFBOUT_USE_FINE_PS ("FALSE"),
+ 261       .CLKOUT0_DIVIDE_F (MMCM_CLK0_DIV),
+ 261       .CLKOUT0_PHASE (MMCM_CLK0_PHASE),
+ 261       .CLKOUT0_DUTY_CYCLE (0.500),
+ 261       .CLKOUT0_USE_FINE_PS ("FALSE"),
+ 261       .CLKOUT1_DIVIDE (MMCM_CLK1_DIV),
+ 261       .CLKOUT1_PHASE (MMCM_CLK1_PHASE),
+ 261       .CLKOUT1_DUTY_CYCLE (0.500),
+ 261       .CLKOUT1_USE_FINE_PS ("FALSE"),
+ 261       .CLKOUT2_DIVIDE (MMCM_CLK2_DIV),
+ 261       .CLKOUT2_PHASE (MMCM_CLK2_PHASE),
+ 261       .CLKOUT2_DUTY_CYCLE (0.500),
+ 261       .CLKOUT2_USE_FINE_PS ("FALSE"),
+ 261       .CLKIN1_PERIOD (MMCM_CLKIN_PERIOD),
+ 261       .CLKIN2_PERIOD (MMCM_CLKIN2_PERIOD),
+ 261       .REF_JITTER1 (0.010))
+ 261     i_mmcm (
+ 261       .CLKIN1 (clk),
+ 261       .CLKFBIN (bufg_fb_clk_s),
+ 261       .CLKFBOUT (mmcm_fb_clk_s),
+ 261       .CLKOUT0 (mmcm_clk_0_s),
+ 261       .CLKOUT1 (mmcm_clk_1_s),
+ 261       .CLKOUT2 (mmcm_clk_2_s),
+ 261       .LOCKED (mmcm_locked_s),
+ 261       .DCLK (up_clk),
+ 261       .DEN (up_drp_sel),
+ 261       .DADDR (up_drp_addr[6:0]),
+ 261       .DWE (up_drp_wr),
+ 261       .DI (up_drp_wdata),
+ 261       .DO (up_drp_rdata_s),
+ 261       .DRDY (up_drp_ready_s),
+ 261       .CLKFBOUTB (),
+ 261       .CLKOUT0B (),
+ 261       .CLKOUT1B (),
+ 261       .CLKOUT2B (),
+ 261       .CLKOUT3 (),
+ 261       .CLKOUT3B (),
+ 261       .CLKOUT4 (),
+ 261       .CLKOUT5 (),
+ 261       .CLKOUT6 (),
+ 261       .CLKIN2 (clk2),
+ 261       .CLKINSEL (clk_sel),
+ 261       .PSCLK (1'b0),
+ 261       .PSEN (1'b0),
+ 261       .PSINCDEC (1'b0),
+ 261       .PSDONE (),
+ 261       .CLKINSTOPPED (),
+ 261       .CLKFBSTOPPED (),
+ 261       .PWRDWN (1'b0),
+ 261       .RST (mmcm_rst));
+ 261       BUFG i_fb_clk_bufg  (.I (mmcm_fb_clk_s),  .O (bufg_fb_clk_s));
+ 261       BUFG i_clk_0_bufg   (.I (mmcm_clk_0_s),   .O (mmcm_clk_0));
+ 261       BUFG i_clk_1_bufg   (.I (mmcm_clk_1_s),   .O (mmcm_clk_1));
+ 261       BUFG i_clk_2_bufg   (.I (mmcm_clk_2_s),   .O (mmcm_clk_2));

Clone Blocks:
Clone Blocks 1:
hdl/library/xilinx/common/ad_mmcm_drp.v@136:206
  end

  // instantiations

  generate
  if (MMCM_DEVICE_TYPE == MMCM_DEVICE_VIRTEX6) begin
  MMCM_ADV #(
    .BANDWIDTH ("OPTIMIZED"),
    .CLKOUT4_CASCADE ("FALSE"),
    .CLOCK_HOLD ("FALSE"),
    .COMPENSATION ("ZHOLD"),
    .STARTUP_WAIT ("FALSE"),
    .DIVCLK_DIVIDE (MMCM_VCO_DIV),
    .CLKFBOUT_MULT_F (MMCM_VCO_MUL),
    .CLKFBOUT_PHASE (0.000),
    .CLKFBOUT_USE_FINE_PS ("FALSE"),
    .CLKOUT0_DIVIDE_F (MMCM_CLK0_DIV),
    .CLKOUT0_PHASE (MMCM_CLK0_PHASE),
    .CLKOUT0_DUTY_CYCLE (0.500),
    .CLKOUT0_USE_FINE_PS ("FALSE"),
    .CLKOUT1_DIVIDE (MMCM_CLK1_DIV),
    .CLKOUT1_PHASE (MMCM_CLK1_PHASE),
    .CLKOUT1_DUTY_CYCLE (0.500),
    .CLKOUT1_USE_FINE_PS ("FALSE"),
    .CLKOUT2_DIVIDE (MMCM_CLK2_DIV),
    .CLKOUT2_PHASE (MMCM_CLK2_PHASE),
    .CLKOUT2_DUTY_CYCLE (0.500),
    .CLKOUT2_USE_FINE_PS ("FALSE"),
    .CLKIN1_PERIOD (MMCM_CLKIN_PERIOD),
    .CLKIN2_PERIOD (MMCM_CLKIN2_PERIOD),
    .REF_JITTER1 (0.010))
  i_mmcm (
    .CLKIN1 (clk),
    .CLKFBIN (bufg_fb_clk_s),
    .CLKFBOUT (mmcm_fb_clk_s),
    .CLKOUT0 (mmcm_clk_0_s),
    .CLKOUT1 (mmcm_clk_1_s),
    .CLKOUT2 (mmcm_clk_2_s),
    .LOCKED (mmcm_locked_s),
    .DCLK (up_clk),
    .DEN (up_drp_sel),
    .DADDR (up_drp_addr[6:0]),
    .DWE (up_drp_wr),
    .DI (up_drp_wdata),
    .DO (up_drp_rdata_s),
    .DRDY (up_drp_ready_s),
    .CLKFBOUTB (),
    .CLKOUT0B (),
    .CLKOUT1B (),
    .CLKOUT2B (),
    .CLKOUT3 (),
    .CLKOUT3B (),
    .CLKOUT4 (),
    .CLKOUT5 (),
    .CLKOUT6 (),
    .CLKIN2 (clk2),
    .CLKINSEL (clk_sel),
    .PSCLK (1'b0),
    .PSEN (1'b0),
    .PSINCDEC (1'b0),
    .PSDONE (),
    .CLKINSTOPPED (),
    .CLKFBSTOPPED (),
    .PWRDWN (1'b0),
    .RST (mmcm_rst));
  end

  if (MMCM_DEVICE_TYPE == MMCM_DEVICE_7SERIES) begin
  MMCME2_ADV #(
    .BANDWIDTH ("OPTIMIZED"),
    .CLKOUT4_CASCADE ("FALSE"),

