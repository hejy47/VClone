{"Source Block": ["hdl/library/common/up_clock_mon.v@55:65@HdlStmAssign", "  wire            up_count_toggle_s;\n  wire            d_count_toggle_s;\n\n  // processor reference\n\n  assign up_count_toggle_s = up_count_toggle_m3 ^ up_count_toggle_m2;\n\n  always @(negedge up_rstn or posedge up_clk) begin\n    if (up_rstn == 0) begin\n      up_count <= 'd0;\n      up_count_toggle <= 'd0;\n"], "Clone Blocks": [["hdl/library/common/up_clock_mon.v@50:60", "  reg     [31:0]  d_count_hold = 'd0;\n  reg     [32:0]  d_count = 'd0;\n\n  // internal signals\n\n  wire            up_count_toggle_s;\n  wire            d_count_toggle_s;\n\n  // processor reference\n\n  assign up_count_toggle_s = up_count_toggle_m3 ^ up_count_toggle_m2;\n"], ["hdl/library/common/up_clock_mon.v@51:61", "  reg     [32:0]  d_count = 'd0;\n\n  // internal signals\n\n  wire            up_count_toggle_s;\n  wire            d_count_toggle_s;\n\n  // processor reference\n\n  assign up_count_toggle_s = up_count_toggle_m3 ^ up_count_toggle_m2;\n\n"]], "Diff Content": {"Delete": [[60, "  assign up_count_toggle_s = up_count_toggle_m3 ^ up_count_toggle_m2;\n"]], "Add": [[60, "  assign up_count_capture_s = up_count_running_m3 == 1'b1 && up_count_running_m2 == 1'b0;\n"], [60, "  always @(negedge up_rstn or posedge up_clk) begin\n"], [60, "    if (up_rstn == 0) begin\n"], [60, "      up_count_running_m1 <= 1'b0;\n"], [60, "      up_count_running_m2 <= 1'b0;\n"], [60, "      up_count_running_m3 <= 1'b0;\n"], [60, "    end else begin\n"], [60, "      up_count_running_m1 <= d_count_run_m3;\n"], [60, "      up_count_running_m2 <= up_count_running_m1;\n"], [60, "      up_count_running_m3 <= up_count_running_m2;\n"], [60, "    end\n"], [60, "  end\n"]]}}