{"Source Block": ["hdl/library/axi_adrv9001/adrv9001_rx_link.v@66:214@HdlStmIf", "  wire       data_valid;\n\n  assign rx_clk = adc_clk_div;\n\n  // CMOS can operate in SDR or DDR mode\n  generate if (CMOS_LVDS_N) begin : cmos_4_to_8\n    wire [3:0] sdr_data_0;\n    wire [3:0] sdr_data_1;\n    wire [3:0] sdr_data_2;\n    wire [3:0] sdr_data_3;\n    wire [3:0] sdr_data_strobe;\n    wire       sdr_data_valid;\n\n    wire [3:0] sdr_data_0_aligned;\n    wire [3:0] sdr_data_1_aligned;\n    wire [3:0] sdr_data_2_aligned;\n    wire [3:0] sdr_data_3_aligned;\n    wire [3:0] sdr_data_strobe_aligned;\n\n    wire [7:0] sdr_data_0_packed;\n    wire [7:0] sdr_data_1_packed;\n    wire [7:0] sdr_data_2_packed;\n    wire [7:0] sdr_data_3_packed;\n    wire [7:0] sdr_data_strobe_packed;\n\n    wire       aligner4_ovalid;\n\n    // For SDR drop every second DDR bit\n\n    assign sdr_data_0 = {adc_data_0[7],adc_data_0[5],adc_data_0[3],adc_data_0[1]};\n    assign sdr_data_1 = {adc_data_1[7],adc_data_1[5],adc_data_1[3],adc_data_1[1]};\n    assign sdr_data_2 = {adc_data_2[7],adc_data_2[5],adc_data_2[3],adc_data_2[1]};\n    assign sdr_data_3 = {adc_data_3[7],adc_data_3[5],adc_data_3[3],adc_data_3[1]};\n    assign sdr_data_strobe = {adc_data_strobe[7],adc_data_strobe[5],adc_data_strobe[3],adc_data_strobe[1]};\n\n    adrv9001_aligner4 i_rx_aligner4_0 (\n      .clk (adc_clk_div),\n      .idata (sdr_data_0),\n      .ivalid (adc_valid),\n      .strobe (sdr_data_strobe),\n      .odata (sdr_data_0_aligned)\n    );\n\n    adrv9001_aligner4 i_rx_aligner4_1 (\n      .clk (adc_clk_div),\n      .idata (sdr_data_1),\n      .ivalid (adc_valid),\n      .strobe (sdr_data_strobe),\n      .odata (sdr_data_1_aligned)\n    );\n\n    adrv9001_aligner4 i_rx_aligner4_2 (\n      .clk (adc_clk_div),\n      .idata (sdr_data_2),\n      .ivalid (adc_valid),\n      .strobe (sdr_data_strobe),\n      .odata (sdr_data_2_aligned)\n    );\n\n    adrv9001_aligner4 i_rx_aligner4_3 (\n      .clk (adc_clk_div),\n      .idata (sdr_data_3),\n      .ivalid (adc_valid),\n      .strobe (sdr_data_strobe),\n      .odata (sdr_data_3_aligned)\n    );\n\n    adrv9001_aligner4 i_rx_aligner4_strobe (\n      .clk (adc_clk_div),\n      .idata (sdr_data_strobe),\n      .ivalid (adc_valid),\n      .strobe (sdr_data_strobe),\n      .ovalid (aligner4_ovalid),\n      .odata (sdr_data_strobe_aligned)\n    );\n\n    adrv9001_pack #(\n      .WIDTH(4)\n    ) i_rx_pack_4_to_8_0 (\n      .clk (adc_clk_div),\n      .idata (sdr_data_0_aligned),\n      .ivalid (aligner4_ovalid),\n      .sof (sdr_data_strobe_aligned[3]),\n      .odata (sdr_data_0_packed),\n      .ovalid (sdr_data_valid)\n    );\n\n    adrv9001_pack #(\n      .WIDTH(4)\n    ) i_rx_pack_4_to_8_1 (\n      .clk (adc_clk_div),\n      .idata (sdr_data_1_aligned),\n      .ivalid (aligner4_ovalid),\n      .sof (sdr_data_strobe_aligned[3]),\n      .odata (sdr_data_1_packed),\n      .ovalid ()\n    );\n\n    adrv9001_pack #(\n      .WIDTH(4)\n    ) i_rx_pack_4_to_8_2 (\n      .clk (adc_clk_div),\n      .idata (sdr_data_2_aligned),\n      .ivalid (aligner4_ovalid),\n      .sof (sdr_data_strobe_aligned[3]),\n      .odata (sdr_data_2_packed),\n      .ovalid ()\n    );\n\n    adrv9001_pack #(\n      .WIDTH(4)\n    ) i_rx_pack_4_to_8_3 (\n      .clk (adc_clk_div),\n      .idata (sdr_data_3_aligned),\n      .ivalid (aligner4_ovalid),\n      .sof (sdr_data_strobe_aligned[3]),\n      .odata (sdr_data_3_packed),\n      .ovalid ()\n    );\n\n    adrv9001_pack #(\n      .WIDTH(4)\n    ) i_rx_pack_4_to_8_strobe (\n      .clk (adc_clk_div),\n      .idata (sdr_data_strobe_aligned),\n      .ivalid (aligner4_ovalid),\n      .sof (sdr_data_strobe_aligned[3]),\n      .odata (sdr_data_strobe_packed),\n      .ovalid ()\n    );\n    assign data_0 = rx_sdr_ddr_n ? sdr_data_0_packed : adc_data_0;\n    assign data_1 = rx_sdr_ddr_n ? sdr_data_1_packed : adc_data_1;\n    assign data_2 = rx_sdr_ddr_n ? sdr_data_2_packed : adc_data_2;\n    assign data_3 = rx_sdr_ddr_n ? sdr_data_3_packed : adc_data_3;\n    assign data_strobe = rx_sdr_ddr_n ? sdr_data_strobe_packed : adc_data_strobe;\n    assign data_valid = rx_sdr_ddr_n ? sdr_data_valid : adc_valid;\n  end else begin\n    assign data_0 = adc_data_0;\n    assign data_1 = adc_data_1;\n    assign data_2 = adc_data_2;\n    assign data_3 = adc_data_3;\n    assign data_strobe = adc_data_strobe;\n    assign data_valid = adc_valid;\n  end\n  endgenerate\n\n  // ADC\n\n  wire [7:0] rx_data8_0_aligned;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [], "Add": [[102, "      .rst (adc_rst),\n"], [110, "      .rst (adc_rst),\n"], [118, "      .rst (adc_rst),\n"], [126, "      .rst (adc_rst),\n"], [134, "      .rst (adc_rst),\n"], [145, "      .rst (adc_rst),\n"], [156, "      .rst (adc_rst),\n"], [178, "      .rst (adc_rst),\n"], [189, "      .rst (adc_rst),\n"]]}}