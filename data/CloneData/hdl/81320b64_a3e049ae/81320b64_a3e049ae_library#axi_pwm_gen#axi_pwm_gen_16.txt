Source Block: hdl/library/axi_pwm_gen/axi_pwm_gen.v@238:277@HdlStmIf
      end
    end else begin
      assign pwm_1 = 1'b0;
    end

    if (N_PWMS >= 3) begin
      axi_pwm_gen_1  #(
        .PULSE_WIDTH (PULSE_2_WIDTH),
        .PULSE_PERIOD (PULSE_2_PERIOD))
      i2_axi_pwm_gen_1(
        .clk (clk),
        .rstn (pwm_gen_resetn),
        .pulse_width (pwm_width_s[95:64]),
        .pulse_period (pwm_period_s[95:64]),
        .load_config (load_config_s),
        .sync (sync_2),
        .pulse (pwm_2),
        .pulse_counter (pwm_counter[2]));

      always @(posedge clk) begin
        if (pwm_gen_resetn == 1'b0) begin
          sync_active_2 <= 1'b1;
          sync_2 <= 1'b1;
        end else begin
          sync_active_2 <= |pwm_offset_s[95:64];
          if (sync_active_2) begin
            sync_2 <= (pwm_counter[0] == pwm_offset_s[95:64]) ? 1'b0 : 1'b1;
          end else begin
            sync_2 <= 1'b0;
          end
        end
      end
    end else begin
      assign pwm_2 = 1'b0;
    end

    if (N_PWMS >= 4) begin
      axi_pwm_gen_1  #(
        .PULSE_WIDTH (PULSE_3_WIDTH),
        .PULSE_PERIOD (PULSE_3_PERIOD))

Diff Content:
- 259           sync_active_2 <= 1'b1;
- 262           sync_active_2 <= |pwm_offset_s[95:64];
- 263           if (sync_active_2) begin
- 264             sync_2 <= (pwm_counter[0] == pwm_offset_s[95:64]) ? 1'b0 : 1'b1;
- 265           end else begin
- 266             sync_2 <= 1'b0;
- 267           end
+ 267           sync_2 <= (offset_cnt == pwm_offset_s[95:64]) ? 1'b0 : 1'b1;
+ 271       assign pwm_counter[2] = 32'd1;

Clone Blocks:
Clone Blocks 1:
hdl/library/axi_pwm_gen/axi_pwm_gen.v@207:246
      assign ext_sync_s = ext_sync_m1;
    end else begin
      assign ext_sync_s = ext_sync;
    end

    if (N_PWMS >= 2) begin
      axi_pwm_gen_1  #(
        .PULSE_WIDTH (PULSE_1_WIDTH),
        .PULSE_PERIOD (PULSE_1_PERIOD))
      i1_axi_pwm_gen_1(
        .clk (clk),
        .rstn (pwm_gen_resetn),
        .pulse_width (pwm_width_s[63:32]),
        .pulse_period (pwm_period_s[63:32]),
        .load_config (load_config_s),
        .sync (sync_1),
        .pulse (pwm_1),
        .pulse_counter (pwm_counter[1]));

      always @(posedge clk) begin
        if (pwm_gen_resetn == 1'b0) begin
          sync_active_1 <= 1'b1;
          sync_1 <= 1'b1;
        end else begin
          sync_active_1 <= |pwm_offset_s[63:32];
          if (sync_active_1) begin
            sync_1 <= (pwm_counter[0] == pwm_offset_s[63:32]) ? 1'b0 : 1'b1;
          end else begin
            sync_1 <= 1'b0;
          end
        end
      end
    end else begin
      assign pwm_1 = 1'b0;
    end

    if (N_PWMS >= 3) begin
      axi_pwm_gen_1  #(
        .PULSE_WIDTH (PULSE_2_WIDTH),
        .PULSE_PERIOD (PULSE_2_PERIOD))

Clone Blocks 2:
hdl/library/axi_pwm_gen/axi_pwm_gen.v@269:308
      end
    end else begin
      assign pwm_2 = 1'b0;
    end

    if (N_PWMS >= 4) begin
      axi_pwm_gen_1  #(
        .PULSE_WIDTH (PULSE_3_WIDTH),
        .PULSE_PERIOD (PULSE_3_PERIOD))
      i3_axi_pwm_gen_1(
        .clk (clk),
        .rstn (pwm_gen_resetn),
        .pulse_width (pwm_width_s[127:96]),
        .pulse_period (pwm_period_s[127:96]),
        .load_config (load_config_s),
        .sync (sync_3),
        .pulse (pwm_3),
        .pulse_counter (pwm_counter[3]));

      always @(posedge clk) begin
        if (pwm_gen_resetn == 1'b0) begin
          sync_active_3 <= 1'b1;
          sync_3 <= 1'b1;
        end else begin
          sync_active_3 <= |pwm_offset_s[127:96];
          if (sync_active_3) begin
            sync_3 <= (pwm_counter[0] == pwm_offset_s[127:96]) ? 1'b0 : 1'b1;
          end else begin
            sync_3 <= 1'b0;
          end
        end
      end
    end else begin
      assign pwm_3 = 1'b0;
    end
  endgenerate

  up_axi #(
    .AXI_ADDRESS_WIDTH(16))
  i_up_axi (

