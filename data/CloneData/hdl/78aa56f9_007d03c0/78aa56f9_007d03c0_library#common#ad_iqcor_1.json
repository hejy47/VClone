{"Source Block": ["hdl/library/common/ad_iqcor.v@97:200@HdlStmFor", "    iqcor_coeff_2_r <= iqcor_coeff_2;\n  end\n\n  genvar i;\n  generate \n  for (i=0; i<DPW; i=i+1) begin\n\n  wire    [CR-1:0]  data_i_s;\n  wire    [CR-1:0]  data_q_s;\n  wire    [CR-1:0]  p1_data_i_s;\n  wire              p1_valid_s;\n  wire    [33:0]  p1_data_p_i_s;\n  wire    [33:0]  p1_data_p_q_s;\n\n  wire    [CR-1:0]  p1_data_q_s;\n  wire    [CR-1:0]  p1_data_i_int;\n  wire    [CR-1:0]  p1_data_q_int;\n\n  reg             p1_valid = 'd0;\n  reg     [33:0]  p1_data_p = 'd0;\n  reg             valid_int = 'd0;\n  reg     [15:0]  data_int = 'd0;\n \n  // swap i & q\n  assign data_i_s = (Q_OR_I_N == 1 && SCALE_ONLY == 1'b0) ? data_iq[i*CR+:CR] : data_in[i*CR+:CR];\n  assign data_q_s = (Q_OR_I_N == 1) ? data_in[i*CR+:CR] : data_iq[i*CR+:CR];\n\n  // scaling functions - i\n\n  ad_mul #(.DELAY_DATA_WIDTH(CR+1)) i_mul_i (\n    .clk (clk),\n    .data_a ({data_i_s[CR-1], data_i_s, {16-CR{1'b0}}}),\n    .data_b ({iqcor_coeff_1_r[15], iqcor_coeff_1_r}),\n    .data_p (p1_data_p_i_s),\n    .ddata_in ({valid, data_i_s}),\n    .ddata_out ({p1_valid_s, p1_data_i_s}));\n\n  if (SCALE_ONLY == 0) begin\n    // scaling functions - q\n  \n    ad_mul #(.DELAY_DATA_WIDTH(CR)) i_mul_q (\n      .clk (clk),\n      .data_a ({data_q_s[CR-1], data_q_s, {16-CR{1'b0}}}),\n      .data_b ({iqcor_coeff_2_r[15], iqcor_coeff_2_r}),\n      .data_p (p1_data_p_q_s),\n      .ddata_in (data_q_s),\n      .ddata_out (p1_data_q_s));\n  \n  // sum\n  end else begin\n    assign p1_data_p_q_s = 34'h0;\n    assign p1_data_q_s = {CR{1'b0}};\n  end\n\n\n  if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin\n    reg [CR-1:0]  p1_data_q = 'd0;\n\n    always @(posedge clk) begin\n      p1_data_q <= p1_data_q_s;\n    end\n\n    assign p1_data_i_int = {CR{1'b0}};\n    assign p1_data_q_int = p1_data_q;\n\n  // sum\n  end else begin\n    reg [CR-1:0]  p1_data_i = 'd0;\n\n    always @(posedge clk) begin\n      p1_data_i <= p1_data_i_s;\n    end\n\n    assign p1_data_i_int = p1_data_i;\n    assign p1_data_q_int = {CR{1'b0}};\n  end\n\n  always @(posedge clk) begin\n    p1_valid <= p1_valid_s;\n    p1_data_p <= p1_data_p_i_s + p1_data_p_q_s;\n  end\n\n  // output registers\n\n  always @(posedge clk) begin\n    valid_int <= p1_valid;\n    if (iqcor_enable == 1'b1) begin\n      data_int <= p1_data_p[29:14];\n    end else if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin\n      data_int <= p1_data_q_int;\n    end else begin\n      data_int <= p1_data_i_int;\n    end\n  end\n  \n  assign valid_int_loc[i] = valid_int;\n  assign data_int_loc[i*CR+:CR] = data_int[15-:CR];\n\n  end\n  endgenerate\n\nendmodule\n\n// ***************************************************************************\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[102, "  for (i=0; i<DPW; i=i+1) begin\n"], [104, "  wire    [CR-1:0]  data_i_s;\n"], [105, "  wire    [CR-1:0]  data_q_s;\n"], [106, "  wire    [CR-1:0]  p1_data_i_s;\n"], [107, "  wire              p1_valid_s;\n"], [108, "  wire    [33:0]  p1_data_p_i_s;\n"], [109, "  wire    [33:0]  p1_data_p_q_s;\n"], [111, "  wire    [CR-1:0]  p1_data_q_s;\n"], [112, "  wire    [CR-1:0]  p1_data_i_int;\n"], [113, "  wire    [CR-1:0]  p1_data_q_int;\n"], [115, "  reg             p1_valid = 'd0;\n"], [116, "  reg     [33:0]  p1_data_p = 'd0;\n"], [117, "  reg             valid_int = 'd0;\n"], [118, "  reg     [15:0]  data_int = 'd0;\n"], [121, "  assign data_i_s = (Q_OR_I_N == 1 && SCALE_ONLY == 1'b0) ? data_iq[i*CR+:CR] : data_in[i*CR+:CR];\n"], [122, "  assign data_q_s = (Q_OR_I_N == 1) ? data_in[i*CR+:CR] : data_iq[i*CR+:CR];\n"], [126, "  ad_mul #(.DELAY_DATA_WIDTH(CR+1)) i_mul_i (\n"], [127, "    .clk (clk),\n"], [128, "    .data_a ({data_i_s[CR-1], data_i_s, {16-CR{1'b0}}}),\n"], [129, "    .data_b ({iqcor_coeff_1_r[15], iqcor_coeff_1_r}),\n"], [130, "    .data_p (p1_data_p_i_s),\n"], [131, "    .ddata_in ({valid, data_i_s}),\n"], [132, "    .ddata_out ({p1_valid_s, p1_data_i_s}));\n"], [134, "  if (SCALE_ONLY == 0) begin\n"], [137, "    ad_mul #(.DELAY_DATA_WIDTH(CR)) i_mul_q (\n"], [138, "      .clk (clk),\n"], [139, "      .data_a ({data_q_s[CR-1], data_q_s, {16-CR{1'b0}}}),\n"], [140, "      .data_b ({iqcor_coeff_2_r[15], iqcor_coeff_2_r}),\n"], [141, "      .data_p (p1_data_p_q_s),\n"], [142, "      .ddata_in (data_q_s),\n"], [143, "      .ddata_out (p1_data_q_s));\n"], [146, "  end else begin\n"], [147, "    assign p1_data_p_q_s = 34'h0;\n"], [148, "    assign p1_data_q_s = {CR{1'b0}};\n"], [149, "  end\n"], [152, "  if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin\n"], [153, "    reg [CR-1:0]  p1_data_q = 'd0;\n"], [155, "    always @(posedge clk) begin\n"], [156, "      p1_data_q <= p1_data_q_s;\n"], [159, "    assign p1_data_i_int = {CR{1'b0}};\n"], [160, "    assign p1_data_q_int = p1_data_q;\n"], [163, "  end else begin\n"], [164, "    reg [CR-1:0]  p1_data_i = 'd0;\n"], [166, "    always @(posedge clk) begin\n"], [167, "      p1_data_i <= p1_data_i_s;\n"], [168, "    end\n"], [170, "    assign p1_data_i_int = p1_data_i;\n"], [171, "    assign p1_data_q_int = {CR{1'b0}};\n"], [172, "  end\n"], [174, "  always @(posedge clk) begin\n"], [175, "    p1_valid <= p1_valid_s;\n"], [176, "    p1_data_p <= p1_data_p_i_s + p1_data_p_q_s;\n"], [177, "  end\n"], [181, "  always @(posedge clk) begin\n"], [182, "    valid_int <= p1_valid;\n"], [183, "    if (iqcor_enable == 1'b1) begin\n"], [184, "      data_int <= p1_data_p[29:14];\n"], [185, "    end else if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin\n"], [186, "      data_int <= p1_data_q_int;\n"], [187, "    end else begin\n"], [188, "      data_int <= p1_data_i_int;\n"], [189, "    end\n"], [190, "  end\n"], [192, "  assign valid_int_loc[i] = valid_int;\n"], [193, "  assign data_int_loc[i*CR+:CR] = data_int[15-:CR];\n"], [195, "  end\n"]], "Add": [[118, "    for (i=0; i<DPW; i=i+1) begin\n"], [118, "      wire    [CR-1:0]  data_i_s;\n"], [118, "      wire    [CR-1:0]  data_q_s;\n"], [118, "      wire    [CR-1:0]  p1_data_i_s;\n"], [118, "      wire              p1_valid_s;\n"], [118, "      wire    [33:0]  p1_data_p_i_s;\n"], [118, "      wire    [33:0]  p1_data_p_q_s;\n"], [118, "      wire    [CR-1:0]  p1_data_q_s;\n"], [118, "      wire    [CR-1:0]  p1_data_i_int;\n"], [118, "      wire    [CR-1:0]  p1_data_q_int;\n"], [118, "      reg             p1_valid = 'd0;\n"], [118, "      reg     [33:0]  p1_data_p = 'd0;\n"], [118, "      reg             valid_int = 'd0;\n"], [118, "      reg     [15:0]  data_int = 'd0;\n"], [149, "      assign data_i_s = (Q_OR_I_N == 1 && SCALE_ONLY == 1'b0) ? data_iq[i*CR+:CR] : data_in[i*CR+:CR];\n"], [149, "      assign data_q_s = (Q_OR_I_N == 1) ? data_in[i*CR+:CR] : data_iq[i*CR+:CR];\n"], [149, "      ad_mul #(.DELAY_DATA_WIDTH(CR+1)) i_mul_i (\n"], [149, "        .clk (clk),\n"], [149, "        .data_a ({data_i_s[CR-1], data_i_s, {16-CR{1'b0}}}),\n"], [149, "        .data_b ({iqcor_coeff_1_r[15], iqcor_coeff_1_r}),\n"], [149, "        .data_p (p1_data_p_i_s),\n"], [149, "        .ddata_in ({valid, data_i_s}),\n"], [149, "        .ddata_out ({p1_valid_s, p1_data_i_s}));\n"], [149, "      if (SCALE_ONLY == 0) begin\n"], [149, "        ad_mul #(.DELAY_DATA_WIDTH(CR)) i_mul_q (\n"], [149, "          .clk (clk),\n"], [149, "          .data_a ({data_q_s[CR-1], data_q_s, {16-CR{1'b0}}}),\n"], [149, "          .data_b ({iqcor_coeff_2_r[15], iqcor_coeff_2_r}),\n"], [149, "          .data_p (p1_data_p_q_s),\n"], [149, "          .ddata_in (data_q_s),\n"], [149, "          .ddata_out (p1_data_q_s));\n"], [149, "      end else begin\n"], [149, "        assign p1_data_p_q_s = 34'h0;\n"], [149, "        assign p1_data_q_s = {CR{1'b0}};\n"], [149, "      end\n"], [149, "      if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin\n"], [149, "        reg [CR-1:0]  p1_data_q = 'd0;\n"], [149, "        always @(posedge clk) begin\n"], [149, "          p1_data_q <= p1_data_q_s;\n"], [149, "        end\n"], [149, "        assign p1_data_i_int = {CR{1'b0}};\n"], [149, "        assign p1_data_q_int = p1_data_q;\n"], [149, "      end else begin\n"], [149, "        reg [CR-1:0]  p1_data_i = 'd0;\n"], [149, "        always @(posedge clk) begin\n"], [149, "          p1_data_i <= p1_data_i_s;\n"], [149, "        end\n"], [149, "        assign p1_data_i_int = p1_data_i;\n"], [149, "        assign p1_data_q_int = {CR{1'b0}};\n"], [149, "      end\n"], [149, "      always @(posedge clk) begin\n"], [149, "        p1_valid <= p1_valid_s;\n"], [149, "        p1_data_p <= p1_data_p_i_s + p1_data_p_q_s;\n"], [149, "      end\n"], [149, "      always @(posedge clk) begin\n"], [149, "        valid_int <= p1_valid;\n"], [149, "        if (iqcor_enable == 1'b1) begin\n"], [149, "          data_int <= p1_data_p[29:14];\n"], [149, "        end else if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin\n"], [149, "          data_int <= p1_data_q_int;\n"], [149, "        end else begin\n"], [149, "          data_int <= p1_data_i_int;\n"], [149, "        end\n"], [149, "      end\n"], [149, "      assign valid_int_loc[i] = valid_int;\n"], [149, "      assign data_int_loc[i*CR+:CR] = data_int[15-:CR];\n"]]}}