Source Block: hdl/library/common/ad_iqcor.v@97:200@HdlStmFor
    iqcor_coeff_2_r <= iqcor_coeff_2;
  end

  genvar i;
  generate 
  for (i=0; i<DPW; i=i+1) begin

  wire    [CR-1:0]  data_i_s;
  wire    [CR-1:0]  data_q_s;
  wire    [CR-1:0]  p1_data_i_s;
  wire              p1_valid_s;
  wire    [33:0]  p1_data_p_i_s;
  wire    [33:0]  p1_data_p_q_s;

  wire    [CR-1:0]  p1_data_q_s;
  wire    [CR-1:0]  p1_data_i_int;
  wire    [CR-1:0]  p1_data_q_int;

  reg             p1_valid = 'd0;
  reg     [33:0]  p1_data_p = 'd0;
  reg             valid_int = 'd0;
  reg     [15:0]  data_int = 'd0;
 
  // swap i & q
  assign data_i_s = (Q_OR_I_N == 1 && SCALE_ONLY == 1'b0) ? data_iq[i*CR+:CR] : data_in[i*CR+:CR];
  assign data_q_s = (Q_OR_I_N == 1) ? data_in[i*CR+:CR] : data_iq[i*CR+:CR];

  // scaling functions - i

  ad_mul #(.DELAY_DATA_WIDTH(CR+1)) i_mul_i (
    .clk (clk),
    .data_a ({data_i_s[CR-1], data_i_s, {16-CR{1'b0}}}),
    .data_b ({iqcor_coeff_1_r[15], iqcor_coeff_1_r}),
    .data_p (p1_data_p_i_s),
    .ddata_in ({valid, data_i_s}),
    .ddata_out ({p1_valid_s, p1_data_i_s}));

  if (SCALE_ONLY == 0) begin
    // scaling functions - q
  
    ad_mul #(.DELAY_DATA_WIDTH(CR)) i_mul_q (
      .clk (clk),
      .data_a ({data_q_s[CR-1], data_q_s, {16-CR{1'b0}}}),
      .data_b ({iqcor_coeff_2_r[15], iqcor_coeff_2_r}),
      .data_p (p1_data_p_q_s),
      .ddata_in (data_q_s),
      .ddata_out (p1_data_q_s));
  
  // sum
  end else begin
    assign p1_data_p_q_s = 34'h0;
    assign p1_data_q_s = {CR{1'b0}};
  end


  if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin
    reg [CR-1:0]  p1_data_q = 'd0;

    always @(posedge clk) begin
      p1_data_q <= p1_data_q_s;
    end

    assign p1_data_i_int = {CR{1'b0}};
    assign p1_data_q_int = p1_data_q;

  // sum
  end else begin
    reg [CR-1:0]  p1_data_i = 'd0;

    always @(posedge clk) begin
      p1_data_i <= p1_data_i_s;
    end

    assign p1_data_i_int = p1_data_i;
    assign p1_data_q_int = {CR{1'b0}};
  end

  always @(posedge clk) begin
    p1_valid <= p1_valid_s;
    p1_data_p <= p1_data_p_i_s + p1_data_p_q_s;
  end

  // output registers

  always @(posedge clk) begin
    valid_int <= p1_valid;
    if (iqcor_enable == 1'b1) begin
      data_int <= p1_data_p[29:14];
    end else if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin
      data_int <= p1_data_q_int;
    end else begin
      data_int <= p1_data_i_int;
    end
  end
  
  assign valid_int_loc[i] = valid_int;
  assign data_int_loc[i*CR+:CR] = data_int[15-:CR];

  end
  endgenerate

endmodule

// ***************************************************************************

Diff Content:
- 102   for (i=0; i<DPW; i=i+1) begin
- 104   wire    [CR-1:0]  data_i_s;
- 105   wire    [CR-1:0]  data_q_s;
- 106   wire    [CR-1:0]  p1_data_i_s;
- 107   wire              p1_valid_s;
- 108   wire    [33:0]  p1_data_p_i_s;
- 109   wire    [33:0]  p1_data_p_q_s;
- 111   wire    [CR-1:0]  p1_data_q_s;
- 112   wire    [CR-1:0]  p1_data_i_int;
- 113   wire    [CR-1:0]  p1_data_q_int;
- 115   reg             p1_valid = 'd0;
- 116   reg     [33:0]  p1_data_p = 'd0;
- 117   reg             valid_int = 'd0;
- 118   reg     [15:0]  data_int = 'd0;
- 121   assign data_i_s = (Q_OR_I_N == 1 && SCALE_ONLY == 1'b0) ? data_iq[i*CR+:CR] : data_in[i*CR+:CR];
- 122   assign data_q_s = (Q_OR_I_N == 1) ? data_in[i*CR+:CR] : data_iq[i*CR+:CR];
- 126   ad_mul #(.DELAY_DATA_WIDTH(CR+1)) i_mul_i (
- 127     .clk (clk),
- 128     .data_a ({data_i_s[CR-1], data_i_s, {16-CR{1'b0}}}),
- 129     .data_b ({iqcor_coeff_1_r[15], iqcor_coeff_1_r}),
- 130     .data_p (p1_data_p_i_s),
- 131     .ddata_in ({valid, data_i_s}),
- 132     .ddata_out ({p1_valid_s, p1_data_i_s}));
- 134   if (SCALE_ONLY == 0) begin
- 137     ad_mul #(.DELAY_DATA_WIDTH(CR)) i_mul_q (
- 138       .clk (clk),
- 139       .data_a ({data_q_s[CR-1], data_q_s, {16-CR{1'b0}}}),
- 140       .data_b ({iqcor_coeff_2_r[15], iqcor_coeff_2_r}),
- 141       .data_p (p1_data_p_q_s),
- 142       .ddata_in (data_q_s),
- 143       .ddata_out (p1_data_q_s));
- 146   end else begin
- 147     assign p1_data_p_q_s = 34'h0;
- 148     assign p1_data_q_s = {CR{1'b0}};
- 149   end
- 152   if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin
- 153     reg [CR-1:0]  p1_data_q = 'd0;
- 155     always @(posedge clk) begin
- 156       p1_data_q <= p1_data_q_s;
- 159     assign p1_data_i_int = {CR{1'b0}};
- 160     assign p1_data_q_int = p1_data_q;
- 163   end else begin
- 164     reg [CR-1:0]  p1_data_i = 'd0;
- 166     always @(posedge clk) begin
- 167       p1_data_i <= p1_data_i_s;
- 168     end
- 170     assign p1_data_i_int = p1_data_i;
- 171     assign p1_data_q_int = {CR{1'b0}};
- 172   end
- 174   always @(posedge clk) begin
- 175     p1_valid <= p1_valid_s;
- 176     p1_data_p <= p1_data_p_i_s + p1_data_p_q_s;
- 177   end
- 181   always @(posedge clk) begin
- 182     valid_int <= p1_valid;
- 183     if (iqcor_enable == 1'b1) begin
- 184       data_int <= p1_data_p[29:14];
- 185     end else if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin
- 186       data_int <= p1_data_q_int;
- 187     end else begin
- 188       data_int <= p1_data_i_int;
- 189     end
- 190   end
- 192   assign valid_int_loc[i] = valid_int;
- 193   assign data_int_loc[i*CR+:CR] = data_int[15-:CR];
- 195   end
+ 118     for (i=0; i<DPW; i=i+1) begin
+ 118       wire    [CR-1:0]  data_i_s;
+ 118       wire    [CR-1:0]  data_q_s;
+ 118       wire    [CR-1:0]  p1_data_i_s;
+ 118       wire              p1_valid_s;
+ 118       wire    [33:0]  p1_data_p_i_s;
+ 118       wire    [33:0]  p1_data_p_q_s;
+ 118       wire    [CR-1:0]  p1_data_q_s;
+ 118       wire    [CR-1:0]  p1_data_i_int;
+ 118       wire    [CR-1:0]  p1_data_q_int;
+ 118       reg             p1_valid = 'd0;
+ 118       reg     [33:0]  p1_data_p = 'd0;
+ 118       reg             valid_int = 'd0;
+ 118       reg     [15:0]  data_int = 'd0;
+ 149       assign data_i_s = (Q_OR_I_N == 1 && SCALE_ONLY == 1'b0) ? data_iq[i*CR+:CR] : data_in[i*CR+:CR];
+ 149       assign data_q_s = (Q_OR_I_N == 1) ? data_in[i*CR+:CR] : data_iq[i*CR+:CR];
+ 149       ad_mul #(.DELAY_DATA_WIDTH(CR+1)) i_mul_i (
+ 149         .clk (clk),
+ 149         .data_a ({data_i_s[CR-1], data_i_s, {16-CR{1'b0}}}),
+ 149         .data_b ({iqcor_coeff_1_r[15], iqcor_coeff_1_r}),
+ 149         .data_p (p1_data_p_i_s),
+ 149         .ddata_in ({valid, data_i_s}),
+ 149         .ddata_out ({p1_valid_s, p1_data_i_s}));
+ 149       if (SCALE_ONLY == 0) begin
+ 149         ad_mul #(.DELAY_DATA_WIDTH(CR)) i_mul_q (
+ 149           .clk (clk),
+ 149           .data_a ({data_q_s[CR-1], data_q_s, {16-CR{1'b0}}}),
+ 149           .data_b ({iqcor_coeff_2_r[15], iqcor_coeff_2_r}),
+ 149           .data_p (p1_data_p_q_s),
+ 149           .ddata_in (data_q_s),
+ 149           .ddata_out (p1_data_q_s));
+ 149       end else begin
+ 149         assign p1_data_p_q_s = 34'h0;
+ 149         assign p1_data_q_s = {CR{1'b0}};
+ 149       end
+ 149       if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin
+ 149         reg [CR-1:0]  p1_data_q = 'd0;
+ 149         always @(posedge clk) begin
+ 149           p1_data_q <= p1_data_q_s;
+ 149         end
+ 149         assign p1_data_i_int = {CR{1'b0}};
+ 149         assign p1_data_q_int = p1_data_q;
+ 149       end else begin
+ 149         reg [CR-1:0]  p1_data_i = 'd0;
+ 149         always @(posedge clk) begin
+ 149           p1_data_i <= p1_data_i_s;
+ 149         end
+ 149         assign p1_data_i_int = p1_data_i;
+ 149         assign p1_data_q_int = {CR{1'b0}};
+ 149       end
+ 149       always @(posedge clk) begin
+ 149         p1_valid <= p1_valid_s;
+ 149         p1_data_p <= p1_data_p_i_s + p1_data_p_q_s;
+ 149       end
+ 149       always @(posedge clk) begin
+ 149         valid_int <= p1_valid;
+ 149         if (iqcor_enable == 1'b1) begin
+ 149           data_int <= p1_data_p[29:14];
+ 149         end else if (Q_OR_I_N == 1 && SCALE_ONLY == 0) begin
+ 149           data_int <= p1_data_q_int;
+ 149         end else begin
+ 149           data_int <= p1_data_i_int;
+ 149         end
+ 149       end
+ 149       assign valid_int_loc[i] = valid_int;
+ 149       assign data_int_loc[i*CR+:CR] = data_int[15-:CR];

Clone Blocks:
