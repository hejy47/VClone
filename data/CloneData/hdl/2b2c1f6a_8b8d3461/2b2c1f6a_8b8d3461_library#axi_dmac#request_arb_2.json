{"Source Block": ["hdl/library/axi_dmac/request_arb.v@537:606@HdlStmIf", "assign m_axis_xfer_req = 1'b0;\nassign m_axis_data = 'h00;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_FIFO) begin\n\nassign dest_clk = fifo_rd_clk;\n\nwire [ID_WIDTH-1:0] data_id;\n\nwire data_eot = eot_mem[data_id];\nwire response_eot = eot_mem[dest_response_id];\n\nassign dbg_dest_address_id = 'h00;\nassign dbg_dest_data_id = data_id;\n\ndmac_dest_fifo_inf #(\n  .ID_WIDTH(ID_WIDTH),\n  .DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)\n) i_dest_dma_fifo (\n  .clk(fifo_rd_clk),\n  .resetn(dest_resetn),\n\n  .enable(dest_enable),\n  .enabled(dest_enabled),\n\n  .req_valid(dest_req_valid),\n  .req_ready(dest_req_ready),\n  .req_last_burst_length(dest_req_last_burst_length),\n\n  .response_valid(dest_response_valid),\n  .response_ready(dest_response_ready),\n  .response_resp(dest_response_resp),\n  .response_resp_eot(dest_response_resp_eot),\n\n  .request_id(dest_request_id),\n  .response_id(dest_response_id),\n  .data_id(data_id),\n  .sync_id(dest_sync_id),\n  .sync_id_ret(dest_sync_id_ret),\n\n  .data_eot(data_eot),\n  .response_eot(response_eot),\n\n  .fifo_valid(dest_valid),\n  .fifo_ready(dest_ready),\n  .fifo_data(dest_data),\n\n  .en(fifo_rd_en),\n  .valid(fifo_rd_valid),\n  .dout(fifo_rd_dout),\n  .underflow(fifo_rd_underflow),\n        .xfer_req(fifo_rd_xfer_req)\n);\n\nend else begin\n\nassign fifo_rd_valid = 1'b0;\nassign fifo_rd_dout = 'h0;\nassign fifo_rd_underflow = 1'b0;\nassign fifo_rd_xfer_req = 1'b0;\n\nend endgenerate\n\ngenerate if (DMA_TYPE_SRC == DMA_TYPE_MM_AXI) begin\n\nassign src_clk = m_src_axi_aclk;\n\n"], "Clone Blocks": [["hdl/library/axi_dmac/request_arb.v@475:545", "\nassign m_axi_bready = 1'b0;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin\n\nassign dest_clk = m_axis_aclk;\n\nwire [ID_WIDTH-1:0] data_id;\n\nwire data_eot = eot_mem[data_id];\nwire response_eot = eot_mem[dest_response_id];\n\nassign dbg_dest_address_id = 'h00;\nassign dbg_dest_data_id = data_id;\n\ndmac_dest_axi_stream #(\n  .ID_WIDTH(ID_WIDTH),\n  .S_AXIS_DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)\n) i_dest_dma_stream (\n  .s_axis_aclk(m_axis_aclk),\n  .s_axis_aresetn(dest_resetn),\n\n  .enable(dest_enable),\n  .enabled(dest_enabled),\n\n  .req_valid(dest_req_valid),\n  .req_ready(dest_req_ready),\n  .req_last_burst_length(dest_req_last_burst_length),\n        .req_xlast(dest_req_xlast),\n\n  .response_valid(dest_response_valid),\n  .response_ready(dest_response_ready),\n  .response_resp(dest_response_resp),\n  .response_resp_eot(dest_response_resp_eot),\n\n  .request_id(dest_request_id),\n  .response_id(dest_response_id),\n  .data_id(data_id),\n  .sync_id(dest_sync_id),\n  .sync_id_ret(dest_sync_id_ret),\n        .xfer_req(m_axis_xfer_req),\n\n  .data_eot(data_eot),\n  .response_eot(response_eot),\n\n  .fifo_valid(dest_valid),\n  .fifo_ready(dest_ready),\n  .fifo_data(dest_data),\n\n  .m_axis_valid(m_axis_valid),\n  .m_axis_ready(m_axis_ready),\n  .m_axis_data(m_axis_data),\n        .m_axis_last(m_axis_last)\n);\n\nend else begin\n\nassign m_axis_valid = 1'b0;\nassign m_axis_last = 1'b0;\nassign m_axis_xfer_req = 1'b0;\nassign m_axis_data = 'h00;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_FIFO) begin\n\nassign dest_clk = fifo_rd_clk;\n\n"]], "Diff Content": {"Delete": [[591, "        .xfer_req(fifo_rd_xfer_req)\n"]], "Add": [[591, "  .xfer_req(fifo_rd_xfer_req)\n"]]}}