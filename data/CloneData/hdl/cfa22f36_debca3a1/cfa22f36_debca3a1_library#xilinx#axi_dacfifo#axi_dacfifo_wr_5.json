{"Source Block": ["hdl/library/xilinx/axi_dacfifo/axi_dacfifo_wr.v@294:322@HdlStmProcess", "    end\n  end\n\n  // The memory module request data until reaches the high threshold.\n\n  always @(posedge dma_clk) begin\n    if (dma_rst_s == 1'b1) begin\n      dma_mem_addr_diff <= 'b0;\n      dma_mem_raddr_m1 <= 'b0;\n      dma_mem_raddr_m2 <= 'b0;\n      dma_mem_raddr <= 'b0;\n      dma_ready_out <= 1'b0;\n    end else begin\n      dma_mem_raddr_m1 <= axi_mem_raddr_g;\n      dma_mem_raddr_m2 <= dma_mem_raddr_m1;\n      dma_mem_raddr <= g2b(dma_mem_raddr_m2);\n      dma_mem_addr_diff <= dma_mem_addr_diff_s[DMA_MEM_ADDRESS_WIDTH-1:0];\n      if (dma_mem_addr_diff >= DMA_BUF_THRESHOLD_HI) begin\n        dma_ready_out <= 1'b0;\n      end else begin\n        dma_ready_out <= 1'b1;\n      end\n    end\n  end\n\n  // Read address generation for the asymmetric memory\n\n  // CDC for the memory write address, xfer_req and xfer_last\n\n"], "Clone Blocks": [["hdl/library/common/util_dacfifo_bypass.v@179:207", "    end\n  end\n\n  // The memory module request data until reaches the high threshold.\n\n  always @(posedge dma_clk) begin\n    if (dma_rst == 1'b1) begin\n      dma_mem_addr_diff <= 'b0;\n      dma_mem_raddr_m1 <= 'b0;\n      dma_mem_raddr_m2 <= 'b0;\n      dma_mem_raddr <= 'b0;\n      dma_ready_out <= 1'b0;\n    end else begin\n      dma_mem_raddr_m1 <= dac_mem_raddr_g;\n      dma_mem_raddr_m2 <= dma_mem_raddr_m1;\n      dma_mem_raddr <= g2b(dma_mem_raddr_m2);\n      dma_mem_addr_diff <= dma_address_diff_s[DMA_ADDRESS_WIDTH-1:0];\n      if (dma_mem_addr_diff >= DMA_BUF_THRESHOLD_HI) begin\n        dma_ready_out <= 1'b0;\n      end else begin\n        dma_ready_out <= 1'b1;\n      end\n    end\n  end\n\n  // relative address offset on dma domain\n  assign dma_address_diff_s = {1'b1, dma_mem_waddr} - dma_mem_raddr_s;\n  assign dma_mem_raddr_s = (DMA_DATA_WIDTH>DAC_DATA_WIDTH) ?\n                                ((MEM_RATIO == 1) ? (dma_mem_raddr) :\n"]], "Diff Content": {"Delete": [[300, "    if (dma_rst_s == 1'b1) begin\n"], [305, "      dma_ready_out <= 1'b0;\n"]], "Add": [[300, "    if ((dma_rst_s == 1'b1) || (dma_xfer_init == 1'b1)) begin\n"], [305, "      dma_ready_out <= 1'b1;\n"]]}}