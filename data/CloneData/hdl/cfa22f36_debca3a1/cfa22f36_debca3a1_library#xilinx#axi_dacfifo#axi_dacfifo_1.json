{"Source Block": ["hdl/library/xilinx/axi_dacfifo/axi_dacfifo.v@242:311@HdlStmIf", "    .dac_dunf (dac_dunf_fifo_s));\n\n  // bypass logic -- supported if DAC_DATA_WIDTH == DMA_DATA_WIDTH\n\n  generate\n  if (FIFO_BYPASS) begin\n\n    util_dacfifo_bypass #(\n      .DAC_DATA_WIDTH (DAC_DATA_WIDTH),\n      .DMA_DATA_WIDTH (DMA_DATA_WIDTH)\n    ) i_dacfifo_bypass (\n      .dma_clk(dma_clk),\n      .dma_data(dma_data),\n      .dma_ready(dma_ready),\n      .dma_ready_out(dma_ready_bypass_s),\n      .dma_valid(dma_valid),\n      .dma_xfer_req(dma_xfer_req),\n      .dac_clk(dac_clk),\n      .dac_rst(dac_rst),\n      .dac_valid(dac_valid),\n      .dac_data(dac_data_bypass_s),\n      .dac_dunf(dac_dunf_bypass_s)\n    );\n\n    always @(posedge dma_clk) begin\n      dma_bypass_m1 <= bypass;\n      dma_bypass <= dma_bypass_m1;\n    end\n\n    always @(posedge dac_clk) begin\n      dac_bypass_m1 <= bypass;\n      dac_bypass <= dac_bypass_m1;\n      dac_xfer_out_m1 <= dma_xfer_req;\n      dac_xfer_out_bypass <= dac_xfer_out_m1;\n    end\n\n    // mux for the dma_ready\n\n    always @(posedge dma_clk) begin\n      dma_ready <= (dma_bypass) ? dma_ready_wr_s : dma_ready_bypass_s;\n    end\n\n    // mux for dac data\n\n    always @(posedge dac_clk) begin\n      if (dac_valid) begin\n        dac_data <= (dac_bypass) ? dac_data_bypass_s : dac_data_fifo_s;\n      end\n      dac_xfer_out <= (dac_bypass) ? dac_xfer_out_bypass : dac_xfer_fifo_out_s;\n      dac_dunf <= (dac_bypass) ? dac_dunf_bypass_s : dac_dunf_fifo_s;\n    end\n\n  end else begin /* if (~FIFO_BYPASS) */\n\n    always @(posedge dma_clk) begin\n      dma_ready <= dma_ready_wr_s;\n    end\n    always @(posedge dac_clk) begin\n      if (dac_valid) begin\n        dac_data <= dac_data_fifo_s;\n      end\n      dac_xfer_out <= dac_xfer_fifo_out_s;\n      dac_dunf <= dac_dunf_fifo_s;\n    end\n\n  end\n  endgenerate\n\nendmodule\n\n"], "Clone Blocks": [["hdl/library/altera/avl_dacfifo/avl_dacfifo.v@208:278", "  end\n\n  // bypass logic -- supported if DAC_DATA_WIDTH == DMA_DATA_WIDTH\n\n  generate\n  if (FIFO_BYPASS) begin\n\n    util_dacfifo_bypass #(\n      .DAC_DATA_WIDTH (DAC_DATA_WIDTH),\n      .DMA_DATA_WIDTH (DMA_DATA_WIDTH)\n    ) i_dacfifo_bypass (\n      .dma_clk(dma_clk),\n      .dma_data(dma_data),\n      .dma_ready(dma_ready),\n      .dma_ready_out(dma_ready_bypass_s),\n      .dma_valid(dma_valid),\n      .dma_xfer_req(dma_xfer_req),\n      .dac_clk(dac_clk),\n      .dac_rst(dac_rst),\n      .dac_valid(dac_valid),\n      .dac_data(dac_data_bypass_s),\n      .dac_dunf(dac_dunf_bypass_s)\n    );\n\n    always @(posedge dma_clk) begin\n      dma_bypass_m1 <= bypass;\n      dma_bypass <= dma_bypass_m1;\n    end\n\n    always @(posedge dac_clk) begin\n      dac_bypass_m1 <= bypass;\n      dac_bypass <= dac_bypass_m1;\n      dac_xfer_out_m1 <= dma_xfer_req;\n      dac_xfer_out_bypass <= dac_xfer_out_m1;\n    end\n\n    // mux for the dma_ready\n\n    always @(posedge dma_clk) begin\n      dma_ready <= (dma_bypass) ? dma_ready_bypass_s : dma_ready_wr_s;\n    end\n\n    // mux for dac data\n\n    always @(posedge dac_clk) begin\n      if (dac_valid) begin\n        dac_data <= (dac_bypass) ? dac_data_bypass_s : dac_data_fifo_s;\n      end\n      dac_xfer_out_int <= (dac_bypass) ? dac_xfer_out_bypass : dac_xfer_fifo_out_s;\n      dac_dunf <= (dac_bypass) ? dac_dunf_bypass_s : dac_dunf_fifo_s;\n    end\n\n  end else begin /* if (~FIFO_BYPASS) */\n\n    always @(posedge dma_clk) begin\n      dma_ready <= dma_ready_wr_s;\n    end\n    always @(posedge dac_clk) begin\n      if (dac_valid) begin\n        dac_data <= dac_data_fifo_s;\n      end\n      dac_xfer_out_int <= dac_xfer_fifo_out_s;\n      dac_dunf <= dac_dunf_fifo_s;\n    end\n\n  end\n  endgenerate\n\n  // the ad_mem_asym memory read interface has a 3 clock cycle delay, from the\n  // moment of the address change until a valid data arrives on the bus;\n  // because the dac_xfer_out is going to validate the outgoing samples (in conjunction\n"]], "Diff Content": {"Delete": [[281, "      dma_ready <= (dma_bypass) ? dma_ready_wr_s : dma_ready_bypass_s;\n"]], "Add": [[281, "      dma_ready <= (dma_bypass) ? dma_ready_bypass_s : dma_ready_wr_s;\n"]]}}