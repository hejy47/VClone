Source Block: hdl/library/axi_dmac/axi_dmac.v@361:418@HdlStmProcess
  end
end

// Register Interface

always @(posedge s_axi_aclk)
begin
  if (s_axi_aresetn == 1'b0) begin
    up_enable <= 'h00;
    up_pause <= 'h00;
    up_dma_src_address <= 'h00;
    up_dma_dest_address <= 'h00;
    up_dma_y_length <= 'h00;
    up_dma_x_length <= 'h00;
    up_dma_dest_stride <= 'h00;
    up_dma_src_stride <= 'h00;
    up_irq_mask <= 2'b11;
    up_dma_req_valid <= 1'b0;
    up_scratch <= 'h00;
    up_dma_cyclic <= 1'b0;
    up_axis_xlast <= 1'b1;
    up_wack <= 1'b0;
  end else begin
    up_wack <= up_wreq;
    if (up_enable == 1'b1) begin
      if (up_wreq && up_waddr == 9'h102) begin
        up_dma_req_valid <= up_dma_req_valid | up_wdata[0];
      end else if (up_sot) begin
        up_dma_req_valid <= 1'b0;
      end
    end else begin
      up_dma_req_valid <= 1'b0;
    end

    if (up_wreq) begin
      case (up_waddr)
      9'h002: up_scratch <= up_wdata;
      9'h020: up_irq_mask <= up_wdata[1:0];
      9'h100: {up_pause, up_enable} <= up_wdata[1:0];
                        9'h103: begin
                          if (CYCLIC) up_dma_cyclic <= up_wdata[0];
                          up_axis_xlast <= up_wdata[1];
                        end
      9'h104: up_dma_dest_address <= up_wdata[DMA_AXI_ADDR_WIDTH-1:BYTES_PER_BEAT_WIDTH_DEST];
      9'h105: up_dma_src_address <= up_wdata[DMA_AXI_ADDR_WIDTH-1:BYTES_PER_BEAT_WIDTH_SRC];
      9'h106: up_dma_x_length <= up_wdata[DMA_LENGTH_WIDTH-1:0];
      9'h107: up_dma_y_length <= up_wdata[DMA_LENGTH_WIDTH-1:0];
      9'h108: up_dma_dest_stride <= up_wdata[DMA_LENGTH_WIDTH-1:0];
      9'h109: up_dma_src_stride <= up_wdata[DMA_LENGTH_WIDTH-1:0];
      endcase
    end
  end
end

assign dbg_ids0 = {
  {DBG_ID_PADDING{1'b0}}, dest_data_id,
  {DBG_ID_PADDING{1'b0}}, dest_response_id,
  {DBG_ID_PADDING{1'b0}}, dest_address_id,

Diff Content:
- 373     up_dma_y_length <= 'h00;
- 375     up_dma_dest_stride <= 'h00;
- 376     up_dma_src_stride <= 'h00;
- 407       9'h107: up_dma_y_length <= up_wdata[DMA_LENGTH_WIDTH-1:0];
- 408       9'h108: up_dma_dest_stride <= up_wdata[DMA_LENGTH_WIDTH-1:0];
- 409       9'h109: up_dma_src_stride <= up_wdata[DMA_LENGTH_WIDTH-1:0];
+ 413 generate
+ 413 if (DMA_2D_TRANSFER == 1) begin
+ 413   reg [DMA_LENGTH_WIDTH-1:0] up_dma_y_length = 'h00;
+ 413   reg [DMA_LENGTH_WIDTH-1:0] up_dma_src_stride = 'h00;
+ 413   reg [DMA_LENGTH_WIDTH-1:0] up_dma_dest_stride = 'h00;
+ 413   always @(posedge s_axi_aclk)
+ 413   begin
+ 413     if (s_axi_aresetn == 1'b0) begin
+ 413       up_dma_y_length <= 'h00;
+ 413       up_dma_dest_stride <= 'h00;
+ 413       up_dma_src_stride <= 'h00;
+ 413     end else begin
+ 413       if (up_wreq) begin
+ 413         case (up_waddr)
+ 413         9'h107: up_dma_y_length <= up_wdata[DMA_LENGTH_WIDTH-1:0];
+ 413         9'h108: up_dma_dest_stride <= up_wdata[DMA_LENGTH_WIDTH-1:0];
+ 413         9'h109: up_dma_src_stride <= up_wdata[DMA_LENGTH_WIDTH-1:0];
+ 413         endcase
+ 413       end
+ 413     end
+ 413   end
+ 413   assign up_dma_y_length_s = up_dma_y_length;
+ 413   assign up_dma_dest_stride_s = up_dma_dest_stride;
+ 413   assign up_dma_src_stride_s = up_dma_src_stride;
+ 413 end else begin
+ 413   assign up_dma_y_length_s = 'h0;
+ 413   assign up_dma_dest_stride_s = 'h0;
+ 413   assign up_dma_src_stride_s = 'h0;
+ 413 end
+ 413 endgenerate

Clone Blocks:
