Source Block: hdl/library/xilinx/axi_dacfifo/axi_dacfifo_rd.v@360:392@HdlStmProcess
  end

  assign dac_xfer_out = dac_xfer_req_m[2] & dac_mem_valid;

  // CDC for write addresses from the DDRx clock domain
  always @(posedge dac_clk) begin
    if (dac_fifo_reset_s == 1'b1) begin
      dac_mem_waddr <= 'b0;
      dac_mem_waddr_m1 <= 'b0;
      dac_mem_waddr_m2 <= 'b0;
      dac_mem_laddr_toggle_m <= 4'b0;
      dac_mem_laddr <= 'b0;
      dac_dlast <= 1'b0;
      dac_dlast_m1 <= 1'b0;
      dac_dlast_m2 <= 1'b0;
    end else begin
      dac_mem_waddr_m1 <= axi_mem_waddr_g;
      dac_mem_waddr_m2 <= dac_mem_waddr_m1;
      dac_mem_waddr <= dac_mem_waddr_m2_g2b_s;
      dac_mem_laddr_toggle_m <= {dac_mem_laddr_toggle_m[2:0], axi_mem_laddr_toggle};
      dac_mem_laddr <= (dac_mem_laddr_toggle_m[2] ^ dac_mem_laddr_toggle_m[1]) ?
                                                      axi_mem_laddr_s :
                                                      dac_mem_laddr;
      dac_dlast_m1 <= axi_dlast;
      dac_dlast_m2 <= dac_dlast_m1;
      dac_dlast <= dac_dlast_m2;
    end
  end

  assign dac_laddr_wea = dac_mem_laddr_toggle_m[3] ^ dac_mem_laddr_toggle_m[2];
  assign dac_laddr_rea = ((dac_mem_raddr == dac_mem_laddr_b) &&
                          (dac_xfer_out == 1'b1)) ? 1'b1 :1'b0;


Diff Content:
- 372       dac_dlast <= 1'b0;
- 373       dac_dlast_m1 <= 1'b0;
- 374       dac_dlast_m2 <= 1'b0;
- 383       dac_dlast_m1 <= axi_dlast;
- 384       dac_dlast_m2 <= dac_dlast_m1;
- 385       dac_dlast <= dac_dlast_m2;

Clone Blocks:
