Source Block: hdl/library/axi_dmac/data_mover.v@109:151@HdlStmIf
assign s_axi_ready = (pending_burst & active) & ~transfer_abort_s;
assign m_axi_valid = (s_axi_sync_valid | transfer_abort_s) & pending_burst & active;
assign m_axi_data = transfer_abort_s == 1'b1 ? {DATA_WIDTH{1'b0}} : s_axi_data;
assign m_axi_last = last;

generate if (ALLOW_ABORT == 1) begin
  reg transfer_abort = 1'b0;
  reg req_xlast_d = 1'b0;

  /*
   * A 'last' on the external interface indicates the end of an packet. If such a
   * 'last' indicator is observed before the end of the current transfer stop
   * accepting data on the external interface and complete the current transfer by
   * writing zeros to the buffer.
   */
  always @(posedge clk) begin
    if (resetn == 1'b0) begin
      transfer_abort <= 1'b0;
    end else if (m_axi_valid == 1'b1) begin
      if (last == 1'b1 && eot == 1'b1 && req_xlast_d == 1'b1) begin
        transfer_abort <= 1'b0;
      end else if (s_axi_last == 1'b1) begin
        transfer_abort <= 1'b1;
      end
    end
  end

  always @(posedge clk) begin
    if (req_ready == 1'b1) begin
      req_xlast_d <= req_xlast;
    end
  end

  assign transfer_abort_s = transfer_abort;

end else begin
  assign transfer_abort_s = 1'b0;
end endgenerate

/*
 * If req_sync_transfer_start is set all incoming beats will be skipped until
 * one has s_axi_sync set. This will be the first beat that is passsed through.
 */

Diff Content:
+ 142   assign m_axi_partial_burst = (transfer_abort == 1'b0) && (s_axi_last == 1'b1) &&
+ 142                               !(last == 1'b1 && eot == 1'b1 && req_xlast_d == 1'b1);
+ 145   assign m_axi_partial_burst = 1'b0;

Clone Blocks:
