{"Source Block": ["hdl/library/axi_dmac/axi_dmac_burst_memory.v@280:296@HdlStmProcess", "    dest_id <= dest_id_next;\n    dest_id_reduced_msb <= dest_id_reduced_msb_next;\n  end\nend\n\nalways @(posedge dest_clk) begin\n  if (dest_reset == 1'b1) begin\n    dest_beat_counter <= 'h00;\n  end else if (dest_beat == 1'b1) begin\n    dest_beat_counter <= dest_beat_counter + 1'b1;\n  end\nend\n\naxi_dmac_resize_src #(\n  .DATA_WIDTH_SRC (DATA_WIDTH_SRC),\n  .DATA_WIDTH_MEM (DATA_WIDTH)\n) i_resize_src (\n"], "Clone Blocks": [], "Diff Content": {"Delete": [], "Add": [[291, "assign dest_burst_info_length = dest_burst_len_data[BYTES_PER_BURST_WIDTH-1:0];\n"], [291, "assign dest_burst_info_partial = dest_burst_len_data[BYTES_PER_BURST_WIDTH];\n"], [291, "assign dest_burst_info_id = dest_id;\n"], [291, "always @(posedge dest_clk) begin\n"], [291, "  dest_burst_info_write <= (dest_burst_valid == 1'b1 && dest_burst_ready == 1'b1);\n"], [291, "end\n"], [291, "generate if (DATA_WIDTH_SRC < DATA_WIDTH_DEST) begin\n"], [291, "  reg [DEST_SRC_RATIO_WIDTH-1:0] src_num_beats = {DEST_SRC_RATIO_WIDTH{1'b1}};\n"], [291, "  reg [BYTES_PER_BEAT_WIDTH_SRC-1:0] src_data_valid_bytes_d = 'h00;\n"], [291, "  reg src_data_partial_burst_d = 'h0;\n"], [291, "  always @(posedge src_clk) begin\n"], [291, "    if (src_mem_data_last == 1'b1 && src_mem_data_valid == 1'b1) begin\n"], [291, "      if (src_data_valid) begin\n"], [291, "        src_num_beats  <= {DEST_SRC_RATIO_WIDTH{1'b0}};\n"], [291, "      end else begin\n"], [291, "        src_num_beats  <= {DEST_SRC_RATIO_WIDTH{1'b1}};\n"], [291, "      end\n"], [291, "    end else if (src_data_valid) begin\n"], [291, "      src_num_beats <= src_num_beats + 1'b1;\n"], [291, "    end\n"], [291, "  end\n"], [291, "  always @(posedge src_clk) begin\n"], [291, "    if (src_data_valid == 1'b1) begin\n"], [291, "      src_data_valid_bytes_d <= src_data_valid_bytes;\n"], [291, "      src_data_partial_burst_d <= src_data_partial_burst;\n"], [291, "    end\n"], [291, "  end\n"], [291, "  assign src_burst_len_data = {src_data_partial_burst_d,\n"], [291, "                               src_beat_counter,\n"], [291, "                               src_num_beats,\n"], [291, "                               src_data_valid_bytes_d};\n"], [291, "end else begin\n"], [291, "  assign src_burst_len_data = {src_data_partial_burst,\n"], [291, "                               src_beat_counter,\n"], [291, "                               src_data_valid_bytes};\n"], [291, "end\n"], [291, "endgenerate\n"], [291, "assign dest_burst_len = dest_burst_len_data[BYTES_PER_BURST_WIDTH-1 -: BURST_LEN_WIDTH];\n"]]}}