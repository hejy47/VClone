{"Source Block": ["hdl/library/axi_dmac/request_arb.v@711:780@HdlStmIf", "assign s_axis_ready = 1'b0;\nassign s_axis_xfer_req = 1'b0;\n\nend\n\nif (DMA_TYPE_SRC == DMA_TYPE_FIFO) begin\n\nassign source_id = src_response_id;\nassign source_eot = src_eot;\n\nassign src_clk = fifo_wr_clk;\nassign src_ext_resetn = 1'b1;\n\nwire src_eot = eot_mem_src[src_response_id];\n\nassign dbg_src_address_id = 'h00;\nassign dbg_src_data_id = 'h00;\n\n/* TODO\nassign src_response_valid = 1'b0;\nassign src_response_resp = 2'b0;\n*/\n\ndmac_src_fifo_inf #(\n  .ID_WIDTH(ID_WIDTH),\n  .DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC)\n) i_src_dma_fifo (\n  .clk(fifo_wr_clk),\n  .resetn(src_resetn),\n\n  .enable(src_enable),\n  .enabled(src_enabled),\n\n  .req_valid(src_req_valid),\n  .req_ready(src_req_ready),\n  .req_last_burst_length(src_req_last_burst_length),\n  .req_sync_transfer_start(src_req_sync_transfer_start),\n\n  .request_id(src_throttled_request_id),\n  .response_id(src_response_id),\n\n  .eot(src_eot),\n\n  .bl_valid(src_bl_valid),\n  .bl_ready(src_bl_ready),\n  .measured_last_burst_length(src_burst_length),\n\n  .fifo_valid(src_valid),\n  .fifo_data(src_data),\n  .fifo_last(src_last),\n\n  .en(fifo_wr_en),\n  .din(fifo_wr_din),\n  .overflow(fifo_wr_overflow),\n  .sync(fifo_wr_sync),\n  .xfer_req(fifo_wr_xfer_req)\n);\n\nend else begin\n\nassign fifo_wr_overflow = 1'b0;\nassign fifo_wr_xfer_req = 1'b0;\n\nend endgenerate\n\nsync_bits #(\n  .NUM_OF_BITS(ID_WIDTH),\n  .ASYNC_CLK(ASYNC_CLK_REQ_SRC)\n) i_sync_src_request_id (\n"], "Clone Blocks": [["hdl/library/axi_dmac/request_arb.v@648:719", "assign m_axi_arprot = 'h00;\nassign m_axi_rready = 1'b0;\n\nend\n\nif (DMA_TYPE_SRC == DMA_TYPE_STREAM_AXI) begin\n\nassign src_clk = s_axis_aclk;\nassign src_ext_resetn = 1'b1;\n\nwire src_eot = eot_mem_src[src_response_id];\n\nassign dbg_src_address_id = 'h00;\nassign dbg_src_data_id = 'h00;\n\n/* TODO\nassign src_response_valid = 1'b0;\nassign src_response_resp = 2'b0;\n*/\n\ndmac_src_axi_stream #(\n  .ID_WIDTH(ID_WIDTH),\n  .S_AXIS_DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC)\n) i_src_dma_stream (\n  .s_axis_aclk(s_axis_aclk),\n  .s_axis_aresetn(src_resetn),\n\n  .enable(src_enable),\n  .enabled(src_enabled),\n\n  .req_valid(src_req_valid),\n  .req_ready(src_req_ready),\n  .req_last_burst_length(src_req_last_burst_length),\n  .req_sync_transfer_start(src_req_sync_transfer_start),\n  .req_xlast(src_req_xlast),\n\n  .request_id(src_throttled_request_id),\n  .response_id(src_response_id),\n\n  .eot(src_eot),\n\n  .bl_valid(src_bl_valid),\n  .bl_ready(src_bl_ready),\n  .measured_last_burst_length(src_burst_length),\n\n  .source_id(source_id),\n  .source_eot(source_eot),\n\n  .fifo_valid(src_valid),\n  .fifo_data(src_data),\n  .fifo_last(src_last),\n\n  .s_axis_valid(s_axis_valid),\n  .s_axis_ready(s_axis_ready),\n  .s_axis_data(s_axis_data),\n  .s_axis_last(s_axis_last),\n  .s_axis_user(s_axis_user),\n  .s_axis_xfer_req(s_axis_xfer_req)\n);\n\nend else begin\n\nassign s_axis_ready = 1'b0;\nassign s_axis_xfer_req = 1'b0;\n\nend\n\nif (DMA_TYPE_SRC == DMA_TYPE_FIFO) begin\n\nassign source_id = src_response_id;\nassign source_eot = src_eot;\n"]], "Diff Content": {"Delete": [], "Add": [[732, "assign src_partial_burst = 1'b0;\n"]]}}