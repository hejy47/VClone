{"Source Block": ["hdl/library/axi_dmac/request_arb.v@564:656@HdlStmIf", "assign fifo_rd_underflow = 1'b0;\nassign fifo_rd_xfer_req = 1'b0;\n\nend endgenerate\n\ngenerate if (DMA_TYPE_SRC == DMA_TYPE_MM_AXI) begin\n\nassign source_id = src_address_id;\nassign source_eot = src_address_eot;\n\nassign src_clk = m_src_axi_aclk;\nassign src_ext_resetn = m_src_axi_aresetn;\n\nwire [ID_WIDTH-1:0] src_data_id;\nwire [ID_WIDTH-1:0] src_address_id;\nwire src_address_eot = eot_mem_src[src_address_id];\n\nassign dbg_src_address_id = src_address_id;\nassign dbg_src_data_id = src_data_id;\n\ndmac_src_mm_axi #(\n  .ID_WIDTH(ID_WIDTH),\n  .DMA_DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n  .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC),\n  .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_SRC),\n  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_SRC)\n) i_src_dma_mm (\n  .m_axi_aclk(m_src_axi_aclk),\n  .m_axi_aresetn(src_resetn),\n\n  .enable(src_enable),\n  .enabled(src_enabled),\n\n  .req_valid(src_req_valid),\n  .req_ready(src_req_ready),\n  .req_address(src_req_src_address),\n  .req_last_burst_length(src_req_last_burst_length),\n\n  .bl_valid(src_bl_valid),\n  .bl_ready(src_bl_ready),\n  .measured_last_burst_length(src_burst_length),\n\n/* TODO\n  .response_valid(src_response_valid),\n  .response_ready(src_response_ready),\n  .response_resp(src_response_resp),\n*/\n\n  .request_id(src_throttled_request_id),\n  .response_id(src_response_id),\n  .address_id(src_address_id),\n  .data_id(src_data_id),\n\n  .address_eot(src_address_eot),\n\n  .fifo_valid(src_valid),\n  .fifo_data(src_data),\n  .fifo_last(src_last),\n\n  .m_axi_arready(m_axi_arready),\n  .m_axi_arvalid(m_axi_arvalid),\n  .m_axi_araddr(m_axi_araddr),\n  .m_axi_arlen(m_axi_arlen),\n  .m_axi_arsize(m_axi_arsize),\n  .m_axi_arburst(m_axi_arburst),\n  .m_axi_arprot(m_axi_arprot),\n  .m_axi_arcache(m_axi_arcache),\n\n  .m_axi_rready(m_axi_rready),\n  .m_axi_rvalid(m_axi_rvalid),\n  .m_axi_rdata(m_axi_rdata),\n  .m_axi_rlast(m_axi_rlast),\n  .m_axi_rresp(m_axi_rresp)\n);\n\nend else begin\n\nassign m_axi_arvalid = 1'b0;\nassign m_axi_araddr = 'h00;\nassign m_axi_arlen = 'h00;\nassign m_axi_arsize = 'h00;\nassign m_axi_arburst = 'h00;\nassign m_axi_arcache = 'h00;\nassign m_axi_arprot = 'h00;\nassign m_axi_rready = 1'b0;\n\nend\n\nif (DMA_TYPE_SRC == DMA_TYPE_STREAM_AXI) begin\n\nassign src_clk = s_axis_aclk;\nassign src_ext_resetn = 1'b1;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [], "Add": [[582, "assign src_partial_burst = 1'b0;\n"]]}}