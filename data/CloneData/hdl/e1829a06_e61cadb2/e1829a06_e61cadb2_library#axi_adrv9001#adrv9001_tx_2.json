{"Source Block": ["hdl/library/axi_adrv9001/adrv9001_tx.v@171:245@HdlStmIf", "\n    assign {tx_dclk_out_n_NC,\n            tx_strobe_out_n_NC} = 2'b0;\n  end\n\n  if (USE_RX_CLK_FOR_TX == 0) begin\n\n    if (FPGA_TECHNOLOGY == SEVEN_SERIES) begin\n\n      // SERDES fast clock\n      BUFIO i_dac_clk_in_gbuf (\n        .I (tx_dclk_in_s),\n        .O (dac_fast_clk));\n\n      // SERDES slow clock\n      BUFR #(.BUFR_DIVIDE(\"4\")) i_dac_div_clk_rbuf (\n        .CLR (mssi_sync),\n        .CE (1'b1),\n        .I (tx_dclk_in_s),\n        .O (dac_clk_div_s));\n\n      BUFG I_bufg (\n        .I (dac_clk_div_s),\n        .O (dac_clk_div)\n      );\n\n      assign ssi_rst = mssi_sync;\n\n    end else begin\n\n      reg mssi_sync_d = 1'b0;\n      reg mssi_sync_2d = 1'b0;\n      always @(posedge dac_fast_clk) begin\n        mssi_sync_d <= mssi_sync;\n        mssi_sync_2d <= mssi_sync_d;\n      end\n\n      BUFGCE #(\n         .CE_TYPE (\"SYNC\"),\n         .IS_CE_INVERTED (1'b0),\n         .IS_I_INVERTED (1'b0)\n      ) i_dac_clk_in_gbuf (\n         .O (dac_fast_clk),\n         .CE (1'b1),\n         .I (tx_dclk_in_s)\n      );\n\n      BUFGCE_DIV #(\n         .BUFGCE_DIVIDE (4),\n         .IS_CE_INVERTED (1'b0),\n         .IS_CLR_INVERTED (1'b0),\n         .IS_I_INVERTED (1'b0)\n      ) i_dac_div_clk_rbuf (\n         .O (dac_clk_div),\n         .CE (1'b1),\n         .CLR (mssi_sync_2d),\n         .I (tx_dclk_in_s)\n      );\n\n      assign ssi_rst = mssi_sync_2d;\n\n    end\n\n  end else begin\n\n    assign dac_fast_clk = rx_clk;\n    assign dac_clk_div = rx_clk_div;\n    assign ssi_rst = rx_ssi_rst;\n\n  end\n\n  endgenerate\n\n  assign dac_clk_ratio = 4;\n\n"], "Clone Blocks": [["hdl/library/axi_adrv9001/adrv9001_tx.v@171:245", "\n    assign {tx_dclk_out_n_NC,\n            tx_strobe_out_n_NC} = 2'b0;\n  end\n\n  if (USE_RX_CLK_FOR_TX == 0) begin\n\n    if (FPGA_TECHNOLOGY == SEVEN_SERIES) begin\n\n      // SERDES fast clock\n      BUFIO i_dac_clk_in_gbuf (\n        .I (tx_dclk_in_s),\n        .O (dac_fast_clk));\n\n      // SERDES slow clock\n      BUFR #(.BUFR_DIVIDE(\"4\")) i_dac_div_clk_rbuf (\n        .CLR (mssi_sync),\n        .CE (1'b1),\n        .I (tx_dclk_in_s),\n        .O (dac_clk_div_s));\n\n      BUFG I_bufg (\n        .I (dac_clk_div_s),\n        .O (dac_clk_div)\n      );\n\n      assign ssi_rst = mssi_sync;\n\n    end else begin\n\n      reg mssi_sync_d = 1'b0;\n      reg mssi_sync_2d = 1'b0;\n      always @(posedge dac_fast_clk) begin\n        mssi_sync_d <= mssi_sync;\n        mssi_sync_2d <= mssi_sync_d;\n      end\n\n      BUFGCE #(\n         .CE_TYPE (\"SYNC\"),\n         .IS_CE_INVERTED (1'b0),\n         .IS_I_INVERTED (1'b0)\n      ) i_dac_clk_in_gbuf (\n         .O (dac_fast_clk),\n         .CE (1'b1),\n         .I (tx_dclk_in_s)\n      );\n\n      BUFGCE_DIV #(\n         .BUFGCE_DIVIDE (4),\n         .IS_CE_INVERTED (1'b0),\n         .IS_CLR_INVERTED (1'b0),\n         .IS_I_INVERTED (1'b0)\n      ) i_dac_div_clk_rbuf (\n         .O (dac_clk_div),\n         .CE (1'b1),\n         .CLR (mssi_sync_2d),\n         .I (tx_dclk_in_s)\n      );\n\n      assign ssi_rst = mssi_sync_2d;\n\n    end\n\n  end else begin\n\n    assign dac_fast_clk = rx_clk;\n    assign dac_clk_div = rx_clk_div;\n    assign ssi_rst = rx_ssi_rst;\n\n  end\n\n  endgenerate\n\n  assign dac_clk_ratio = 4;\n\n"]], "Diff Content": {"Delete": [[197, "      assign ssi_rst = mssi_sync;\n"]], "Add": [[190, "/*\n"], [197, "*/\n"], [197, "      assign dac_clk_div = dac_clk_div_s;\n"], [197, "      xpm_cdc_async_rst\n"], [197, "      # (\n"], [197, "         .DEST_SYNC_FF    (10), // DECIMAL; range: 2-10\n"], [197, "         .INIT_SYNC_FF    ( 0), // DECIMAL; 0=disable simulation init values, 1=enable simulation init values\n"], [197, "         .RST_ACTIVE_HIGH ( 1)  // DECIMAL; 0=active low reset, 1=active high reset\n"], [197, "        )\n"], [197, "      rst_syncro\n"], [197, "      (\n"], [197, "       .src_arst (mssi_sync  ),\n"], [197, "       .dest_clk (dac_clk_div),\n"], [197, "       .dest_arst(ssi_rst    )\n"], [197, "      );\n"]]}}