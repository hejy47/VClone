Source Block: hdl/library/axi_adrv9001/adrv9001_rx.v@187:274@HdlStmIf

  end
  endgenerate

  generate
  if (FPGA_TECHNOLOGY == SEVEN_SERIES) begin

    BUFIO i_clk_buf (
      .I (clk_in_s),
      .O (adc_clk_in_fast));

    BUFR #(.BUFR_DIVIDE("4")) i_div_clk_buf (
      .CLR (mssi_sync),
      .CE (1'b1),
      .I (clk_in_s),
      .O (adc_clk_div_s));

    BUFG I_bufg (
      .I (adc_clk_div_s),
      .O (adc_clk_div)
    );
    assign ssi_rst = mssi_sync;

  end else begin
    wire adc_clk_in;

    reg mssi_sync_d = 1'b0;
    reg mssi_sync_2d = 1'b0;
    reg mssi_sync_3d = 1'b0;
    reg mssi_sync_edge = 1'b0;
    reg mssi_sync_out_neg = 1'b0;
    always @(posedge adc_clk_in) begin
      mssi_sync_d <= mssi_sync;
      mssi_sync_2d <= mssi_sync_d;
      mssi_sync_3d <= mssi_sync_2d;
      mssi_sync_edge <= mssi_sync_2d & ~mssi_sync_3d;
    end
    always @(negedge adc_clk_in) begin
      mssi_sync_out_neg <= mssi_sync_edge;
    end

    assign ssi_sync_out = mssi_sync_out_neg;

    reg ssi_rst_pos;
    always @(posedge adc_clk_in) begin
      ssi_rst_pos <= ssi_sync_in;
    end

    BUFGCE #(
       .CE_TYPE ("SYNC"),
       .IS_CE_INVERTED (1'b0),
       .IS_I_INVERTED (1'b0)
    ) i_clk_buf (
       .O (adc_clk_in),
       .CE (1'b1),
       .I (clk_in_s)
    );

    BUFGCE #(
       .CE_TYPE ("SYNC"),
       .IS_CE_INVERTED (1'b0),
       .IS_I_INVERTED (1'b0)
    ) i_clk_buf_fast (
       .O (adc_clk_in_fast),
       .CE (1'b1),
       .I (adc_clk_in)
    );

    BUFGCE_DIV #(
       .BUFGCE_DIVIDE (4),
       .IS_CE_INVERTED (1'b0),
       .IS_CLR_INVERTED (1'b0),
       .IS_I_INVERTED (1'b0)
    ) i_div_clk_buf (
       .O (adc_clk_div),
       .CE (1'b1),
       .CLR (ssi_rst),
       .I (adc_clk_in)
    );

    assign ssi_rst = ssi_rst_pos;

  end

  endgenerate

  assign adc_clk = adc_clk_in_fast;
  assign adc_valid = ~adc_rst;

Diff Content:
- 208     assign ssi_rst = mssi_sync;
+ 202     /*
+ 208     */
+ 208     assign adc_clk_div = adc_clk_div_s;
+ 208     xpm_cdc_async_rst
+ 208     # (
+ 208        .DEST_SYNC_FF    (10), // DECIMAL; range: 2-10
+ 208        .INIT_SYNC_FF    ( 0), // DECIMAL; 0=disable simulation init values, 1=enable simulation init values
+ 208        .RST_ACTIVE_HIGH ( 1)  // DECIMAL; 0=active low reset, 1=active high reset
+ 208       )
+ 208     rst_syncro
+ 208     (
+ 208      .src_arst (mssi_sync  ),
+ 208      .dest_clk (adc_clk_div),
+ 208      .dest_arst(ssi_rst    )
+ 208     );

Clone Blocks:
Clone Blocks 1:
hdl/library/axi_adrv9001/adrv9001_rx.v@187:274

  end
  endgenerate

  generate
  if (FPGA_TECHNOLOGY == SEVEN_SERIES) begin

    BUFIO i_clk_buf (
      .I (clk_in_s),
      .O (adc_clk_in_fast));

    BUFR #(.BUFR_DIVIDE("4")) i_div_clk_buf (
      .CLR (mssi_sync),
      .CE (1'b1),
      .I (clk_in_s),
      .O (adc_clk_div_s));

    BUFG I_bufg (
      .I (adc_clk_div_s),
      .O (adc_clk_div)
    );
    assign ssi_rst = mssi_sync;

  end else begin
    wire adc_clk_in;

    reg mssi_sync_d = 1'b0;
    reg mssi_sync_2d = 1'b0;
    reg mssi_sync_3d = 1'b0;
    reg mssi_sync_edge = 1'b0;
    reg mssi_sync_out_neg = 1'b0;
    always @(posedge adc_clk_in) begin
      mssi_sync_d <= mssi_sync;
      mssi_sync_2d <= mssi_sync_d;
      mssi_sync_3d <= mssi_sync_2d;
      mssi_sync_edge <= mssi_sync_2d & ~mssi_sync_3d;
    end
    always @(negedge adc_clk_in) begin
      mssi_sync_out_neg <= mssi_sync_edge;
    end

    assign ssi_sync_out = mssi_sync_out_neg;

    reg ssi_rst_pos;
    always @(posedge adc_clk_in) begin
      ssi_rst_pos <= ssi_sync_in;
    end

    BUFGCE #(
       .CE_TYPE ("SYNC"),
       .IS_CE_INVERTED (1'b0),
       .IS_I_INVERTED (1'b0)
    ) i_clk_buf (
       .O (adc_clk_in),
       .CE (1'b1),
       .I (clk_in_s)
    );

    BUFGCE #(
       .CE_TYPE ("SYNC"),
       .IS_CE_INVERTED (1'b0),
       .IS_I_INVERTED (1'b0)
    ) i_clk_buf_fast (
       .O (adc_clk_in_fast),
       .CE (1'b1),
       .I (adc_clk_in)
    );

    BUFGCE_DIV #(
       .BUFGCE_DIVIDE (4),
       .IS_CE_INVERTED (1'b0),
       .IS_CLR_INVERTED (1'b0),
       .IS_I_INVERTED (1'b0)
    ) i_div_clk_buf (
       .O (adc_clk_div),
       .CE (1'b1),
       .CLR (ssi_rst),
       .I (adc_clk_in)
    );

    assign ssi_rst = ssi_rst_pos;

  end

  endgenerate

  assign adc_clk = adc_clk_in_fast;
  assign adc_valid = ~adc_rst;

