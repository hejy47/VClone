{"Source Block": ["hdl/library/xilinx/common/ad_serdes_in.v@214:314@HdlStmIf", "      end /* g_data */\n\n    end\n  endgenerate\n\n  generate if (FPGA_TECHNOLOGY == ULTRASCALE || FPGA_TECHNOLOGY == ULTRASCALE_PLUS) begin\n\n\n    for (l_inst = 0; l_inst <= (DATA_WIDTH-1); l_inst = l_inst + 1) begin: g_data\n\n    wire   div_dld;\n    reg [4:0] vtc_cnt = {5{1'b1}};\n\n    sync_event  sync_load(\n      .in_clk (up_clk),\n      .in_event (up_dld[l_inst]),\n      .out_clk (div_clk),\n      .out_event (div_dld)\n    );\n\n    (* IODELAY_GROUP = IODELAY_GROUP *)\n    IDELAYE3 #(\n       .CASCADE (\"NONE\"),          // Cascade setting (MASTER, NONE, SLAVE_END, SLAVE_MIDDLE)\n       .DELAY_FORMAT (\"TIME\"),     // Units of the DELAY_VALUE (COUNT, TIME)\n       .DELAY_SRC (\"IDATAIN\"),     // Delay input (DATAIN, IDATAIN)\n       .DELAY_TYPE (\"VAR_LOAD\"),   // Set the type of tap delay line (FIXED, VARIABLE, VAR_LOAD)\n       .DELAY_VALUE (0),           // Input delay value setting\n       .IS_CLK_INVERTED (1'b0),    // Optional inversion for CLK\n       .IS_RST_INVERTED (1'b0),    // Optional inversion for RST\n       .REFCLK_FREQUENCY (500.0),  // IDELAYCTRL clock input frequency in MHz (200.0-2667.0)\n       .SIM_DEVICE (SIM_DEVICE),   // Set the device version (ULTRASCALE, ULTRASCALE_PLUS, ULTRASCALE_PLUS_ES1,\n                                   // ULTRASCALE_PLUS_ES2)\n       .UPDATE_MODE (\"ASYNC\")      // Determines when updates to the delay will take effect (ASYNC, MANUAL, SYNC)\n    )\n    i_idelay(\n       .CASC_OUT (),                                       // 1-bit output: Cascade delay output to ODELAY input cascade\n       .CNTVALUEOUT (up_drdata[DRP_WIDTH*l_inst +: DRP_WIDTH]), // 9-bit output: Counter value output\n       .DATAOUT (data_in_idelay_s[l_inst]),                // 1-bit output: Delayed data output\n       .CASC_IN (1'b0),                                    // 1-bit input: Cascade delay input from slave ODELAY CASCADE_OUT\n       .CASC_RETURN (1'b0),                                // 1-bit input: Cascade delay returning from slave ODELAY DATAOUT\n       .CE (1'b0),                                         // 1-bit input: Active high enable increment/decrement input\n       .CLK (div_clk),                                     // 1-bit input: Clock input\n       .CNTVALUEIN (up_dwdata[DRP_WIDTH*l_inst +: DRP_WIDTH]),   // 9-bit input: Counter value input\n       .DATAIN (1'b0),                                     // 1-bit input: Data input from the logic\n       .EN_VTC (en_vtc),                                   // 1-bit input: Keep delay constant over VT\n       .IDATAIN (data_in_ibuf_s[l_inst]),                  // 1-bit input: Data input from the IOBUF\n       .INC (1'b0),                                        // 1-bit input: Increment / Decrement tap delay input\n       .LOAD (ld_cnt),                                     // 1-bit input: Load DELAY_VALUE input\n       .RST (rst)                                          // 1-bit input: Asynchronous Reset to the DELAY_VALUE\n    );\n\n\n    always @(posedge div_clk) begin\n      if (div_dld) begin\n        vtc_cnt <= 'h0;\n      end else if (~(&vtc_cnt)) begin\n        vtc_cnt <= vtc_cnt + 1;\n      end\n    end\n\n    assign en_vtc = &vtc_cnt;\n    assign ld_cnt = ~vtc_cnt[4] & (&vtc_cnt[3:0]);\n\n    ISERDESE3 #(\n       .DATA_WIDTH (8),            // Parallel data width (4,8)\n       .FIFO_ENABLE (\"FALSE\"),     // Enables the use of the FIFO\n       .FIFO_SYNC_MODE (\"FALSE\"),  // Enables the use of internal 2-stage synchronizers on the FIFO\n       .IS_CLK_B_INVERTED (1'b0),  // Optional inversion for CLK_B\n       .IS_CLK_INVERTED (1'b0),    // Optional inversion for CLK\n       .IS_RST_INVERTED (1'b0),    // Optional inversion for RST\n       .SIM_DEVICE (SIM_DEVICE)    // Set the device version (ULTRASCALE, ULTRASCALE_PLUS, ULTRASCALE_PLUS_ES1,\n                                   // ULTRASCALE_PLUS_ES2)\n    )\n    i_iserdes(\n       .FIFO_EMPTY (),                // 1-bit output: FIFO empty flag\n       .INTERNAL_DIVCLK (),           // 1-bit output: Internally divided down clock used when FIFO is\n                                      // disabled (do not connect)\n\n       .Q ({data_s0[l_inst],\n            data_s1[l_inst],\n            data_s2[l_inst],\n            data_s3[l_inst],\n            data_s4[l_inst],\n            data_s5[l_inst],\n            data_s6[l_inst],\n            data_s7[l_inst]}),        // 8-bit registered output\n       .CLK (clk),                    // 1-bit input: High-speed clock\n       .CLKDIV (div_clk),             // 1-bit input: Divided Clock\n       .CLK_B (~clk),                 // 1-bit input: Inversion of High-speed clock CLK\n       .D (data_in_idelay_s[l_inst]), // 1-bit input: Serial Data Input\n       .FIFO_RD_CLK (div_clk),        // 1-bit input: FIFO read clock\n       .FIFO_RD_EN (1'b1),            // 1-bit input: Enables reading the FIFO when asserted\n       .RST (rst)                     // 1-bit input: Asynchronous Reset\n    );\n   end\n  end\n  endgenerate\n\nendmodule\n\n// ***************************************************************************\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[306, "       .RST (rst)                     // 1-bit input: Asynchronous Reset\n"]], "Add": [[306, "       .RST (serdes_rst)             // 1-bit input: Asynchronous Reset\n"]]}}