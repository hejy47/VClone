Source Block: hdl/library/util_cpack/util_cpack_dsf.v@120:198@HdlStmIf
  endgenerate

  // data store & forward

  generate
  if (P_CNT > CH_ICNT) begin
  assign adc_data_s[(M_WIDTH-1):I_WIDTH] = 'd0;
  assign adc_data_s[(I_WIDTH-1):0] = adc_data;

  always @(posedge adc_clk) begin
    if (adc_valid == 1'b1) begin
      if (adc_samples_int >= CH_DCNT) begin
        adc_samples_int <= adc_samples_int - CH_DCNT;
      end else begin
        adc_samples_int <= adc_samples_int + CH_ICNT;
      end
      adc_data_int <= {adc_data_s[(I_WIDTH-1):0],
        adc_data_int[(M_WIDTH-1):I_WIDTH]};
    end
  end

  always @(posedge adc_clk) begin
    adc_dsf_enable <= adc_enable;
    if (adc_samples_int >= CH_DCNT) begin
      adc_dsf_valid_int <= adc_valid;
    end else begin
      adc_dsf_valid_int <= 1'b0;
    end
    if (adc_dsf_sync_int == 1'b1) begin
      if (adc_dsf_valid_int == 1'b1) begin
        adc_dsf_sync_int <= 1'b0;
      end
    end else begin
      if (adc_samples_int == 3'd0) begin
        adc_dsf_sync_int <= 1'b1;
      end
    end
  end

  always @(posedge adc_clk) begin
    if (adc_valid == 1'b1) begin
      case (adc_samples_int)
        3'b111:  adc_dsf_data_int <= {adc_data_s[((CH_DW*1)-1):0],
                    adc_data_int[((CH_DW*8)-1):(CH_DW*1)]};
        3'b110:  adc_dsf_data_int <= {adc_data_s[((CH_DW*2)-1):0],
                    adc_data_int[((CH_DW*8)-1):(CH_DW*2)]};
        3'b101:  adc_dsf_data_int <= {adc_data_s[((CH_DW*3)-1):0],
                    adc_data_int[((CH_DW*8)-1):(CH_DW*3)]};
        3'b100:  adc_dsf_data_int <= {adc_data_s[((CH_DW*4)-1):0],
                    adc_data_int[((CH_DW*8)-1):(CH_DW*4)]};
        3'b011:  adc_dsf_data_int <= {adc_data_s[((CH_DW*5)-1):0],
                    adc_data_int[((CH_DW*8)-1):(CH_DW*5)]};
        3'b010:  adc_dsf_data_int <= {adc_data_s[((CH_DW*6)-1):0],
                    adc_data_int[((CH_DW*8)-1):(CH_DW*6)]};
        3'b001:  adc_dsf_data_int <= {adc_data_s[((CH_DW*7)-1):0],
                    adc_data_int[((CH_DW*8)-1):(CH_DW*7)]};
        3'b000:  adc_dsf_data_int <= adc_data_s;
        default: adc_dsf_data_int <= 'd0;
      endcase
    end
  end

  always @(posedge adc_clk) begin
    if (adc_enable == 1'b1) begin
      adc_dsf_valid <= adc_dsf_valid_int;
      adc_dsf_sync <= adc_dsf_sync_int;
      adc_dsf_data <= adc_dsf_data_int[(P_WIDTH-1):0];
    end else begin
      adc_dsf_valid <= 'b0;
      adc_dsf_sync <= 'b0;
      adc_dsf_data <= 'd0;
    end
  end
  end
  endgenerate

endmodule

// ***************************************************************************

Diff Content:
- 125   if (P_CNT > CH_ICNT) begin
- 134         adc_samples_int <= adc_samples_int + CH_ICNT;
- 162         3'b111:  adc_dsf_data_int <= {adc_data_s[((CH_DW*1)-1):0],
- 163                     adc_data_int[((CH_DW*8)-1):(CH_DW*1)]};
- 164         3'b110:  adc_dsf_data_int <= {adc_data_s[((CH_DW*2)-1):0],
- 165                     adc_data_int[((CH_DW*8)-1):(CH_DW*2)]};
- 166         3'b101:  adc_dsf_data_int <= {adc_data_s[((CH_DW*3)-1):0],
- 167                     adc_data_int[((CH_DW*8)-1):(CH_DW*3)]};
- 168         3'b100:  adc_dsf_data_int <= {adc_data_s[((CH_DW*4)-1):0],
- 169                     adc_data_int[((CH_DW*8)-1):(CH_DW*4)]};
- 170         3'b011:  adc_dsf_data_int <= {adc_data_s[((CH_DW*5)-1):0],
- 171                     adc_data_int[((CH_DW*8)-1):(CH_DW*5)]};
- 172         3'b010:  adc_dsf_data_int <= {adc_data_s[((CH_DW*6)-1):0],
- 173                     adc_data_int[((CH_DW*8)-1):(CH_DW*6)]};
- 174         3'b001:  adc_dsf_data_int <= {adc_data_s[((CH_DW*7)-1):0],
- 175                     adc_data_int[((CH_DW*8)-1):(CH_DW*7)]};
+ 125   if (NUM_OF_CHANNELS_P > NUM_OF_CHANNELS_I) begin
+ 134         adc_samples_int <= adc_samples_int + NUM_OF_CHANNELS_I;
+ 175         3'b111:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*1)-1):0],
+ 175                     adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*1)]};
+ 175         3'b110:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*2)-1):0],
+ 175                     adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*2)]};
+ 175         3'b101:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*3)-1):0],
+ 175                     adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*3)]};
+ 175         3'b100:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*4)-1):0],
+ 175                     adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*4)]};
+ 175         3'b011:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*5)-1):0],
+ 175                     adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*5)]};
+ 175         3'b010:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*6)-1):0],
+ 175                     adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*6)]};
+ 175         3'b001:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*7)-1):0],
+ 175                     adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*7)]};

Clone Blocks:
