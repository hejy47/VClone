Source Block: hdl/library/axi_jesd_gt/axi_jesd_gt.v@492:506@HdlStmIf
  BUFG i_bufg_rx_clk (
    .I (rx_out_clk[0]),
    .O (rx_clk_g));
  end

  if (PCORE_DEVICE_TYPE == 0) begin
  BUFG i_bufg_tx_clk (
    .I (tx_out_clk[0]),
    .O (tx_clk_g));
  end

  if (PCORE_DEVICE_TYPE == 1) begin
  BUFG_GT i_bufg_rx_clk (
    .I (rx_out_clk[0]),
    .O (rx_clk_g));

Diff Content:
- 497   if (PCORE_DEVICE_TYPE == 0) begin
- 498   BUFG i_bufg_tx_clk (
- 499     .I (tx_out_clk[0]),
- 500     .O (tx_clk_g));
+ 500   assign cpll_rst_m[0] = cpll_rst_m_0;
+ 500   assign cpll_ref_clk_in[0] = cpll_ref_clk_in_0; 
+ 500   assign cpll_rst_m[1] = cpll_rst_m_1;
+ 500   assign cpll_ref_clk_in[1] = cpll_ref_clk_in_1;
+ 500   assign cpll_rst_m[2] = cpll_rst_m_2;
+ 500   assign cpll_ref_clk_in[2] = cpll_ref_clk_in_2;
+ 500   assign cpll_rst_m[3] = cpll_rst_m_3;
+ 500   assign cpll_ref_clk_in[3] = cpll_ref_clk_in_3;
+ 500   assign cpll_rst_m[4] = cpll_rst_m_4;
+ 500   assign cpll_ref_clk_in[4] = cpll_ref_clk_in_4;
+ 500   assign cpll_rst_m[5] = cpll_rst_m_5;
+ 500   assign cpll_ref_clk_in[5] = cpll_ref_clk_in_5;
+ 500   assign cpll_rst_m[6] = cpll_rst_m_6;
+ 500   assign cpll_ref_clk_in[6] = cpll_ref_clk_in_6;
+ 500   assign cpll_rst_m[7] = cpll_rst_m_7;
+ 500   assign cpll_ref_clk_in[7] = cpll_ref_clk_in_7;
+ 500   assign rx_out_clk_0 = rx_out_clk[0];
+ 500   assign rx_rst_0 = rx_rst[0];
+ 500   assign rx_sof_0 = rx_sof[0];
+ 500   assign rx_data_0 = rx_data[((32*0)+31):(32*0)];
+ 500   assign rx_sync_0 = rx_sync[0];
+ 500   assign rx_gt_charisk_0 = rx_gt_charisk[((4*0)+3):(4*0)];
+ 500   assign rx_gt_disperr_0 = rx_gt_disperr[((4*0)+3):(4*0)];
+ 500   assign rx_gt_notintable_0 = rx_gt_notintable[((4*0)+3):(4*0)];
+ 500   assign rx_gt_data_0 = rx_gt_data[((32*0)+31):(32*0)];
+ 500   assign rx_gt_ilas_f_0 = rx_gt_ilas_f[((4*0)+3):(4*0)];
+ 500   assign rx_gt_ilas_q_0 = rx_gt_ilas_q[((4*0)+3):(4*0)];
+ 500   assign rx_gt_ilas_a_0 = rx_gt_ilas_a[((4*0)+3):(4*0)];
+ 500   assign rx_gt_ilas_r_0 = rx_gt_ilas_r[((4*0)+3):(4*0)];
+ 500   assign rx_gt_cgs_k_0 = rx_gt_cgs_k[((4*0)+3):(4*0)];
+ 500   assign rx_ip_rst_0 = rx_ip_rst[0];
+ 500   assign rx_ip_sysref_0 = rx_ip_sysref[0];
+ 500   assign rx_ip_rst_done_0 = rx_ip_rst_done[0];
+ 500   assign rx_rst_0 = rx_rst[0];
+ 500   assign rx_pll_rst_0 = rx_pll_rst[0];
+ 500   assign rx_gt_rst_0 = rx_gt_rst[0];
+ 500   assign rx_pll_locked_0 = rx_pll_locked[0];
+ 500   assign rx_user_ready_0 = rx_user_ready[0];
+ 500   assign rx_rst_done_0 = rx_rst_done[0];
+ 500   assign rx_p[0] = rx_0_p;
+ 500   assign rx_n[0] = rx_0_n;
+ 500   assign rx_clk[0] = rx_clk_0;
+ 500   assign rx_sysref[0] = rx_sysref_0;
+ 500   assign rx_gt_comma_align_enb[0] = rx_gt_comma_align_enb_0;
+ 500   assign rx_ip_sof[((4*0)+3):(4*0)] = rx_ip_sof_0;
+ 500   assign rx_ip_data[((32*0)+31):(32*0)] = rx_ip_data_0;
+ 500   assign rx_ip_sync[0] = rx_ip_sync_0;
+ 500   assign rx_rst_m[0] = rx_rst_m_0;
+ 500   assign rx_gt_rst_m[0] = rx_gt_rst_m_0;
+ 500   assign rx_pll_locked_m[0] = rx_pll_locked_m_0;
+ 500   assign rx_user_ready_m[0] = rx_user_ready_m_0;
+ 500   assign rx_rst_done_m[0] = rx_rst_done_m_0;
+ 500   assign rx_out_clk_1 = rx_out_clk[1];
+ 500   assign rx_rst_1 = rx_rst[1];
+ 500   assign rx_sof_1 = rx_sof[1];
+ 500   assign rx_data_1 = rx_data[((32*1)+31):(32*1)];
+ 500   assign rx_sync_1 = rx_sync[1];
+ 500   assign rx_gt_charisk_1 = rx_gt_charisk[((4*1)+3):(4*1)];
+ 500   assign rx_gt_disperr_1 = rx_gt_disperr[((4*1)+3):(4*1)];
+ 500   assign rx_gt_notintable_1 = rx_gt_notintable[((4*1)+3):(4*1)];
+ 500   assign rx_gt_data_1 = rx_gt_data[((32*1)+31):(32*1)];
+ 500   assign rx_gt_ilas_f_1 = rx_gt_ilas_f[((4*1)+3):(4*1)];
+ 500   assign rx_gt_ilas_q_1 = rx_gt_ilas_q[((4*1)+3):(4*1)];
+ 500   assign rx_gt_ilas_a_1 = rx_gt_ilas_a[((4*1)+3):(4*1)];
+ 500   assign rx_gt_ilas_r_1 = rx_gt_ilas_r[((4*1)+3):(4*1)];
+ 500   assign rx_gt_cgs_k_1 = rx_gt_cgs_k[((4*1)+3):(4*1)];
+ 500   assign rx_ip_rst_1 = rx_ip_rst[1];
+ 500   assign rx_ip_sysref_1 = rx_ip_sysref[1];
+ 500   assign rx_ip_rst_done_1 = rx_ip_rst_done[1];
+ 500   assign rx_rst_1 = rx_rst[1];
+ 500   assign rx_pll_rst_1 = rx_pll_rst[1];
+ 500   assign rx_gt_rst_1 = rx_gt_rst[1];
+ 500   assign rx_pll_locked_1 = rx_pll_locked[1];
+ 500   assign rx_user_ready_1 = rx_user_ready[1];
+ 500   assign rx_rst_done_1 = rx_rst_done[1];
+ 500   assign rx_p[1] = rx_1_p;
+ 500   assign rx_n[1] = rx_1_n;
+ 500   assign rx_clk[1] = rx_clk_1;
+ 500   assign rx_sysref[1] = rx_sysref_1;
+ 500   assign rx_gt_comma_align_enb[1] = rx_gt_comma_align_enb_1;
+ 500   assign rx_ip_sof[((4*1)+3):(4*1)] = rx_ip_sof_1;
+ 500   assign rx_ip_data[((32*1)+31):(32*1)] = rx_ip_data_1;
+ 500   assign rx_ip_sync[1] = rx_ip_sync_1;
+ 500   assign rx_rst_m[1] = rx_rst_m_1;
+ 500   assign rx_gt_rst_m[1] = rx_gt_rst_m_1;
+ 500   assign rx_pll_locked_m[1] = rx_pll_locked_m_1;
+ 500   assign rx_user_ready_m[1] = rx_user_ready_m_1;
+ 500   assign rx_rst_done_m[1] = rx_rst_done_m_1;
+ 500   assign rx_out_clk_2 = rx_out_clk[2];
+ 500   assign rx_rst_2 = rx_rst[2];
+ 500   assign rx_sof_2 = rx_sof[2];
+ 500   assign rx_data_2 = rx_data[((32*2)+31):(32*2)];
+ 500   assign rx_sync_2 = rx_sync[2];
+ 500   assign rx_gt_charisk_2 = rx_gt_charisk[((4*2)+3):(4*2)];
+ 500   assign rx_gt_disperr_2 = rx_gt_disperr[((4*2)+3):(4*2)];
+ 500   assign rx_gt_notintable_2 = rx_gt_notintable[((4*2)+3):(4*2)];
+ 500   assign rx_gt_data_2 = rx_gt_data[((32*2)+31):(32*2)];
+ 500   assign rx_gt_ilas_f_2 = rx_gt_ilas_f[((4*2)+3):(4*2)];
+ 500   assign rx_gt_ilas_q_2 = rx_gt_ilas_q[((4*2)+3):(4*2)];
+ 500   assign rx_gt_ilas_a_2 = rx_gt_ilas_a[((4*2)+3):(4*2)];
+ 500   assign rx_gt_ilas_r_2 = rx_gt_ilas_r[((4*2)+3):(4*2)];
+ 500   assign rx_gt_cgs_k_2 = rx_gt_cgs_k[((4*2)+3):(4*2)];
+ 500   assign rx_ip_rst_2 = rx_ip_rst[2];
+ 500   assign rx_ip_sysref_2 = rx_ip_sysref[2];
+ 500   assign rx_ip_rst_done_2 = rx_ip_rst_done[2];
+ 500   assign rx_rst_2 = rx_rst[2];
+ 500   assign rx_pll_rst_2 = rx_pll_rst[2];
+ 500   assign rx_gt_rst_2 = rx_gt_rst[2];
+ 500   assign rx_pll_locked_2 = rx_pll_locked[2];
+ 500   assign rx_user_ready_2 = rx_user_ready[2];
+ 500   assign rx_rst_done_2 = rx_rst_done[2];
+ 500   assign rx_p[2] = rx_2_p;
+ 500   assign rx_n[2] = rx_2_n;
+ 500   assign rx_clk[2] = rx_clk_2;
+ 500   assign rx_sysref[2] = rx_sysref_2;
+ 500   assign rx_gt_comma_align_enb[2] = rx_gt_comma_align_enb_2;
+ 500   assign rx_ip_sof[((4*2)+3):(4*2)] = rx_ip_sof_2;
+ 500   assign rx_ip_data[((32*2)+31):(32*2)] = rx_ip_data_2;
+ 500   assign rx_ip_sync[2] = rx_ip_sync_2;
+ 500   assign rx_rst_m[2] = rx_rst_m_2;
+ 500   assign rx_gt_rst_m[2] = rx_gt_rst_m_2;
+ 500   assign rx_pll_locked_m[2] = rx_pll_locked_m_2;
+ 500   assign rx_user_ready_m[2] = rx_user_ready_m_2;
+ 500   assign rx_rst_done_m[2] = rx_rst_done_m_2;
+ 500   assign rx_out_clk_3 = rx_out_clk[3];
+ 500   assign rx_rst_3 = rx_rst[3];
+ 500   assign rx_sof_3 = rx_sof[3];
+ 500   assign rx_data_3 = rx_data[((32*3)+31):(32*3)];
+ 500   assign rx_sync_3 = rx_sync[3];
+ 500   assign rx_gt_charisk_3 = rx_gt_charisk[((4*3)+3):(4*3)];
+ 500   assign rx_gt_disperr_3 = rx_gt_disperr[((4*3)+3):(4*3)];
+ 500   assign rx_gt_notintable_3 = rx_gt_notintable[((4*3)+3):(4*3)];
+ 500   assign rx_gt_data_3 = rx_gt_data[((32*3)+31):(32*3)];
+ 500   assign rx_gt_ilas_f_3 = rx_gt_ilas_f[((4*3)+3):(4*3)];
+ 500   assign rx_gt_ilas_q_3 = rx_gt_ilas_q[((4*3)+3):(4*3)];
+ 500   assign rx_gt_ilas_a_3 = rx_gt_ilas_a[((4*3)+3):(4*3)];
+ 500   assign rx_gt_ilas_r_3 = rx_gt_ilas_r[((4*3)+3):(4*3)];
+ 500   assign rx_gt_cgs_k_3 = rx_gt_cgs_k[((4*3)+3):(4*3)];
+ 500   assign rx_ip_rst_3 = rx_ip_rst[3];
+ 500   assign rx_ip_sysref_3 = rx_ip_sysref[3];
+ 500   assign rx_ip_rst_done_3 = rx_ip_rst_done[3];
+ 500   assign rx_rst_3 = rx_rst[3];
+ 500   assign rx_pll_rst_3 = rx_pll_rst[3];
+ 500   assign rx_gt_rst_3 = rx_gt_rst[3];
+ 500   assign rx_pll_locked_3 = rx_pll_locked[3];
+ 500   assign rx_user_ready_3 = rx_user_ready[3];
+ 500   assign rx_rst_done_3 = rx_rst_done[3];
+ 500   assign rx_p[3] = rx_3_p;
+ 500   assign rx_n[3] = rx_3_n;
+ 500   assign rx_clk[3] = rx_clk_3;
+ 500   assign rx_sysref[3] = rx_sysref_3;
+ 500   assign rx_gt_comma_align_enb[3] = rx_gt_comma_align_enb_3;
+ 500   assign rx_ip_sof[((4*3)+3):(4*3)] = rx_ip_sof_3;
+ 500   assign rx_ip_data[((32*3)+31):(32*3)] = rx_ip_data_3;
+ 500   assign rx_ip_sync[3] = rx_ip_sync_3;
+ 500   assign rx_rst_m[3] = rx_rst_m_3;
+ 500   assign rx_gt_rst_m[3] = rx_gt_rst_m_3;
+ 500   assign rx_pll_locked_m[3] = rx_pll_locked_m_3;
+ 500   assign rx_user_ready_m[3] = rx_user_ready_m_3;
+ 500   assign rx_rst_done_m[3] = rx_rst_done_m_3;
+ 500   assign rx_out_clk_4 = rx_out_clk[4];
+ 500   assign rx_rst_4 = rx_rst[4];
+ 500   assign rx_sof_4 = rx_sof[4];
+ 500   assign rx_data_4 = rx_data[((32*4)+31):(32*4)];
+ 500   assign rx_sync_4 = rx_sync[4];
+ 500   assign rx_gt_charisk_4 = rx_gt_charisk[((4*4)+3):(4*4)];
+ 500   assign rx_gt_disperr_4 = rx_gt_disperr[((4*4)+3):(4*4)];
+ 500   assign rx_gt_notintable_4 = rx_gt_notintable[((4*4)+3):(4*4)];
+ 500   assign rx_gt_data_4 = rx_gt_data[((32*4)+31):(32*4)];
+ 500   assign rx_gt_ilas_f_4 = rx_gt_ilas_f[((4*4)+3):(4*4)];
+ 500   assign rx_gt_ilas_q_4 = rx_gt_ilas_q[((4*4)+3):(4*4)];
+ 500   assign rx_gt_ilas_a_4 = rx_gt_ilas_a[((4*4)+3):(4*4)];
+ 500   assign rx_gt_ilas_r_4 = rx_gt_ilas_r[((4*4)+3):(4*4)];
+ 500   assign rx_gt_cgs_k_4 = rx_gt_cgs_k[((4*4)+3):(4*4)];
+ 500   assign rx_ip_rst_4 = rx_ip_rst[4];
+ 500   assign rx_ip_sysref_4 = rx_ip_sysref[4];
+ 500   assign rx_ip_rst_done_4 = rx_ip_rst_done[4];
+ 500   assign rx_rst_4 = rx_rst[4];
+ 500   assign rx_pll_rst_4 = rx_pll_rst[4];
+ 500   assign rx_gt_rst_4 = rx_gt_rst[4];
+ 500   assign rx_pll_locked_4 = rx_pll_locked[4];
+ 500   assign rx_user_ready_4 = rx_user_ready[4];
+ 500   assign rx_rst_done_4 = rx_rst_done[4];
+ 500   assign rx_p[4] = rx_4_p;
+ 500   assign rx_n[4] = rx_4_n;
+ 500   assign rx_clk[4] = rx_clk_4;
+ 500   assign rx_sysref[4] = rx_sysref_4;
+ 500   assign rx_gt_comma_align_enb[4] = rx_gt_comma_align_enb_4;
+ 500   assign rx_ip_sof[((4*4)+3):(4*4)] = rx_ip_sof_4;
+ 500   assign rx_ip_data[((32*4)+31):(32*4)] = rx_ip_data_4;
+ 500   assign rx_ip_sync[4] = rx_ip_sync_4;
+ 500   assign rx_rst_m[4] = rx_rst_m_4;
+ 500   assign rx_gt_rst_m[4] = rx_gt_rst_m_4;
+ 500   assign rx_pll_locked_m[4] = rx_pll_locked_m_4;
+ 500   assign rx_user_ready_m[4] = rx_user_ready_m_4;
+ 500   assign rx_rst_done_m[4] = rx_rst_done_m_4;
+ 500   assign rx_out_clk_5 = rx_out_clk[5];
+ 500   assign rx_rst_5 = rx_rst[5];
+ 500   assign rx_sof_5 = rx_sof[5];
+ 500   assign rx_data_5 = rx_data[((32*5)+31):(32*5)];
+ 500   assign rx_sync_5 = rx_sync[5];
+ 500   assign rx_gt_charisk_5 = rx_gt_charisk[((4*5)+3):(4*5)];
+ 500   assign rx_gt_disperr_5 = rx_gt_disperr[((4*5)+3):(4*5)];
+ 500   assign rx_gt_notintable_5 = rx_gt_notintable[((4*5)+3):(4*5)];
+ 500   assign rx_gt_data_5 = rx_gt_data[((32*5)+31):(32*5)];
+ 500   assign rx_gt_ilas_f_5 = rx_gt_ilas_f[((4*5)+3):(4*5)];
+ 500   assign rx_gt_ilas_q_5 = rx_gt_ilas_q[((4*5)+3):(4*5)];
+ 500   assign rx_gt_ilas_a_5 = rx_gt_ilas_a[((4*5)+3):(4*5)];
+ 500   assign rx_gt_ilas_r_5 = rx_gt_ilas_r[((4*5)+3):(4*5)];
+ 500   assign rx_gt_cgs_k_5 = rx_gt_cgs_k[((4*5)+3):(4*5)];
+ 500   assign rx_ip_rst_5 = rx_ip_rst[5];
+ 500   assign rx_ip_sysref_5 = rx_ip_sysref[5];
+ 500   assign rx_ip_rst_done_5 = rx_ip_rst_done[5];
+ 500   assign rx_rst_5 = rx_rst[5];
+ 500   assign rx_pll_rst_5 = rx_pll_rst[5];
+ 500   assign rx_gt_rst_5 = rx_gt_rst[5];
+ 500   assign rx_pll_locked_5 = rx_pll_locked[5];
+ 500   assign rx_user_ready_5 = rx_user_ready[5];
+ 500   assign rx_rst_done_5 = rx_rst_done[5];
+ 500   assign rx_p[5] = rx_5_p;
+ 500   assign rx_n[5] = rx_5_n;
+ 500   assign rx_clk[5] = rx_clk_5;
+ 500   assign rx_sysref[5] = rx_sysref_5;
+ 500   assign rx_gt_comma_align_enb[5] = rx_gt_comma_align_enb_5;
+ 500   assign rx_ip_sof[((4*5)+3):(4*5)] = rx_ip_sof_5;
+ 500   assign rx_ip_data[((32*5)+31):(32*5)] = rx_ip_data_5;
+ 500   assign rx_ip_sync[5] = rx_ip_sync_5;
+ 500   assign rx_rst_m[5] = rx_rst_m_5;
+ 500   assign rx_gt_rst_m[5] = rx_gt_rst_m_5;
+ 500   assign rx_pll_locked_m[5] = rx_pll_locked_m_5;
+ 500   assign rx_user_ready_m[5] = rx_user_ready_m_5;
+ 500   assign rx_rst_done_m[5] = rx_rst_done_m_5;
+ 500   assign rx_out_clk_6 = rx_out_clk[6];
+ 500   assign rx_rst_6 = rx_rst[6];
+ 500   assign rx_sof_6 = rx_sof[6];
+ 500   assign rx_data_6 = rx_data[((32*6)+31):(32*6)];
+ 500   assign rx_sync_6 = rx_sync[6];
+ 500   assign rx_gt_charisk_6 = rx_gt_charisk[((4*6)+3):(4*6)];
+ 500   assign rx_gt_disperr_6 = rx_gt_disperr[((4*6)+3):(4*6)];
+ 500   assign rx_gt_notintable_6 = rx_gt_notintable[((4*6)+3):(4*6)];
+ 500   assign rx_gt_data_6 = rx_gt_data[((32*6)+31):(32*6)];
+ 500   assign rx_gt_ilas_f_6 = rx_gt_ilas_f[((4*6)+3):(4*6)];
+ 500   assign rx_gt_ilas_q_6 = rx_gt_ilas_q[((4*6)+3):(4*6)];
+ 500   assign rx_gt_ilas_a_6 = rx_gt_ilas_a[((4*6)+3):(4*6)];
+ 500   assign rx_gt_ilas_r_6 = rx_gt_ilas_r[((4*6)+3):(4*6)];
+ 500   assign rx_gt_cgs_k_6 = rx_gt_cgs_k[((4*6)+3):(4*6)];
+ 500   assign rx_ip_rst_6 = rx_ip_rst[6];
+ 500   assign rx_ip_sysref_6 = rx_ip_sysref[6];
+ 500   assign rx_ip_rst_done_6 = rx_ip_rst_done[6];
+ 500   assign rx_rst_6 = rx_rst[6];
+ 500   assign rx_pll_rst_6 = rx_pll_rst[6];
+ 500   assign rx_gt_rst_6 = rx_gt_rst[6];
+ 500   assign rx_pll_locked_6 = rx_pll_locked[6];
+ 500   assign rx_user_ready_6 = rx_user_ready[6];
+ 500   assign rx_rst_done_6 = rx_rst_done[6];
+ 500   assign rx_p[6] = rx_6_p;
+ 500   assign rx_n[6] = rx_6_n;
+ 500   assign rx_clk[6] = rx_clk_6;
+ 500   assign rx_sysref[6] = rx_sysref_6;
+ 500   assign rx_gt_comma_align_enb[6] = rx_gt_comma_align_enb_6;
+ 500   assign rx_ip_sof[((4*6)+3):(4*6)] = rx_ip_sof_6;
+ 500   assign rx_ip_data[((32*6)+31):(32*6)] = rx_ip_data_6;
+ 500   assign rx_ip_sync[6] = rx_ip_sync_6;
+ 500   assign rx_rst_m[6] = rx_rst_m_6;
+ 500   assign rx_gt_rst_m[6] = rx_gt_rst_m_6;
+ 500   assign rx_pll_locked_m[6] = rx_pll_locked_m_6;
+ 500   assign rx_user_ready_m[6] = rx_user_ready_m_6;
+ 500   assign rx_rst_done_m[6] = rx_rst_done_m_6;
+ 500   assign rx_out_clk_7 = rx_out_clk[7];
+ 500   assign rx_rst_7 = rx_rst[7];
+ 500   assign rx_sof_7 = rx_sof[7];
+ 500   assign rx_data_7 = rx_data[((32*7)+31):(32*7)];
+ 500   assign rx_sync_7 = rx_sync[7];
+ 500   assign rx_gt_charisk_7 = rx_gt_charisk[((4*7)+3):(4*7)];
+ 500   assign rx_gt_disperr_7 = rx_gt_disperr[((4*7)+3):(4*7)];
+ 500   assign rx_gt_notintable_7 = rx_gt_notintable[((4*7)+3):(4*7)];
+ 500   assign rx_gt_data_7 = rx_gt_data[((32*7)+31):(32*7)];
+ 500   assign rx_gt_ilas_f_7 = rx_gt_ilas_f[((4*7)+3):(4*7)];
+ 500   assign rx_gt_ilas_q_7 = rx_gt_ilas_q[((4*7)+3):(4*7)];
+ 500   assign rx_gt_ilas_a_7 = rx_gt_ilas_a[((4*7)+3):(4*7)];
+ 500   assign rx_gt_ilas_r_7 = rx_gt_ilas_r[((4*7)+3):(4*7)];
+ 500   assign rx_gt_cgs_k_7 = rx_gt_cgs_k[((4*7)+3):(4*7)];
+ 500   assign rx_ip_rst_7 = rx_ip_rst[7];
+ 500   assign rx_ip_sysref_7 = rx_ip_sysref[7];
+ 500   assign rx_ip_rst_done_7 = rx_ip_rst_done[7];
+ 500   assign rx_rst_7 = rx_rst[7];
+ 500   assign rx_pll_rst_7 = rx_pll_rst[7];
+ 500   assign rx_gt_rst_7 = rx_gt_rst[7];
+ 500   assign rx_pll_locked_7 = rx_pll_locked[7];
+ 500   assign rx_user_ready_7 = rx_user_ready[7];
+ 500   assign rx_rst_done_7 = rx_rst_done[7];
+ 500   assign rx_p[7] = rx_7_p;
+ 500   assign rx_n[7] = rx_7_n;
+ 500   assign rx_clk[7] = rx_clk_7;
+ 500   assign rx_sysref[7] = rx_sysref_7;
+ 500   assign rx_gt_comma_align_enb[7] = rx_gt_comma_align_enb_7;
+ 500   assign rx_ip_sof[((4*7)+3):(4*7)] = rx_ip_sof_7;
+ 500   assign rx_ip_data[((32*7)+31):(32*7)] = rx_ip_data_7;
+ 500   assign rx_ip_sync[7] = rx_ip_sync_7;
+ 500   assign rx_rst_m[7] = rx_rst_m_7;
+ 500   assign rx_gt_rst_m[7] = rx_gt_rst_m_7;
+ 500   assign rx_pll_locked_m[7] = rx_pll_locked_m_7;
+ 500   assign rx_user_ready_m[7] = rx_user_ready_m_7;
+ 500   assign rx_rst_done_m[7] = rx_rst_done_m_7;
+ 500   assign tx_0_p = tx_p[0];
+ 500   assign tx_0_n = tx_n[0];
+ 500   assign tx_out_clk_0 = tx_out_clk[0];
+ 500   assign tx_rst_0 = tx_rst[0];
+ 500   assign tx_ip_rst_0 = tx_ip_rst[0];
+ 500   assign tx_ip_data_0 = tx_ip_data[((32*0)+31):(32*0)];
+ 500   assign tx_ip_sysref_0 = tx_ip_sysref[0];
+ 500   assign tx_ip_sync_0 = tx_ip_sync[0];
+ 500   assign tx_ip_rst_done_0 = tx_ip_rst_done[0];
+ 500   assign tx_rst_0 = tx_rst[0];
+ 500   assign tx_pll_rst_0 = tx_pll_rst[0];
+ 500   assign tx_gt_rst_0 = tx_gt_rst[0];
+ 500   assign tx_pll_locked_0 = tx_pll_locked[0];
+ 500   assign tx_user_ready_0 = tx_user_ready[0];
+ 500   assign tx_rst_done_0 = tx_rst_done[0];
+ 500   assign tx_clk[0] = tx_clk_0;
+ 500   assign tx_data[((32*0)+31):(32*0)] = tx_data_0;
+ 500   assign tx_sysref[0] = tx_sysref_0;
+ 500   assign tx_sync[0] = tx_sync_0;
+ 500   assign tx_gt_charisk[((4*0)+3):(4*0)] = tx_gt_charisk_0;
+ 500   assign tx_gt_data[((32*0)+31):(32*0)] = tx_gt_data_0;
+ 500   assign tx_rst_m[0] = tx_rst_m_0;
+ 500   assign tx_gt_rst_m[0] = tx_gt_rst_m_0;
+ 500   assign tx_pll_locked_m[0] = tx_pll_locked_m_0;
+ 500   assign tx_user_ready_m[0] = tx_user_ready_m_0;
+ 500   assign tx_rst_done_m[0] = tx_rst_done_m_0;
+ 500   assign tx_1_p = tx_p[1];
+ 500   assign tx_1_n = tx_n[1];
+ 500   assign tx_out_clk_1 = tx_out_clk[1];
+ 500   assign tx_rst_1 = tx_rst[1];
+ 500   assign tx_ip_rst_1 = tx_ip_rst[1];
+ 500   assign tx_ip_data_1 = tx_ip_data[((32*1)+31):(32*1)];
+ 500   assign tx_ip_sysref_1 = tx_ip_sysref[1];
+ 500   assign tx_ip_sync_1 = tx_ip_sync[1];
+ 500   assign tx_ip_rst_done_1 = tx_ip_rst_done[1];
+ 500   assign tx_rst_1 = tx_rst[1];
+ 500   assign tx_pll_rst_1 = tx_pll_rst[1];
+ 500   assign tx_gt_rst_1 = tx_gt_rst[1];
+ 500   assign tx_pll_locked_1 = tx_pll_locked[1];
+ 500   assign tx_user_ready_1 = tx_user_ready[1];
+ 500   assign tx_rst_done_1 = tx_rst_done[1];
+ 500   assign tx_clk[1] = tx_clk_1;
+ 500   assign tx_data[((32*1)+31):(32*1)] = tx_data_1;
+ 500   assign tx_sysref[1] = tx_sysref_1;
+ 500   assign tx_sync[1] = tx_sync_1;
+ 500   assign tx_gt_charisk[((4*1)+3):(4*1)] = tx_gt_charisk_1;
+ 500   assign tx_gt_data[((32*1)+31):(32*1)] = tx_gt_data_1;
+ 500   assign tx_rst_m[1] = tx_rst_m_1;
+ 500   assign tx_gt_rst_m[1] = tx_gt_rst_m_1;
+ 500   assign tx_pll_locked_m[1] = tx_pll_locked_m_1;
+ 500   assign tx_user_ready_m[1] = tx_user_ready_m_1;
+ 500   assign tx_rst_done_m[1] = tx_rst_done_m_1;
+ 500   assign tx_2_p = tx_p[2];
+ 500   assign tx_2_n = tx_n[2];
+ 500   assign tx_out_clk_2 = tx_out_clk[2];
+ 500   assign tx_rst_2 = tx_rst[2];
+ 500   assign tx_ip_rst_2 = tx_ip_rst[2];
+ 500   assign tx_ip_data_2 = tx_ip_data[((32*2)+31):(32*2)];
+ 500   assign tx_ip_sysref_2 = tx_ip_sysref[2];
+ 500   assign tx_ip_sync_2 = tx_ip_sync[2];
+ 500   assign tx_ip_rst_done_2 = tx_ip_rst_done[2];
+ 500   assign tx_rst_2 = tx_rst[2];
+ 500   assign tx_pll_rst_2 = tx_pll_rst[2];
+ 500   assign tx_gt_rst_2 = tx_gt_rst[2];
+ 500   assign tx_pll_locked_2 = tx_pll_locked[2];
+ 500   assign tx_user_ready_2 = tx_user_ready[2];
+ 500   assign tx_rst_done_2 = tx_rst_done[2];
+ 500   assign tx_clk[2] = tx_clk_2;
+ 500   assign tx_data[((32*2)+31):(32*2)] = tx_data_2;
+ 500   assign tx_sysref[2] = tx_sysref_2;
+ 500   assign tx_sync[2] = tx_sync_2;
+ 500   assign tx_gt_charisk[((4*2)+3):(4*2)] = tx_gt_charisk_2;
+ 500   assign tx_gt_data[((32*2)+31):(32*2)] = tx_gt_data_2;
+ 500   assign tx_rst_m[2] = tx_rst_m_2;
+ 500   assign tx_gt_rst_m[2] = tx_gt_rst_m_2;
+ 500   assign tx_pll_locked_m[2] = tx_pll_locked_m_2;
+ 500   assign tx_user_ready_m[2] = tx_user_ready_m_2;
+ 500   assign tx_rst_done_m[2] = tx_rst_done_m_2;
+ 500   assign tx_3_p = tx_p[3];
+ 500   assign tx_3_n = tx_n[3];
+ 500   assign tx_out_clk_3 = tx_out_clk[3];
+ 500   assign tx_rst_3 = tx_rst[3];
+ 500   assign tx_ip_rst_3 = tx_ip_rst[3];
+ 500   assign tx_ip_data_3 = tx_ip_data[((32*3)+31):(32*3)];
+ 500   assign tx_ip_sysref_3 = tx_ip_sysref[3];
+ 500   assign tx_ip_sync_3 = tx_ip_sync[3];
+ 500   assign tx_ip_rst_done_3 = tx_ip_rst_done[3];
+ 500   assign tx_rst_3 = tx_rst[3];
+ 500   assign tx_pll_rst_3 = tx_pll_rst[3];
+ 500   assign tx_gt_rst_3 = tx_gt_rst[3];
+ 500   assign tx_pll_locked_3 = tx_pll_locked[3];
+ 500   assign tx_user_ready_3 = tx_user_ready[3];
+ 500   assign tx_rst_done_3 = tx_rst_done[3];
+ 500   assign tx_clk[3] = tx_clk_3;
+ 500   assign tx_data[((32*3)+31):(32*3)] = tx_data_3;
+ 500   assign tx_sysref[3] = tx_sysref_3;
+ 500   assign tx_sync[3] = tx_sync_3;
+ 500   assign tx_gt_charisk[((4*3)+3):(4*3)] = tx_gt_charisk_3;
+ 500   assign tx_gt_data[((32*3)+31):(32*3)] = tx_gt_data_3;
+ 500   assign tx_rst_m[3] = tx_rst_m_3;
+ 500   assign tx_gt_rst_m[3] = tx_gt_rst_m_3;
+ 500   assign tx_pll_locked_m[3] = tx_pll_locked_m_3;
+ 500   assign tx_user_ready_m[3] = tx_user_ready_m_3;
+ 500   assign tx_rst_done_m[3] = tx_rst_done_m_3;
+ 500   assign tx_4_p = tx_p[4];
+ 500   assign tx_4_n = tx_n[4];
+ 500   assign tx_out_clk_4 = tx_out_clk[4];
+ 500   assign tx_rst_4 = tx_rst[4];
+ 500   assign tx_ip_rst_4 = tx_ip_rst[4];
+ 500   assign tx_ip_data_4 = tx_ip_data[((32*4)+31):(32*4)];
+ 500   assign tx_ip_sysref_4 = tx_ip_sysref[4];
+ 500   assign tx_ip_sync_4 = tx_ip_sync[4];
+ 500   assign tx_ip_rst_done_4 = tx_ip_rst_done[4];
+ 500   assign tx_rst_4 = tx_rst[4];
+ 500   assign tx_pll_rst_4 = tx_pll_rst[4];
+ 500   assign tx_gt_rst_4 = tx_gt_rst[4];
+ 500   assign tx_pll_locked_4 = tx_pll_locked[4];
+ 500   assign tx_user_ready_4 = tx_user_ready[4];
+ 500   assign tx_rst_done_4 = tx_rst_done[4];
+ 500   assign tx_clk[4] = tx_clk_4;
+ 500   assign tx_data[((32*4)+31):(32*4)] = tx_data_4;
+ 500   assign tx_sysref[4] = tx_sysref_4;
+ 500   assign tx_sync[4] = tx_sync_4;
+ 500   assign tx_gt_charisk[((4*4)+3):(4*4)] = tx_gt_charisk_4;
+ 500   assign tx_gt_data[((32*4)+31):(32*4)] = tx_gt_data_4;
+ 500   assign tx_rst_m[4] = tx_rst_m_4;
+ 500   assign tx_gt_rst_m[4] = tx_gt_rst_m_4;
+ 500   assign tx_pll_locked_m[4] = tx_pll_locked_m_4;
+ 500   assign tx_user_ready_m[4] = tx_user_ready_m_4;
+ 500   assign tx_rst_done_m[4] = tx_rst_done_m_4;
+ 500   assign tx_5_p = tx_p[5];
+ 500   assign tx_5_n = tx_n[5];
+ 500   assign tx_out_clk_5 = tx_out_clk[5];
+ 500   assign tx_rst_5 = tx_rst[5];
+ 500   assign tx_ip_rst_5 = tx_ip_rst[5];
+ 500   assign tx_ip_data_5 = tx_ip_data[((32*5)+31):(32*5)];
+ 500   assign tx_ip_sysref_5 = tx_ip_sysref[5];
+ 500   assign tx_ip_sync_5 = tx_ip_sync[5];
+ 500   assign tx_ip_rst_done_5 = tx_ip_rst_done[5];
+ 500   assign tx_rst_5 = tx_rst[5];
+ 500   assign tx_pll_rst_5 = tx_pll_rst[5];
+ 500   assign tx_gt_rst_5 = tx_gt_rst[5];
+ 500   assign tx_pll_locked_5 = tx_pll_locked[5];
+ 500   assign tx_user_ready_5 = tx_user_ready[5];
+ 500   assign tx_rst_done_5 = tx_rst_done[5];
+ 500   assign tx_clk[5] = tx_clk_5;
+ 500   assign tx_data[((32*5)+31):(32*5)] = tx_data_5;
+ 500   assign tx_sysref[5] = tx_sysref_5;
+ 500   assign tx_sync[5] = tx_sync_5;
+ 500   assign tx_gt_charisk[((4*5)+3):(4*5)] = tx_gt_charisk_5;
+ 500   assign tx_gt_data[((32*5)+31):(32*5)] = tx_gt_data_5;
+ 500   assign tx_rst_m[5] = tx_rst_m_5;
+ 500   assign tx_gt_rst_m[5] = tx_gt_rst_m_5;
+ 500   assign tx_pll_locked_m[5] = tx_pll_locked_m_5;
+ 500   assign tx_user_ready_m[5] = tx_user_ready_m_5;
+ 500   assign tx_rst_done_m[5] = tx_rst_done_m_5;
+ 500   assign tx_6_p = tx_p[6];
+ 500   assign tx_6_n = tx_n[6];
+ 500   assign tx_out_clk_6 = tx_out_clk[6];
+ 500   assign tx_rst_6 = tx_rst[6];
+ 500   assign tx_ip_rst_6 = tx_ip_rst[6];
+ 500   assign tx_ip_data_6 = tx_ip_data[((32*6)+31):(32*6)];
+ 500   assign tx_ip_sysref_6 = tx_ip_sysref[6];
+ 500   assign tx_ip_sync_6 = tx_ip_sync[6];
+ 500   assign tx_ip_rst_done_6 = tx_ip_rst_done[6];
+ 500   assign tx_rst_6 = tx_rst[6];
+ 500   assign tx_pll_rst_6 = tx_pll_rst[6];
+ 500   assign tx_gt_rst_6 = tx_gt_rst[6];
+ 500   assign tx_pll_locked_6 = tx_pll_locked[6];
+ 500   assign tx_user_ready_6 = tx_user_ready[6];
+ 500   assign tx_rst_done_6 = tx_rst_done[6];
+ 500   assign tx_clk[6] = tx_clk_6;
+ 500   assign tx_data[((32*6)+31):(32*6)] = tx_data_6;
+ 500   assign tx_sysref[6] = tx_sysref_6;
+ 500   assign tx_sync[6] = tx_sync_6;
+ 500   assign tx_gt_charisk[((4*6)+3):(4*6)] = tx_gt_charisk_6;
+ 500   assign tx_gt_data[((32*6)+31):(32*6)] = tx_gt_data_6;
+ 500   assign tx_rst_m[6] = tx_rst_m_6;
+ 500   assign tx_gt_rst_m[6] = tx_gt_rst_m_6;
+ 500   assign tx_pll_locked_m[6] = tx_pll_locked_m_6;
+ 500   assign tx_user_ready_m[6] = tx_user_ready_m_6;
+ 500   assign tx_rst_done_m[6] = tx_rst_done_m_6;
+ 500   assign tx_7_p = tx_p[7];
+ 500   assign tx_7_n = tx_n[7];
+ 500   assign tx_out_clk_7 = tx_out_clk[7];
+ 500   assign tx_rst_7 = tx_rst[7];
+ 500   assign tx_ip_rst_7 = tx_ip_rst[7];
+ 500   assign tx_ip_data_7 = tx_ip_data[((32*7)+31):(32*7)];
+ 500   assign tx_ip_sysref_7 = tx_ip_sysref[7];
+ 500   assign tx_ip_sync_7 = tx_ip_sync[7];
+ 500   assign tx_ip_rst_done_7 = tx_ip_rst_done[7];
+ 500   assign tx_rst_7 = tx_rst[7];
+ 500   assign tx_pll_rst_7 = tx_pll_rst[7];
+ 500   assign tx_gt_rst_7 = tx_gt_rst[7];
+ 500   assign tx_pll_locked_7 = tx_pll_locked[7];
+ 500   assign tx_user_ready_7 = tx_user_ready[7];
+ 500   assign tx_rst_done_7 = tx_rst_done[7];
+ 500   assign tx_clk[7] = tx_clk_7;
+ 500   assign tx_data[((32*7)+31):(32*7)] = tx_data_7;
+ 500   assign tx_sysref[7] = tx_sysref_7;
+ 500   assign tx_sync[7] = tx_sync_7;
+ 500   assign tx_gt_charisk[((4*7)+3):(4*7)] = tx_gt_charisk_7;
+ 500   assign tx_gt_data[((32*7)+31):(32*7)] = tx_gt_data_7;
+ 500   assign tx_rst_m[7] = tx_rst_m_7;
+ 500   assign tx_gt_rst_m[7] = tx_gt_rst_m_7;
+ 500   assign tx_pll_locked_m[7] = tx_pll_locked_m_7;
+ 500   assign tx_user_ready_m[7] = tx_user_ready_m_7;
+ 500   assign tx_rst_done_m[7] = tx_rst_done_m_7;
+ 500   always @(posedge up_clk or negedge up_rstn) begin
+ 500     if (up_rstn == 1'b0) begin
+ 500       up_wack_d <= 1'd0;
+ 500       up_rack_d <= 1'd0;
+ 500       up_rdata_d <= 32'd0;
+ 500     end else begin
+ 500       up_wack_d <= | up_wack;
+ 500       up_rack_d <= | up_rack;
+ 500       up_rdata_d <= up_rdata[((32*0)+31):(32*0)] |
+ 500         up_rdata[((32*1)+31):(32*1)] |
+ 500         up_rdata[((32*2)+31):(32*2)] |
+ 500         up_rdata[((32*3)+31):(32*3)] |
+ 500         up_rdata[((32*4)+31):(32*4)] |
+ 500         up_rdata[((32*5)+31):(32*5)] |
+ 500         up_rdata[((32*6)+31):(32*6)] |
+ 500         up_rdata[((32*7)+31):(32*7)] |
+ 500         up_rdata[((32*8)+31):(32*8)];
+ 500     end

Clone Blocks:
Clone Blocks 1:
hdl/library/axi_jesd_gt/axi_jesd_gt.v@498:512
  BUFG i_bufg_tx_clk (
    .I (tx_out_clk[0]),
    .O (tx_clk_g));
  end

  if (PCORE_DEVICE_TYPE == 1) begin
  BUFG_GT i_bufg_rx_clk (
    .I (rx_out_clk[0]),
    .O (rx_clk_g));
  end

  if (PCORE_DEVICE_TYPE == 1) begin
  BUFG_GT i_bufg_tx_clk (
    .I (tx_out_clk[0]),
    .O (tx_clk_g));

