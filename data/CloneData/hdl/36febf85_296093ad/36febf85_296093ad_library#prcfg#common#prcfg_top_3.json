{"Source Block": ["hdl/library/prcfg/common/prcfg_top.v@116:198@HdlStmFor", "  wire    [(NUM_CHANNEL - 1):0]     dac_gpio_out_s_inv[31:0];\n\n  genvar l_inst;\n\n  generate\n    for(l_inst = 0; l_inst < NUM_CHANNEL; l_inst = l_inst + 1) begin: tx_rx_data_path\n      if(ADC_EN == ENABELED) begin\n        if(l_inst == 0) begin\n          prcfg_adc #(\n            .CHANNEL_ID(l_inst)\n          ) i_prcfg_adc_1 (\n            .clk(clk),\n            .control(adc_gpio_input),\n            .status(adc_gpio_out_s[l_inst]),\n            .src_adc_dwr(core_adc_dwr),\n            .src_adc_dsync(core_adc_dsync),\n            .src_adc_ddata(core_adc_ddata[(DATA_WIDTH - 1):0]),\n            .src_adc_dovf(core_adc_ovf),\n            .dst_adc_dwr(dma_adc_dwr),\n            .dst_adc_dsync(dma_adc_dsync),\n            .dst_adc_ddata(dma_adc_ddata[(DATA_WIDTH - 1):0]),\n            .dst_adc_dovf(dma_adc_ovf)\n          );\n        end else begin\n           prcfg_adc #(\n            .CHANNEL_ID(l_inst)\n          ) i_prcfg_adc_i (\n            .clk(clk),\n            .control(adc_gpio_input),\n            .status(adc_gpio_out_s[l_inst]),\n            .src_adc_dwr(core_adc_dwr),\n            .src_adc_dsync(core_adc_dsync),\n            .src_adc_ddata(core_adc_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n            .src_adc_dovf(),\n            .dst_adc_dwr(),\n            .dst_adc_dsync(),\n            .dst_adc_ddata(dma_adc_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n            .dst_adc_dovf(dma_adc_ovf)\n          );\n        end\n      end\n      if(DAC_EN == ENABELED) begin\n        if(l_inst == 0) begin\n          prcfg_dac #(\n            .CHANNEL_ID(l_inst)\n          ) i_prcfg_dac_1 (\n            .clk(clk),\n            .control(dac_gpio_input),\n            .status(dac_gpio_out_s[l_inst]),\n            .src_dac_en(dma_dac_en),\n            .src_dac_ddata(dma_dac_ddata[(DATA_WIDTH - 1):0]),\n            .src_dac_dunf(dma_dac_dunf),\n            .src_dac_dvalid(dma_dac_dvalid),\n            .dst_dac_en(core_dac_en),\n            .dst_dac_ddata(core_dac_ddata[(DATA_WIDTH - 1):0]),\n            .dst_dac_dunf(core_dac_dunf),\n            .dst_dac_dvalid(core_dac_dvalid)\n          );\n        end else begin\n          prcfg_dac #(\n            .CHANNEL_ID(l_inst)\n          ) i_prcfg_dac_i (\n            .clk(clk),\n            .control(dac_gpio_input),\n            .status(dac_gpio_out_s[l_inst]),\n            .src_dac_en(),\n            .src_dac_ddata(dma_dac_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n            .src_dac_dunf(dma_dac_dunf),\n            .src_dac_dvalid(dma_dac_dvalid),\n            .dst_dac_en(core_dac_en),\n            .dst_dac_ddata(core_dac_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n            .dst_dac_dunf(),\n            .dst_dac_dvalid()\n          );\n        end\n      end\n\n    end\n  endgenerate\n\n  genvar i;\n  genvar j;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[123, "        if(l_inst == 0) begin\n"], [126, "          ) i_prcfg_adc_1 (\n"], [127, "            .clk(clk),\n"], [128, "            .control(adc_gpio_input),\n"], [129, "            .status(adc_gpio_out_s[l_inst]),\n"], [130, "            .src_adc_dwr(core_adc_dwr),\n"], [131, "            .src_adc_dsync(core_adc_dsync),\n"], [132, "            .src_adc_ddata(core_adc_ddata[(DATA_WIDTH - 1):0]),\n"], [133, "            .src_adc_dovf(core_adc_ovf),\n"], [134, "            .dst_adc_dwr(dma_adc_dwr),\n"], [135, "            .dst_adc_dsync(dma_adc_dsync),\n"], [136, "            .dst_adc_ddata(dma_adc_ddata[(DATA_WIDTH - 1):0]),\n"], [137, "            .dst_adc_dovf(dma_adc_ovf)\n"], [138, "          );\n"], [139, "        end else begin\n"], [140, "           prcfg_adc #(\n"], [141, "            .CHANNEL_ID(l_inst)\n"], [146, "            .src_adc_dwr(core_adc_dwr),\n"], [147, "            .src_adc_dsync(core_adc_dsync),\n"], [148, "            .src_adc_ddata(core_adc_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n"], [149, "            .src_adc_dovf(),\n"], [150, "            .dst_adc_dwr(),\n"], [151, "            .dst_adc_dsync(),\n"], [152, "            .dst_adc_ddata(dma_adc_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n"], [153, "            .dst_adc_dovf(dma_adc_ovf)\n"], [155, "        end\n"], [158, "        if(l_inst == 0) begin\n"], [159, "          prcfg_dac #(\n"], [160, "            .CHANNEL_ID(l_inst)\n"], [161, "          ) i_prcfg_dac_1 (\n"], [162, "            .clk(clk),\n"], [163, "            .control(dac_gpio_input),\n"], [164, "            .status(dac_gpio_out_s[l_inst]),\n"], [165, "            .src_dac_en(dma_dac_en),\n"], [166, "            .src_dac_ddata(dma_dac_ddata[(DATA_WIDTH - 1):0]),\n"], [167, "            .src_dac_dunf(dma_dac_dunf),\n"], [168, "            .src_dac_dvalid(dma_dac_dvalid),\n"], [169, "            .dst_dac_en(core_dac_en),\n"], [170, "            .dst_dac_ddata(core_dac_ddata[(DATA_WIDTH - 1):0]),\n"], [171, "            .dst_dac_dunf(core_dac_dunf),\n"], [172, "            .dst_dac_dvalid(core_dac_dvalid)\n"], [173, "          );\n"], [174, "        end else begin\n"], [175, "          prcfg_dac #(\n"], [176, "            .CHANNEL_ID(l_inst)\n"], [177, "          ) i_prcfg_dac_i (\n"], [178, "            .clk(clk),\n"], [179, "            .control(dac_gpio_input),\n"], [180, "            .status(dac_gpio_out_s[l_inst]),\n"], [181, "            .src_dac_en(),\n"], [182, "            .src_dac_ddata(dma_dac_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n"], [183, "            .src_dac_dunf(dma_dac_dunf),\n"], [184, "            .src_dac_dvalid(dma_dac_dvalid),\n"], [185, "            .dst_dac_en(core_dac_en),\n"], [186, "            .dst_dac_ddata(core_dac_ddata[((DATA_WIDTH * (l_inst + 1)) - 1):(DATA_WIDTH * l_inst)]),\n"], [187, "            .dst_dac_dunf(),\n"], [188, "            .dst_dac_dvalid()\n"], [189, "          );\n"], [190, "        end\n"]], "Add": [[153, "            .src_adc_enable(core_adc_enable_s[l_inst]),\n"], [153, "            .src_adc_valid(core_adc_valid_s[l_inst]),\n"], [153, "            .src_adc_data(core_adc_data_s[l_inst]),\n"], [153, "            .dst_adc_enable(dma_adc_enable_s[l_inst]),\n"], [153, "            .dst_adc_valid(dma_adc_valid_s[l_inst]),\n"], [153, "            .dst_adc_data(dma_adc_data_s[l_inst])\n"], [190, "        prcfg_dac #(\n"], [190, "          .CHANNEL_ID(l_inst)\n"], [190, "        ) i_prcfg_dac_i (\n"], [190, "          .clk(clk),\n"], [190, "          .control(dac_gpio_input),\n"], [190, "          .status(dac_gpio_out_s[l_inst]),\n"], [190, "          .src_dac_enable(dma_dac_enable_s[l_inst]),\n"], [190, "          .src_dac_data(dma_dac_data_s[l_inst]),\n"], [190, "          .src_dac_valid(dma_dac_valid_s[l_inst]),\n"], [190, "          .dst_dac_enable(core_dac_enable_s[l_inst]),\n"], [190, "          .dst_dac_data(core_dac_data_s[l_inst]),\n"], [190, "          .dst_dac_valid(core_dac_valid_s[l_inst])\n"], [190, "        );\n"]]}}