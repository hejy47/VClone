Source Block: hdl/library/axi_dmac/request_arb.v@475:543@HdlStmIf

assign m_axi_bready = 1'b0;

end

if (C_DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin

assign dest_clk = m_axis_aclk;

wire [C_ID_WIDTH-1:0] data_id;

wire data_eot = eot_mem[data_id];
wire response_eot = eot_mem[dest_response_id];

assign dbg_dest_address_id = 'h00;
assign dbg_dest_data_id = data_id;

dmac_dest_axi_stream #(
	.C_ID_WIDTH(C_ID_WIDTH),
	.C_S_AXIS_DATA_WIDTH(C_DMA_DATA_WIDTH_DEST),
	.C_BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)
) i_dest_dma_stream (
	.s_axis_aclk(m_axis_aclk),
	.s_axis_aresetn(dest_resetn),

	.enable(dest_enable),
	.enabled(dest_enabled),

	.req_valid(dest_req_valid),
	.req_ready(dest_req_ready),
	.req_last_burst_length(dest_req_last_burst_length),
        .req_xlast(dest_req_xlast),

	.response_valid(dest_response_valid),
	.response_ready(dest_response_ready),
	.response_resp(dest_response_resp),
	.response_resp_eot(dest_response_resp_eot),

	.request_id(dest_request_id),
	.response_id(dest_response_id),
	.data_id(data_id),
	.sync_id(dest_sync_id),
	.sync_id_ret(dest_sync_id_ret),
        .xfer_req(m_axis_xfer_req),

	.data_eot(data_eot),
	.response_eot(response_eot),

	.fifo_valid(dest_valid),
	.fifo_ready(dest_ready),
	.fifo_data(dest_data),

	.m_axis_valid(m_axis_valid),
	.m_axis_ready(m_axis_ready),
	.m_axis_data(m_axis_data),
        .m_axis_last(m_axis_last)
);

end else begin

assign m_axis_valid = 1'b0;
assign m_axis_data = 'h00;

end 

if (C_DMA_TYPE_DEST == DMA_TYPE_FIFO) begin

assign dest_clk = fifo_rd_clk;


Diff Content:
- 480 if (C_DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin
- 484 wire [C_ID_WIDTH-1:0] data_id;
- 493 	.C_ID_WIDTH(C_ID_WIDTH),
- 494 	.C_S_AXIS_DATA_WIDTH(C_DMA_DATA_WIDTH_DEST),
- 495 	.C_BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)
- 538 end 
+ 480 if (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin
+ 484 wire [ID_WIDTH-1:0] data_id;
+ 495 	.ID_WIDTH(ID_WIDTH),
+ 495 	.S_AXIS_DATA_WIDTH(DMA_DATA_WIDTH_DEST),
+ 495 	.BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)
+ 535 assign m_axis_last = 1'b0;
+ 535 assign m_axis_xfer_req = 1'b0;
+ 538 end

Clone Blocks:
Clone Blocks 1:
hdl/library/axi_dmac/request_arb.v@535:603
assign m_axis_valid = 1'b0;
assign m_axis_data = 'h00;

end 

if (C_DMA_TYPE_DEST == DMA_TYPE_FIFO) begin

assign dest_clk = fifo_rd_clk;

wire [C_ID_WIDTH-1:0] data_id;

wire data_eot = eot_mem[data_id];
wire response_eot = eot_mem[dest_response_id];

assign dbg_dest_address_id = 'h00;
assign dbg_dest_data_id = data_id;

dmac_dest_fifo_inf #(
	.C_ID_WIDTH(C_ID_WIDTH),
	.C_DATA_WIDTH(C_DMA_DATA_WIDTH_DEST),
	.C_BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)
) i_dest_dma_fifo (
	.clk(fifo_rd_clk),
	.resetn(dest_resetn),

	.enable(dest_enable),
	.enabled(dest_enabled),

	.req_valid(dest_req_valid),
	.req_ready(dest_req_ready),
	.req_last_burst_length(dest_req_last_burst_length),

	.response_valid(dest_response_valid),
	.response_ready(dest_response_ready),
	.response_resp(dest_response_resp),
	.response_resp_eot(dest_response_resp_eot),

	.request_id(dest_request_id),
	.response_id(dest_response_id),
	.data_id(data_id),
	.sync_id(dest_sync_id),
	.sync_id_ret(dest_sync_id_ret),

	.data_eot(data_eot),
	.response_eot(response_eot),

	.fifo_valid(dest_valid),
	.fifo_ready(dest_ready),
	.fifo_data(dest_data),

	.en(fifo_rd_en),
	.valid(fifo_rd_valid),
	.dout(fifo_rd_dout),
	.underflow(fifo_rd_underflow),
        .xfer_req(fifo_rd_xfer_req)
);

end else begin

assign fifo_rd_valid = 1'b0;
assign fifo_rd_dout = 'h0;
assign fifo_rd_underflow = 1'b0;

end endgenerate

generate if (C_DMA_TYPE_SRC == DMA_TYPE_MM_AXI) begin

assign src_clk = m_src_axi_aclk;


