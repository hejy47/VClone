{"Source Block": ["hdl/library/common/ad_gt_es.v@388:695@HdlStmProcess", "  end\n\n  // eye scan state machine- write vertical and horizontal offsets\n  // and read back sample and error counters\n\n  always @(negedge up_rstn or posedge up_clk) begin\n    if (up_rstn == 1'b0) begin\n      up_es_fsm <= ES_FSM_IDLE;\n    end else begin\n      if (up_es_stop == 1'b1) begin\n        up_es_fsm <= ES_FSM_IDLE;\n      end else begin\n        case (up_es_fsm)\n          ES_FSM_IDLE: begin // idle\n            if (up_es_start == 1'b1) begin\n              up_es_fsm <= ES_FSM_STATUS;\n            end else begin\n              up_es_fsm <= ES_FSM_IDLE;\n            end\n          end\n       \n          ES_FSM_STATUS: begin // set status\n            up_es_fsm <= ES_FSM_INIT;\n          end\n       \n          ES_FSM_INIT: begin // initialize\n            if (up_es_init == 1'b1) begin\n              up_es_fsm <= ES_FSM_CTRLINIT_READ;\n            end else begin\n              up_es_fsm <= ES_FSM_HOFFSET_READ;\n            end\n          end\n       \n          ES_FSM_CTRLINIT_READ: begin // control read\n            up_es_fsm <= ES_FSM_CTRLINIT_RRDY;\n          end\n          ES_FSM_CTRLINIT_RRDY: begin // control ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_CTRLINIT_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_CTRLINIT_RRDY;\n            end\n          end\n          ES_FSM_CTRLINIT_WRITE: begin // control write\n            up_es_fsm <= ES_FSM_CTRLINIT_WRDY;\n          end\n          ES_FSM_CTRLINIT_WRDY: begin // control ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_SDATA0_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_CTRLINIT_WRDY;\n            end\n          end\n      \n          ES_FSM_SDATA0_WRITE: begin // sdata write\n            up_es_fsm <= ES_FSM_SDATA0_WRDY;\n          end\n          ES_FSM_SDATA0_WRDY: begin // sdata ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_SDATA1_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_SDATA0_WRDY;\n            end\n          end\n          ES_FSM_SDATA1_WRITE: begin // sdata write\n            up_es_fsm <= ES_FSM_SDATA1_WRDY;\n          end\n          ES_FSM_SDATA1_WRDY: begin // sdata ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_SDATA2_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_SDATA1_WRDY;\n            end\n          end\n          ES_FSM_SDATA2_WRITE: begin // sdata write\n            up_es_fsm <= ES_FSM_SDATA2_WRDY;\n          end\n          ES_FSM_SDATA2_WRDY: begin // sdata ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_SDATA3_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_SDATA2_WRDY;\n            end\n          end\n          ES_FSM_SDATA3_WRITE: begin // sdata write\n            up_es_fsm <= ES_FSM_SDATA3_WRDY;\n          end\n          ES_FSM_SDATA3_WRDY: begin // sdata ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_SDATA4_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_SDATA3_WRDY;\n            end\n          end\n          ES_FSM_SDATA4_WRITE: begin // sdata write\n            up_es_fsm <= ES_FSM_SDATA4_WRDY;\n          end\n          ES_FSM_SDATA4_WRDY: begin // sdata ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_QDATA0_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_SDATA4_WRDY;\n            end\n          end\n      \n          ES_FSM_QDATA0_WRITE: begin // qdata write\n            up_es_fsm <= ES_FSM_QDATA0_WRDY;\n          end\n          ES_FSM_QDATA0_WRDY: begin // qdata ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_QDATA1_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_QDATA0_WRDY;\n            end\n          end\n          ES_FSM_QDATA1_WRITE: begin // qdata write\n            up_es_fsm <= ES_FSM_QDATA1_WRDY;\n          end\n          ES_FSM_QDATA1_WRDY: begin // qdata ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_QDATA2_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_QDATA1_WRDY;\n            end\n          end\n          ES_FSM_QDATA2_WRITE: begin // qdata write\n            up_es_fsm <= ES_FSM_QDATA2_WRDY;\n          end\n          ES_FSM_QDATA2_WRDY: begin // qdata ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_QDATA3_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_QDATA2_WRDY;\n            end\n          end\n          ES_FSM_QDATA3_WRITE: begin // qdata write\n            up_es_fsm <= ES_FSM_QDATA3_WRDY;\n          end\n          ES_FSM_QDATA3_WRDY: begin // qdata ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_QDATA4_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_QDATA3_WRDY;\n            end\n          end\n          ES_FSM_QDATA4_WRITE: begin // qdata write\n            up_es_fsm <= ES_FSM_QDATA4_WRDY;\n          end\n          ES_FSM_QDATA4_WRDY: begin // qdata ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_HOFFSET_READ;\n            end else begin\n              up_es_fsm <= ES_FSM_QDATA4_WRDY;\n            end\n          end\n      \n          ES_FSM_HOFFSET_READ: begin // horizontal offset read\n            up_es_fsm <= ES_FSM_HOFFSET_RRDY;\n          end\n          ES_FSM_HOFFSET_RRDY: begin // horizontal offset ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_HOFFSET_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_HOFFSET_RRDY;\n            end\n          end\n          ES_FSM_HOFFSET_WRITE: begin // horizontal offset write\n            up_es_fsm <= ES_FSM_HOFFSET_WRDY;\n          end\n          ES_FSM_HOFFSET_WRDY: begin // horizontal offset ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_VOFFSET_READ;\n            end else begin\n              up_es_fsm <= ES_FSM_HOFFSET_WRDY;\n            end\n          end\n      \n          ES_FSM_VOFFSET_READ: begin // vertical offset read\n            up_es_fsm <= ES_FSM_VOFFSET_RRDY;\n          end\n          ES_FSM_VOFFSET_RRDY: begin // vertical offset ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_VOFFSET_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_VOFFSET_RRDY;\n            end\n          end\n          ES_FSM_VOFFSET_WRITE: begin // vertical offset write\n            up_es_fsm <= ES_FSM_VOFFSET_WRDY;\n          end\n          ES_FSM_VOFFSET_WRDY: begin // vertical offset ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_CTRLSTART_READ;\n            end else begin\n              up_es_fsm <= ES_FSM_VOFFSET_WRDY;\n            end\n          end\n      \n          ES_FSM_CTRLSTART_READ: begin // control read\n            up_es_fsm <= ES_FSM_CTRLSTART_RRDY;\n          end\n          ES_FSM_CTRLSTART_RRDY: begin // control ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_CTRLSTART_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_CTRLSTART_RRDY;\n            end\n          end\n          ES_FSM_CTRLSTART_WRITE: begin // control write\n            up_es_fsm <= ES_FSM_CTRLSTART_WRDY;\n          end\n          ES_FSM_CTRLSTART_WRDY: begin // control ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_STATUS_READ;\n            end else begin\n              up_es_fsm <= ES_FSM_CTRLSTART_WRDY;\n            end\n          end\n      \n          ES_FSM_STATUS_READ: begin // status read\n            up_es_fsm <= ES_FSM_STATUS_RRDY;\n          end\n          ES_FSM_STATUS_RRDY: begin // status ready\n            if (up_es_drp_ready == 1'b0) begin\n              up_es_fsm <= ES_FSM_STATUS_RRDY;\n            end else if (up_es_drp_rdata[3:0] == 4'b0101) begin\n              up_es_fsm <= ES_FSM_CTRLSTOP_READ;\n            end else begin\n              up_es_fsm <= ES_FSM_STATUS_READ;\n            end\n          end\n      \n          ES_FSM_CTRLSTOP_READ: begin // control read\n            up_es_fsm <= ES_FSM_CTRLSTOP_RRDY;\n          end\n          ES_FSM_CTRLSTOP_RRDY: begin // control ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_CTRLSTOP_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_CTRLSTOP_RRDY;\n            end\n          end\n          ES_FSM_CTRLSTOP_WRITE: begin // control write\n            up_es_fsm <= ES_FSM_CTRLSTOP_WRDY;\n          end\n          ES_FSM_CTRLSTOP_WRDY: begin // control ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_SCNT_READ;\n            end else begin\n              up_es_fsm <= ES_FSM_CTRLSTOP_WRDY;\n            end\n          end\n      \n          ES_FSM_SCNT_READ: begin // read sample count\n            up_es_fsm <= ES_FSM_SCNT_RRDY;\n          end\n          ES_FSM_SCNT_RRDY: begin // sample count ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_ECNT_READ;\n            end else begin\n              up_es_fsm <= ES_FSM_SCNT_RRDY;\n            end\n          end\n      \n          ES_FSM_ECNT_READ: begin // read error count\n            up_es_fsm <= ES_FSM_ECNT_RRDY;\n          end\n          ES_FSM_ECNT_RRDY: begin // error count ready\n            if (up_es_drp_ready == 1'b1) begin\n              up_es_fsm <= ES_FSM_DMA_WRITE;\n            end else begin\n              up_es_fsm <= ES_FSM_ECNT_RRDY;\n            end\n          end\n       \n          ES_FSM_DMA_WRITE: begin // dma write\n            up_es_fsm <= ES_FSM_DMA_READY;\n          end\n          ES_FSM_DMA_READY: begin // dma ack\n            if (axi_bvalid == 1'b1) begin\n              up_es_fsm <= ES_FSM_UPDATE;\n            end else begin\n              up_es_fsm <= ES_FSM_DMA_READY;\n            end\n          end\n      \n          ES_FSM_UPDATE: begin // update\n            if (up_es_eos_s == 1'b1) begin\n              up_es_fsm <= ES_FSM_IDLE;\n            end else if (up_es_ut == 1'b1) begin\n              up_es_fsm <= ES_FSM_HOFFSET_READ;\n            end else begin\n              up_es_fsm <= ES_FSM_VOFFSET_READ;\n            end\n          end\n      \n          default: begin\n            up_es_fsm <= ES_FSM_IDLE;\n          end\n        endcase\n      end\n    end\n  end\n\n  // drp signals controlled by the fsm\n\n  always @(negedge up_rstn or posedge up_clk) begin\n    if (up_rstn == 1'b0) begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[667, "            if (axi_bvalid == 1'b1) begin\n"]], "Add": [[667, "            if (up_es_dma_ack == 1'b1) begin\n"]]}}