{"Source Block": ["hdl/library/axi_jesd_gt/axi_jesd_gt.v@572:648@HdlStmFor", "  assign up_drp_rdata_gt_s[n] = 'd0;\n  assign up_drp_ready_gt_s[n] = 'd0;\n  assign up_drp_rxrate_gt_s[n] = 'd0;\n  end\n\n  for (n = 0; n < PCORE_NUM_OF_LANES; n = n + 1) begin: g_lane_1\n\n  ad_jesd_align i_jesd_align (\n    .rx_clk (rx_clk),\n    .rx_ip_sof (rx_ip_sof),\n    .rx_ip_data (rx_ip_data_s[n*32+31:n*32]),\n    .rx_sof (rx_sof_s[n]),\n    .rx_data (rx_data_s[n*32+31:n*32]));\n\n  ad_gt_channel_1 #(\n    .DRP_ID (n),\n    .GTH_GTX_N (PCORE_DEVICE_TYPE),\n    .CPLL_FBDIV (PCORE_CPLL_FBDIV),\n    .RX_OUT_DIV (PCORE_RX_OUT_DIV),\n    .TX_OUT_DIV (PCORE_TX_OUT_DIV),\n    .RX_CLK25_DIV (PCORE_RX_CLK25_DIV),\n    .TX_CLK25_DIV (PCORE_TX_CLK25_DIV),\n    .PMA_RSV (PCORE_PMA_RSV),\n    .RX_CDR_CFG (PCORE_RX_CDR_CFG))\n  i_gt_channel_1 (\n    .ref_clk (ref_clk_c),\n    .lpm_dfe_n (up_lpm_dfe_n_s),\n    .cpll_pd (up_cpll_pd_s),\n    .cpll_rst (gt_pll_rst),\n    .qpll_clk (qpll_clk[n]),\n    .qpll_ref_clk (qpll_ref_clk[n]),\n    .qpll_locked (qpll_locked_s[n]),\n    .rx_rst (gt_rx_rst),\n    .rx_p (rx_data_p_s[n]),\n    .rx_n (rx_data_n_s[n]),\n    .rx_sys_clk_sel (up_rx_sys_clk_sel_s),\n    .rx_out_clk_sel (up_rx_out_clk_sel_s),\n    .rx_out_clk (rx_out_clk[n]),\n    .rx_rst_done (rx_rst_done_s[n]),\n    .rx_pll_locked (rx_pll_locked_s[n]),\n    .rx_clk (rx_clk),\n    .rx_charisk (rx_gt_charisk_s[n*4+3:n*4]),\n    .rx_disperr (rx_gt_disperr_s[n*4+3:n*4]),\n    .rx_notintable (rx_gt_notintable_s[n*4+3:n*4]),\n    .rx_data (rx_gt_data_s[n*32+31:n*32]),\n    .rx_comma_align_enb (rx_ip_comma_align),\n    .rx_ilas_f (rx_ilas_f_s[n*4+3:n*4]),\n    .rx_ilas_q (rx_ilas_q_s[n*4+3:n*4]),\n    .rx_ilas_a (rx_ilas_a_s[n*4+3:n*4]),\n    .rx_ilas_r (rx_ilas_r_s[n*4+3:n*4]),\n    .rx_cgs_k (rx_cgs_k_s[n*4+3:n*4]),\n    .tx_rst (gt_tx_rst),\n    .tx_p (tx_data_p_s[n]),\n    .tx_n (tx_data_n_s[n]),\n    .tx_sys_clk_sel (up_tx_sys_clk_sel_s),\n    .tx_out_clk_sel (up_tx_out_clk_sel_s),\n    .tx_out_clk (tx_out_clk[n]),\n    .tx_rst_done (tx_rst_done_s[n]),\n    .tx_pll_locked (tx_pll_locked_s[n]),\n    .tx_clk (tx_clk),\n    .tx_charisk (tx_gt_charisk_mux_s[n*4+3:n*4]),\n    .tx_data (tx_gt_data_mux_s[n*32+31:n*32]),\n    .up_clk (up_clk),\n    .up_drp_sel (up_drp_sel_s),\n    .up_drp_addr (up_drp_addr_s),\n    .up_drp_wr (up_drp_wr_s),\n    .up_drp_wdata (up_drp_wdata_s),\n    .up_drp_rdata (up_drp_rdata_gt_s[n]),\n    .up_drp_ready (up_drp_ready_gt_s[n]),\n    .up_drp_lanesel (up_drp_lanesel_s),\n    .up_drp_rxrate (up_drp_rxrate_gt_s[n]));\n  end\n  endgenerate\n\n  // eye scan\n\n  ad_gt_es #(.GTH_GTX_N(PCORE_DEVICE_TYPE)) i_gt_es (\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[577, "  for (n = 0; n < PCORE_NUM_OF_LANES; n = n + 1) begin: g_lane_1\n"], [579, "  ad_jesd_align i_jesd_align (\n"], [580, "    .rx_clk (rx_clk),\n"], [581, "    .rx_ip_sof (rx_ip_sof),\n"], [582, "    .rx_ip_data (rx_ip_data_s[n*32+31:n*32]),\n"], [583, "    .rx_sof (rx_sof_s[n]),\n"], [584, "    .rx_data (rx_data_s[n*32+31:n*32]));\n"], [587, "    .DRP_ID (n),\n"], [588, "    .GTH_GTX_N (PCORE_DEVICE_TYPE),\n"], [589, "    .CPLL_FBDIV (PCORE_CPLL_FBDIV),\n"], [590, "    .RX_OUT_DIV (PCORE_RX_OUT_DIV),\n"], [591, "    .TX_OUT_DIV (PCORE_TX_OUT_DIV),\n"], [592, "    .RX_CLK25_DIV (PCORE_RX_CLK25_DIV),\n"], [593, "    .TX_CLK25_DIV (PCORE_TX_CLK25_DIV),\n"], [594, "    .PMA_RSV (PCORE_PMA_RSV),\n"], [595, "    .RX_CDR_CFG (PCORE_RX_CDR_CFG))\n"], [596, "  i_gt_channel_1 (\n"], [597, "    .ref_clk (ref_clk_c),\n"], [598, "    .lpm_dfe_n (up_lpm_dfe_n_s),\n"], [599, "    .cpll_pd (up_cpll_pd_s),\n"], [600, "    .cpll_rst (gt_pll_rst),\n"], [601, "    .qpll_clk (qpll_clk[n]),\n"], [603, "    .qpll_locked (qpll_locked_s[n]),\n"], [604, "    .rx_rst (gt_rx_rst),\n"], [605, "    .rx_p (rx_data_p_s[n]),\n"], [606, "    .rx_n (rx_data_n_s[n]),\n"], [607, "    .rx_sys_clk_sel (up_rx_sys_clk_sel_s),\n"], [608, "    .rx_out_clk_sel (up_rx_out_clk_sel_s),\n"], [610, "    .rx_rst_done (rx_rst_done_s[n]),\n"], [611, "    .rx_pll_locked (rx_pll_locked_s[n]),\n"], [612, "    .rx_clk (rx_clk),\n"], [613, "    .rx_charisk (rx_gt_charisk_s[n*4+3:n*4]),\n"], [614, "    .rx_disperr (rx_gt_disperr_s[n*4+3:n*4]),\n"], [615, "    .rx_notintable (rx_gt_notintable_s[n*4+3:n*4]),\n"], [616, "    .rx_data (rx_gt_data_s[n*32+31:n*32]),\n"], [617, "    .rx_comma_align_enb (rx_ip_comma_align),\n"], [618, "    .rx_ilas_f (rx_ilas_f_s[n*4+3:n*4]),\n"], [619, "    .rx_ilas_q (rx_ilas_q_s[n*4+3:n*4]),\n"], [620, "    .rx_ilas_a (rx_ilas_a_s[n*4+3:n*4]),\n"], [621, "    .rx_ilas_r (rx_ilas_r_s[n*4+3:n*4]),\n"], [622, "    .rx_cgs_k (rx_cgs_k_s[n*4+3:n*4]),\n"], [623, "    .tx_rst (gt_tx_rst),\n"], [624, "    .tx_p (tx_data_p_s[n]),\n"], [625, "    .tx_n (tx_data_n_s[n]),\n"], [626, "    .tx_sys_clk_sel (up_tx_sys_clk_sel_s),\n"], [627, "    .tx_out_clk_sel (up_tx_out_clk_sel_s),\n"], [629, "    .tx_rst_done (tx_rst_done_s[n]),\n"], [630, "    .tx_pll_locked (tx_pll_locked_s[n]),\n"], [631, "    .tx_clk (tx_clk),\n"], [632, "    .tx_charisk (tx_gt_charisk_mux_s[n*4+3:n*4]),\n"], [633, "    .tx_data (tx_gt_data_mux_s[n*32+31:n*32]),\n"], [635, "    .up_drp_sel (up_drp_sel_s),\n"], [636, "    .up_drp_addr (up_drp_addr_s),\n"], [637, "    .up_drp_wr (up_drp_wr_s),\n"], [638, "    .up_drp_wdata (up_drp_wdata_s),\n"], [639, "    .up_drp_rdata (up_drp_rdata_gt_s[n]),\n"], [640, "    .up_drp_ready (up_drp_ready_gt_s[n]),\n"], [641, "    .up_drp_lanesel (up_drp_lanesel_s),\n"], [642, "    .up_drp_rxrate (up_drp_rxrate_gt_s[n]));\n"]], "Add": [[584, "  for (n = 0; n < NUM_OF_LANES; n = n + 1) begin: g_lane_1\n"], [601, "    .ID (n),\n"], [601, "    .GTH_OR_GTX_N (GTH_OR_GTX_N),\n"], [601, "    .PMA_RSV (PMA_RSV[n]),\n"], [601, "    .CPLL_FBDIV (CPLL_FBDIV[n]),\n"], [601, "    .RX_OUT_DIV (RX_OUT_DIV[n]),\n"], [601, "    .RX_CLK25_DIV (RX_CLK25_DIV[n]),\n"], [601, "    .RX_CLKBUF_ENABLE (RX_CLKBUF_ENABLE[n]),\n"], [601, "    .RX_CDR_CFG (RX_CDR_CFG[n]),\n"], [601, "    .TX_OUT_DIV (TX_OUT_DIV[n]),\n"], [601, "    .TX_CLK25_DIV (TX_CLK25_DIV[n]),\n"], [601, "    .TX_CLKBUF_ENABLE (TX_CLKBUF_ENABLE[n]))\n"], [601, "  i_channel (\n"], [601, "    .cpll_rst_m (cpll_rst_m[n]),\n"], [601, "    .cpll_ref_clk_in (cpll_ref_clk_in[n]),\n"], [608, "    .qpll_locked (qpll_locked[n]),\n"], [608, "    .qpll_clk (qpll_clk[n]),\n"], [608, "    .rx_p (rx_p[n]),\n"], [608, "    .rx_n (rx_n[n]),\n"], [627, "    .rx_clk (rx_clk[n]),\n"], [627, "    .rx_rst (rx_rst[n]),\n"], [627, "    .rx_rst_m (rx_rst_m[n]),\n"], [627, "    .rx_sof (rx_sof[n]),\n"], [627, "    .rx_data (rx_data[((32*n)+31):(32*n)]),\n"], [627, "    .rx_sysref (rx_sysref[n]),\n"], [627, "    .rx_sync (rx_sync[n]),\n"], [627, "    .rx_pll_rst (rx_pll_rst[n]),\n"], [627, "    .rx_gt_rst (rx_gt_rst[n]),\n"], [627, "    .rx_gt_rst_m (rx_gt_rst_m[n]),\n"], [627, "    .rx_gt_charisk (rx_gt_charisk[((4*n)+3):(4*n)]),\n"], [627, "    .rx_gt_disperr (rx_gt_disperr[((4*n)+3):(4*n)]),\n"], [627, "    .rx_gt_notintable (rx_gt_notintable[((4*n)+3):(4*n)]),\n"], [627, "    .rx_gt_data (rx_gt_data[((32*n)+31):(32*n)]),\n"], [627, "    .rx_gt_comma_align_enb (rx_gt_comma_align_enb[n]),\n"], [627, "    .rx_gt_ilas_f (rx_gt_ilas_f[((4*n)+3):(4*n)]),\n"], [627, "    .rx_gt_ilas_q (rx_gt_ilas_q[((4*n)+3):(4*n)]),\n"], [627, "    .rx_gt_ilas_a (rx_gt_ilas_a[((4*n)+3):(4*n)]),\n"], [627, "    .rx_gt_ilas_r (rx_gt_ilas_r[((4*n)+3):(4*n)]),\n"], [627, "    .rx_gt_cgs_k (rx_gt_cgs_k[((4*n)+3):(4*n)]),\n"], [627, "    .rx_ip_rst (rx_ip_rst[n]),\n"], [627, "    .rx_ip_sof (rx_ip_sof[((4*n)+3):(4*n)]),\n"], [627, "    .rx_ip_data (rx_ip_data[((32*n)+31):(32*n)]),\n"], [627, "    .rx_ip_sysref (rx_ip_sysref[n]),\n"], [627, "    .rx_ip_sync (rx_ip_sync[n]),\n"], [627, "    .rx_ip_rst_done (rx_ip_rst_done[n]),\n"], [627, "    .rx_pll_locked (rx_pll_locked[n]),\n"], [627, "    .rx_user_ready (rx_user_ready[n]),\n"], [627, "    .rx_rst_done (rx_rst_done[n]),\n"], [627, "    .rx_pll_locked_m (rx_pll_locked_m[n]),\n"], [627, "    .rx_user_ready_m (rx_user_ready_m[n]),\n"], [627, "    .rx_rst_done_m (rx_rst_done_m[n]),\n"], [627, "    .tx_p (tx_p[n]),\n"], [627, "    .tx_n (tx_n[n]),\n"], [633, "    .tx_clk (tx_clk[n]),\n"], [633, "    .tx_rst (tx_rst[n]),\n"], [633, "    .tx_rst_m (tx_rst_m[n]),\n"], [633, "    .tx_data (tx_data[((32*n)+31):(32*n)]),\n"], [633, "    .tx_sysref (tx_sysref[n]),\n"], [633, "    .tx_sync (tx_sync[n]),\n"], [633, "    .tx_pll_rst (tx_pll_rst[n]),\n"], [633, "    .tx_gt_rst (tx_gt_rst[n]),\n"], [633, "    .tx_gt_rst_m (tx_gt_rst_m[n]),\n"], [633, "    .tx_gt_charisk (tx_gt_charisk[((4*TX_DATA_SEL[n])+3):(4*TX_DATA_SEL[n])]),\n"], [633, "    .tx_gt_data (tx_gt_data[((32*TX_DATA_SEL[n])+31):(32*TX_DATA_SEL[n])]),\n"], [633, "    .tx_ip_rst (tx_ip_rst[n]),\n"], [633, "    .tx_ip_data (tx_ip_data[((32*n)+31):(32*n)]),\n"], [633, "    .tx_ip_sysref (tx_ip_sysref[n]),\n"], [633, "    .tx_ip_sync (tx_ip_sync[n]),\n"], [633, "    .tx_ip_rst_done (tx_ip_rst_done[n]),\n"], [633, "    .tx_pll_locked (tx_pll_locked[n]),\n"], [633, "    .tx_user_ready (tx_user_ready[n]),\n"], [633, "    .tx_rst_done (tx_rst_done[n]),\n"], [633, "    .tx_pll_locked_m (tx_pll_locked_m[n]),\n"], [633, "    .tx_user_ready_m (tx_user_ready_m[n]),\n"], [633, "    .tx_rst_done_m (tx_rst_done_m[n]),\n"], [633, "    .up_es_dma_req (up_es_dma_req[n]),\n"], [633, "    .up_es_dma_addr (up_es_dma_addr[((32*n)+31):(32*n)]),\n"], [633, "    .up_es_dma_data (up_es_dma_data[((32*n)+31):(32*n)]),\n"], [633, "    .up_es_dma_ack (up_es_dma_ack[n]),\n"], [633, "    .up_es_dma_err (up_es_dma_err[n]),\n"], [633, "    .up_rstn (up_rstn),\n"], [642, "    .up_wreq (up_wreq),\n"], [642, "    .up_waddr (up_waddr),\n"], [642, "    .up_wdata (up_wdata),\n"], [642, "    .up_wack (up_wack[n]),\n"], [642, "    .up_rreq (up_rreq),\n"], [642, "    .up_raddr (up_raddr),\n"], [642, "    .up_rdata (up_rdata[((32*n)+31):(32*n)]),\n"], [642, "    .up_rack (up_rack[n]));\n"]]}}