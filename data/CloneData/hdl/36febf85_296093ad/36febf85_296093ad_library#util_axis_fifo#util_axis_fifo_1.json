{"Source Block": ["hdl/library/util_axis_fifo/util_axis_fifo.v@56:213@HdlStmIf", "parameter C_DATA_WIDTH = 64;\nparameter C_CLKS_ASYNC = 1;\nparameter C_ADDRESS_WIDTH = 4;\nparameter C_S_AXIS_REGISTERED = 1;\n\ngenerate if (C_ADDRESS_WIDTH == 0) begin\n\nreg [C_DATA_WIDTH-1:0] cdc_sync_fifo_ram;\nreg s_axis_waddr = 1'b0;\nreg m_axis_raddr = 1'b0;\n\nwire m_axis_waddr;\nwire s_axis_raddr;\n\nsync_bits #(\n\t.NUM_BITS(1),\n\t.CLK_ASYNC(C_CLKS_ASYNC)\n) i_waddr_sync (\n\t.out_clk(m_axis_aclk),\n\t.out_resetn(m_axis_aresetn),\n\t.in(s_axis_waddr),\n\t.out(m_axis_waddr)\n);\n\nsync_bits #(\n\t.NUM_BITS(1),\n\t.CLK_ASYNC(C_CLKS_ASYNC)\n) i_raddr_sync (\n\t.out_clk(s_axis_aclk),\n\t.out_resetn(s_axis_aresetn),\n\t.in(m_axis_raddr),\n\t.out(s_axis_raddr)\n);\n\nassign m_axis_valid = m_axis_raddr != m_axis_waddr;\nassign m_axis_level = m_axis_valid;\nassign s_axis_ready = s_axis_raddr == s_axis_waddr;\nassign s_axis_empty = s_axis_ready;\nassign s_axis_room = s_axis_ready;\n\nalways @(posedge s_axis_aclk) begin\n\tif (s_axis_ready)\n\t\tcdc_sync_fifo_ram <= s_axis_data;\nend\n\nalways @(posedge s_axis_aclk) begin\n\tif (s_axis_aresetn == 1'b0) begin\n\t\ts_axis_waddr <= 1'b0;\n\tend else begin\n\t\tif (s_axis_ready & s_axis_valid) begin\n\t\t\ts_axis_waddr <= s_axis_waddr + 1'b1;\n\t\tend\n\tend\nend\n\nalways @(posedge m_axis_aclk) begin\n\tif (m_axis_aresetn == 1'b0) begin\n\t\tm_axis_raddr <= 1'b0;\n\tend else begin\n\t\tif (m_axis_valid & m_axis_ready)\n\t\t\tm_axis_raddr <= m_axis_raddr + 1'b1;\n\tend\nend\n\nassign m_axis_data = cdc_sync_fifo_ram;\n\nend else begin\n\nreg [C_DATA_WIDTH-1:0] ram[0:2**C_ADDRESS_WIDTH-1];\n\nwire [C_ADDRESS_WIDTH-1:0] s_axis_waddr;\nwire [C_ADDRESS_WIDTH-1:0] m_axis_raddr;\nwire _m_axis_ready;\nwire _m_axis_valid;\n\nif (C_CLKS_ASYNC == 1) begin\n\nfifo_address_gray_pipelined #(\n\t.C_ADDRESS_WIDTH(C_ADDRESS_WIDTH)\n) i_address_gray (\n\t.m_axis_aclk(m_axis_aclk),\n\t.m_axis_aresetn(m_axis_aresetn),\n\t.m_axis_ready(_m_axis_ready),\n\t.m_axis_valid(_m_axis_valid),\n\t.m_axis_raddr(m_axis_raddr),\n\t.m_axis_level(m_axis_level),\n\n\t.s_axis_aclk(s_axis_aclk),\n\t.s_axis_aresetn(s_axis_aresetn),\n\t.s_axis_ready(s_axis_ready),\n\t.s_axis_valid(s_axis_valid),\n\t.s_axis_empty(s_axis_empty),\n\t.s_axis_waddr(s_axis_waddr),\n\t.s_axis_room(s_axis_room)\n);\n\nend else begin\n\nfifo_address_sync #(\n\t.C_ADDRESS_WIDTH(C_ADDRESS_WIDTH)\n) i_address_sync (\n\t.clk(m_axis_aclk),\n\t.resetn(m_axis_aresetn),\n\t.m_axis_ready(_m_axis_ready),\n\t.m_axis_valid(_m_axis_valid),\n\t.m_axis_raddr(m_axis_raddr),\n\t.m_axis_level(m_axis_level),\n\n\t.s_axis_ready(s_axis_ready),\n\t.s_axis_valid(s_axis_valid),\n\t.s_axis_empty(s_axis_empty),\n\t.s_axis_waddr(s_axis_waddr),\n\t.s_axis_room(s_axis_room)\n);\n\nend\n\nalways @(posedge s_axis_aclk) begin\n\tif (s_axis_ready)\n\t\tram[s_axis_waddr] <= s_axis_data;\nend\n\nif (C_S_AXIS_REGISTERED == 1) begin\n\nreg [C_DATA_WIDTH-1:0] data;\nreg valid;\n\nalways @(posedge m_axis_aclk) begin\n\tif (m_axis_aresetn == 1'b0) begin\n\t\tvalid <= 1'b0;\n\tend else begin\n\t\tif (_m_axis_valid)\n\t\t\tvalid <= 1'b1;\n\t\telse if (m_axis_ready)\n\t\t\tvalid <= 1'b0;\n\tend\nend\n\nalways @(posedge m_axis_aclk) begin\n\tif (~valid || m_axis_ready)\n\t\tdata <= ram[m_axis_raddr];\nend\n\nassign _m_axis_ready = ~valid || m_axis_ready;\nassign m_axis_data = data;\nassign m_axis_valid = valid;\n\nend else begin\n\nassign _m_axis_ready = m_axis_ready;\nassign m_axis_valid = _m_axis_valid;\nassign m_axis_data = ram[m_axis_raddr];\n\nend\n\nend endgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[61, "generate if (C_ADDRESS_WIDTH == 0) begin\n"], [63, "reg [C_DATA_WIDTH-1:0] cdc_sync_fifo_ram;\n"], [71, "\t.NUM_BITS(1),\n"], [72, "\t.CLK_ASYNC(C_CLKS_ASYNC)\n"], [81, "\t.NUM_BITS(1),\n"], [82, "\t.CLK_ASYNC(C_CLKS_ASYNC)\n"], [124, "reg [C_DATA_WIDTH-1:0] ram[0:2**C_ADDRESS_WIDTH-1];\n"], [126, "wire [C_ADDRESS_WIDTH-1:0] s_axis_waddr;\n"], [127, "wire [C_ADDRESS_WIDTH-1:0] m_axis_raddr;\n"], [131, "if (C_CLKS_ASYNC == 1) begin\n"], [134, "\t.C_ADDRESS_WIDTH(C_ADDRESS_WIDTH)\n"], [155, "\t.C_ADDRESS_WIDTH(C_ADDRESS_WIDTH)\n"], [178, "if (C_S_AXIS_REGISTERED == 1) begin\n"], [180, "reg [C_DATA_WIDTH-1:0] data;\n"]], "Add": [[61, "generate if (ADDRESS_WIDTH == 0) begin\n"], [63, "reg [DATA_WIDTH-1:0] cdc_sync_fifo_ram;\n"], [72, "\t.NUM_OF_BITS(1),\n"], [72, "\t.ASYNC_CLK(ASYNC_CLK)\n"], [82, "\t.NUM_OF_BITS(1),\n"], [82, "\t.ASYNC_CLK(ASYNC_CLK)\n"], [124, "reg [DATA_WIDTH-1:0] ram[0:2**ADDRESS_WIDTH-1];\n"], [127, "wire [ADDRESS_WIDTH-1:0] s_axis_waddr;\n"], [127, "wire [ADDRESS_WIDTH-1:0] m_axis_raddr;\n"], [131, "if (ASYNC_CLK == 1) begin\n"], [134, "\t.ADDRESS_WIDTH(ADDRESS_WIDTH)\n"], [155, "\t.ADDRESS_WIDTH(ADDRESS_WIDTH)\n"], [178, "if (S_AXIS_REGISTERED == 1) begin\n"], [180, "reg [DATA_WIDTH-1:0] data;\n"]]}}