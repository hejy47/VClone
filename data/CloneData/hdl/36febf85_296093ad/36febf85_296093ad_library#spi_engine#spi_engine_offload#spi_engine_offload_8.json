{"Source Block": ["hdl/library/spi_engine/spi_engine_offload/spi_engine_offload.v@64:126@HdlStmIf", "assign offload_sdi_data = sdi_data;\n\nassign cmd = cmd_mem[spi_cmd_rd_addr];\nassign sdo_data = sdo_mem[spi_sdo_rd_addr];\n\ngenerate if (SPI_CLK_ASYNC) begin\n\n/*\n * The synchronization circuit takes care that there are no glitches on the\n * ctrl_enabled signal. ctrl_do_enable is asserted whenever ctrl_enable is\n * asserted, but only deasserted once the signal has been synchronized back from\n * the SPI domain. This makes sure that we can't end up in a state where the\n * enable signal in the SPI domain is asserted, but neither enable nor enabled\n * is asserted in the control domain.\n */\n\nreg ctrl_do_enable = 1'b0;\nwire ctrl_is_enabled;\nreg spi_enabled = 1'b0;\n\nalways @(posedge ctrl_clk) begin\n\tif (ctrl_enable == 1'b1) begin\n\t\tctrl_do_enable <= 1'b1;\n\tend else if (ctrl_is_enabled == 1'b1) begin\n\t\tctrl_do_enable <= 1'b0;\n\tend\nend\n\nassign ctrl_enabled = ctrl_is_enabled | ctrl_do_enable;\n\nalways @(posedge spi_clk) begin\n\tspi_enabled <= spi_enable | spi_active;\t\nend\n\nsync_bits # (\n    .NUM_BITS(1),\n    .CLK_ASYNC(1)\n) i_sync_enable (\n    .in(ctrl_do_enable),\n    .out_clk(spi_clk),\n    .out_resetn(1'b1),\n    .out(spi_enable)\n);\n\nsync_bits # (\n    .NUM_BITS(1),\n    .CLK_ASYNC(1)\n) i_sync_enabled (\n    .in(spi_enabled),\n    .out_clk(ctrl_clk),\n    .out_resetn(1'b1),\n    .out(ctrl_is_enabled)\n);\n\nend else begin\nassign spi_enable = ctrl_enable;\nassign ctrl_enabled = spi_enable | spi_active;\nend endgenerate\n\nassign spi_cmd_rd_addr_next = spi_cmd_rd_addr + 1;\n\nalways @(posedge spi_clk) begin\n\tif (spi_resetn == 1'b0) begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[69, "generate if (SPI_CLK_ASYNC) begin\n"], [99, "    .NUM_BITS(1),\n"], [100, "    .CLK_ASYNC(1)\n"], [109, "    .NUM_BITS(1),\n"], [110, "    .CLK_ASYNC(1)\n"]], "Add": [[69, "generate if (ASYNC_SPI_CLK) begin\n"], [100, "    .NUM_OF_BITS(1),\n"], [100, "    .ASYNC_CLK(1)\n"], [110, "    .NUM_OF_BITS(1),\n"], [110, "    .ASYNC_CLK(1)\n"]]}}