{"Source Block": ["hdl/library/util_cpack/util_cpack_dsf.v@120:198@HdlStmIf", "  endgenerate\n\n  // data store & forward\n\n  generate\n  if (P_CNT > CH_ICNT) begin\n  assign adc_data_s[(M_WIDTH-1):I_WIDTH] = 'd0;\n  assign adc_data_s[(I_WIDTH-1):0] = adc_data;\n\n  always @(posedge adc_clk) begin\n    if (adc_valid == 1'b1) begin\n      if (adc_samples_int >= CH_DCNT) begin\n        adc_samples_int <= adc_samples_int - CH_DCNT;\n      end else begin\n        adc_samples_int <= adc_samples_int + CH_ICNT;\n      end\n      adc_data_int <= {adc_data_s[(I_WIDTH-1):0],\n        adc_data_int[(M_WIDTH-1):I_WIDTH]};\n    end\n  end\n\n  always @(posedge adc_clk) begin\n    adc_dsf_enable <= adc_enable;\n    if (adc_samples_int >= CH_DCNT) begin\n      adc_dsf_valid_int <= adc_valid;\n    end else begin\n      adc_dsf_valid_int <= 1'b0;\n    end\n    if (adc_dsf_sync_int == 1'b1) begin\n      if (adc_dsf_valid_int == 1'b1) begin\n        adc_dsf_sync_int <= 1'b0;\n      end\n    end else begin\n      if (adc_samples_int == 3'd0) begin\n        adc_dsf_sync_int <= 1'b1;\n      end\n    end\n  end\n\n  always @(posedge adc_clk) begin\n    if (adc_valid == 1'b1) begin\n      case (adc_samples_int)\n        3'b111:  adc_dsf_data_int <= {adc_data_s[((CH_DW*1)-1):0],\n                    adc_data_int[((CH_DW*8)-1):(CH_DW*1)]};\n        3'b110:  adc_dsf_data_int <= {adc_data_s[((CH_DW*2)-1):0],\n                    adc_data_int[((CH_DW*8)-1):(CH_DW*2)]};\n        3'b101:  adc_dsf_data_int <= {adc_data_s[((CH_DW*3)-1):0],\n                    adc_data_int[((CH_DW*8)-1):(CH_DW*3)]};\n        3'b100:  adc_dsf_data_int <= {adc_data_s[((CH_DW*4)-1):0],\n                    adc_data_int[((CH_DW*8)-1):(CH_DW*4)]};\n        3'b011:  adc_dsf_data_int <= {adc_data_s[((CH_DW*5)-1):0],\n                    adc_data_int[((CH_DW*8)-1):(CH_DW*5)]};\n        3'b010:  adc_dsf_data_int <= {adc_data_s[((CH_DW*6)-1):0],\n                    adc_data_int[((CH_DW*8)-1):(CH_DW*6)]};\n        3'b001:  adc_dsf_data_int <= {adc_data_s[((CH_DW*7)-1):0],\n                    adc_data_int[((CH_DW*8)-1):(CH_DW*7)]};\n        3'b000:  adc_dsf_data_int <= adc_data_s;\n        default: adc_dsf_data_int <= 'd0;\n      endcase\n    end\n  end\n\n  always @(posedge adc_clk) begin\n    if (adc_enable == 1'b1) begin\n      adc_dsf_valid <= adc_dsf_valid_int;\n      adc_dsf_sync <= adc_dsf_sync_int;\n      adc_dsf_data <= adc_dsf_data_int[(P_WIDTH-1):0];\n    end else begin\n      adc_dsf_valid <= 'b0;\n      adc_dsf_sync <= 'b0;\n      adc_dsf_data <= 'd0;\n    end\n  end\n  end\n  endgenerate\n\nendmodule\n\n// ***************************************************************************\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[125, "  if (P_CNT > CH_ICNT) begin\n"], [134, "        adc_samples_int <= adc_samples_int + CH_ICNT;\n"], [162, "        3'b111:  adc_dsf_data_int <= {adc_data_s[((CH_DW*1)-1):0],\n"], [163, "                    adc_data_int[((CH_DW*8)-1):(CH_DW*1)]};\n"], [164, "        3'b110:  adc_dsf_data_int <= {adc_data_s[((CH_DW*2)-1):0],\n"], [165, "                    adc_data_int[((CH_DW*8)-1):(CH_DW*2)]};\n"], [166, "        3'b101:  adc_dsf_data_int <= {adc_data_s[((CH_DW*3)-1):0],\n"], [167, "                    adc_data_int[((CH_DW*8)-1):(CH_DW*3)]};\n"], [168, "        3'b100:  adc_dsf_data_int <= {adc_data_s[((CH_DW*4)-1):0],\n"], [169, "                    adc_data_int[((CH_DW*8)-1):(CH_DW*4)]};\n"], [170, "        3'b011:  adc_dsf_data_int <= {adc_data_s[((CH_DW*5)-1):0],\n"], [171, "                    adc_data_int[((CH_DW*8)-1):(CH_DW*5)]};\n"], [172, "        3'b010:  adc_dsf_data_int <= {adc_data_s[((CH_DW*6)-1):0],\n"], [173, "                    adc_data_int[((CH_DW*8)-1):(CH_DW*6)]};\n"], [174, "        3'b001:  adc_dsf_data_int <= {adc_data_s[((CH_DW*7)-1):0],\n"], [175, "                    adc_data_int[((CH_DW*8)-1):(CH_DW*7)]};\n"]], "Add": [[125, "  if (NUM_OF_CHANNELS_P > NUM_OF_CHANNELS_I) begin\n"], [134, "        adc_samples_int <= adc_samples_int + NUM_OF_CHANNELS_I;\n"], [175, "        3'b111:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*1)-1):0],\n"], [175, "                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*1)]};\n"], [175, "        3'b110:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*2)-1):0],\n"], [175, "                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*2)]};\n"], [175, "        3'b101:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*3)-1):0],\n"], [175, "                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*3)]};\n"], [175, "        3'b100:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*4)-1):0],\n"], [175, "                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*4)]};\n"], [175, "        3'b011:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*5)-1):0],\n"], [175, "                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*5)]};\n"], [175, "        3'b010:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*6)-1):0],\n"], [175, "                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*6)]};\n"], [175, "        3'b001:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*7)-1):0],\n"], [175, "                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*7)]};\n"]]}}