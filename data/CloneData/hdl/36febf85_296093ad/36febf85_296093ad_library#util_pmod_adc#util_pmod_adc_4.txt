Source Block: hdl/library/util_pmod_adc/util_pmod_adc.v@212:276@HdlStmProcess
      end
  end

  // update the ADC current state and the control signals

  always @(posedge clk) begin
    if(reset == 1'b1) begin
      adc_state <= ADC_SW_RESET;
      adc_dbg <= 1'b0;
    end
    else begin
      adc_state <= adc_next_state;
      adc_dbg <= {adc_state, adc_clk_en, sclk_clk_cnt};
      case (adc_state)
        ADC_POWERUP: begin
          adc_convst_n    <= 1'b1;
          adc_cs_n        <= 1'b1;
          adc_valid       <= 1'b0;
          adc_sw_reset    <= 1'b0;
        end
        ADC_SW_RESET: begin
          adc_convst_n    <= 1'b1;
          adc_cs_n        <= 1'b1;
          adc_valid       <= 1'b0;
          adc_sw_reset    <= 1'b1;
        end
        ADC_IDLE: begin
          adc_convst_n    <= 1'b1;
          adc_cs_n        <= 1'b1;
          adc_valid       <= 1'b0;
          adc_sw_reset    <= 1'b0;
        end
        ADC_START_CNV: begin
          adc_convst_n    <= 1'b0;
          adc_cs_n        <= 1'b1;
          adc_valid       <= 1'b0;
        end
        ADC_WAIT_CNV_DONE: begin
          adc_convst_n    <= 1'b1;
          adc_cs_n        <= 1'b1;
          adc_valid       <= 1'b0;
        end
        ADC_READ_CNV_RESULT: begin
          adc_convst_n    <= 1'b1;
          adc_cs_n        <= 1'b0;
          adc_valid       <= 1'b0;
        end
        ADC_DATA_VALID: begin
          adc_convst_n    <= 1'b1;
          adc_cs_n        <= 1'b0;
          adc_valid       <= 1'b1;
        end
        ADC_TQUIET: begin
          adc_convst_n    <= 1'b1;
          adc_cs_n        <= 1'b1;
          adc_valid       <= 1'b0;
        end
      endcase
    end
  end

  // update the ADC next state

  always @(adc_state, adc_tconvst_cnt, adc_tconvert_cnt, sclk_clk_cnt_m1, adc_tquiet_cnt, adc_sw_reset) begin
    adc_next_state <= adc_state;

Diff Content:
- 218     if(reset == 1'b1) begin
+ 218     if(resetn == 1'b0) begin

Clone Blocks:
