{"Source Block": ["hdl/library/axi_dacfifo/axi_dacfifo_wr.v@334:361@HdlStmProcess", "    end\n  end\n\n  // The memory module request data until reaches the high threshold.\n\n  always @(posedge dma_clk) begin\n    if (dma_rst_s == 1'b1) begin\n      dma_mem_addr_diff <= 'b0;\n      dma_mem_raddr_m1 <= 'b0;\n      dma_mem_raddr_m2 <= 'b0;\n      dma_mem_raddr <= 'b0;\n    end else begin\n      dma_mem_raddr_m1 <= g2b(axi_mem_raddr_g);\n      dma_mem_raddr_m2 <= dma_mem_raddr_m1;\n      dma_mem_raddr <= dma_mem_raddr_m2;\n      dma_mem_addr_diff <= dma_mem_addr_diff_s[DMA_MEM_ADDRESS_WIDTH-1:0];\n      if (dma_mem_addr_diff >= DMA_BUF_THRESHOLD_HI) begin\n        dma_ready <= 1'b0;\n      end else begin\n        dma_ready <= 1'b1;\n      end\n    end\n  end\n\n  // An absolute address counter with DMA's granularity, this address will be\n  // used on read back\n\n  always @(posedge dma_clk) begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[346, "      dma_mem_raddr_m1 <= g2b(axi_mem_raddr_g);\n"], [348, "      dma_mem_raddr <= dma_mem_raddr_m2;\n"]], "Add": [[346, "      dma_mem_raddr_m1 <= axi_mem_raddr_g;\n"], [348, "      dma_mem_raddr <= g2b(dma_mem_raddr_m2);\n"]]}}