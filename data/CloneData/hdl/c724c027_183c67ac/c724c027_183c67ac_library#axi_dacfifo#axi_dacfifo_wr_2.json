{"Source Block": ["hdl/library/axi_dacfifo/axi_dacfifo_wr.v@375:401@HdlStmProcess", "  // The asymmetric memory have to have enough data for at least one AXI burst,\n  // before the controller start an AXI write transaction.\n\n  // CDC for the memory write address, xfer_req and xfer_last\n\n  always @(posedge axi_clk) begin\n    if (axi_resetn == 1'b0) begin\n      axi_xfer_req_m <= 3'b0;\n      axi_xfer_last_m <= 3'b0;\n      axi_xfer_init <= 1'b0;\n      axi_mem_waddr_m1 <= 'b0;\n      axi_mem_waddr_m2 <= 'b0;\n      axi_mem_waddr <= 'b0;\n    end else begin\n      axi_xfer_req_m <= {axi_xfer_req_m[1:0], dma_xfer_req};\n      axi_xfer_last_m <= {axi_xfer_last_m[1:0], dma_xfer_last};\n      axi_mem_waddr_m1 <= g2b(dma_mem_waddr_g);\n      axi_mem_waddr_m2 <= axi_mem_waddr_m1;\n      axi_mem_waddr <= axi_mem_waddr_m2;\n      axi_xfer_init = ~axi_xfer_req_m[2] & axi_xfer_req_m[1];\n    end\n  end\n\n  // check if the AXI write channel is ready\n\n  assign axi_wready_s = ~axi_wvalid | axi_wready;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[391, "      axi_mem_waddr_m1 <= g2b(dma_mem_waddr_g);\n"], [392, "      axi_mem_waddr_m2 <= axi_mem_waddr_m1;\n"], [393, "      axi_mem_waddr <= axi_mem_waddr_m2;\n"]], "Add": [[394, "      axi_mem_waddr_m1 <= dma_mem_waddr_g;\n"], [394, "      axi_mem_waddr_m2 <= axi_mem_waddr_m1;\n"], [394, "      axi_mem_waddr <= g2b(axi_mem_waddr_m2);\n"]]}}