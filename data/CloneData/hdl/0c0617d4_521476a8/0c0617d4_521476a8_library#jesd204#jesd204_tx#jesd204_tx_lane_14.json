{"Source Block": ["hdl/library/jesd204/jesd204_tx/jesd204_tx_lane.v@138:172@HdlStmFor", ");\n\ngenerate\ngenvar i;\n\nfor (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_char\n  assign scrambled_char[i] = scrambled_data_d[i*8+7:i*8];\n\n  always @(*) begin\n    if (eomf_d[i]) begin\n      char_align[i] = 8'h7c; // /A/\n    end else begin\n      char_align[i] = 8'hfc; // /F/\n    end\n  end\n\n  always @(posedge clk) begin\n    if (cgs_enable_d) begin\n      phy_charisk[i] <= 1'b1;\n    end else if (tx_ready_d) begin\n      if(!cfg_disable_scrambler) begin\n        phy_charisk[i] <= eof_d[i] && (scrambled_char[i] == char_align[i]);\n      end else begin\n        phy_charisk[i] <= charisk_replaced[i];\n      end\n    end else begin\n      phy_charisk[i] <= ilas_charisk_d[i];\n    end\n  end\nend\n\nendgenerate\n\nalways @(posedge clk) begin\n  if (cgs_enable_d) begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[143, "for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_char\n"], [144, "  assign scrambled_char[i] = scrambled_data_d[i*8+7:i*8];\n"], [146, "  always @(*) begin\n"], [147, "    if (eomf_d[i]) begin\n"], [148, "      char_align[i] = 8'h7c; // /A/\n"], [149, "    end else begin\n"], [150, "      char_align[i] = 8'hfc; // /F/\n"], [152, "  end\n"], [154, "  always @(posedge clk) begin\n"], [155, "    if (cgs_enable_d) begin\n"], [156, "      phy_charisk[i] <= 1'b1;\n"], [157, "    end else if (tx_ready_d) begin\n"], [158, "      if(!cfg_disable_scrambler) begin\n"], [159, "        phy_charisk[i] <= eof_d[i] && (scrambled_char[i] == char_align[i]);\n"], [161, "        phy_charisk[i] <= charisk_replaced[i];\n"], [163, "    end else begin\n"], [164, "      phy_charisk[i] <= ilas_charisk_d[i];\n"], [167, "end\n"]], "Add": [[150, "  wire [DATA_PATH_WIDTH*8-1:0] scrambled_data;\n"], [150, "  wire [DATA_PATH_WIDTH*8-1:0] scrambled_data_d;\n"], [150, "  wire                         cgs_enable_d;\n"], [150, "  wire                         tx_ready_d;\n"], [150, "  wire [DATA_PATH_WIDTH-1:0]   eof_d;\n"], [150, "  wire [DATA_PATH_WIDTH-1:0]   eomf_d;\n"], [150, "  wire [DATA_PATH_WIDTH*8-1:0] ilas_data_d;\n"], [150, "  wire [DATA_PATH_WIDTH-1:0]   ilas_charisk_d;\n"], [150, "  wire [DATA_PATH_WIDTH*8-1:0] data_replaced;\n"], [150, "  wire [DATA_PATH_WIDTH-1:0]   charisk_replaced;\n"], [150, "  wire [7:0]                   scrambled_char[0:DATA_PATH_WIDTH-1];\n"], [150, "  reg  [7:0]                   char_align[0:DATA_PATH_WIDTH-1];\n"], [150, "  jesd204_scrambler #(\n"], [150, "    .WIDTH (DATA_PATH_WIDTH*8),\n"], [150, "    .DESCRAMBLE (0)\n"], [150, "  ) i_scrambler (\n"], [150, "    .clk (clk),\n"], [150, "    .reset (~tx_ready),\n"], [150, "    .enable (~cfg_disable_scrambler),\n"], [150, "    .data_in (tx_data),\n"], [150, "    .data_out (scrambled_data));\n"], [150, "  pipeline_stage #(\n"], [150, "    .WIDTH ((DATA_PATH_WIDTH*19) + 2),\n"], [150, "    .REGISTERED (1)\n"], [150, "  ) i_lane_pipeline_stage (\n"], [150, "    .clk(clk),\n"], [150, "    .in({\n"], [150, "      cgs_enable,\n"], [150, "      tx_ready,\n"], [150, "      eof,\n"], [150, "      eomf,\n"], [150, "      scrambled_data,\n"], [150, "      ilas_data,\n"], [150, "      ilas_charisk\n"], [150, "    }),\n"], [150, "    .out({\n"], [150, "      cgs_enable_d,\n"], [150, "      tx_ready_d,\n"], [150, "      eof_d,\n"], [150, "      eomf_d,\n"], [150, "      scrambled_data_d,\n"], [150, "      ilas_data_d,\n"], [150, "      ilas_charisk_d\n"], [150, "    }));\n"], [150, "  jesd204_frame_align_replace #(\n"], [150, "    .DATA_PATH_WIDTH (DATA_PATH_WIDTH),\n"], [150, "    .IS_RX (1'b0),\n"], [150, "    .ENABLED (ENABLE_CHAR_REPLACE)\n"], [150, "  ) i_align_replace (\n"], [150, "    .clk (clk),\n"], [150, "    .reset (~tx_ready_d),\n"], [150, "    .cfg_octets_per_frame (cfg_octets_per_frame),\n"], [150, "    .cfg_disable_char_replacement (cfg_disable_char_replacement),\n"], [150, "    .cfg_disable_scrambler (cfg_disable_scrambler),\n"], [150, "    .data (scrambled_data_d),\n"], [150, "    .eof (eof_d),\n"], [150, "    .rx_char_is_a ({DATA_PATH_WIDTH{1'b0}}),\n"], [150, "    .rx_char_is_f ({DATA_PATH_WIDTH{1'b0}}),\n"], [150, "    .tx_eomf (eomf_d),\n"], [150, "    .data_out (data_replaced),\n"], [150, "    .charisk_out (charisk_replaced));\n"], [150, "  generate\n"], [150, "  genvar i;\n"], [150, "  for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_char\n"], [150, "    assign scrambled_char[i] = scrambled_data_d[i*8+7:i*8];\n"], [150, "    always @(*) begin\n"], [150, "      if (eomf_d[i]) begin\n"], [150, "        char_align[i] = 8'h7c; // /A/\n"], [150, "      end else begin\n"], [150, "        char_align[i] = 8'hfc; // /F/\n"], [150, "      end\n"], [159, "    always @(posedge clk) begin\n"], [159, "      if (cgs_enable_d) begin\n"], [159, "        phy_charisk[i] <= 1'b1;\n"], [159, "      end else if (tx_ready_d) begin\n"], [159, "        if(!cfg_disable_scrambler) begin\n"], [159, "          phy_charisk[i] <= eof_d[i] && (scrambled_char[i] == char_align[i]);\n"], [159, "        end else begin\n"], [159, "          phy_charisk[i] <= charisk_replaced[i];\n"], [159, "        end\n"], [161, "        phy_charisk[i] <= ilas_charisk_d[i];\n"]]}}