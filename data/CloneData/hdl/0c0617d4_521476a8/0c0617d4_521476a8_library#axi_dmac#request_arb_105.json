{"Source Block": ["hdl/library/axi_dmac/request_arb.v@607:701@HdlStmIf", "assign fifo_rd_underflow = 1'b0;\nassign fifo_rd_xfer_req = 1'b0;\n\nend endgenerate\n\ngenerate if (DMA_TYPE_SRC == DMA_TYPE_MM_AXI) begin\n\nwire [ID_WIDTH-1:0] src_data_id;\nwire [ID_WIDTH-1:0] src_address_id;\nwire src_address_eot = eot_mem_src[src_address_id];\n\nassign source_id = src_address_id;\nassign source_eot = src_address_eot;\n\nassign src_clk = m_src_axi_aclk;\nassign src_ext_resetn = m_src_axi_aresetn;\n\nassign dbg_src_address_id = src_address_id;\nassign dbg_src_data_id = src_data_id;\n\nsrc_axi_mm #(\n  .ID_WIDTH(ID_WIDTH),\n  .DMA_DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n  .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC),\n  .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_SRC),\n  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_SRC)\n) i_src_dma_mm (\n  .m_axi_aclk(m_src_axi_aclk),\n  .m_axi_aresetn(src_resetn),\n\n  .enable(src_enable),\n  .enabled(src_enabled),\n\n  .req_valid(src_req_valid),\n  .req_ready(src_req_ready),\n  .req_address(src_req_src_address),\n  .req_last_burst_length(src_req_last_burst_length),\n  .req_last_beat_bytes(src_req_last_beat_bytes),\n\n  .bl_valid(src_bl_valid),\n  .bl_ready(src_bl_ready),\n  .measured_last_burst_length(src_burst_length),\n\n/* TODO\n  .response_valid(src_response_valid),\n  .response_ready(src_response_ready),\n  .response_resp(src_response_resp),\n*/\n\n  .request_id(src_throttled_request_id),\n  .response_id(src_response_id),\n  .address_id(src_address_id),\n  .data_id(src_data_id),\n\n  .address_eot(src_address_eot),\n\n  .fifo_valid(src_valid),\n  .fifo_data(src_data),\n  .fifo_valid_bytes(src_valid_bytes),\n  .fifo_last(src_last),\n\n  .m_axi_arready(m_axi_arready),\n  .m_axi_arvalid(m_axi_arvalid),\n  .m_axi_araddr(m_axi_araddr),\n  .m_axi_arlen(m_axi_arlen),\n  .m_axi_arsize(m_axi_arsize),\n  .m_axi_arburst(m_axi_arburst),\n  .m_axi_arprot(m_axi_arprot),\n  .m_axi_arcache(m_axi_arcache),\n\n  .m_axi_rready(m_axi_rready),\n  .m_axi_rvalid(m_axi_rvalid),\n  .m_axi_rdata(m_axi_rdata),\n  .m_axi_rlast(m_axi_rlast),\n  .m_axi_rresp(m_axi_rresp)\n);\n\nend else begin\n\nassign m_axi_arvalid = 1'b0;\nassign m_axi_araddr = 'h00;\nassign m_axi_arlen = 'h00;\nassign m_axi_arsize = 'h00;\nassign m_axi_arburst = 'h00;\nassign m_axi_arcache = 'h00;\nassign m_axi_arprot = 'h00;\nassign m_axi_rready = 1'b0;\n\nend\n\nif (DMA_TYPE_SRC == DMA_TYPE_STREAM_AXI) begin\n\nassign src_clk = s_axis_aclk;\nassign src_ext_resetn = 1'b1;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[612, "generate if (DMA_TYPE_SRC == DMA_TYPE_MM_AXI) begin\n"], [614, "wire [ID_WIDTH-1:0] src_data_id;\n"], [615, "wire [ID_WIDTH-1:0] src_address_id;\n"], [616, "wire src_address_eot = eot_mem_src[src_address_id];\n"], [618, "assign source_id = src_address_id;\n"], [619, "assign source_eot = src_address_eot;\n"], [621, "assign src_clk = m_src_axi_aclk;\n"], [622, "assign src_ext_resetn = m_src_axi_aresetn;\n"], [624, "assign dbg_src_address_id = src_address_id;\n"], [625, "assign dbg_src_data_id = src_data_id;\n"], [627, "src_axi_mm #(\n"], [628, "  .ID_WIDTH(ID_WIDTH),\n"], [629, "  .DMA_DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n"], [630, "  .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n"], [631, "  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC),\n"], [632, "  .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_SRC),\n"], [633, "  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_SRC)\n"], [634, ") i_src_dma_mm (\n"], [635, "  .m_axi_aclk(m_src_axi_aclk),\n"], [636, "  .m_axi_aresetn(src_resetn),\n"], [638, "  .enable(src_enable),\n"], [639, "  .enabled(src_enabled),\n"], [641, "  .req_valid(src_req_valid),\n"], [642, "  .req_ready(src_req_ready),\n"], [643, "  .req_address(src_req_src_address),\n"], [644, "  .req_last_burst_length(src_req_last_burst_length),\n"], [645, "  .req_last_beat_bytes(src_req_last_beat_bytes),\n"], [647, "  .bl_valid(src_bl_valid),\n"], [648, "  .bl_ready(src_bl_ready),\n"], [649, "  .measured_last_burst_length(src_burst_length),\n"], [651, "/* TODO\n"], [652, "  .response_valid(src_response_valid),\n"], [653, "  .response_ready(src_response_ready),\n"], [654, "  .response_resp(src_response_resp),\n"], [655, "*/\n"], [657, "  .request_id(src_throttled_request_id),\n"], [658, "  .response_id(src_response_id),\n"], [659, "  .address_id(src_address_id),\n"], [660, "  .data_id(src_data_id),\n"], [662, "  .address_eot(src_address_eot),\n"], [664, "  .fifo_valid(src_valid),\n"], [665, "  .fifo_data(src_data),\n"], [666, "  .fifo_valid_bytes(src_valid_bytes),\n"], [667, "  .fifo_last(src_last),\n"], [669, "  .m_axi_arready(m_axi_arready),\n"], [670, "  .m_axi_arvalid(m_axi_arvalid),\n"], [671, "  .m_axi_araddr(m_axi_araddr),\n"], [672, "  .m_axi_arlen(m_axi_arlen),\n"], [673, "  .m_axi_arsize(m_axi_arsize),\n"], [674, "  .m_axi_arburst(m_axi_arburst),\n"], [675, "  .m_axi_arprot(m_axi_arprot),\n"], [676, "  .m_axi_arcache(m_axi_arcache),\n"], [678, "  .m_axi_rready(m_axi_rready),\n"], [679, "  .m_axi_rvalid(m_axi_rvalid),\n"], [680, "  .m_axi_rdata(m_axi_rdata),\n"], [681, "  .m_axi_rlast(m_axi_rlast),\n"], [682, "  .m_axi_rresp(m_axi_rresp)\n"], [683, ");\n"], [685, "end else begin\n"], [687, "assign m_axi_arvalid = 1'b0;\n"], [688, "assign m_axi_araddr = 'h00;\n"], [689, "assign m_axi_arlen = 'h00;\n"], [690, "assign m_axi_arsize = 'h00;\n"], [691, "assign m_axi_arburst = 'h00;\n"], [692, "assign m_axi_arcache = 'h00;\n"], [693, "assign m_axi_arprot = 'h00;\n"], [694, "assign m_axi_rready = 1'b0;\n"], [696, "end\n"]], "Add": [[683, "    .response_id(dest_response_id),\n"], [683, "    .data_id(data_id),\n"], [685, "    .data_eot(data_eot),\n"], [685, "    .response_eot(response_eot),\n"], [685, "    .fifo_valid(dest_valid),\n"], [685, "    .fifo_ready(dest_ready),\n"], [685, "    .fifo_data(dest_data),\n"], [685, "    .fifo_last(dest_last),\n"], [685, "    .en(fifo_rd_en),\n"], [685, "    .valid(fifo_rd_valid),\n"], [685, "    .dout(fifo_rd_dout),\n"], [685, "    .underflow(fifo_rd_underflow),\n"], [685, "    .xfer_req(fifo_rd_xfer_req));\n"], [685, "  end else begin\n"], [685, "  assign fifo_rd_valid = 1'b0;\n"], [685, "  assign fifo_rd_dout = 'h0;\n"], [685, "  assign fifo_rd_underflow = 1'b0;\n"], [685, "  assign fifo_rd_xfer_req = 1'b0;\n"], [685, "  end endgenerate\n"], [685, "  generate if (DMA_TYPE_SRC == DMA_TYPE_MM_AXI) begin\n"], [685, "  wire [ID_WIDTH-1:0] src_data_id;\n"], [685, "  wire [ID_WIDTH-1:0] src_address_id;\n"], [685, "  wire src_address_eot = eot_mem_src[src_address_id];\n"], [685, "  assign source_id = src_address_id;\n"], [685, "  assign source_eot = src_address_eot;\n"], [685, "  assign src_clk = m_src_axi_aclk;\n"], [685, "  assign src_ext_resetn = m_src_axi_aresetn;\n"], [685, "  assign dbg_src_address_id = src_address_id;\n"], [685, "  assign dbg_src_data_id = src_data_id;\n"], [685, "  src_axi_mm #(\n"], [685, "    .ID_WIDTH(ID_WIDTH),\n"], [685, "    .DMA_DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n"], [685, "    .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n"], [685, "    .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC),\n"], [685, "    .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_SRC),\n"], [685, "    .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_SRC)\n"], [685, "  ) i_src_dma_mm (\n"], [685, "    .m_axi_aclk(m_src_axi_aclk),\n"], [685, "    .m_axi_aresetn(src_resetn),\n"], [685, "    .enable(src_enable),\n"], [685, "    .enabled(src_enabled),\n"], [685, "    .req_valid(src_req_valid),\n"], [685, "    .req_ready(src_req_ready),\n"], [685, "    .req_address(src_req_src_address),\n"], [685, "    .req_last_burst_length(src_req_last_burst_length),\n"], [685, "    .req_last_beat_bytes(src_req_last_beat_bytes),\n"], [685, "    .bl_valid(src_bl_valid),\n"], [685, "    .bl_ready(src_bl_ready),\n"], [685, "    .measured_last_burst_length(src_burst_length),\n"], [685, "  /* TODO\n"], [685, "    .response_valid(src_response_valid),\n"], [685, "    .response_ready(src_response_ready),\n"], [685, "    .response_resp(src_response_resp),\n"], [685, "  */\n"], [685, "    .request_id(src_throttled_request_id),\n"], [685, "    .response_id(src_response_id),\n"], [685, "    .address_id(src_address_id),\n"], [685, "    .data_id(src_data_id),\n"], [685, "    .address_eot(src_address_eot),\n"], [685, "    .fifo_valid(src_valid),\n"], [685, "    .fifo_data(src_data),\n"], [685, "    .fifo_valid_bytes(src_valid_bytes),\n"], [685, "    .fifo_last(src_last),\n"], [685, "    .m_axi_arready(m_axi_arready),\n"], [685, "    .m_axi_arvalid(m_axi_arvalid),\n"], [685, "    .m_axi_araddr(m_axi_araddr),\n"], [685, "    .m_axi_arlen(m_axi_arlen),\n"], [685, "    .m_axi_arsize(m_axi_arsize),\n"], [685, "    .m_axi_arburst(m_axi_arburst),\n"], [685, "    .m_axi_arprot(m_axi_arprot),\n"], [685, "    .m_axi_arcache(m_axi_arcache),\n"], [685, "    .m_axi_rready(m_axi_rready),\n"], [685, "    .m_axi_rvalid(m_axi_rvalid),\n"], [685, "    .m_axi_rdata(m_axi_rdata),\n"], [685, "    .m_axi_rlast(m_axi_rlast),\n"], [685, "    .m_axi_rresp(m_axi_rresp));\n"], [685, "  end else begin\n"], [685, "  assign m_axi_arvalid = 1'b0;\n"], [685, "  assign m_axi_araddr = 'h00;\n"], [685, "  assign m_axi_arlen = 'h00;\n"], [685, "  assign m_axi_arsize = 'h00;\n"], [685, "  assign m_axi_arburst = 'h00;\n"], [685, "  assign m_axi_arcache = 'h00;\n"], [685, "  assign m_axi_arprot = 'h00;\n"], [685, "  assign m_axi_rready = 1'b0;\n"], [694, "  end\n"], [696, "  if (DMA_TYPE_SRC == DMA_TYPE_STREAM_AXI) begin\n"]]}}