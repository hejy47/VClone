Source Block: hdl/library/jesd204/jesd204_rx/jesd204_rx.v@502:608@HdlStmIf

assign status_lane_emb_state = 'b0;

end

if (LINK_MODE[1] == 1) begin : mode_64b66b

wire [NUM_LANES-1:0] emb_lock;
wire link_buffer_release_n;

sync_bits #(
  .NUM_OF_BITS (1),
  .ASYNC_CLK(ASYNC_CLK)
) i_buffer_release_cdc (
  .in_bits(buffer_release_n),
  .out_clk(clk),
  .out_resetn(1'b1),
  .out_bits(link_buffer_release_n)
);

jesd204_rx_ctrl_64b  #(
  .NUM_LANES(NUM_LANES)
) i_jesd204_rx_ctrl_64b (
  .clk(clk),
  .reset(reset),

  .cfg_lanes_disable(cfg_lanes_disable),

  .phy_block_sync(phy_block_sync_r),
  .emb_lock(emb_lock),

  .all_emb_lock(all_emb_lock),
  .buffer_release_n(link_buffer_release_n),

  .status_state(status_ctrl_state),
  .event_unexpected_lane_state_error(event_unexpected_lane_state_error)
);

for (i = 0; i < NUM_LANES; i = i + 1) begin: gen_lane

  localparam D_START = i * DATA_PATH_WIDTH*8;
  localparam D_STOP = D_START + DATA_PATH_WIDTH*8-1;
  localparam TPL_D_START = i * TPL_DATA_PATH_WIDTH*8;
  localparam TPL_D_STOP = TPL_D_START + TPL_DATA_PATH_WIDTH*8-1;
  localparam H_START = i * 2;
  localparam H_STOP = H_START + 2-1;

  wire [7:0] status_lane_skew;

  jesd204_rx_lane_64b #(
    .ELASTIC_BUFFER_SIZE(ELASTIC_BUFFER_SIZE),
    .TPL_DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH),
    .ASYNC_CLK(ASYNC_CLK)
  ) i_lane (
    .clk(clk),
    .reset(reset),

    .device_clk(device_clk),
    .device_reset(device_reset),

    .phy_data(phy_data_r[D_STOP:D_START]),
    .phy_header(phy_header_r[H_STOP:H_START]),
    .phy_block_sync(phy_block_sync_r[i]),

    .cfg_disable_scrambler(cfg_disable_scrambler),
    .cfg_header_mode(2'b0),
    .cfg_rx_thresh_emb_err(5'd8),
    .cfg_beats_per_multiframe(cfg_beats_per_multiframe),

    .rx_data(rx_data_s[TPL_D_STOP:TPL_D_START]),

    .buffer_release_n(buffer_release_n),
    .buffer_ready_n(buffer_ready_n[i]),
    .all_buffer_ready_n(all_buffer_ready_n),

    .lmfc_edge(lmfc_edge_synced),
    .emb_lock(emb_lock[i]),

    .ctrl_err_statistics_reset(ctrl_err_statistics_reset),
    .ctrl_err_statistics_mask(ctrl_err_statistics_mask[6:3]),
    .status_err_statistics_cnt(status_err_statistics_cnt[32*i+31:32*i]),

    .status_lane_emb_state(status_lane_emb_state[3*i+2:3*i]),
    .status_lane_skew(status_lane_skew)
  );

assign status_lane_latency[14*(i+1)-1:14*i] = {3'b0,status_lane_skew,3'b0};

end

// Assign unused outputs
assign sync = 'b0;
assign phy_en_char_align = 1'b0;

assign ilas_config_valid ='b0;
assign ilas_config_addr = 'b0;
assign ilas_config_data = 'b0;
assign status_lane_cgs_state = 'b0;
assign status_lane_ifs_ready = {NUM_LANES{1'b1}};
assign event_frame_alignment_error = 1'b0;

end


endgenerate

// Core static parameters

Diff Content:
- 507 if (LINK_MODE[1] == 1) begin : mode_64b66b
- 509 wire [NUM_LANES-1:0] emb_lock;
- 510 wire link_buffer_release_n;
- 512 sync_bits #(
- 513   .NUM_OF_BITS (1),
- 514   .ASYNC_CLK(ASYNC_CLK)
- 515 ) i_buffer_release_cdc (
- 516   .in_bits(buffer_release_n),
- 517   .out_clk(clk),
- 518   .out_resetn(1'b1),
- 519   .out_bits(link_buffer_release_n)
- 520 );
- 522 jesd204_rx_ctrl_64b  #(
- 523   .NUM_LANES(NUM_LANES)
- 524 ) i_jesd204_rx_ctrl_64b (
- 525   .clk(clk),
- 526   .reset(reset),
- 528   .cfg_lanes_disable(cfg_lanes_disable),
- 530   .phy_block_sync(phy_block_sync_r),
- 531   .emb_lock(emb_lock),
- 533   .all_emb_lock(all_emb_lock),
- 534   .buffer_release_n(link_buffer_release_n),
- 536   .status_state(status_ctrl_state),
- 537   .event_unexpected_lane_state_error(event_unexpected_lane_state_error)
- 538 );
- 540 for (i = 0; i < NUM_LANES; i = i + 1) begin: gen_lane
- 542   localparam D_START = i * DATA_PATH_WIDTH*8;
- 543   localparam D_STOP = D_START + DATA_PATH_WIDTH*8-1;
- 544   localparam TPL_D_START = i * TPL_DATA_PATH_WIDTH*8;
- 545   localparam TPL_D_STOP = TPL_D_START + TPL_DATA_PATH_WIDTH*8-1;
- 546   localparam H_START = i * 2;
- 547   localparam H_STOP = H_START + 2-1;
- 549   wire [7:0] status_lane_skew;
- 551   jesd204_rx_lane_64b #(
- 552     .ELASTIC_BUFFER_SIZE(ELASTIC_BUFFER_SIZE),
- 553     .TPL_DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH),
- 555   ) i_lane (
- 559     .device_clk(device_clk),
- 560     .device_reset(device_reset),
- 562     .phy_data(phy_data_r[D_STOP:D_START]),
- 563     .phy_header(phy_header_r[H_STOP:H_START]),
- 564     .phy_block_sync(phy_block_sync_r[i]),
- 566     .cfg_disable_scrambler(cfg_disable_scrambler),
- 567     .cfg_header_mode(2'b0),
- 568     .cfg_rx_thresh_emb_err(5'd8),
- 569     .cfg_beats_per_multiframe(cfg_beats_per_multiframe),
- 571     .rx_data(rx_data_s[TPL_D_STOP:TPL_D_START]),
- 573     .buffer_release_n(buffer_release_n),
- 574     .buffer_ready_n(buffer_ready_n[i]),
- 575     .all_buffer_ready_n(all_buffer_ready_n),
- 577     .lmfc_edge(lmfc_edge_synced),
- 578     .emb_lock(emb_lock[i]),
- 580     .ctrl_err_statistics_reset(ctrl_err_statistics_reset),
- 581     .ctrl_err_statistics_mask(ctrl_err_statistics_mask[6:3]),
- 582     .status_err_statistics_cnt(status_err_statistics_cnt[32*i+31:32*i]),
- 584     .status_lane_emb_state(status_lane_emb_state[3*i+2:3*i]),
- 585     .status_lane_skew(status_lane_skew)
- 586   );
- 588 assign status_lane_latency[14*(i+1)-1:14*i] = {3'b0,status_lane_skew,3'b0};
- 590 end
- 593 assign sync = 'b0;
- 594 assign phy_en_char_align = 1'b0;
- 596 assign ilas_config_valid ='b0;
- 597 assign ilas_config_addr = 'b0;
- 598 assign ilas_config_data = 'b0;
- 599 assign status_lane_cgs_state = 'b0;
- 600 assign status_lane_ifs_ready = {NUM_LANES{1'b1}};
- 601 assign event_frame_alignment_error = 1'b0;
- 603 end
+ 507   /* If one of the enabled lanes falls out of DATA phase while the link is in DATA phase
+ 507    * report an error event */
+ 507   assign unexpected_lane_state_error = |(~(cgs_ready|cfg_lanes_disable)) & &status_ctrl_state;
+ 507   always @(posedge clk) begin
+ 507     unexpected_lane_state_error_d <= unexpected_lane_state_error;
+ 507   end
+ 507   assign event_unexpected_lane_state_error = unexpected_lane_state_error & ~unexpected_lane_state_error_d;
+ 510   /* Delay matching based on the number of pipeline stages */
+ 510   reg [NUM_LANES-1:0] ifs_ready_d1 = 1'b0;
+ 510   reg [NUM_LANES-1:0] ifs_ready_d2 = 1'b0;
+ 510   reg [NUM_LANES-1:0] ifs_ready_mux;
+ 520   always @(posedge clk) begin
+ 520     ifs_ready_d1 <= ifs_ready;
+ 520     ifs_ready_d2 <= ifs_ready_d1;
+ 520   end
+ 526   always @(*) begin
+ 526     case (SCRAMBLER_REGISTERED + ALIGN_MUX_REGISTERED)
+ 526     1: ifs_ready_mux = ifs_ready_d1;
+ 526     2: ifs_ready_mux = ifs_ready_d2;
+ 526     default: ifs_ready_mux = ifs_ready;
+ 526     endcase
+ 526   end
+ 528   jesd204_lane_latency_monitor #(
+ 528     .NUM_LANES(NUM_LANES),
+ 528     .DATA_PATH_WIDTH(DATA_PATH_WIDTH)
+ 528   ) i_lane_latency_monitor (
+ 528     .clk(clk),
+ 528     .reset(latency_monitor_reset),
+ 531     .lane_ready(ifs_ready_mux),
+ 531     .lane_frame_align(frame_align),
+ 531     .lane_latency_ready(status_lane_ifs_ready),
+ 531     .lane_latency(status_lane_latency));
+ 534   assign status_lane_emb_state = 'b0;
+ 540   end
+ 547   if (LINK_MODE[1] == 1) begin : mode_64b66b
+ 549   wire [NUM_LANES-1:0] emb_lock;
+ 549   wire link_buffer_release_n;
+ 553   sync_bits #(
+ 553     .NUM_OF_BITS (1),
+ 555   ) i_buffer_release_cdc (
+ 555     .in_bits(buffer_release_n),
+ 555     .out_clk(clk),
+ 555     .out_resetn(1'b1),
+ 555     .out_bits(link_buffer_release_n));
+ 555   jesd204_rx_ctrl_64b  #(
+ 555     .NUM_LANES(NUM_LANES)
+ 555   ) i_jesd204_rx_ctrl_64b (
+ 560     .cfg_lanes_disable(cfg_lanes_disable),
+ 560     .phy_block_sync(phy_block_sync_r),
+ 560     .emb_lock(emb_lock),
+ 560     .all_emb_lock(all_emb_lock),
+ 560     .buffer_release_n(link_buffer_release_n),
+ 560     .status_state(status_ctrl_state),
+ 560     .event_unexpected_lane_state_error(event_unexpected_lane_state_error));
+ 564   for (i = 0; i < NUM_LANES; i = i + 1) begin: gen_lane
+ 569     localparam D_START = i * DATA_PATH_WIDTH*8;
+ 569     localparam D_STOP = D_START + DATA_PATH_WIDTH*8-1;
+ 569     localparam TPL_D_START = i * TPL_DATA_PATH_WIDTH*8;
+ 569     localparam TPL_D_STOP = TPL_D_START + TPL_DATA_PATH_WIDTH*8-1;
+ 569     localparam H_START = i * 2;
+ 569     localparam H_STOP = H_START + 2-1;
+ 571     wire [7:0] status_lane_skew;
+ 575     jesd204_rx_lane_64b #(
+ 575       .ELASTIC_BUFFER_SIZE(ELASTIC_BUFFER_SIZE),
+ 575       .TPL_DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH),
+ 575       .ASYNC_CLK(ASYNC_CLK)
+ 575     ) i_lane (
+ 575       .clk(clk),
+ 575       .reset(reset),
+ 578       .device_clk(device_clk),
+ 578       .device_reset(device_reset),
+ 582       .phy_data(phy_data_r[D_STOP:D_START]),
+ 582       .phy_header(phy_header_r[H_STOP:H_START]),
+ 582       .phy_block_sync(phy_block_sync_r[i]),
+ 586       .cfg_disable_scrambler(cfg_disable_scrambler),
+ 586       .cfg_header_mode(2'b0),
+ 586       .cfg_rx_thresh_emb_err(5'd8),
+ 586       .cfg_beats_per_multiframe(cfg_beats_per_multiframe),
+ 588       .rx_data(rx_data_s[TPL_D_STOP:TPL_D_START]),
+ 590       .buffer_release_n(buffer_release_n),
+ 590       .buffer_ready_n(buffer_ready_n[i]),
+ 590       .all_buffer_ready_n(all_buffer_ready_n),
+ 594       .lmfc_edge(lmfc_edge_synced),
+ 594       .emb_lock(emb_lock[i]),
+ 601       .ctrl_err_statistics_reset(ctrl_err_statistics_reset),
+ 601       .ctrl_err_statistics_mask(ctrl_err_statistics_mask[6:3]),
+ 601       .status_err_statistics_cnt(status_err_statistics_cnt[32*i+31:32*i]),
+ 603       .status_lane_emb_state(status_lane_emb_state[3*i+2:3*i]),
+ 603       .status_lane_skew(status_lane_skew));
+ 603   assign status_lane_latency[14*(i+1)-1:14*i] = {3'b0,status_lane_skew,3'b0};

Clone Blocks:
