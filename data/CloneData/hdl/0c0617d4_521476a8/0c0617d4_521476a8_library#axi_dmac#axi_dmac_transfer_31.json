{"Source Block": ["hdl/library/axi_dmac/axi_dmac_transfer.v@249:322@HdlStmIf", " * shutdown and reset phase.\n */\nassign req_valid_gated = req_enable & req_valid;\nassign req_ready = req_enable & req_ready_gated;\n\ngenerate if (DMA_2D_TRANSFER == 1) begin\n\ndmac_2d_transfer #(\n  .DMA_AXI_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n  .DMA_LENGTH_WIDTH (DMA_LENGTH_WIDTH),\n  .BYTES_PER_BURST_WIDTH (BYTES_PER_BURST_WIDTH),\n  .BYTES_PER_BEAT_WIDTH_DEST (BYTES_PER_BEAT_WIDTH_DEST),\n  .BYTES_PER_BEAT_WIDTH_SRC (BYTES_PER_BEAT_WIDTH_SRC)\n) i_2d_transfer (\n  .req_aclk (req_clk),\n  .req_aresetn (req_resetn),\n\n  .req_eot (req_eot),\n  .req_measured_burst_length (req_measured_burst_length),\n  .req_response_partial (req_response_partial),\n  .req_response_valid (req_response_valid),\n  .req_response_ready (req_response_ready),\n\n  .req_valid (req_valid_gated),\n  .req_ready (req_ready_gated),\n  .req_dest_address (req_dest_address),\n  .req_src_address (req_src_address),\n  .req_x_length (req_x_length),\n  .req_y_length (req_y_length),\n  .req_dest_stride (req_dest_stride),\n  .req_src_stride (req_src_stride),\n  .req_sync_transfer_start (req_sync_transfer_start),\n  .req_last (req_last),\n\n  .out_abort_req (abort_req),\n  .out_req_valid (dma_req_valid),\n  .out_req_ready (dma_req_ready),\n  .out_req_dest_address (dma_req_dest_address),\n  .out_req_src_address (dma_req_src_address),\n  .out_req_length (dma_req_length),\n  .out_req_sync_transfer_start (dma_req_sync_transfer_start),\n  .out_req_last (dma_req_last),\n  .out_eot (dma_req_eot),\n  .out_measured_burst_length (dma_req_measured_burst_length),\n  .out_response_partial (dma_response_partial),\n  .out_response_valid (dma_response_valid),\n  .out_response_ready (dma_response_ready)\n  );\n\nend else begin\n\n/* Request */\nassign dma_req_valid = req_valid_gated;\nassign req_ready_gated = dma_req_ready;\n\nassign dma_req_dest_address = req_dest_address;\nassign dma_req_src_address = req_src_address;\nassign dma_req_length = req_x_length;\nassign dma_req_sync_transfer_start = req_sync_transfer_start;\nassign dma_req_last = req_last;\n\n/* Response */\nassign req_eot = dma_req_eot;\nassign req_measured_burst_length = dma_req_measured_burst_length;\nassign req_response_partial = dma_response_partial;\nassign req_response_valid = dma_response_valid;\nassign dma_response_ready = req_response_ready;\n\nend endgenerate\n\nrequest_arb #(\n  .DMA_DATA_WIDTH_SRC (DMA_DATA_WIDTH_SRC),\n  .DMA_DATA_WIDTH_DEST (DMA_DATA_WIDTH_DEST),\n  .DMA_LENGTH_WIDTH (DMA_LENGTH_WIDTH),\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[254, "generate if (DMA_2D_TRANSFER == 1) begin\n"], [256, "dmac_2d_transfer #(\n"], [257, "  .DMA_AXI_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n"], [258, "  .DMA_LENGTH_WIDTH (DMA_LENGTH_WIDTH),\n"], [259, "  .BYTES_PER_BURST_WIDTH (BYTES_PER_BURST_WIDTH),\n"], [260, "  .BYTES_PER_BEAT_WIDTH_DEST (BYTES_PER_BEAT_WIDTH_DEST),\n"], [261, "  .BYTES_PER_BEAT_WIDTH_SRC (BYTES_PER_BEAT_WIDTH_SRC)\n"], [262, ") i_2d_transfer (\n"], [263, "  .req_aclk (req_clk),\n"], [264, "  .req_aresetn (req_resetn),\n"], [266, "  .req_eot (req_eot),\n"], [267, "  .req_measured_burst_length (req_measured_burst_length),\n"], [268, "  .req_response_partial (req_response_partial),\n"], [269, "  .req_response_valid (req_response_valid),\n"], [270, "  .req_response_ready (req_response_ready),\n"], [272, "  .req_valid (req_valid_gated),\n"], [273, "  .req_ready (req_ready_gated),\n"], [274, "  .req_dest_address (req_dest_address),\n"], [275, "  .req_src_address (req_src_address),\n"], [276, "  .req_x_length (req_x_length),\n"], [277, "  .req_y_length (req_y_length),\n"], [278, "  .req_dest_stride (req_dest_stride),\n"], [279, "  .req_src_stride (req_src_stride),\n"], [280, "  .req_sync_transfer_start (req_sync_transfer_start),\n"], [281, "  .req_last (req_last),\n"], [283, "  .out_abort_req (abort_req),\n"], [284, "  .out_req_valid (dma_req_valid),\n"], [285, "  .out_req_ready (dma_req_ready),\n"], [286, "  .out_req_dest_address (dma_req_dest_address),\n"], [287, "  .out_req_src_address (dma_req_src_address),\n"], [288, "  .out_req_length (dma_req_length),\n"], [289, "  .out_req_sync_transfer_start (dma_req_sync_transfer_start),\n"], [290, "  .out_req_last (dma_req_last),\n"], [291, "  .out_eot (dma_req_eot),\n"], [292, "  .out_measured_burst_length (dma_req_measured_burst_length),\n"], [293, "  .out_response_partial (dma_response_partial),\n"], [294, "  .out_response_valid (dma_response_valid),\n"], [295, "  .out_response_ready (dma_response_ready)\n"], [296, "  );\n"], [298, "end else begin\n"], [300, "/* Request */\n"], [301, "assign dma_req_valid = req_valid_gated;\n"], [302, "assign req_ready_gated = dma_req_ready;\n"], [304, "assign dma_req_dest_address = req_dest_address;\n"], [305, "assign dma_req_src_address = req_src_address;\n"], [306, "assign dma_req_length = req_x_length;\n"], [307, "assign dma_req_sync_transfer_start = req_sync_transfer_start;\n"], [308, "assign dma_req_last = req_last;\n"], [310, "/* Response */\n"], [311, "assign req_eot = dma_req_eot;\n"], [312, "assign req_measured_burst_length = dma_req_measured_burst_length;\n"], [313, "assign req_response_partial = dma_response_partial;\n"], [314, "assign req_response_valid = dma_response_valid;\n"], [315, "assign dma_response_ready = req_response_ready;\n"], [317, "end endgenerate\n"]], "Add": []}}