{"Source Block": ["hdl/library/axi_dmac/axi_dmac_reset_manager.v@96:112@HdlStmProcess", "\nassign req_enable = do_enable;\n\nassign dbg_status = {needs_reset,req_resetn,src_resetn,dest_resetn,1'b0,req_enabled,enabled_src,enabled_dest,1'b0,state};\n\nalways @(posedge clk) begin\n  if (state == STATE_DO_RESET) begin\n    do_reset <= 1'b1;\n  end else begin\n    do_reset <= 1'b0;\n  end\nend\n\nalways @(posedge clk) begin\n  if (state == STATE_STARTUP || state == STATE_ENABLED) begin\n    do_enable <= 1'b1;\n  end else begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[101, "always @(posedge clk) begin\n"], [102, "  if (state == STATE_DO_RESET) begin\n"], [103, "    do_reset <= 1'b1;\n"], [104, "  end else begin\n"], [105, "    do_reset <= 1'b0;\n"], [107, "end\n"]], "Add": [[105, "  /*\n"], [105, "   * TODO:\n"], [105, "   * If an external reset is asserted for a domain that domain will go into reset\n"], [105, "   * immediately. If a transfer is currently active the transfer will be aborted\n"], [105, "   * and other domains will be shutdown gracefully. The reset manager will stay in\n"], [105, "   * the shutdown state until all external resets have been de-asserted.\n"], [105, "   */\n"], [105, "  localparam STATE_DO_RESET = 3'h0;\n"], [105, "  localparam STATE_RESET = 3'h1;\n"], [105, "  localparam STATE_DISABLED = 3'h2;\n"], [105, "  localparam STATE_STARTUP = 3'h3;\n"], [105, "  localparam STATE_ENABLED = 3'h4;\n"], [105, "  localparam STATE_SHUTDOWN = 3'h5;\n"], [105, "  reg [2:0] state = 3'b000;\n"], [105, "  reg needs_reset = 1'b0;\n"], [105, "  reg do_reset = 1'b0;\n"], [105, "  reg do_enable = 1'b0;\n"], [105, "  wire enabled_dest;\n"], [105, "  wire enabled_src;\n"], [105, "  wire enabled_all;\n"], [105, "  wire disabled_all;\n"], [105, "  assign enabled_all = req_enabled & enabled_src & enabled_dest;\n"], [105, "  assign disabled_all = ~(req_enabled | enabled_src | enabled_dest);\n"], [105, "  assign req_enable = do_enable;\n"], [105, "  assign dbg_status = {needs_reset,req_resetn,src_resetn,dest_resetn,1'b0,req_enabled,enabled_src,enabled_dest,1'b0,state};\n"], [105, "  always @(posedge clk) begin\n"], [105, "    if (state == STATE_DO_RESET) begin\n"], [105, "      do_reset <= 1'b1;\n"], [105, "    end else begin\n"], [105, "      do_reset <= 1'b0;\n"], [105, "    end\n"]]}}