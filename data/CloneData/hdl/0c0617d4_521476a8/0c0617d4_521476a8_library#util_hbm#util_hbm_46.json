{"Source Block": ["hdl/library/util_hbm/util_hbm.v@249:571@HdlStmFor", "always @(posedge m_axis_aclk) begin\n  rd_response_eot <= rd_eot_pending_all;\nend\n\ngenerate\nfor (i = 0; i < NUM_M; i=i+1) begin\n\n  wire [11:0] rd_dbg_status;\n  wire rd_needs_reset;\n  wire s_axis_xfer_req;\n  wire m_axis_xfer_req;\n\n  reg rd_needs_reset_d = 1'b0;\n\n  // 2Gb (256MB) per segment\n  localparam ADDR_OFFSET = (MEM_TYPE == 1) ? DDR_BASE_ADDDRESS :\n     (HBM_SEGMENT_INDEX+i) * HBM_SEGMENTS_PER_MASTER * 256 * 1024 * 1024 ;\n\n  always @(posedge s_axis_aclk) begin\n    if (wr_eot_pending_all) begin\n      wr_eot_pending[i] <= 1'b0;\n    end else if (wr_request_eot_loc[i] & wr_response_valid_loc[i]) begin\n      wr_eot_pending[i] <= 1'b1;\n    end\n  end\n\n  // For last burst wait until all masters are done\n  assign wr_response_ready_loc[i] = wr_request_eot_loc[i] ? wr_eot_pending_all : wr_response_valid_loc[i];\n\n  // Overflow whenever s_axis_ready deasserts during capture (RX_PATH)\n  assign wr_overflow_loc[i] =  TX_RX_N[0] ? 1'b0 : s_axis_xfer_req & ~s_axis_ready_loc[i];\n\n  // AXIS to AXI3\n  axi_dmac_transfer #(\n    .DMA_DATA_WIDTH_SRC(SRC_DATA_WIDTH_PER_M),\n    .DMA_DATA_WIDTH_DEST(AXI_DATA_WIDTH),\n    .DMA_LENGTH_WIDTH(LENGTH_WIDTH),\n    .DMA_LENGTH_ALIGN(SRC_BYTES_PER_BEAT_WIDTH),\n    .BYTES_PER_BEAT_WIDTH_DEST(AXI_BYTES_PER_BEAT_WIDTH),\n    .BYTES_PER_BEAT_WIDTH_SRC(SRC_BYTES_PER_BEAT_WIDTH),\n    .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n    .DMA_TYPE_DEST(DMA_TYPE_AXI_MM),\n    .DMA_TYPE_SRC(DMA_TYPE_AXI_STREAM),\n    .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),\n    .DMA_2D_TRANSFER(1'b0),\n    .ASYNC_CLK_REQ_SRC(0),\n    .ASYNC_CLK_SRC_DEST(1),\n    .ASYNC_CLK_DEST_REQ(1),\n    .AXI_SLICE_DEST(1),\n    .AXI_SLICE_SRC(1),\n    .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),\n    .FIFO_SIZE(SRC_FIFO_SIZE),\n    .ID_WIDTH($clog2(SRC_FIFO_SIZE)),\n    .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),\n    .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),\n    .ENABLE_DIAGNOSTICS_IF(0),\n    .ALLOW_ASYM_MEM(1)\n  ) i_wr_transfer (\n    .ctrl_clk(s_axis_aclk),\n    .ctrl_resetn(s_axis_aresetn),\n\n     // Control interface\n    .ctrl_enable(wr_request_enable),\n    .ctrl_pause(1'b0),\n\n    .req_valid(wr_request_valid),\n    .req_ready(wr_request_ready_loc[i]),\n    .req_dest_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),\n    .req_src_address('h0),\n    .req_x_length(wr_request_length >> NUM_M_LOG2),\n    .req_y_length(0),\n    .req_dest_stride(0),\n    .req_src_stride(0),\n    .req_sync_transfer_start(1'b0),\n    .req_last(1'b1),\n\n    .req_eot(wr_request_eot_loc[i]),\n    .req_measured_burst_length(wr_measured_burst_length[BYTES_PER_BURST_WIDTH*i+:BYTES_PER_BURST_WIDTH]),\n    .req_response_partial(),\n    .req_response_valid(wr_response_valid_loc[i]),\n    .req_response_ready(wr_response_ready_loc[i]),\n\n    .m_dest_axi_aclk(m_axi_aclk),\n    .m_dest_axi_aresetn(m_axi_aresetn),\n    .m_src_axi_aclk(1'b0),\n    .m_src_axi_aresetn(1'b0),\n\n    .m_axi_awaddr(m_axi_awaddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),\n    .m_axi_awlen(m_axi_awlen[AXI_ALEN*i+:AXI_ALEN]),\n    .m_axi_awsize(m_axi_awsize[3*i+:3]),\n    .m_axi_awburst(m_axi_awburst[2*i+:2]),\n    .m_axi_awprot(),\n    .m_axi_awcache(),\n    .m_axi_awvalid(m_axi_awvalid[i]),\n    .m_axi_awready(m_axi_awready[i]),\n\n    .m_axi_wdata(m_axi_wdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),\n    .m_axi_wstrb(m_axi_wstrb[(AXI_DATA_WIDTH/8)*i+:(AXI_DATA_WIDTH/8)]),\n    .m_axi_wready(m_axi_wready[i]),\n    .m_axi_wvalid(m_axi_wvalid[i]),\n    .m_axi_wlast(m_axi_wlast[i]),\n\n    .m_axi_bvalid(m_axi_bvalid[i]),\n    .m_axi_bresp(m_axi_bresp[2*i+:2]),\n    .m_axi_bready(m_axi_bready[i]),\n\n    .m_axi_arready(),\n    .m_axi_arvalid(),\n    .m_axi_araddr(),\n    .m_axi_arlen(),\n    .m_axi_arsize(),\n    .m_axi_arburst(),\n    .m_axi_arprot(),\n    .m_axi_arcache(),\n\n    .m_axi_rdata(),\n    .m_axi_rready(),\n    .m_axi_rvalid(),\n    .m_axi_rlast(),\n    .m_axi_rresp(),\n\n    .s_axis_aclk(s_axis_aclk),\n    .s_axis_ready(s_axis_ready_loc[i]),\n    .s_axis_valid(s_axis_valid),\n    .s_axis_data(s_axis_data[SRC_DATA_WIDTH_PER_M*i+:SRC_DATA_WIDTH_PER_M]),\n    .s_axis_user(s_axis_user),\n    .s_axis_last(s_axis_last),\n    .s_axis_xfer_req(s_axis_xfer_req),\n\n    .m_axis_aclk(1'b0),\n    .m_axis_ready(1'b1),\n    .m_axis_valid(),\n    .m_axis_data(),\n    .m_axis_last(),\n    .m_axis_xfer_req(),\n\n    .fifo_wr_clk(1'b0),\n    .fifo_wr_en(1'b0),\n    .fifo_wr_din('b0),\n    .fifo_wr_overflow(),\n    .fifo_wr_sync(),\n    .fifo_wr_xfer_req(),\n\n    .fifo_rd_clk(1'b0),\n    .fifo_rd_en(1'b0),\n    .fifo_rd_valid(),\n    .fifo_rd_dout(),\n    .fifo_rd_underflow(),\n    .fifo_rd_xfer_req(),\n\n    // DBG\n    .dbg_dest_request_id(),\n    .dbg_dest_address_id(),\n    .dbg_dest_data_id(),\n    .dbg_dest_response_id(),\n    .dbg_src_request_id(),\n    .dbg_src_address_id(),\n    .dbg_src_data_id(),\n    .dbg_src_response_id(),\n    .dbg_status(),\n\n    .dest_diag_level_bursts()\n  );\n\n  always @(posedge m_axis_aclk) begin\n    rd_needs_reset_d <= rd_needs_reset;\n  end\n\n  // Generate an end of transfer at the end of flush marked by rd_needs_reset\n  always @(posedge m_axis_aclk) begin\n    if (rd_eot_pending_all) begin\n      rd_eot_pending[i] <= 1'b0;\n    end else if ((rd_request_eot_loc[i] & rd_response_valid_loc[i]) ||\n                 (~rd_needs_reset & rd_needs_reset_d)) begin\n      rd_eot_pending[i] <= 1'b1;\n    end\n  end\n\n  assign rd_response_ready_loc[i] = rd_request_eot_loc[i] ? rd_eot_pending_all : rd_response_valid_loc[i];\n\n  // Underflow whenever m_axis_valid deasserts during play (TX_PATH)\n  assign rd_underflow_loc[i] = ~TX_RX_N[0] ? 1'b0 : m_axis_xfer_req & m_axis_ready & ~m_axis_valid_loc[i];\n\n  // AXI3 to MAXIS\n  axi_dmac_transfer #(\n    .DMA_DATA_WIDTH_SRC(AXI_DATA_WIDTH),\n    .DMA_DATA_WIDTH_DEST(DST_DATA_WIDTH_PER_M),\n    .DMA_LENGTH_WIDTH(LENGTH_WIDTH),\n    .DMA_LENGTH_ALIGN(DST_BYTES_PER_BEAT_WIDTH),\n    .BYTES_PER_BEAT_WIDTH_DEST(DST_BYTES_PER_BEAT_WIDTH),\n    .BYTES_PER_BEAT_WIDTH_SRC(AXI_BYTES_PER_BEAT_WIDTH),\n    .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n    .DMA_TYPE_DEST(DMA_TYPE_AXI_STREAM),\n    .DMA_TYPE_SRC(DMA_TYPE_AXI_MM),\n    .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),\n    .DMA_2D_TRANSFER(1'b0),\n    .ASYNC_CLK_REQ_SRC(1),\n    .ASYNC_CLK_SRC_DEST(1),\n    .ASYNC_CLK_DEST_REQ(0),\n    .AXI_SLICE_DEST(1),\n    .AXI_SLICE_SRC(1),\n    .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),\n    .FIFO_SIZE(DST_FIFO_SIZE),\n    .ID_WIDTH($clog2(DST_FIFO_SIZE)),\n    .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),\n    .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),\n    .ENABLE_DIAGNOSTICS_IF(0),\n    .ALLOW_ASYM_MEM(1)\n  ) i_rd_transfer (\n    .ctrl_clk(m_axis_aclk),\n    .ctrl_resetn(m_axis_aresetn),\n\n     // Control interface\n    .ctrl_enable(rd_request_enable),\n    .ctrl_pause(1'b0),\n\n    .req_valid(rd_request_valid),\n    .req_ready(rd_request_ready_loc[i]),\n    .req_dest_address(0),\n    .req_src_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),\n    .req_x_length(rd_request_length >> NUM_M_LOG2),\n    .req_y_length(0),\n    .req_dest_stride(0),\n    .req_src_stride(0),\n    .req_sync_transfer_start(1'b0),\n    .req_last(1'b1),\n\n    .req_eot(rd_request_eot_loc[i]),\n    .req_measured_burst_length(),\n    .req_response_partial(),\n    .req_response_valid(rd_response_valid_loc[i]),\n    .req_response_ready(rd_response_ready_loc[i]),\n\n    .m_dest_axi_aclk(1'b0),\n    .m_dest_axi_aresetn(1'b0),\n    .m_src_axi_aclk(m_axi_aclk),\n    .m_src_axi_aresetn(m_axi_aresetn),\n\n    .m_axi_awaddr(),\n    .m_axi_awlen(),\n    .m_axi_awsize(),\n    .m_axi_awburst(),\n    .m_axi_awprot(),\n    .m_axi_awcache(),\n    .m_axi_awvalid(),\n    .m_axi_awready(1'b1),\n\n    .m_axi_wdata(),\n    .m_axi_wstrb(),\n    .m_axi_wready(1'b1),\n    .m_axi_wvalid(),\n    .m_axi_wlast(),\n\n    .m_axi_bvalid(1'b0),\n    .m_axi_bresp(),\n    .m_axi_bready(),\n\n    .m_axi_arready(m_axi_arready[i]),\n    .m_axi_arvalid(m_axi_arvalid[i]),\n    .m_axi_araddr(m_axi_araddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),\n    .m_axi_arlen(m_axi_arlen[AXI_ALEN*i+:AXI_ALEN]),\n    .m_axi_arsize(m_axi_arsize[3*i+:3]),\n    .m_axi_arburst(m_axi_arburst[2*i+:2]),\n    .m_axi_arprot(),\n    .m_axi_arcache(),\n\n    .m_axi_rdata(m_axi_rdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),\n    .m_axi_rready(m_axi_rready[i]),\n    .m_axi_rvalid(m_axi_rvalid[i]),\n    .m_axi_rlast(m_axi_rlast[i]),\n    .m_axi_rresp(m_axi_rresp[2*i+:2]),\n\n    .s_axis_aclk(1'b0),\n    .s_axis_ready(),\n    .s_axis_valid(1'b0),\n    .s_axis_data(),\n    .s_axis_user(),\n    .s_axis_last(),\n    .s_axis_xfer_req(),\n\n    .m_axis_aclk(m_axis_aclk),\n    .m_axis_ready((m_axis_ready & m_axis_valid) | rd_needs_reset),\n    .m_axis_valid(m_axis_valid_loc[i]),\n    .m_axis_data(m_axis_data[DST_DATA_WIDTH_PER_M*i+:DST_DATA_WIDTH_PER_M]),\n    .m_axis_last(m_axis_last_loc[i]),\n    .m_axis_xfer_req(m_axis_xfer_req),\n\n    .fifo_wr_clk(1'b0),\n    .fifo_wr_en(1'b0),\n    .fifo_wr_din('b0),\n    .fifo_wr_overflow(),\n    .fifo_wr_sync(),\n    .fifo_wr_xfer_req(),\n\n    .fifo_rd_clk(1'b0),\n    .fifo_rd_en(1'b0),\n    .fifo_rd_valid(),\n    .fifo_rd_dout(),\n    .fifo_rd_underflow(),\n    .fifo_rd_xfer_req(),\n\n    // DBG\n    .dbg_dest_request_id(),\n    .dbg_dest_address_id(),\n    .dbg_dest_data_id(),\n    .dbg_dest_response_id(),\n    .dbg_src_request_id(),\n    .dbg_src_address_id(),\n    .dbg_src_data_id(),\n    .dbg_src_response_id(),\n    .dbg_status(rd_dbg_status),\n\n    .dest_diag_level_bursts()\n  );\n\n  assign rd_needs_reset = rd_dbg_status[11];\n\nend\nendgenerate\n\nassign wr_overflow = |wr_overflow_loc;\n\nassign rd_underflow = |rd_underflow_loc;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[254, "for (i = 0; i < NUM_M; i=i+1) begin\n"], [256, "  wire [11:0] rd_dbg_status;\n"], [257, "  wire rd_needs_reset;\n"], [258, "  wire s_axis_xfer_req;\n"], [259, "  wire m_axis_xfer_req;\n"], [261, "  reg rd_needs_reset_d = 1'b0;\n"], [264, "  localparam ADDR_OFFSET = (MEM_TYPE == 1) ? DDR_BASE_ADDDRESS :\n"], [265, "     (HBM_SEGMENT_INDEX+i) * HBM_SEGMENTS_PER_MASTER * 256 * 1024 * 1024 ;\n"], [268, "    if (wr_eot_pending_all) begin\n"], [269, "      wr_eot_pending[i] <= 1'b0;\n"], [270, "    end else if (wr_request_eot_loc[i] & wr_response_valid_loc[i]) begin\n"], [271, "      wr_eot_pending[i] <= 1'b1;\n"], [276, "  assign wr_response_ready_loc[i] = wr_request_eot_loc[i] ? wr_eot_pending_all : wr_response_valid_loc[i];\n"], [279, "  assign wr_overflow_loc[i] =  TX_RX_N[0] ? 1'b0 : s_axis_xfer_req & ~s_axis_ready_loc[i];\n"], [282, "  axi_dmac_transfer #(\n"], [283, "    .DMA_DATA_WIDTH_SRC(SRC_DATA_WIDTH_PER_M),\n"], [284, "    .DMA_DATA_WIDTH_DEST(AXI_DATA_WIDTH),\n"], [285, "    .DMA_LENGTH_WIDTH(LENGTH_WIDTH),\n"], [286, "    .DMA_LENGTH_ALIGN(SRC_BYTES_PER_BEAT_WIDTH),\n"], [287, "    .BYTES_PER_BEAT_WIDTH_DEST(AXI_BYTES_PER_BEAT_WIDTH),\n"], [288, "    .BYTES_PER_BEAT_WIDTH_SRC(SRC_BYTES_PER_BEAT_WIDTH),\n"], [289, "    .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n"], [290, "    .DMA_TYPE_DEST(DMA_TYPE_AXI_MM),\n"], [291, "    .DMA_TYPE_SRC(DMA_TYPE_AXI_STREAM),\n"], [292, "    .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),\n"], [293, "    .DMA_2D_TRANSFER(1'b0),\n"], [294, "    .ASYNC_CLK_REQ_SRC(0),\n"], [295, "    .ASYNC_CLK_SRC_DEST(1),\n"], [296, "    .ASYNC_CLK_DEST_REQ(1),\n"], [297, "    .AXI_SLICE_DEST(1),\n"], [298, "    .AXI_SLICE_SRC(1),\n"], [299, "    .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),\n"], [300, "    .FIFO_SIZE(SRC_FIFO_SIZE),\n"], [301, "    .ID_WIDTH($clog2(SRC_FIFO_SIZE)),\n"], [302, "    .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),\n"], [303, "    .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),\n"], [304, "    .ENABLE_DIAGNOSTICS_IF(0),\n"], [305, "    .ALLOW_ASYM_MEM(1)\n"], [306, "  ) i_wr_transfer (\n"], [307, "    .ctrl_clk(s_axis_aclk),\n"], [308, "    .ctrl_resetn(s_axis_aresetn),\n"], [311, "    .ctrl_enable(wr_request_enable),\n"], [312, "    .ctrl_pause(1'b0),\n"], [314, "    .req_valid(wr_request_valid),\n"], [315, "    .req_ready(wr_request_ready_loc[i]),\n"], [316, "    .req_dest_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),\n"], [317, "    .req_src_address('h0),\n"], [318, "    .req_x_length(wr_request_length >> NUM_M_LOG2),\n"], [319, "    .req_y_length(0),\n"], [320, "    .req_dest_stride(0),\n"], [321, "    .req_src_stride(0),\n"], [322, "    .req_sync_transfer_start(1'b0),\n"], [323, "    .req_last(1'b1),\n"], [325, "    .req_eot(wr_request_eot_loc[i]),\n"], [326, "    .req_measured_burst_length(wr_measured_burst_length[BYTES_PER_BURST_WIDTH*i+:BYTES_PER_BURST_WIDTH]),\n"], [327, "    .req_response_partial(),\n"], [328, "    .req_response_valid(wr_response_valid_loc[i]),\n"], [329, "    .req_response_ready(wr_response_ready_loc[i]),\n"], [331, "    .m_dest_axi_aclk(m_axi_aclk),\n"], [332, "    .m_dest_axi_aresetn(m_axi_aresetn),\n"], [333, "    .m_src_axi_aclk(1'b0),\n"], [334, "    .m_src_axi_aresetn(1'b0),\n"], [336, "    .m_axi_awaddr(m_axi_awaddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),\n"], [337, "    .m_axi_awlen(m_axi_awlen[AXI_ALEN*i+:AXI_ALEN]),\n"], [338, "    .m_axi_awsize(m_axi_awsize[3*i+:3]),\n"], [339, "    .m_axi_awburst(m_axi_awburst[2*i+:2]),\n"], [340, "    .m_axi_awprot(),\n"], [341, "    .m_axi_awcache(),\n"], [342, "    .m_axi_awvalid(m_axi_awvalid[i]),\n"], [343, "    .m_axi_awready(m_axi_awready[i]),\n"], [345, "    .m_axi_wdata(m_axi_wdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),\n"], [346, "    .m_axi_wstrb(m_axi_wstrb[(AXI_DATA_WIDTH/8)*i+:(AXI_DATA_WIDTH/8)]),\n"], [347, "    .m_axi_wready(m_axi_wready[i]),\n"], [348, "    .m_axi_wvalid(m_axi_wvalid[i]),\n"], [349, "    .m_axi_wlast(m_axi_wlast[i]),\n"], [351, "    .m_axi_bvalid(m_axi_bvalid[i]),\n"], [352, "    .m_axi_bresp(m_axi_bresp[2*i+:2]),\n"], [353, "    .m_axi_bready(m_axi_bready[i]),\n"], [355, "    .m_axi_arready(),\n"], [356, "    .m_axi_arvalid(),\n"], [357, "    .m_axi_araddr(),\n"], [358, "    .m_axi_arlen(),\n"], [359, "    .m_axi_arsize(),\n"], [360, "    .m_axi_arburst(),\n"], [361, "    .m_axi_arprot(),\n"], [362, "    .m_axi_arcache(),\n"], [364, "    .m_axi_rdata(),\n"], [365, "    .m_axi_rready(),\n"], [366, "    .m_axi_rvalid(),\n"], [367, "    .m_axi_rlast(),\n"], [368, "    .m_axi_rresp(),\n"], [370, "    .s_axis_aclk(s_axis_aclk),\n"], [371, "    .s_axis_ready(s_axis_ready_loc[i]),\n"], [372, "    .s_axis_valid(s_axis_valid),\n"], [373, "    .s_axis_data(s_axis_data[SRC_DATA_WIDTH_PER_M*i+:SRC_DATA_WIDTH_PER_M]),\n"], [374, "    .s_axis_user(s_axis_user),\n"], [375, "    .s_axis_last(s_axis_last),\n"], [376, "    .s_axis_xfer_req(s_axis_xfer_req),\n"], [378, "    .m_axis_aclk(1'b0),\n"], [379, "    .m_axis_ready(1'b1),\n"], [380, "    .m_axis_valid(),\n"], [381, "    .m_axis_data(),\n"], [382, "    .m_axis_last(),\n"], [383, "    .m_axis_xfer_req(),\n"], [385, "    .fifo_wr_clk(1'b0),\n"], [386, "    .fifo_wr_en(1'b0),\n"], [387, "    .fifo_wr_din('b0),\n"], [388, "    .fifo_wr_overflow(),\n"], [389, "    .fifo_wr_sync(),\n"], [390, "    .fifo_wr_xfer_req(),\n"], [392, "    .fifo_rd_clk(1'b0),\n"], [393, "    .fifo_rd_en(1'b0),\n"], [394, "    .fifo_rd_valid(),\n"], [395, "    .fifo_rd_dout(),\n"], [396, "    .fifo_rd_underflow(),\n"], [397, "    .fifo_rd_xfer_req(),\n"], [400, "    .dbg_dest_request_id(),\n"], [401, "    .dbg_dest_address_id(),\n"], [402, "    .dbg_dest_data_id(),\n"], [403, "    .dbg_dest_response_id(),\n"], [404, "    .dbg_src_request_id(),\n"], [405, "    .dbg_src_address_id(),\n"], [406, "    .dbg_src_data_id(),\n"], [407, "    .dbg_src_response_id(),\n"], [408, "    .dbg_status(),\n"], [410, "    .dest_diag_level_bursts()\n"], [411, "  );\n"], [414, "    rd_needs_reset_d <= rd_needs_reset;\n"], [418, "  always @(posedge m_axis_aclk) begin\n"], [419, "    if (rd_eot_pending_all) begin\n"], [420, "      rd_eot_pending[i] <= 1'b0;\n"], [421, "    end else if ((rd_request_eot_loc[i] & rd_response_valid_loc[i]) ||\n"], [422, "                 (~rd_needs_reset & rd_needs_reset_d)) begin\n"], [423, "      rd_eot_pending[i] <= 1'b1;\n"], [427, "  assign rd_response_ready_loc[i] = rd_request_eot_loc[i] ? rd_eot_pending_all : rd_response_valid_loc[i];\n"], [430, "  assign rd_underflow_loc[i] = ~TX_RX_N[0] ? 1'b0 : m_axis_xfer_req & m_axis_ready & ~m_axis_valid_loc[i];\n"], [433, "  axi_dmac_transfer #(\n"], [434, "    .DMA_DATA_WIDTH_SRC(AXI_DATA_WIDTH),\n"], [435, "    .DMA_DATA_WIDTH_DEST(DST_DATA_WIDTH_PER_M),\n"], [436, "    .DMA_LENGTH_WIDTH(LENGTH_WIDTH),\n"], [437, "    .DMA_LENGTH_ALIGN(DST_BYTES_PER_BEAT_WIDTH),\n"], [438, "    .BYTES_PER_BEAT_WIDTH_DEST(DST_BYTES_PER_BEAT_WIDTH),\n"], [439, "    .BYTES_PER_BEAT_WIDTH_SRC(AXI_BYTES_PER_BEAT_WIDTH),\n"], [440, "    .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n"], [441, "    .DMA_TYPE_DEST(DMA_TYPE_AXI_STREAM),\n"], [442, "    .DMA_TYPE_SRC(DMA_TYPE_AXI_MM),\n"], [443, "    .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),\n"], [444, "    .DMA_2D_TRANSFER(1'b0),\n"], [445, "    .ASYNC_CLK_REQ_SRC(1),\n"], [446, "    .ASYNC_CLK_SRC_DEST(1),\n"], [447, "    .ASYNC_CLK_DEST_REQ(0),\n"], [448, "    .AXI_SLICE_DEST(1),\n"], [449, "    .AXI_SLICE_SRC(1),\n"], [450, "    .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),\n"], [451, "    .FIFO_SIZE(DST_FIFO_SIZE),\n"], [452, "    .ID_WIDTH($clog2(DST_FIFO_SIZE)),\n"], [453, "    .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),\n"], [454, "    .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),\n"], [455, "    .ENABLE_DIAGNOSTICS_IF(0),\n"], [456, "    .ALLOW_ASYM_MEM(1)\n"], [457, "  ) i_rd_transfer (\n"], [458, "    .ctrl_clk(m_axis_aclk),\n"], [459, "    .ctrl_resetn(m_axis_aresetn),\n"], [462, "    .ctrl_enable(rd_request_enable),\n"], [463, "    .ctrl_pause(1'b0),\n"], [465, "    .req_valid(rd_request_valid),\n"], [466, "    .req_ready(rd_request_ready_loc[i]),\n"], [467, "    .req_dest_address(0),\n"], [468, "    .req_src_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),\n"], [469, "    .req_x_length(rd_request_length >> NUM_M_LOG2),\n"], [470, "    .req_y_length(0),\n"], [471, "    .req_dest_stride(0),\n"], [472, "    .req_src_stride(0),\n"], [473, "    .req_sync_transfer_start(1'b0),\n"], [474, "    .req_last(1'b1),\n"], [476, "    .req_eot(rd_request_eot_loc[i]),\n"], [477, "    .req_measured_burst_length(),\n"], [478, "    .req_response_partial(),\n"], [479, "    .req_response_valid(rd_response_valid_loc[i]),\n"], [480, "    .req_response_ready(rd_response_ready_loc[i]),\n"], [482, "    .m_dest_axi_aclk(1'b0),\n"], [483, "    .m_dest_axi_aresetn(1'b0),\n"], [484, "    .m_src_axi_aclk(m_axi_aclk),\n"], [485, "    .m_src_axi_aresetn(m_axi_aresetn),\n"], [487, "    .m_axi_awaddr(),\n"], [488, "    .m_axi_awlen(),\n"], [489, "    .m_axi_awsize(),\n"], [490, "    .m_axi_awburst(),\n"], [491, "    .m_axi_awprot(),\n"], [492, "    .m_axi_awcache(),\n"], [493, "    .m_axi_awvalid(),\n"], [494, "    .m_axi_awready(1'b1),\n"], [496, "    .m_axi_wdata(),\n"], [497, "    .m_axi_wstrb(),\n"], [498, "    .m_axi_wready(1'b1),\n"], [499, "    .m_axi_wvalid(),\n"], [500, "    .m_axi_wlast(),\n"], [502, "    .m_axi_bvalid(1'b0),\n"], [503, "    .m_axi_bresp(),\n"], [504, "    .m_axi_bready(),\n"], [506, "    .m_axi_arready(m_axi_arready[i]),\n"], [507, "    .m_axi_arvalid(m_axi_arvalid[i]),\n"], [508, "    .m_axi_araddr(m_axi_araddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),\n"], [509, "    .m_axi_arlen(m_axi_arlen[AXI_ALEN*i+:AXI_ALEN]),\n"], [510, "    .m_axi_arsize(m_axi_arsize[3*i+:3]),\n"], [511, "    .m_axi_arburst(m_axi_arburst[2*i+:2]),\n"], [512, "    .m_axi_arprot(),\n"], [513, "    .m_axi_arcache(),\n"], [515, "    .m_axi_rdata(m_axi_rdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),\n"], [516, "    .m_axi_rready(m_axi_rready[i]),\n"], [517, "    .m_axi_rvalid(m_axi_rvalid[i]),\n"], [518, "    .m_axi_rlast(m_axi_rlast[i]),\n"], [519, "    .m_axi_rresp(m_axi_rresp[2*i+:2]),\n"], [521, "    .s_axis_aclk(1'b0),\n"], [522, "    .s_axis_ready(),\n"], [523, "    .s_axis_valid(1'b0),\n"], [524, "    .s_axis_data(),\n"], [525, "    .s_axis_user(),\n"], [526, "    .s_axis_last(),\n"], [527, "    .s_axis_xfer_req(),\n"], [529, "    .m_axis_aclk(m_axis_aclk),\n"], [530, "    .m_axis_ready((m_axis_ready & m_axis_valid) | rd_needs_reset),\n"], [531, "    .m_axis_valid(m_axis_valid_loc[i]),\n"], [532, "    .m_axis_data(m_axis_data[DST_DATA_WIDTH_PER_M*i+:DST_DATA_WIDTH_PER_M]),\n"], [533, "    .m_axis_last(m_axis_last_loc[i]),\n"], [534, "    .m_axis_xfer_req(m_axis_xfer_req),\n"], [536, "    .fifo_wr_clk(1'b0),\n"], [537, "    .fifo_wr_en(1'b0),\n"], [538, "    .fifo_wr_din('b0),\n"], [539, "    .fifo_wr_overflow(),\n"], [540, "    .fifo_wr_sync(),\n"], [541, "    .fifo_wr_xfer_req(),\n"], [543, "    .fifo_rd_clk(1'b0),\n"], [544, "    .fifo_rd_en(1'b0),\n"], [545, "    .fifo_rd_valid(),\n"], [546, "    .fifo_rd_dout(),\n"], [547, "    .fifo_rd_underflow(),\n"], [548, "    .fifo_rd_xfer_req(),\n"], [551, "    .dbg_dest_request_id(),\n"], [552, "    .dbg_dest_address_id(),\n"], [553, "    .dbg_dest_data_id(),\n"], [554, "    .dbg_dest_response_id(),\n"], [555, "    .dbg_src_request_id(),\n"], [556, "    .dbg_src_address_id(),\n"], [557, "    .dbg_src_data_id(),\n"], [558, "    .dbg_src_response_id(),\n"], [559, "    .dbg_status(rd_dbg_status),\n"], [561, "    .dest_diag_level_bursts()\n"], [562, "  );\n"], [564, "  assign rd_needs_reset = rd_dbg_status[11];\n"], [566, "end\n"]], "Add": [[254, "  wire [NUM_M-1:0] m_axis_last_loc;\n"], [254, "  assign m_axis_last = &m_axis_last_loc;\n"], [259, "  wire [NUM_M-1:0] m_axis_valid_loc;\n"], [259, "  assign m_axis_valid = &m_axis_valid_loc;\n"], [261, "  wire [NUM_M-1:0] wr_response_ready_loc;\n"], [261, "  wire [NUM_M-1:0] rd_response_ready_loc;\n"], [265, "  wire [NUM_M-1:0] wr_overflow_loc;\n"], [265, "  wire [NUM_M-1:0] rd_underflow_loc;\n"], [265, "  localparam LW_PER_M = LENGTH_WIDTH-NUM_M_LOG2;\n"], [265, "  wire [NUM_M*BYTES_PER_BURST_WIDTH-1:0] wr_measured_burst_length;\n"], [265, "  reg [LW_PER_M-1:0] wr_response_measured_length_per_m = 'h0;\n"], [271, "    if (wr_request_enable == 1'b0) begin\n"], [271, "      wr_response_measured_length_per_m <= {LW_PER_M{1'h0}};\n"], [271, "    end else if (wr_response_valid_loc[0] == 1'b1 && wr_response_ready_loc[0] == 1'b1) begin\n"], [271, "      wr_response_measured_length_per_m <= wr_response_measured_length_per_m +\n"], [271, "        {{LW_PER_M-BYTES_PER_BURST_WIDTH{1'b0}},wr_measured_burst_length[BYTES_PER_BURST_WIDTH-1:0]} +\n"], [271, "        {{LW_PER_M-1{1'b0}},~wr_request_eot_loc[0]};\n"], [271, "    end else if (wr_response_eot == 1'b1) begin\n"], [271, "      wr_response_measured_length_per_m <= {LW_PER_M{1'h0}};\n"], [273, "  assign wr_response_measured_length = {wr_response_measured_length_per_m,{NUM_M_LOG2{1'b1}}};\n"], [411, "  always @(posedge s_axis_aclk) begin\n"], [411, "    wr_response_eot <= wr_eot_pending_all;\n"], [411, "  end\n"], [414, "    rd_response_eot <= rd_eot_pending_all;\n"], [423, "  generate\n"], [423, "  for (i = 0; i < NUM_M; i=i+1) begin\n"], [423, "    wire [11:0] rd_dbg_status;\n"], [423, "    wire rd_needs_reset;\n"], [423, "    wire s_axis_xfer_req;\n"], [423, "    wire m_axis_xfer_req;\n"], [423, "    reg rd_needs_reset_d = 1'b0;\n"], [423, "    localparam ADDR_OFFSET = (MEM_TYPE == 1) ? DDR_BASE_ADDDRESS :\n"], [423, "       (HBM_SEGMENT_INDEX+i) * HBM_SEGMENTS_PER_MASTER * 256 * 1024 * 1024 ;\n"], [423, "    always @(posedge s_axis_aclk) begin\n"], [423, "      if (wr_eot_pending_all) begin\n"], [423, "        wr_eot_pending[i] <= 1'b0;\n"], [423, "      end else if (wr_request_eot_loc[i] & wr_response_valid_loc[i]) begin\n"], [423, "        wr_eot_pending[i] <= 1'b1;\n"], [423, "      end\n"], [424, "    assign wr_response_ready_loc[i] = wr_request_eot_loc[i] ? wr_eot_pending_all : wr_response_valid_loc[i];\n"], [424, "    assign wr_overflow_loc[i] =  TX_RX_N[0] ? 1'b0 : s_axis_xfer_req & ~s_axis_ready_loc[i];\n"], [424, "    axi_dmac_transfer #(\n"], [424, "      .DMA_DATA_WIDTH_SRC(SRC_DATA_WIDTH_PER_M),\n"], [424, "      .DMA_DATA_WIDTH_DEST(AXI_DATA_WIDTH),\n"], [424, "      .DMA_LENGTH_WIDTH(LENGTH_WIDTH),\n"], [424, "      .DMA_LENGTH_ALIGN(SRC_BYTES_PER_BEAT_WIDTH),\n"], [424, "      .BYTES_PER_BEAT_WIDTH_DEST(AXI_BYTES_PER_BEAT_WIDTH),\n"], [424, "      .BYTES_PER_BEAT_WIDTH_SRC(SRC_BYTES_PER_BEAT_WIDTH),\n"], [424, "      .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n"], [424, "      .DMA_TYPE_DEST(DMA_TYPE_AXI_MM),\n"], [424, "      .DMA_TYPE_SRC(DMA_TYPE_AXI_STREAM),\n"], [424, "      .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),\n"], [424, "      .DMA_2D_TRANSFER(1'b0),\n"], [424, "      .ASYNC_CLK_REQ_SRC(0),\n"], [424, "      .ASYNC_CLK_SRC_DEST(1),\n"], [424, "      .ASYNC_CLK_DEST_REQ(1),\n"], [424, "      .AXI_SLICE_DEST(1),\n"], [424, "      .AXI_SLICE_SRC(1),\n"], [424, "      .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),\n"], [424, "      .FIFO_SIZE(SRC_FIFO_SIZE),\n"], [424, "      .ID_WIDTH($clog2(SRC_FIFO_SIZE)),\n"], [424, "      .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),\n"], [424, "      .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),\n"], [424, "      .ENABLE_DIAGNOSTICS_IF(0),\n"], [424, "      .ALLOW_ASYM_MEM(1)\n"], [424, "    ) i_wr_transfer (\n"], [424, "      .ctrl_clk(s_axis_aclk),\n"], [424, "      .ctrl_resetn(s_axis_aresetn),\n"], [424, "      .ctrl_enable(wr_request_enable),\n"], [424, "      .ctrl_pause(1'b0),\n"], [424, "      .req_valid(wr_request_valid),\n"], [424, "      .req_ready(wr_request_ready_loc[i]),\n"], [424, "      .req_dest_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),\n"], [424, "      .req_src_address('h0),\n"], [424, "      .req_x_length(wr_request_length >> NUM_M_LOG2),\n"], [424, "      .req_y_length(0),\n"], [424, "      .req_dest_stride(0),\n"], [424, "      .req_src_stride(0),\n"], [424, "      .req_sync_transfer_start(1'b0),\n"], [424, "      .req_last(1'b1),\n"], [424, "      .req_eot(wr_request_eot_loc[i]),\n"], [424, "      .req_measured_burst_length(wr_measured_burst_length[BYTES_PER_BURST_WIDTH*i+:BYTES_PER_BURST_WIDTH]),\n"], [424, "      .req_response_partial(),\n"], [424, "      .req_response_valid(wr_response_valid_loc[i]),\n"], [424, "      .req_response_ready(wr_response_ready_loc[i]),\n"], [424, "      .m_dest_axi_aclk(m_axi_aclk),\n"], [424, "      .m_dest_axi_aresetn(m_axi_aresetn),\n"], [424, "      .m_src_axi_aclk(1'b0),\n"], [424, "      .m_src_axi_aresetn(1'b0),\n"], [424, "      .m_axi_awaddr(m_axi_awaddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),\n"], [424, "      .m_axi_awlen(m_axi_awlen[AXI_ALEN*i+:AXI_ALEN]),\n"], [424, "      .m_axi_awsize(m_axi_awsize[3*i+:3]),\n"], [424, "      .m_axi_awburst(m_axi_awburst[2*i+:2]),\n"], [424, "      .m_axi_awprot(),\n"], [424, "      .m_axi_awcache(),\n"], [424, "      .m_axi_awvalid(m_axi_awvalid[i]),\n"], [424, "      .m_axi_awready(m_axi_awready[i]),\n"], [424, "      .m_axi_wdata(m_axi_wdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),\n"], [424, "      .m_axi_wstrb(m_axi_wstrb[(AXI_DATA_WIDTH/8)*i+:(AXI_DATA_WIDTH/8)]),\n"], [424, "      .m_axi_wready(m_axi_wready[i]),\n"], [424, "      .m_axi_wvalid(m_axi_wvalid[i]),\n"], [424, "      .m_axi_wlast(m_axi_wlast[i]),\n"], [424, "      .m_axi_bvalid(m_axi_bvalid[i]),\n"], [424, "      .m_axi_bresp(m_axi_bresp[2*i+:2]),\n"], [424, "      .m_axi_bready(m_axi_bready[i]),\n"], [424, "      .m_axi_arready(),\n"], [424, "      .m_axi_arvalid(),\n"], [424, "      .m_axi_araddr(),\n"], [424, "      .m_axi_arlen(),\n"], [424, "      .m_axi_arsize(),\n"], [424, "      .m_axi_arburst(),\n"], [424, "      .m_axi_arprot(),\n"], [424, "      .m_axi_arcache(),\n"], [424, "      .m_axi_rdata(),\n"], [424, "      .m_axi_rready(),\n"], [424, "      .m_axi_rvalid(),\n"], [424, "      .m_axi_rlast(),\n"], [424, "      .m_axi_rresp(),\n"], [424, "      .s_axis_aclk(s_axis_aclk),\n"], [424, "      .s_axis_ready(s_axis_ready_loc[i]),\n"], [424, "      .s_axis_valid(s_axis_valid),\n"], [424, "      .s_axis_data(s_axis_data[SRC_DATA_WIDTH_PER_M*i+:SRC_DATA_WIDTH_PER_M]),\n"], [424, "      .s_axis_user(s_axis_user),\n"], [424, "      .s_axis_last(s_axis_last),\n"], [424, "      .s_axis_xfer_req(s_axis_xfer_req),\n"], [424, "      .m_axis_aclk(1'b0),\n"], [424, "      .m_axis_ready(1'b1),\n"], [424, "      .m_axis_valid(),\n"], [424, "      .m_axis_data(),\n"], [424, "      .m_axis_last(),\n"], [424, "      .m_axis_xfer_req(),\n"], [424, "      .fifo_wr_clk(1'b0),\n"], [424, "      .fifo_wr_en(1'b0),\n"], [424, "      .fifo_wr_din('b0),\n"], [424, "      .fifo_wr_overflow(),\n"], [424, "      .fifo_wr_sync(),\n"], [424, "      .fifo_wr_xfer_req(),\n"], [424, "      .fifo_rd_clk(1'b0),\n"], [424, "      .fifo_rd_en(1'b0),\n"], [424, "      .fifo_rd_valid(),\n"], [424, "      .fifo_rd_dout(),\n"], [424, "      .fifo_rd_underflow(),\n"], [424, "      .fifo_rd_xfer_req(),\n"], [424, "      .dbg_dest_request_id(),\n"], [424, "      .dbg_dest_address_id(),\n"], [424, "      .dbg_dest_data_id(),\n"], [424, "      .dbg_dest_response_id(),\n"], [424, "      .dbg_src_request_id(),\n"], [424, "      .dbg_src_address_id(),\n"], [424, "      .dbg_src_data_id(),\n"], [424, "      .dbg_src_response_id(),\n"], [424, "      .dbg_status(),\n"], [424, "      .dest_diag_level_bursts());\n"], [424, "    always @(posedge m_axis_aclk) begin\n"], [424, "      rd_needs_reset_d <= rd_needs_reset;\n"], [424, "    end\n"], [424, "    always @(posedge m_axis_aclk) begin\n"], [424, "      if (rd_eot_pending_all) begin\n"], [424, "        rd_eot_pending[i] <= 1'b0;\n"], [424, "      end else if ((rd_request_eot_loc[i] & rd_response_valid_loc[i]) ||\n"], [424, "                   (~rd_needs_reset & rd_needs_reset_d)) begin\n"], [424, "        rd_eot_pending[i] <= 1'b1;\n"], [424, "      end\n"], [424, "    end\n"], [424, "    assign rd_response_ready_loc[i] = rd_request_eot_loc[i] ? rd_eot_pending_all : rd_response_valid_loc[i];\n"], [424, "    assign rd_underflow_loc[i] = ~TX_RX_N[0] ? 1'b0 : m_axis_xfer_req & m_axis_ready & ~m_axis_valid_loc[i];\n"], [424, "    axi_dmac_transfer #(\n"], [424, "      .DMA_DATA_WIDTH_SRC(AXI_DATA_WIDTH),\n"], [424, "      .DMA_DATA_WIDTH_DEST(DST_DATA_WIDTH_PER_M),\n"], [424, "      .DMA_LENGTH_WIDTH(LENGTH_WIDTH),\n"], [424, "      .DMA_LENGTH_ALIGN(DST_BYTES_PER_BEAT_WIDTH),\n"], [424, "      .BYTES_PER_BEAT_WIDTH_DEST(DST_BYTES_PER_BEAT_WIDTH),\n"], [424, "      .BYTES_PER_BEAT_WIDTH_SRC(AXI_BYTES_PER_BEAT_WIDTH),\n"], [424, "      .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n"], [424, "      .DMA_TYPE_DEST(DMA_TYPE_AXI_STREAM),\n"], [424, "      .DMA_TYPE_SRC(DMA_TYPE_AXI_MM),\n"], [424, "      .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),\n"], [424, "      .DMA_2D_TRANSFER(1'b0),\n"], [424, "      .ASYNC_CLK_REQ_SRC(1),\n"], [424, "      .ASYNC_CLK_SRC_DEST(1),\n"], [424, "      .ASYNC_CLK_DEST_REQ(0),\n"], [424, "      .AXI_SLICE_DEST(1),\n"], [424, "      .AXI_SLICE_SRC(1),\n"], [424, "      .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),\n"], [424, "      .FIFO_SIZE(DST_FIFO_SIZE),\n"], [424, "      .ID_WIDTH($clog2(DST_FIFO_SIZE)),\n"], [424, "      .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),\n"], [424, "      .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),\n"], [424, "      .ENABLE_DIAGNOSTICS_IF(0),\n"], [424, "      .ALLOW_ASYM_MEM(1)\n"], [424, "    ) i_rd_transfer (\n"], [424, "      .ctrl_clk(m_axis_aclk),\n"], [424, "      .ctrl_resetn(m_axis_aresetn),\n"], [424, "      .ctrl_enable(rd_request_enable),\n"], [424, "      .ctrl_pause(1'b0),\n"], [424, "      .req_valid(rd_request_valid),\n"], [424, "      .req_ready(rd_request_ready_loc[i]),\n"], [424, "      .req_dest_address(0),\n"], [424, "      .req_src_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),\n"], [424, "      .req_x_length(rd_request_length >> NUM_M_LOG2),\n"], [424, "      .req_y_length(0),\n"], [424, "      .req_dest_stride(0),\n"], [424, "      .req_src_stride(0),\n"], [424, "      .req_sync_transfer_start(1'b0),\n"], [424, "      .req_last(1'b1),\n"], [424, "      .req_eot(rd_request_eot_loc[i]),\n"], [424, "      .req_measured_burst_length(),\n"], [424, "      .req_response_partial(),\n"], [424, "      .req_response_valid(rd_response_valid_loc[i]),\n"], [424, "      .req_response_ready(rd_response_ready_loc[i]),\n"], [424, "      .m_dest_axi_aclk(1'b0),\n"], [424, "      .m_dest_axi_aresetn(1'b0),\n"], [424, "      .m_src_axi_aclk(m_axi_aclk),\n"], [424, "      .m_src_axi_aresetn(m_axi_aresetn),\n"], [424, "      .m_axi_awaddr(),\n"], [424, "      .m_axi_awlen(),\n"], [424, "      .m_axi_awsize(),\n"], [424, "      .m_axi_awburst(),\n"], [424, "      .m_axi_awprot(),\n"], [424, "      .m_axi_awcache(),\n"], [424, "      .m_axi_awvalid(),\n"], [424, "      .m_axi_awready(1'b1),\n"], [424, "      .m_axi_wdata(),\n"], [424, "      .m_axi_wstrb(),\n"], [424, "      .m_axi_wready(1'b1),\n"], [424, "      .m_axi_wvalid(),\n"], [424, "      .m_axi_wlast(),\n"], [424, "      .m_axi_bvalid(1'b0),\n"], [424, "      .m_axi_bresp(),\n"], [424, "      .m_axi_bready(),\n"], [424, "      .m_axi_arready(m_axi_arready[i]),\n"], [424, "      .m_axi_arvalid(m_axi_arvalid[i]),\n"], [424, "      .m_axi_araddr(m_axi_araddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),\n"], [424, "      .m_axi_arlen(m_axi_arlen[AXI_ALEN*i+:AXI_ALEN]),\n"], [424, "      .m_axi_arsize(m_axi_arsize[3*i+:3]),\n"], [424, "      .m_axi_arburst(m_axi_arburst[2*i+:2]),\n"], [424, "      .m_axi_arprot(),\n"], [424, "      .m_axi_arcache(),\n"], [424, "      .m_axi_rdata(m_axi_rdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),\n"], [424, "      .m_axi_rready(m_axi_rready[i]),\n"], [424, "      .m_axi_rvalid(m_axi_rvalid[i]),\n"], [424, "      .m_axi_rlast(m_axi_rlast[i]),\n"], [424, "      .m_axi_rresp(m_axi_rresp[2*i+:2]),\n"], [424, "      .s_axis_aclk(1'b0),\n"], [424, "      .s_axis_ready(),\n"], [424, "      .s_axis_valid(1'b0),\n"], [424, "      .s_axis_data(),\n"], [424, "      .s_axis_user(),\n"], [424, "      .s_axis_last(),\n"], [424, "      .s_axis_xfer_req(),\n"], [424, "      .m_axis_aclk(m_axis_aclk),\n"], [424, "      .m_axis_ready((m_axis_ready & m_axis_valid) | rd_needs_reset),\n"], [424, "      .m_axis_valid(m_axis_valid_loc[i]),\n"], [424, "      .m_axis_data(m_axis_data[DST_DATA_WIDTH_PER_M*i+:DST_DATA_WIDTH_PER_M]),\n"], [424, "      .m_axis_last(m_axis_last_loc[i]),\n"], [424, "      .m_axis_xfer_req(m_axis_xfer_req),\n"], [424, "      .fifo_wr_clk(1'b0),\n"], [424, "      .fifo_wr_en(1'b0),\n"], [424, "      .fifo_wr_din('b0),\n"], [424, "      .fifo_wr_overflow(),\n"], [424, "      .fifo_wr_sync(),\n"], [424, "      .fifo_wr_xfer_req(),\n"], [424, "      .fifo_rd_clk(1'b0),\n"], [424, "      .fifo_rd_en(1'b0),\n"], [424, "      .fifo_rd_valid(),\n"], [424, "      .fifo_rd_dout(),\n"], [424, "      .fifo_rd_underflow(),\n"], [424, "      .fifo_rd_xfer_req(),\n"], [424, "      .dbg_dest_request_id(),\n"], [424, "      .dbg_dest_address_id(),\n"], [424, "      .dbg_dest_data_id(),\n"], [424, "      .dbg_dest_response_id(),\n"], [424, "      .dbg_src_request_id(),\n"], [424, "      .dbg_src_address_id(),\n"], [424, "      .dbg_src_data_id(),\n"], [424, "      .dbg_src_response_id(),\n"], [424, "      .dbg_status(rd_dbg_status),\n"], [424, "      .dest_diag_level_bursts());\n"], [424, "    assign rd_needs_reset = rd_dbg_status[11];\n"], [425, "  endgenerate\n"]]}}