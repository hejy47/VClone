Source Block: hdl/library/ad463x_data_capture/ad463x_data_capture.v@72:134@HdlStmIf
// ready, the data will be discarded
assign m_axis_valid = csn & ~csn_d & m_axis_ready;

genvar i, j;
generate
if (DDR_EN) // Double Data Rate mode
begin

  for (i=0; i<NUM_OF_LANES; i=i+1) begin

    reg [DATA_WIDTH-1:0] data_shift_p;
    reg [DATA_WIDTH-1:0] data_shift_n;

    // shift register for positive edge
    always @(negedge echo_sclk or posedge reset) begin
      if (reset) begin
        data_shift_n <= 0;
      end else begin
        data_shift_n <= {data_shift_n, data_in[i]};
      end
    end

    // shift register for positive edge
    always @(posedge echo_sclk or posedge reset) begin
      if (reset) begin
        data_shift_p <= 0;
      end else begin
        data_shift_p <= {data_shift_p, data_in[i]};
      end
    end

    // DDR output logic - only the first 16 bits are forwarded
    for (j=0; j<DATA_WIDTH/2; j=j+1) begin
      assign m_axis_data[DATA_WIDTH*i+(j*2)+:2] = {data_shift_p[j], data_shift_n[j]};
    end

  end /* for loop */

end else begin  // Single Data Rate mode

  for (i=0; i<NUM_OF_LANES; i=i+1) begin

    reg [DATA_WIDTH-1:0] data_shift_n;

    // shift register for positive edge
    always @(negedge echo_sclk or posedge reset) begin
      if (reset) begin
        data_shift_n <= 0;
      end else begin
        data_shift_n <= {data_shift_n, data_in[i]};
      end
    end

    // SDR output logic
    assign m_axis_data[DATA_WIDTH*i+:DATA_WIDTH] = data_shift_n;

  end /* for loop */

end
endgenerate

endmodule


Diff Content:
- 77 if (DDR_EN) // Double Data Rate mode
- 78 begin
- 80   for (i=0; i<NUM_OF_LANES; i=i+1) begin
- 82     reg [DATA_WIDTH-1:0] data_shift_p;
- 83     reg [DATA_WIDTH-1:0] data_shift_n;
- 86     always @(negedge echo_sclk or posedge reset) begin
- 87       if (reset) begin
- 88         data_shift_n <= 0;
- 89       end else begin
- 90         data_shift_n <= {data_shift_n, data_in[i]};
- 92     end
- 95     always @(posedge echo_sclk or posedge reset) begin
- 96       if (reset) begin
- 97         data_shift_p <= 0;
- 98       end else begin
- 99         data_shift_p <= {data_shift_p, data_in[i]};
- 101     end
- 104     for (j=0; j<DATA_WIDTH/2; j=j+1) begin
- 105       assign m_axis_data[DATA_WIDTH*i+(j*2)+:2] = {data_shift_p[j], data_shift_n[j]};
- 106     end
- 108   end /* for loop */
- 110 end else begin  // Single Data Rate mode
- 112   for (i=0; i<NUM_OF_LANES; i=i+1) begin
- 114     reg [DATA_WIDTH-1:0] data_shift_n;
- 117     always @(negedge echo_sclk or posedge reset) begin
- 118       if (reset) begin
- 119         data_shift_n <= 0;
- 120       end else begin
- 121         data_shift_n <= {data_shift_n, data_in[i]};
- 123     end
- 126     assign m_axis_data[DATA_WIDTH*i+:DATA_WIDTH] = data_shift_n;
- 128   end /* for loop */
- 130 end
+ 78   genvar i, j;
+ 78   generate
+ 78   if (DDR_EN) // Double Data Rate mode
+ 78   begin
+ 80     for (i=0; i<NUM_OF_LANES; i=i+1) begin
+ 83       reg [DATA_WIDTH-1:0] data_shift_p;
+ 83       reg [DATA_WIDTH-1:0] data_shift_n;
+ 90       always @(negedge echo_sclk or posedge reset) begin
+ 90         if (reset) begin
+ 90           data_shift_n <= 0;
+ 90         end else begin
+ 90           data_shift_n <= {data_shift_n, data_in[i]};
+ 90         end
+ 99       always @(posedge echo_sclk or posedge reset) begin
+ 99         if (reset) begin
+ 99           data_shift_p <= 0;
+ 99         end else begin
+ 99           data_shift_p <= {data_shift_p, data_in[i]};
+ 99         end
+ 106       for (j=0; j<DATA_WIDTH/2; j=j+1) begin
+ 106         assign m_axis_data[DATA_WIDTH*i+(j*2)+:2] = {data_shift_p[j], data_shift_n[j]};
+ 106       end
+ 108     end /* for loop */
+ 110   end else begin  // Single Data Rate mode
+ 112     for (i=0; i<NUM_OF_LANES; i=i+1) begin
+ 114       reg [DATA_WIDTH-1:0] data_shift_n;
+ 121       always @(negedge echo_sclk or posedge reset) begin
+ 121         if (reset) begin
+ 121           data_shift_n <= 0;
+ 121         end else begin
+ 121           data_shift_n <= {data_shift_n, data_in[i]};
+ 121         end
+ 126       assign m_axis_data[DATA_WIDTH*i+:DATA_WIDTH] = data_shift_n;
+ 128     end /* for loop */

Clone Blocks:
