{"Source Block": ["hdl/library/axi_dmac/axi_dmac_burst_memory.v@203:219@HdlStmProcess", "assign src_last_beat = src_beat & src_mem_data_last;\nassign src_waddr = {src_id_reduced,src_beat_counter};\n\nassign src_data_request_id = src_dest_id;\n\nalways @(*) begin\n  if (src_last_beat == 1'b1) begin\n    src_id_next = inc_id(src_id);\n  end else begin\n    src_id_next = src_id;\n  end\nend\n\nalways @(posedge src_clk) begin\n  if (src_reset == 1'b1) begin\n    src_id <= 'h00;\n    src_id_reduced_msb <= 1'b0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[208, "always @(*) begin\n"], [209, "  if (src_last_beat == 1'b1) begin\n"], [210, "    src_id_next = inc_id(src_id);\n"], [212, "    src_id_next = src_id;\n"], [213, "  end\n"], [214, "end\n"]], "Add": [[210, "  localparam DATA_WIDTH_MEM = DATA_WIDTH_SRC > DATA_WIDTH_DEST ?\n"], [210, "    DATA_WIDTH_SRC : DATA_WIDTH_DEST;\n"], [210, "  localparam MEM_RATIO = DATA_WIDTH_SRC > DATA_WIDTH_DEST ?\n"], [210, "    DATA_WIDTH_SRC / DATA_WIDTH_DEST : DATA_WIDTH_DEST / DATA_WIDTH_SRC;\n"], [210, "  localparam BURST_LEN = MAX_BYTES_PER_BURST / (DATA_WIDTH_MEM / 8);\n"], [210, "  localparam BURST_LEN_WIDTH = BURST_LEN > 128 ? 8 :\n"], [210, "    BURST_LEN > 64 ? 7 :\n"], [210, "    BURST_LEN > 32 ? 6 :\n"], [210, "    BURST_LEN > 16 ? 5 :\n"], [210, "    BURST_LEN > 8 ? 4 :\n"], [210, "    BURST_LEN > 4 ? 3 :\n"], [210, "    BURST_LEN > 2 ? 2 : 1;\n"], [210, "  localparam AUX_FIFO_SIZE = 2**(ID_WIDTH-1);\n"], [210, "  localparam MEM_RATIO_WIDTH =\n"], [210, "      (ALLOW_ASYM_MEM == 0 || MEM_RATIO == 1) ? 0 :\n"], [210, "      MEM_RATIO == 2 ? 1 :\n"], [210, "      MEM_RATIO == 4 ? 2 : 3;\n"], [210, "  localparam BURST_LEN_WIDTH_SRC = BURST_LEN_WIDTH +\n"], [210, "    (DATA_WIDTH_SRC < DATA_WIDTH_MEM ? MEM_RATIO_WIDTH : 0);\n"], [210, "  localparam BURST_LEN_WIDTH_DEST = BURST_LEN_WIDTH +\n"], [210, "    (DATA_WIDTH_DEST < DATA_WIDTH_MEM ? MEM_RATIO_WIDTH : 0);\n"], [210, "  localparam DATA_WIDTH_MEM_SRC = DATA_WIDTH_MEM >>\n"], [210, "    (DATA_WIDTH_SRC < DATA_WIDTH_MEM ? MEM_RATIO_WIDTH : 0);\n"], [210, "  localparam DATA_WIDTH_MEM_DEST = DATA_WIDTH_MEM >>\n"], [210, "    (DATA_WIDTH_DEST < DATA_WIDTH_MEM ? MEM_RATIO_WIDTH : 0);\n"], [210, "  localparam ADDRESS_WIDTH_SRC = BURST_LEN_WIDTH_SRC + ID_WIDTH - 1;\n"], [210, "  localparam ADDRESS_WIDTH_DEST = BURST_LEN_WIDTH_DEST + ID_WIDTH - 1;\n"], [210, "  localparam BYTES_PER_BEAT_WIDTH_MEM_SRC = BYTES_PER_BURST_WIDTH - BURST_LEN_WIDTH_SRC;\n"], [210, "  localparam BYTES_PER_BEAT_WIDTH_DEST = BYTES_PER_BURST_WIDTH - BURST_LEN_WIDTH_DEST;\n"], [210, "  /*\n"], [210, "   * The burst memory is separated into 2**(ID_WIDTH-1) segments. Each segment can\n"], [210, "   * hold up to BURST_LEN beats. The addresses that are used to access the memory\n"], [210, "   * are split into two parts. The MSBs index the segment and the LSBs index a\n"], [210, "   * beat in a specific segment.\n"], [210, "   *\n"], [210, "   * src_id and dest_id are used to index the segment of the burst memory on the\n"], [210, "   * write and read side respectively. The IDs are 1 bit wider than the address of\n"], [210, "   * the burst memory. So we can't use them directly as an index into the burst\n"], [210, "   * memory.  Since the IDs are gray counted we also can't just leave out the MSB\n"], [210, "   * like with a binary counter. But XOR-ing the two MSBs of a gray counter gives\n"], [210, "   * us a gray counter of 1 bit less. Use this to generate the segment index.\n"], [210, "   * These addresses are captured in the src_id_reduced and dest_id_reduced\n"], [210, "   * signals.\n"], [210, "   *\n"], [210, "   * src_beat_counter and dest_beat_counter are used to index the beat on the\n"], [210, "   * write and read side respectively. They will be incremented for each beat that\n"], [210, "   * is written/read. Note that the beat counters are not reset to 0 on the last\n"], [210, "   * beat of a burst. This means the first beat of a burst might not be stored at\n"], [210, "   * offset 0 in the segment memory. But this is OK since the beat counter\n"], [210, "   * increments modulo the segment size and both the write and read side agree on\n"], [210, "   * the order.\n"], [210, "   */\n"], [210, "  reg [ID_WIDTH-1:0] src_id_next;\n"], [210, "  reg [ID_WIDTH-1:0] src_id = 'h0;\n"], [210, "  reg src_id_reduced_msb = 1'b0;\n"], [210, "  reg [BURST_LEN_WIDTH_SRC-1:0] src_beat_counter = 'h00;\n"], [210, "  reg [ID_WIDTH-1:0] dest_id_next = 'h0;\n"], [210, "  reg dest_id_reduced_msb_next = 1'b0;\n"], [210, "  reg dest_id_reduced_msb = 1'b0;\n"], [210, "  reg [ID_WIDTH-1:0] dest_id = 'h0;\n"], [210, "  reg [BURST_LEN_WIDTH_DEST-1:0] dest_beat_counter = 'h00;\n"], [210, "  wire [BURST_LEN_WIDTH_DEST-1:0] dest_burst_len;\n"], [210, "  reg dest_valid = 1'b0;\n"], [210, "  reg dest_mem_data_valid = 1'b0;\n"], [210, "  reg dest_mem_data_last = 1'b0;\n"], [210, "  reg [DATA_WIDTH_MEM_DEST/8-1:0] dest_mem_data_strb = {DATA_WIDTH_MEM_DEST/8{1'b1}};\n"], [210, "  reg [BYTES_PER_BURST_WIDTH+1-1-DMA_LENGTH_ALIGN:0] burst_len_mem[0:AUX_FIFO_SIZE-1];\n"], [210, "  wire [BYTES_PER_BURST_WIDTH+1-1:0] src_burst_len_data;\n"], [210, "  reg [BYTES_PER_BURST_WIDTH+1-1:0] dest_burst_len_data = {DMA_LENGTH_ALIGN{1'b1}};\n"], [210, "  wire src_beat;\n"], [210, "  wire src_last_beat;\n"], [210, "  wire [ID_WIDTH-1:0] src_dest_id;\n"], [210, "  wire [ADDRESS_WIDTH_SRC-1:0] src_waddr;\n"], [210, "  wire [ID_WIDTH-2:0] src_id_reduced;\n"], [210, "  wire src_mem_data_valid;\n"], [210, "  wire src_mem_data_last;\n"], [210, "  wire [DATA_WIDTH_MEM_SRC-1:0] src_mem_data;\n"], [210, "  wire [BYTES_PER_BEAT_WIDTH_MEM_SRC-1:0] src_mem_data_valid_bytes;\n"], [210, "  wire src_mem_data_partial_burst;\n"], [210, "  wire dest_beat;\n"], [210, "  wire dest_last_beat;\n"], [210, "  wire dest_last;\n"], [210, "  wire [ID_WIDTH-1:0] dest_src_id;\n"], [210, "  wire [ADDRESS_WIDTH_DEST-1:0] dest_raddr;\n"], [210, "  wire [ID_WIDTH-2:0] dest_id_reduced_next;\n"], [210, "  wire [ID_WIDTH-1:0] dest_id_next_inc;\n"], [210, "  wire [ID_WIDTH-2:0] dest_id_reduced;\n"], [210, "  wire dest_burst_valid;\n"], [210, "  wire dest_burst_ready;\n"], [210, "  wire dest_ready;\n"], [210, "  wire [DATA_WIDTH_MEM_DEST-1:0] dest_mem_data;\n"], [210, "  wire dest_mem_data_ready;\n"], [210, "  `include \"inc_id.vh\"\n"], [210, "  generate if (ID_WIDTH >= 3) begin\n"], [210, "    assign src_id_reduced = {src_id_reduced_msb,src_id[ID_WIDTH-3:0]};\n"], [210, "    assign dest_id_reduced_next = {dest_id_reduced_msb_next,dest_id_next[ID_WIDTH-3:0]};\n"], [210, "    assign dest_id_reduced = {dest_id_reduced_msb,dest_id[ID_WIDTH-3:0]};\n"], [214, "    assign src_id_reduced = src_id_reduced_msb;\n"], [214, "    assign dest_id_reduced_next = dest_id_reduced_msb_next;\n"], [214, "    assign dest_id_reduced = dest_id_reduced_msb;\n"], [214, "  end endgenerate\n"]]}}