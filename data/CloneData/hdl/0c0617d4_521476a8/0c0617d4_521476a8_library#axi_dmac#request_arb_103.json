{"Source Block": ["hdl/library/axi_dmac/request_arb.v@483:554@HdlStmIf", "assign dest_response_partial = 1'b0;\nassign dest_response_data_burst_length = 'h0;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin\n\nassign dest_clk = m_axis_aclk;\nassign dest_ext_resetn = 1'b1;\n\nwire [ID_WIDTH-1:0] data_id;\n\nwire data_eot = eot_mem_dest[data_id];\nwire response_eot = eot_mem_dest[dest_response_id];\n\nassign dest_data_request_id = dest_request_id;\n\nassign dbg_dest_address_id = 'h00;\nassign dbg_dest_data_id = data_id;\n\n\ndest_axi_stream #(\n  .ID_WIDTH(ID_WIDTH),\n  .S_AXIS_DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)\n) i_dest_dma_stream (\n  .s_axis_aclk(m_axis_aclk),\n  .s_axis_aresetn(dest_resetn),\n\n  .enable(dest_enable),\n  .enabled(dest_enabled),\n\n  .req_valid(dest_req_valid),\n  .req_ready(dest_req_ready),\n  .req_xlast(dest_req_xlast),\n\n  .response_valid(dest_response_valid),\n  .response_ready(dest_response_ready),\n  .response_resp(dest_response_resp),\n  .response_resp_eot(dest_response_resp_eot),\n\n  .response_id(dest_response_id),\n  .data_id(data_id),\n  .xfer_req(m_axis_xfer_req),\n\n  .data_eot(data_eot),\n  .response_eot(response_eot),\n\n  .fifo_valid(dest_valid),\n  .fifo_ready(dest_ready),\n  .fifo_data(dest_data),\n  .fifo_last(dest_last),\n\n  .m_axis_valid(m_axis_valid),\n  .m_axis_ready(m_axis_ready),\n  .m_axis_data(m_axis_data),\n  .m_axis_last(m_axis_last)\n);\n\nend else begin\n\nassign m_axis_valid = 1'b0;\nassign m_axis_last = 1'b0;\nassign m_axis_xfer_req = 1'b0;\nassign m_axis_data = 'h00;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_FIFO) begin\n\nassign dest_clk = fifo_rd_clk;\nassign dest_ext_resetn = 1'b1;\n"], "Clone Blocks": [["hdl/library/axi_dmac/request_arb.v@546:615", "assign m_axis_xfer_req = 1'b0;\nassign m_axis_data = 'h00;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_FIFO) begin\n\nassign dest_clk = fifo_rd_clk;\nassign dest_ext_resetn = 1'b1;\n\nwire [ID_WIDTH-1:0] data_id;\n\nwire data_eot = eot_mem_dest[data_id];\nwire response_eot = eot_mem_dest[dest_response_id];\n\nassign dest_data_request_id = dest_request_id;\n\nassign dbg_dest_address_id = 'h00;\nassign dbg_dest_data_id = data_id;\n\ndest_fifo_inf #(\n  .ID_WIDTH(ID_WIDTH),\n  .DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)\n) i_dest_dma_fifo (\n  .clk(fifo_rd_clk),\n  .resetn(dest_resetn),\n\n  .enable(dest_enable),\n  .enabled(dest_enabled),\n\n  .req_valid(dest_req_valid),\n  .req_ready(dest_req_ready),\n\n  .response_valid(dest_response_valid),\n  .response_ready(dest_response_ready),\n  .response_resp(dest_response_resp),\n  .response_resp_eot(dest_response_resp_eot),\n\n  .response_id(dest_response_id),\n  .data_id(data_id),\n\n  .data_eot(data_eot),\n  .response_eot(response_eot),\n\n  .fifo_valid(dest_valid),\n  .fifo_ready(dest_ready),\n  .fifo_data(dest_data),\n  .fifo_last(dest_last),\n\n  .en(fifo_rd_en),\n  .valid(fifo_rd_valid),\n  .dout(fifo_rd_dout),\n  .underflow(fifo_rd_underflow),\n  .xfer_req(fifo_rd_xfer_req)\n);\n\nend else begin\n\nassign fifo_rd_valid = 1'b0;\nassign fifo_rd_dout = 'h0;\nassign fifo_rd_underflow = 1'b0;\nassign fifo_rd_xfer_req = 1'b0;\n\nend endgenerate\n\ngenerate if (DMA_TYPE_SRC == DMA_TYPE_MM_AXI) begin\n\nwire [ID_WIDTH-1:0] src_data_id;\nwire [ID_WIDTH-1:0] src_address_id;\n"]], "Diff Content": {"Delete": [[488, "if (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin\n"], [490, "assign dest_clk = m_axis_aclk;\n"], [491, "assign dest_ext_resetn = 1'b1;\n"], [493, "wire [ID_WIDTH-1:0] data_id;\n"], [495, "wire data_eot = eot_mem_dest[data_id];\n"], [496, "wire response_eot = eot_mem_dest[dest_response_id];\n"], [498, "assign dest_data_request_id = dest_request_id;\n"], [500, "assign dbg_dest_address_id = 'h00;\n"], [501, "assign dbg_dest_data_id = data_id;\n"], [504, "dest_axi_stream #(\n"], [505, "  .ID_WIDTH(ID_WIDTH),\n"], [506, "  .S_AXIS_DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n"], [507, "  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)\n"], [508, ") i_dest_dma_stream (\n"], [509, "  .s_axis_aclk(m_axis_aclk),\n"], [510, "  .s_axis_aresetn(dest_resetn),\n"], [512, "  .enable(dest_enable),\n"], [513, "  .enabled(dest_enabled),\n"], [515, "  .req_valid(dest_req_valid),\n"], [516, "  .req_ready(dest_req_ready),\n"], [517, "  .req_xlast(dest_req_xlast),\n"], [519, "  .response_valid(dest_response_valid),\n"], [520, "  .response_ready(dest_response_ready),\n"], [521, "  .response_resp(dest_response_resp),\n"], [522, "  .response_resp_eot(dest_response_resp_eot),\n"], [524, "  .response_id(dest_response_id),\n"], [525, "  .data_id(data_id),\n"], [526, "  .xfer_req(m_axis_xfer_req),\n"], [528, "  .data_eot(data_eot),\n"], [529, "  .response_eot(response_eot),\n"], [531, "  .fifo_valid(dest_valid),\n"], [532, "  .fifo_ready(dest_ready),\n"], [533, "  .fifo_data(dest_data),\n"], [534, "  .fifo_last(dest_last),\n"], [536, "  .m_axis_valid(m_axis_valid),\n"], [537, "  .m_axis_ready(m_axis_ready),\n"], [538, "  .m_axis_data(m_axis_data),\n"], [539, "  .m_axis_last(m_axis_last)\n"], [540, ");\n"], [542, "end else begin\n"], [544, "assign m_axis_valid = 1'b0;\n"], [545, "assign m_axis_last = 1'b0;\n"], [546, "assign m_axis_xfer_req = 1'b0;\n"], [547, "assign m_axis_data = 'h00;\n"], [549, "end\n"]], "Add": [[488, "  assign m_axi_wvalid = 1'b0;\n"], [488, "  assign m_axi_wdata = 'h00;\n"], [488, "  assign m_axi_wstrb = 'h00;\n"], [488, "  assign m_axi_wlast = 1'b0;\n"], [491, "  assign m_axi_bready = 1'b0;\n"], [493, "  assign src_bl_ready = 1'b1;\n"], [496, "  assign dest_response_partial = 1'b0;\n"], [496, "  assign dest_response_data_burst_length = 'h0;\n"], [498, "  end\n"], [501, "  if (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin\n"], [501, "  assign dest_clk = m_axis_aclk;\n"], [501, "  assign dest_ext_resetn = 1'b1;\n"], [510, "  wire [ID_WIDTH-1:0] data_id;\n"], [513, "  wire data_eot = eot_mem_dest[data_id];\n"], [513, "  wire response_eot = eot_mem_dest[dest_response_id];\n"], [517, "  assign dest_data_request_id = dest_request_id;\n"], [522, "  assign dbg_dest_address_id = 'h00;\n"], [522, "  assign dbg_dest_data_id = data_id;\n"], [526, "  dest_axi_stream #(\n"], [526, "    .ID_WIDTH(ID_WIDTH),\n"], [526, "    .S_AXIS_DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n"], [526, "    .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)\n"], [526, "  ) i_dest_dma_stream (\n"], [526, "    .s_axis_aclk(m_axis_aclk),\n"], [526, "    .s_axis_aresetn(dest_resetn),\n"], [529, "    .enable(dest_enable),\n"], [529, "    .enabled(dest_enabled),\n"], [534, "    .req_valid(dest_req_valid),\n"], [534, "    .req_ready(dest_req_ready),\n"], [534, "    .req_xlast(dest_req_xlast),\n"], [540, "    .response_valid(dest_response_valid),\n"], [540, "    .response_ready(dest_response_ready),\n"], [540, "    .response_resp(dest_response_resp),\n"], [540, "    .response_resp_eot(dest_response_resp_eot),\n"], [542, "    .response_id(dest_response_id),\n"], [542, "    .data_id(data_id),\n"], [542, "    .xfer_req(m_axis_xfer_req),\n"], [547, "    .data_eot(data_eot),\n"], [547, "    .response_eot(response_eot),\n"], [549, "    .fifo_valid(dest_valid),\n"], [549, "    .fifo_ready(dest_ready),\n"], [549, "    .fifo_data(dest_data),\n"], [549, "    .fifo_last(dest_last),\n"]]}}