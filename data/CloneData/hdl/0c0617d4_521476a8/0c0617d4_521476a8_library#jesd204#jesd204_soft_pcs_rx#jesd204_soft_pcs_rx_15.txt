Source Block: hdl/library/jesd204/jesd204_soft_pcs_rx/jesd204_soft_pcs_rx.v@100:157@HdlStmFor
end else begin
  assign patternalign_en_s = patternalign_en;
  assign data_s = data;
end

for (lane = 0; lane < NUM_LANES; lane = lane + 1) begin: gen_lane

  jesd204_pattern_align #(
    .DATA_PATH_WIDTH(DATA_PATH_WIDTH)
  ) i_pattern_align (
    .clk(clk),
    .reset(reset),

    .patternalign_en(patternalign_en_s),
    .in_data(data_s[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH]),
    .out_data(data_aligned[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH])
  );

  assign disparity_chain[lane][0] = disparity[lane];

  always @(posedge clk) begin
    if (reset == 1'b1) begin
      disparity[lane] <= 1'b0;
    end else begin
      disparity[lane] <= disparity_chain[lane][DATA_PATH_WIDTH];
    end
  end

  for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_dpw
    localparam j = DATA_PATH_WIDTH * lane + i;
    wire [9:0] in_char;
    if (REGISTER_INPUTS > 1) begin
      reg [9:0] in_char_r = 10'b0;
      always @(posedge clk) begin
        in_char_r <= INVERT_INPUTS ? ~data_aligned[j*10+:10] :
                                      data_aligned[j*10+:10];
      end
      assign in_char = in_char_r;
    end else begin
      assign in_char = INVERT_INPUTS ? ~data_aligned[j*10+:10] :
                                        data_aligned[j*10+:10];
    end

    jesd204_8b10b_decoder i_dec (
      .in_char(in_char),
      .out_char(char_s[j*8+:8]),
      .out_charisk(charisk_s[j]),
      .out_notintable(notintable_s[j]),
      .out_disperr(disperr_s[j]),

      .in_disparity(disparity_chain[lane][i]),
      .out_disparity(disparity_chain[lane][i+1])
    );
  end
end
endgenerate

endmodule

Diff Content:
- 105 for (lane = 0; lane < NUM_LANES; lane = lane + 1) begin: gen_lane
- 107   jesd204_pattern_align #(
- 108     .DATA_PATH_WIDTH(DATA_PATH_WIDTH)
- 109   ) i_pattern_align (
- 110     .clk(clk),
- 111     .reset(reset),
- 113     .patternalign_en(patternalign_en_s),
- 114     .in_data(data_s[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH]),
- 115     .out_data(data_aligned[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH])
- 116   );
- 118   assign disparity_chain[lane][0] = disparity[lane];
- 120   always @(posedge clk) begin
- 121     if (reset == 1'b1) begin
- 122       disparity[lane] <= 1'b0;
- 123     end else begin
- 124       disparity[lane] <= disparity_chain[lane][DATA_PATH_WIDTH];
- 125     end
- 126   end
- 128   for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_dpw
- 129     localparam j = DATA_PATH_WIDTH * lane + i;
- 130     wire [9:0] in_char;
- 131     if (REGISTER_INPUTS > 1) begin
- 132       reg [9:0] in_char_r = 10'b0;
- 133       always @(posedge clk) begin
- 134         in_char_r <= INVERT_INPUTS ? ~data_aligned[j*10+:10] :
- 135                                       data_aligned[j*10+:10];
- 137       assign in_char = in_char_r;
- 138     end else begin
- 139       assign in_char = INVERT_INPUTS ? ~data_aligned[j*10+:10] :
- 140                                         data_aligned[j*10+:10];
- 143     jesd204_8b10b_decoder i_dec (
- 144       .in_char(in_char),
- 145       .out_char(char_s[j*8+:8]),
- 146       .out_charisk(charisk_s[j]),
- 147       .out_notintable(notintable_s[j]),
- 148       .out_disperr(disperr_s[j]),
- 150       .in_disparity(disparity_chain[lane][i]),
- 151       .out_disparity(disparity_chain[lane][i+1])
- 152     );
- 154 end
+ 105   generate
+ 105   genvar lane;
+ 105   genvar i;
+ 105   if (REGISTER_INPUTS > 0) begin
+ 105     reg                                     patternalign_en_r;
+ 105     reg [NUM_LANES*DATA_PATH_WIDTH*10-1:0]  data_r;
+ 105     always @(posedge clk) begin
+ 105       patternalign_en_r <= patternalign_en;
+ 105       data_r  <= data;
+ 105     end
+ 105     assign patternalign_en_s = patternalign_en_r;
+ 105     assign data_s = data_r;
+ 105   end else begin
+ 105     assign patternalign_en_s = patternalign_en;
+ 105     assign data_s = data;
+ 105   end
+ 111   for (lane = 0; lane < NUM_LANES; lane = lane + 1) begin: gen_lane
+ 116     jesd204_pattern_align #(
+ 116       .DATA_PATH_WIDTH(DATA_PATH_WIDTH)
+ 116     ) i_pattern_align (
+ 116       .clk(clk),
+ 116       .reset(reset),
+ 118       .patternalign_en(patternalign_en_s),
+ 118       .in_data(data_s[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH]),
+ 118       .out_data(data_aligned[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH]));
+ 126     assign disparity_chain[lane][0] = disparity[lane];
+ 135     always @(posedge clk) begin
+ 135       if (reset == 1'b1) begin
+ 135         disparity[lane] <= 1'b0;
+ 135       end else begin
+ 135         disparity[lane] <= disparity_chain[lane][DATA_PATH_WIDTH];
+ 148     for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_dpw
+ 148       localparam j = DATA_PATH_WIDTH * lane + i;
+ 148       wire [9:0] in_char;
+ 148       if (REGISTER_INPUTS > 1) begin
+ 148         reg [9:0] in_char_r = 10'b0;
+ 148         always @(posedge clk) begin
+ 148           in_char_r <= INVERT_INPUTS ? ~data_aligned[j*10+:10] :
+ 148                                         data_aligned[j*10+:10];
+ 148         end
+ 148         assign in_char = in_char_r;
+ 148       end else begin
+ 148         assign in_char = INVERT_INPUTS ? ~data_aligned[j*10+:10] :
+ 148                                           data_aligned[j*10+:10];
+ 148       end
+ 152       jesd204_8b10b_decoder i_dec (
+ 152         .in_char(in_char),
+ 152         .out_char(char_s[j*8+:8]),
+ 152         .out_charisk(charisk_s[j]),
+ 152         .out_notintable(notintable_s[j]),
+ 152         .out_disperr(disperr_s[j]),
+ 152         .in_disparity(disparity_chain[lane][i]),
+ 152         .out_disparity(disparity_chain[lane][i+1]));
+ 152     end

Clone Blocks:
