Source Block: hdl/library/jesd204/jesd204_rx/jesd204_rx_header.v@176:186@HdlStmAssign
      end
  endcase
  if (sh_lock == 1'b0) next_state = STATE_EMB_INIT;
end

assign invalid_eoemb = (sh_count == 0 && ~eoemb);
assign invalid_eomb = (sh_count[4:0] == 0 && ~eomb);
assign valid_eomb = next_state[BIT_EMB_LOCK] && eomb;
assign valid_eoemb = next_state[BIT_EMB_LOCK] && eoemb;

assign invalid_sequence = (invalid_eoemb || invalid_eomb);

Diff Content:
- 181 assign invalid_eoemb = (sh_count == 0 && ~eoemb);

Clone Blocks:
Clone Blocks 1:
hdl/library/jesd204/jesd204_rx/jesd204_rx_header.v@179:189
end

assign invalid_eoemb = (sh_count == 0 && ~eoemb);
assign invalid_eomb = (sh_count[4:0] == 0 && ~eomb);
assign valid_eomb = next_state[BIT_EMB_LOCK] && eomb;
assign valid_eoemb = next_state[BIT_EMB_LOCK] && eoemb;

assign invalid_sequence = (invalid_eoemb || invalid_eomb);

always @(posedge clk) begin
  if (reset == 1'b1) begin

Clone Blocks 2:
hdl/library/jesd204/jesd204_rx/jesd204_rx_header.v@178:188
  if (sh_lock == 1'b0) next_state = STATE_EMB_INIT;
end

assign invalid_eoemb = (sh_count == 0 && ~eoemb);
assign invalid_eomb = (sh_count[4:0] == 0 && ~eomb);
assign valid_eomb = next_state[BIT_EMB_LOCK] && eomb;
assign valid_eoemb = next_state[BIT_EMB_LOCK] && eoemb;

assign invalid_sequence = (invalid_eoemb || invalid_eomb);

always @(posedge clk) begin

Clone Blocks 3:
hdl/library/jesd204/jesd204_rx/jesd204_rx_header.v@181:191
assign invalid_eoemb = (sh_count == 0 && ~eoemb);
assign invalid_eomb = (sh_count[4:0] == 0 && ~eomb);
assign valid_eomb = next_state[BIT_EMB_LOCK] && eomb;
assign valid_eoemb = next_state[BIT_EMB_LOCK] && eoemb;

assign invalid_sequence = (invalid_eoemb || invalid_eomb);

always @(posedge clk) begin
  if (reset == 1'b1) begin
    state <= STATE_EMB_INIT;
  end else begin

Clone Blocks 4:
hdl/library/jesd204/jesd204_rx/jesd204_rx_header.v@177:187
  endcase
  if (sh_lock == 1'b0) next_state = STATE_EMB_INIT;
end

assign invalid_eoemb = (sh_count == 0 && ~eoemb);
assign invalid_eomb = (sh_count[4:0] == 0 && ~eomb);
assign valid_eomb = next_state[BIT_EMB_LOCK] && eomb;
assign valid_eoemb = next_state[BIT_EMB_LOCK] && eoemb;

assign invalid_sequence = (invalid_eoemb || invalid_eomb);


