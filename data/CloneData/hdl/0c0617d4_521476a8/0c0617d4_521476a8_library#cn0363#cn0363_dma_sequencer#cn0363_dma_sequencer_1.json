{"Source Block": ["hdl/library/cn0363/cn0363_dma_sequencer/cn0363_dma_sequencer.v@70:80@HdlIdDef", "  input [13:0] channel_enable,\n\n  output processing_resetn\n);\n\nreg [3:0] count = 'h00;\n\nassign overflow = dma_wr_overflow;\nassign processing_resetn = dma_wr_xfer_req;\n\nalways @(posedge clk) begin\n"], "Clone Blocks": [["hdl/library/cn0363/cn0363_dma_sequencer/cn0363_dma_sequencer.v@72:82", "  output processing_resetn\n);\n\nreg [3:0] count = 'h00;\n\nassign overflow = dma_wr_overflow;\nassign processing_resetn = dma_wr_xfer_req;\n\nalways @(posedge clk) begin\n  if (processing_resetn == 1'b0) begin\n    count <= 'h0;\n"], ["hdl/library/cn0363/cn0363_dma_sequencer/cn0363_dma_sequencer.v@73:83", ");\n\nreg [3:0] count = 'h00;\n\nassign overflow = dma_wr_overflow;\nassign processing_resetn = dma_wr_xfer_req;\n\nalways @(posedge clk) begin\n  if (processing_resetn == 1'b0) begin\n    count <= 'h0;\n  end else begin\n"]], "Diff Content": {"Delete": [[75, "reg [3:0] count = 'h00;\n"]], "Add": [[75, "  reg [3:0] count = 'h00;\n"], [75, "  assign overflow = dma_wr_overflow;\n"], [75, "  assign processing_resetn = dma_wr_xfer_req;\n"], [75, "  always @(posedge clk) begin\n"], [75, "    if (processing_resetn == 1'b0) begin\n"], [75, "      count <= 'h0;\n"], [75, "    end else begin\n"], [75, "      case (count)\n"], [75, "        'h0: if (phase_valid) count <= count + 1;\n"], [75, "        'h1: if (data_valid) count <= count + 1;\n"], [75, "        'h2: if (data_filtered_valid) count <= count + 1;\n"], [75, "        'h3: if (i_q_valid) count <= count + 1;\n"], [75, "        'h4: if (i_q_valid) count <= count + 1;\n"], [75, "        'h5: if (i_q_filtered_valid) count <= count + 1;\n"], [75, "        'h6: if (i_q_filtered_valid) count <= count + 1;\n"], [75, "        'h7: if (phase_valid) count <= count + 1;\n"], [75, "        'h8: if (data_valid) count <= count + 1;\n"], [75, "        'h9: if (data_filtered_valid) count <= count + 1;\n"], [75, "        'ha: if (i_q_valid) count <= count + 1;\n"], [75, "        'hb: if (i_q_valid) count <= count + 1;\n"], [75, "        'hc: if (i_q_filtered_valid) count <= count + 1;\n"], [75, "        'hd: if (i_q_filtered_valid) count <= 'h00;\n"], [75, "      endcase\n"], [75, "    end\n"], [75, "  end\n"], [75, "  always @(posedge clk) begin\n"], [75, "    case (count)\n"], [75, "      'h0: dma_wr_data <= phase;\n"], [75, "      'h1: dma_wr_data <= {8'h00,data[23:0]};\n"], [75, "      'h2: dma_wr_data <= data_filtered;\n"], [75, "      'h3: dma_wr_data <= i_q;\n"], [75, "      'h4: dma_wr_data <= i_q;\n"], [75, "      'h5: dma_wr_data <= i_q_filtered;\n"], [75, "      'h6: dma_wr_data <= i_q_filtered;\n"], [75, "      'h7: dma_wr_data <= phase;\n"], [75, "      'h8: dma_wr_data <= {8'h00,data[23:0]};\n"], [75, "      'h9: dma_wr_data <= data_filtered;\n"], [75, "      'ha: dma_wr_data <= i_q;\n"], [75, "      'hb: dma_wr_data <= i_q;\n"], [75, "      'hc: dma_wr_data <= i_q_filtered;\n"], [75, "      'hd: dma_wr_data <= i_q_filtered;\n"], [75, "    endcase\n"], [75, "  end\n"]]}}