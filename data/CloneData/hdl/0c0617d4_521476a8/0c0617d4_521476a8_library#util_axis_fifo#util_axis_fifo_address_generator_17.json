{"Source Block": ["hdl/library/util_axis_fifo/util_axis_fifo_address_generator.v@129:166@HdlStmIf", "\n//------------------------------------------------------------------------------\n// CDC circuits for double clock configuration\n//------------------------------------------------------------------------------\n\ngenerate if (ASYNC_CLK == 1) begin : g_async_clock\n  // CDC transfer of the write pointer to the read clock domain\n  sync_gray #(\n    .DATA_WIDTH(ADDRESS_WIDTH + 1)\n  ) i_waddr_sync_gray (\n    .in_clk(s_axis_aclk),\n    .in_resetn(s_axis_aresetn),\n    .out_clk(m_axis_aclk),\n    .out_resetn(m_axis_aresetn),\n    .in_count(s_axis_waddr_reg),\n    .out_count(m_axis_waddr_reg)\n  );\n\n  // CDC transfer of the read pointer to the write clock domain\n  sync_gray #(\n    .DATA_WIDTH(ADDRESS_WIDTH + 1)\n  ) i_raddr_sync_gray (\n    .in_clk(m_axis_aclk),\n    .in_resetn(m_axis_aresetn),\n    .out_clk(s_axis_aclk),\n    .out_resetn(s_axis_aresetn),\n    .in_count(m_axis_raddr_reg),\n    .out_count(s_axis_raddr_reg)\n  );\nend else begin\n  assign m_axis_waddr_reg = s_axis_waddr_reg;\n  assign s_axis_raddr_reg = m_axis_raddr_reg;\nend\nendgenerate\n\n//------------------------------------------------------------------------------\n// FIFO write logic - upstream\n//\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[134, "generate if (ASYNC_CLK == 1) begin : g_async_clock\n"], [136, "  sync_gray #(\n"], [137, "    .DATA_WIDTH(ADDRESS_WIDTH + 1)\n"], [138, "  ) i_waddr_sync_gray (\n"], [139, "    .in_clk(s_axis_aclk),\n"], [140, "    .in_resetn(s_axis_aresetn),\n"], [141, "    .out_clk(m_axis_aclk),\n"], [142, "    .out_resetn(m_axis_aresetn),\n"], [143, "    .in_count(s_axis_waddr_reg),\n"], [144, "    .out_count(m_axis_waddr_reg)\n"], [145, "  );\n"], [148, "  sync_gray #(\n"], [149, "    .DATA_WIDTH(ADDRESS_WIDTH + 1)\n"], [150, "  ) i_raddr_sync_gray (\n"], [151, "    .in_clk(m_axis_aclk),\n"], [152, "    .in_resetn(m_axis_aresetn),\n"], [153, "    .out_clk(s_axis_aclk),\n"], [154, "    .out_resetn(s_axis_aresetn),\n"], [155, "    .in_count(m_axis_raddr_reg),\n"], [156, "    .out_count(s_axis_raddr_reg)\n"], [157, "  );\n"], [158, "end else begin\n"], [159, "  assign m_axis_waddr_reg = s_axis_waddr_reg;\n"], [160, "  assign s_axis_raddr_reg = m_axis_raddr_reg;\n"], [161, "end\n"]], "Add": []}}