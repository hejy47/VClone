Source Block: hdl/library/axi_dmac/axi_dmac_regmap_request.v@122:165@HdlStmProcess
assign request_src_address = up_dma_src_address;
assign request_x_length = up_dma_x_length;
assign request_sync_transfer_start = SYNC_TRANSFER_START ? 1'b1 : 1'b0;
assign request_last = up_dma_last;

always @(posedge clk) begin
  if (reset == 1'b1) begin
    up_dma_src_address <= 'h00;
    up_dma_dest_address <= 'h00;
    up_dma_x_length[DMA_LENGTH_WIDTH-1:DMA_LENGTH_ALIGN] <= 'h00;
    up_dma_req_valid <= 1'b0;
    up_dma_cyclic <= DMA_CYCLIC ? 1'b1 : 1'b0;
    up_dma_last <= 1'b1;
    up_dma_enable_tlen_reporting <= 1'b0;
  end else begin
    if (ctrl_enable == 1'b1) begin
      if (up_wreq == 1'b1 && up_waddr == 9'h102) begin
        up_dma_req_valid <= up_dma_req_valid | up_wdata[0];
      end else if (up_sot == 1'b1) begin
        up_dma_req_valid <= 1'b0;
      end
    end else begin
      up_dma_req_valid <= 1'b0;
    end

    if (up_wreq == 1'b1) begin
      case (up_waddr)
      9'h103: begin
        if (DMA_CYCLIC) up_dma_cyclic <= up_wdata[0];
        up_dma_last <= up_wdata[1];
        up_dma_enable_tlen_reporting <= up_wdata[2];
      end
      9'h104: up_dma_dest_address <= up_wdata[DMA_AXI_ADDR_WIDTH-1:BYTES_PER_BEAT_WIDTH_DEST];
      9'h105: up_dma_src_address <= up_wdata[DMA_AXI_ADDR_WIDTH-1:BYTES_PER_BEAT_WIDTH_SRC];
      9'h106: up_dma_x_length[DMA_LENGTH_WIDTH-1:DMA_LENGTH_ALIGN] <= up_wdata[DMA_LENGTH_WIDTH-1:DMA_LENGTH_ALIGN];
      endcase
    end
  end
end

always @(*) begin
  case (up_raddr)
  9'h101: up_rdata <= up_transfer_id;
  9'h102: up_rdata <= up_dma_req_valid;

Diff Content:
- 127 always @(posedge clk) begin
- 128   if (reset == 1'b1) begin
- 129     up_dma_src_address <= 'h00;
- 130     up_dma_dest_address <= 'h00;
- 131     up_dma_x_length[DMA_LENGTH_WIDTH-1:DMA_LENGTH_ALIGN] <= 'h00;
- 132     up_dma_req_valid <= 1'b0;
- 133     up_dma_cyclic <= DMA_CYCLIC ? 1'b1 : 1'b0;
- 134     up_dma_last <= 1'b1;
- 135     up_dma_enable_tlen_reporting <= 1'b0;
- 136   end else begin
- 137     if (ctrl_enable == 1'b1) begin
- 138       if (up_wreq == 1'b1 && up_waddr == 9'h102) begin
- 139         up_dma_req_valid <= up_dma_req_valid | up_wdata[0];
- 140       end else if (up_sot == 1'b1) begin
- 143     end else begin
- 144       up_dma_req_valid <= 1'b0;
- 145     end
- 147     if (up_wreq == 1'b1) begin
- 148       case (up_waddr)
- 149       9'h103: begin
- 150         if (DMA_CYCLIC) up_dma_cyclic <= up_wdata[0];
- 151         up_dma_last <= up_wdata[1];
- 152         up_dma_enable_tlen_reporting <= up_wdata[2];
- 154       9'h104: up_dma_dest_address <= up_wdata[DMA_AXI_ADDR_WIDTH-1:BYTES_PER_BEAT_WIDTH_DEST];
- 155       9'h105: up_dma_src_address <= up_wdata[DMA_AXI_ADDR_WIDTH-1:BYTES_PER_BEAT_WIDTH_SRC];
- 156       9'h106: up_dma_x_length[DMA_LENGTH_WIDTH-1:DMA_LENGTH_ALIGN] <= up_wdata[DMA_LENGTH_WIDTH-1:DMA_LENGTH_ALIGN];
- 157       endcase
- 160 end
+ 140   localparam MEASURED_LENGTH_WIDTH = (DMA_2D_TRANSFER == 1) ? 32 : DMA_LENGTH_WIDTH;
+ 140   reg up_dma_req_valid = 1'b0;
+ 140   wire up_dma_req_ready;
+ 140   reg [1:0] up_transfer_id = 2'b0;
+ 140   reg [1:0] up_transfer_id_eot = 2'b0;
+ 140   reg [3:0] up_transfer_done_bitmap = 4'b0;
+ 140   reg [DMA_AXI_ADDR_WIDTH-1:BYTES_PER_BEAT_WIDTH_DEST] up_dma_dest_address = 'h00;
+ 140   reg [DMA_AXI_ADDR_WIDTH-1:BYTES_PER_BEAT_WIDTH_SRC]  up_dma_src_address = 'h00;
+ 140   reg [DMA_LENGTH_WIDTH-1:0] up_dma_x_length = {DMA_LENGTH_ALIGN{1'b1}};
+ 140   reg up_dma_cyclic = DMA_CYCLIC ? 1'b1 : 1'b0;
+ 140   reg up_dma_last = 1'b1;
+ 140   reg up_dma_enable_tlen_reporting = 1'b0;
+ 140   wire up_tlf_s_ready;
+ 140   reg up_tlf_s_valid = 1'b0;
+ 140   wire [MEASURED_LENGTH_WIDTH+2-1:0] up_tlf_data;
+ 140   wire up_tlf_valid;
+ 140   wire up_tlf_rd;
+ 140   reg up_partial_length_valid = 1'b0;
+ 140   reg [MEASURED_LENGTH_WIDTH-1:0] up_measured_transfer_length = 'h0;
+ 140   reg up_clear_tl = 1'b0;
+ 140   reg [1:0] up_transfer_id_eot_d = 'h0;
+ 140   wire up_bl_partial;
+ 140   assign request_dest_address = up_dma_dest_address;
+ 140   assign request_src_address = up_dma_src_address;
+ 140   assign request_x_length = up_dma_x_length;
+ 140   assign request_sync_transfer_start = SYNC_TRANSFER_START ? 1'b1 : 1'b0;
+ 140   assign request_last = up_dma_last;
+ 140   always @(posedge clk) begin
+ 140     if (reset == 1'b1) begin
+ 140       up_dma_src_address <= 'h00;
+ 140       up_dma_dest_address <= 'h00;
+ 140       up_dma_x_length[DMA_LENGTH_WIDTH-1:DMA_LENGTH_ALIGN] <= 'h00;
+ 140       up_dma_req_valid <= 1'b0;
+ 140       up_dma_cyclic <= DMA_CYCLIC ? 1'b1 : 1'b0;
+ 140       up_dma_last <= 1'b1;
+ 140       up_dma_enable_tlen_reporting <= 1'b0;
+ 140     end else begin
+ 140       if (ctrl_enable == 1'b1) begin
+ 140         if (up_wreq == 1'b1 && up_waddr == 9'h102) begin
+ 140           up_dma_req_valid <= up_dma_req_valid | up_wdata[0];
+ 140         end else if (up_sot == 1'b1) begin
+ 140           up_dma_req_valid <= 1'b0;
+ 140         end
+ 140       end else begin
+ 152       if (up_wreq == 1'b1) begin
+ 152         case (up_waddr)
+ 152         9'h103: begin
+ 152           if (DMA_CYCLIC) up_dma_cyclic <= up_wdata[0];
+ 152           up_dma_last <= up_wdata[1];
+ 152           up_dma_enable_tlen_reporting <= up_wdata[2];
+ 152         end
+ 152         9'h104: up_dma_dest_address <= up_wdata[DMA_AXI_ADDR_WIDTH-1:BYTES_PER_BEAT_WIDTH_DEST];
+ 152         9'h105: up_dma_src_address <= up_wdata[DMA_AXI_ADDR_WIDTH-1:BYTES_PER_BEAT_WIDTH_SRC];
+ 152         9'h106: up_dma_x_length[DMA_LENGTH_WIDTH-1:DMA_LENGTH_ALIGN] <= up_wdata[DMA_LENGTH_WIDTH-1:DMA_LENGTH_ALIGN];
+ 152         endcase

Clone Blocks:
