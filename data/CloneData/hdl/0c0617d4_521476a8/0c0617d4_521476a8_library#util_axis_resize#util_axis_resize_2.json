{"Source Block": ["hdl/library/util_axis_resize/util_axis_resize.v@64:163@HdlStmIf", "  for (clog2=0; value>0; clog2=clog2+1)\n    value = value>>1;\n  end\nendfunction\n\ngenerate if (SLAVE_DATA_WIDTH == MASTER_DATA_WIDTH) begin\n\nassign m_valid = s_valid;\nassign s_ready = m_ready;\nassign m_data = s_data;\n\nend else if (SLAVE_DATA_WIDTH < MASTER_DATA_WIDTH) begin\n\nreg [MASTER_DATA_WIDTH-1:0] data;\nreg [clog2(RATIO)-1:0] count;\nreg valid;\n\nalways @(posedge clk)\nbegin\n  if (resetn == 1'b0) begin\n    count <= RATIO - 1;\n    valid <= 1'b0;\n  end else begin\n    if (count == 'h00 && s_ready == 1'b1 && s_valid == 1'b1)\n      valid <= 1'b1;\n    else if (m_ready == 1'b1)\n      valid <= 1'b0;\n\n    if (s_ready == 1'b1 && s_valid == 1'b1) begin\n      if (count == 'h00)\n        count <= RATIO - 1;\n      else\n        count <= count - 1'b1;\n    end\n  end\nend\n\nalways @(posedge clk)\nbegin\n  if (s_ready == 1'b1 && s_valid == 1'b1)\n    if (BIG_ENDIAN == 1) begin\n      data <= {data[MASTER_DATA_WIDTH-SLAVE_DATA_WIDTH-1:0], s_data};\n    end else begin\n      data <= {s_data, data[MASTER_DATA_WIDTH-1:SLAVE_DATA_WIDTH]};\n    end\nend\n\nassign s_ready = ~valid || m_ready;\nassign m_valid = valid;\nassign m_data = data;\n\nend else begin\n\nreg [SLAVE_DATA_WIDTH-1:0] data;\nreg [clog2(RATIO)-1:0] count;\nreg valid;\n\nalways @(posedge clk)\nbegin\n  if (resetn == 1'b0) begin\n    count <= RATIO - 1;\n    valid <= 1'b0;\n  end else begin\n    if (s_valid == 1'b1 && s_ready == 1'b1)\n      valid <= 1'b1;\n    else if (count == 'h0 && m_ready == 1'b1 && m_valid == 1'b1)\n      valid <= 1'b0;\n\n    if (m_ready == 1'b1 && m_valid == 1'b1) begin\n      if (count == 'h00)\n        count <= RATIO - 1;\n      else\n        count <= count - 1'b1;\n    end\n  end\nend\n\nalways @(posedge clk)\nbegin\n  if (s_ready == 1'b1 && s_valid == 1'b1) begin\n    data <= s_data;\n  end else if (m_ready == 1'b1 && m_valid == 1'b1) begin\n    if (BIG_ENDIAN == 1) begin\n      data[SLAVE_DATA_WIDTH-1:MASTER_DATA_WIDTH] <= data[SLAVE_DATA_WIDTH-MASTER_DATA_WIDTH-1:0];\n    end else begin\n      data[SLAVE_DATA_WIDTH-MASTER_DATA_WIDTH-1:0] <= data[SLAVE_DATA_WIDTH-1:MASTER_DATA_WIDTH];\n    end\n  end\nend\n\nassign s_ready = ~valid || (m_ready && count == 'h0);\nassign m_valid = valid;\nassign m_data = BIG_ENDIAN == 1 ?\n  data[SLAVE_DATA_WIDTH-1:SLAVE_DATA_WIDTH-MASTER_DATA_WIDTH] :\n  data[MASTER_DATA_WIDTH-1:0];\n\nend\nendgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[69, "generate if (SLAVE_DATA_WIDTH == MASTER_DATA_WIDTH) begin\n"], [71, "assign m_valid = s_valid;\n"], [72, "assign s_ready = m_ready;\n"], [73, "assign m_data = s_data;\n"], [75, "end else if (SLAVE_DATA_WIDTH < MASTER_DATA_WIDTH) begin\n"], [77, "reg [MASTER_DATA_WIDTH-1:0] data;\n"], [78, "reg [clog2(RATIO)-1:0] count;\n"], [79, "reg valid;\n"], [81, "always @(posedge clk)\n"], [82, "begin\n"], [83, "  if (resetn == 1'b0) begin\n"], [84, "    count <= RATIO - 1;\n"], [85, "    valid <= 1'b0;\n"], [86, "  end else begin\n"], [87, "    if (count == 'h00 && s_ready == 1'b1 && s_valid == 1'b1)\n"], [88, "      valid <= 1'b1;\n"], [89, "    else if (m_ready == 1'b1)\n"], [92, "    if (s_ready == 1'b1 && s_valid == 1'b1) begin\n"], [93, "      if (count == 'h00)\n"], [94, "        count <= RATIO - 1;\n"], [95, "      else\n"], [96, "        count <= count - 1'b1;\n"], [99, "end\n"], [101, "always @(posedge clk)\n"], [102, "begin\n"], [103, "  if (s_ready == 1'b1 && s_valid == 1'b1)\n"], [104, "    if (BIG_ENDIAN == 1) begin\n"], [105, "      data <= {data[MASTER_DATA_WIDTH-SLAVE_DATA_WIDTH-1:0], s_data};\n"], [106, "    end else begin\n"], [107, "      data <= {s_data, data[MASTER_DATA_WIDTH-1:SLAVE_DATA_WIDTH]};\n"], [108, "    end\n"], [109, "end\n"], [111, "assign s_ready = ~valid || m_ready;\n"], [112, "assign m_valid = valid;\n"], [113, "assign m_data = data;\n"], [115, "end else begin\n"], [117, "reg [SLAVE_DATA_WIDTH-1:0] data;\n"], [118, "reg [clog2(RATIO)-1:0] count;\n"], [119, "reg valid;\n"], [121, "always @(posedge clk)\n"], [122, "begin\n"], [123, "  if (resetn == 1'b0) begin\n"], [124, "    count <= RATIO - 1;\n"], [125, "    valid <= 1'b0;\n"], [126, "  end else begin\n"], [127, "    if (s_valid == 1'b1 && s_ready == 1'b1)\n"], [128, "      valid <= 1'b1;\n"], [129, "    else if (count == 'h0 && m_ready == 1'b1 && m_valid == 1'b1)\n"], [132, "    if (m_ready == 1'b1 && m_valid == 1'b1) begin\n"], [133, "      if (count == 'h00)\n"], [134, "        count <= RATIO - 1;\n"], [135, "      else\n"], [136, "        count <= count - 1'b1;\n"], [139, "end\n"], [141, "always @(posedge clk)\n"], [142, "begin\n"], [143, "  if (s_ready == 1'b1 && s_valid == 1'b1) begin\n"], [144, "    data <= s_data;\n"], [145, "  end else if (m_ready == 1'b1 && m_valid == 1'b1) begin\n"], [146, "    if (BIG_ENDIAN == 1) begin\n"], [147, "      data[SLAVE_DATA_WIDTH-1:MASTER_DATA_WIDTH] <= data[SLAVE_DATA_WIDTH-MASTER_DATA_WIDTH-1:0];\n"], [148, "    end else begin\n"], [149, "      data[SLAVE_DATA_WIDTH-MASTER_DATA_WIDTH-1:0] <= data[SLAVE_DATA_WIDTH-1:MASTER_DATA_WIDTH];\n"], [152, "end\n"], [154, "assign s_ready = ~valid || (m_ready && count == 'h0);\n"], [155, "assign m_valid = valid;\n"], [156, "assign m_data = BIG_ENDIAN == 1 ?\n"], [157, "  data[SLAVE_DATA_WIDTH-1:SLAVE_DATA_WIDTH-MASTER_DATA_WIDTH] :\n"], [158, "  data[MASTER_DATA_WIDTH-1:0];\n"], [160, "end\n"]], "Add": [[69, "  generate if (SLAVE_DATA_WIDTH == MASTER_DATA_WIDTH) begin\n"], [73, "  assign m_valid = s_valid;\n"], [73, "  assign s_ready = m_ready;\n"], [73, "  assign m_data = s_data;\n"], [75, "  end else if (SLAVE_DATA_WIDTH < MASTER_DATA_WIDTH) begin\n"], [79, "  reg [MASTER_DATA_WIDTH-1:0] data;\n"], [79, "  reg [clog2(RATIO)-1:0] count;\n"], [79, "  reg valid;\n"], [89, "  always @(posedge clk)\n"], [89, "  begin\n"], [89, "    if (resetn == 1'b0) begin\n"], [89, "      count <= RATIO - 1;\n"], [96, "    end else begin\n"], [96, "      if (count == 'h00 && s_ready == 1'b1 && s_valid == 1'b1)\n"], [96, "        valid <= 1'b1;\n"], [96, "      else if (m_ready == 1'b1)\n"], [96, "        valid <= 1'b0;\n"], [96, "      if (s_ready == 1'b1 && s_valid == 1'b1) begin\n"], [96, "        if (count == 'h00)\n"], [96, "          count <= RATIO - 1;\n"], [96, "        else\n"], [96, "          count <= count - 1'b1;\n"], [96, "      end\n"], [109, "  always @(posedge clk)\n"], [109, "  begin\n"], [109, "    if (s_ready == 1'b1 && s_valid == 1'b1)\n"], [109, "      if (BIG_ENDIAN == 1) begin\n"], [109, "        data <= {data[MASTER_DATA_WIDTH-SLAVE_DATA_WIDTH-1:0], s_data};\n"], [109, "      end else begin\n"], [109, "        data <= {s_data, data[MASTER_DATA_WIDTH-1:SLAVE_DATA_WIDTH]};\n"], [109, "      end\n"], [109, "  end\n"], [113, "  assign s_ready = ~valid || m_ready;\n"], [113, "  assign m_valid = valid;\n"], [113, "  assign m_data = data;\n"], [115, "  end else begin\n"], [119, "  reg [SLAVE_DATA_WIDTH-1:0] data;\n"], [119, "  reg [clog2(RATIO)-1:0] count;\n"], [119, "  reg valid;\n"], [129, "  always @(posedge clk)\n"], [129, "  begin\n"], [129, "    if (resetn == 1'b0) begin\n"], [129, "      count <= RATIO - 1;\n"], [136, "    end else begin\n"], [136, "      if (s_valid == 1'b1 && s_ready == 1'b1)\n"], [136, "        valid <= 1'b1;\n"], [136, "      else if (count == 'h0 && m_ready == 1'b1 && m_valid == 1'b1)\n"], [136, "        valid <= 1'b0;\n"], [136, "      if (m_ready == 1'b1 && m_valid == 1'b1) begin\n"], [136, "        if (count == 'h00)\n"], [136, "          count <= RATIO - 1;\n"], [136, "        else\n"], [136, "          count <= count - 1'b1;\n"], [136, "      end\n"], [149, "  always @(posedge clk)\n"], [149, "  begin\n"], [149, "    if (s_ready == 1'b1 && s_valid == 1'b1) begin\n"], [149, "      data <= s_data;\n"], [149, "    end else if (m_ready == 1'b1 && m_valid == 1'b1) begin\n"], [149, "      if (BIG_ENDIAN == 1) begin\n"], [149, "        data[SLAVE_DATA_WIDTH-1:MASTER_DATA_WIDTH] <= data[SLAVE_DATA_WIDTH-MASTER_DATA_WIDTH-1:0];\n"], [149, "      end else begin\n"], [149, "        data[SLAVE_DATA_WIDTH-MASTER_DATA_WIDTH-1:0] <= data[SLAVE_DATA_WIDTH-1:MASTER_DATA_WIDTH];\n"], [149, "      end\n"], [158, "  assign s_ready = ~valid || (m_ready && count == 'h0);\n"], [158, "  assign m_valid = valid;\n"], [158, "  assign m_data = BIG_ENDIAN == 1 ?\n"], [158, "    data[SLAVE_DATA_WIDTH-1:SLAVE_DATA_WIDTH-MASTER_DATA_WIDTH] :\n"], [158, "    data[MASTER_DATA_WIDTH-1:0];\n"]]}}