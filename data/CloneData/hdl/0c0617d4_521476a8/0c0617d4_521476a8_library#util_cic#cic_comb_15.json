{"Source Block": ["hdl/library/util_cic/cic_comb.v@93:130@HdlStmFor", "end\n\ngenerate\ngenvar i, j;\n\nfor (j = 0; j < NUM_STAGES; j = j + 1) begin\n  localparam k = NUM_STAGES - j - 1;\n  localparam H = DATA_WIDTH - STAGE_WIDTH * j - 1;\n  localparam L = k == 0 ? 0 : DATA_WIDTH - STAGE_WIDTH * (j+1);\n\n  assign mask[H:L] = {{H-L{1'b1}},k != 0 ? enable[k] : 1'b1};\n\n  for (i = L; i <= H; i = i + 1) begin: shift_r\n    always @(posedge clk) begin\n      if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin\n        if (SEQ > 1) begin\n          storage[i] <= {storage[i][SEQ-2:0],data_in_seq[i]};\n        end else begin\n          storage[i] <= data_in_seq[i];\n        end\n      end\n    end\n\n    assign storage_out[i] = storage[i][SEQ-1];\n\n  end\n\n  always @(posedge clk) begin\n    if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin\n      state[H:L] <= diff[H:L];\n    end\n  end\nend\n\nendgenerate\n\nassign data_out = state;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[98, "for (j = 0; j < NUM_STAGES; j = j + 1) begin\n"], [99, "  localparam k = NUM_STAGES - j - 1;\n"], [100, "  localparam H = DATA_WIDTH - STAGE_WIDTH * j - 1;\n"], [101, "  localparam L = k == 0 ? 0 : DATA_WIDTH - STAGE_WIDTH * (j+1);\n"], [103, "  assign mask[H:L] = {{H-L{1'b1}},k != 0 ? enable[k] : 1'b1};\n"], [105, "  for (i = L; i <= H; i = i + 1) begin: shift_r\n"], [106, "    always @(posedge clk) begin\n"], [107, "      if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin\n"], [108, "        if (SEQ > 1) begin\n"], [109, "          storage[i] <= {storage[i][SEQ-2:0],data_in_seq[i]};\n"], [110, "        end else begin\n"], [111, "          storage[i] <= data_in_seq[i];\n"], [114, "    end\n"], [116, "    assign storage_out[i] = storage[i][SEQ-1];\n"], [118, "  end\n"], [120, "  always @(posedge clk) begin\n"], [121, "    if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin\n"], [122, "      state[H:L] <= diff[H:L];\n"], [125, "end\n"]], "Add": [[101, "  for (j = 0; j < NUM_STAGES; j = j + 1) begin\n"], [101, "    localparam k = NUM_STAGES - j - 1;\n"], [101, "    localparam H = DATA_WIDTH - STAGE_WIDTH * j - 1;\n"], [101, "    localparam L = k == 0 ? 0 : DATA_WIDTH - STAGE_WIDTH * (j+1);\n"], [103, "    assign mask[H:L] = {{H-L{1'b1}},k != 0 ? enable[k] : 1'b1};\n"], [111, "    for (i = L; i <= H; i = i + 1) begin: shift_r\n"], [111, "      always @(posedge clk) begin\n"], [111, "        if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin\n"], [111, "          if (SEQ > 1) begin\n"], [111, "            storage[i] <= {storage[i][SEQ-2:0],data_in_seq[i]};\n"], [111, "          end else begin\n"], [111, "            storage[i] <= data_in_seq[i];\n"], [111, "          end\n"], [116, "      assign storage_out[i] = storage[i][SEQ-1];\n"], [118, "    end\n"], [122, "    always @(posedge clk) begin\n"], [122, "      if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin\n"], [122, "        state[H:L] <= diff[H:L];\n"], [122, "      end\n"]]}}