{"Source Block": ["hdl/library/axi_dmac/data_mover.v@120:130@HdlStmAssign", "assign m_axi_valid = s_axi_sync_valid & s_axi_ready;\nassign m_axi_data = s_axi_data;\nassign m_axi_last = last || early_tlast;\nassign m_axi_partial_burst = early_tlast;\n\nassign block_descr_to_dst = transfer_abort_s;\n\ngenerate if (ALLOW_ABORT == 1) begin\n  wire programmed_last;\n\n  reg transfer_abort = 1'b0;\n"], "Clone Blocks": [["hdl/library/axi_dmac/data_mover.v@118:128", "\nassign s_axi_ready = (pending_burst & active) & ~transfer_abort_s;\nassign m_axi_valid = s_axi_sync_valid & s_axi_ready;\nassign m_axi_data = s_axi_data;\nassign m_axi_last = last || early_tlast;\nassign m_axi_partial_burst = early_tlast;\n\nassign block_descr_to_dst = transfer_abort_s;\n\ngenerate if (ALLOW_ABORT == 1) begin\n  wire programmed_last;\n"]], "Diff Content": {"Delete": [[125, "assign block_descr_to_dst = transfer_abort_s;\n"]], "Add": [[125, "    reg transfer_abort = 1'b0;\n"], [125, "    reg req_xlast_d = 1'b0;\n"], [125, "    reg [1:0] transfer_id = 2'b0;\n"], [125, "    assign programmed_last = (last == 1'b1 && eot == 1'b1 && req_xlast_d == 1'b1);\n"], [125, "    /*\n"], [125, "     * A 'last' on the external interface indicates the end of an packet. If such a\n"], [125, "     * 'last' indicator is observed before the end of the current transfer stop\n"], [125, "     * accepting data on the external interface until a new descriptor is\n"], [125, "     * received that is the first segment of a transfer.\n"], [125, "     */\n"], [125, "    always @(posedge clk) begin\n"], [125, "      if (resetn == 1'b0) begin\n"], [125, "        transfer_abort <= 1'b0;\n"], [125, "      end else if (req_valid == 1'b1 && req_ready == 1'b1 && req_xlast_d == 1'b1) begin\n"], [125, "        transfer_abort <= 1'b0;\n"], [125, "      end else if (m_axi_valid == 1'b1) begin\n"], [125, "        if (programmed_last == 1'b1) begin\n"], [125, "          transfer_abort <= 1'b0;\n"], [125, "        end else if (s_axi_last == 1'b1) begin\n"], [125, "          transfer_abort <= 1'b1;\n"], [125, "        end\n"], [125, "      end\n"], [125, "    end\n"], [125, "    always @(posedge clk) begin\n"], [125, "      if (req_ready == 1'b1 && req_valid == 1'b1) begin\n"], [125, "        req_xlast_d <= req_xlast;\n"], [125, "      end\n"], [125, "    end\n"]]}}