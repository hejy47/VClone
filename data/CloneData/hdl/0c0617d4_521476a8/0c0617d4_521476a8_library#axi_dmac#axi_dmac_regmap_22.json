{"Source Block": ["hdl/library/axi_dmac/axi_dmac_regmap.v@147:163@HdlStmProcess", "// IRQ handling\nassign up_irq_pending = ~up_irq_mask & up_irq_source;\nassign up_irq_trigger  = {up_eot, up_sot};\nassign up_irq_source_clear = (up_wreq == 1'b1 && up_waddr == 9'h021) ? up_wdata[1:0] : 2'b00;\n\nalways @(posedge s_axi_aclk) begin\n  if (s_axi_aresetn == 1'b0) begin\n    irq <= 1'b0;\n  end else begin\n    irq <= |up_irq_pending;\n  end\nend\n\nalways @(posedge s_axi_aclk) begin\n  if (s_axi_aresetn == 1'b0) begin\n    up_irq_source <= 2'b00;\n  end else begin\n"], "Clone Blocks": [["hdl/library/axi_dmac/axi_dmac_regmap.v@145:155", "wire [1:0] up_irq_source_clear;\n\n// IRQ handling\nassign up_irq_pending = ~up_irq_mask & up_irq_source;\nassign up_irq_trigger  = {up_eot, up_sot};\nassign up_irq_source_clear = (up_wreq == 1'b1 && up_waddr == 9'h021) ? up_wdata[1:0] : 2'b00;\n\nalways @(posedge s_axi_aclk) begin\n  if (s_axi_aresetn == 1'b0) begin\n    irq <= 1'b0;\n  end else begin\n"], ["hdl/library/axi_dmac/axi_dmac_regmap.v@144:154", "wire [1:0] up_irq_trigger;\nwire [1:0] up_irq_source_clear;\n\n// IRQ handling\nassign up_irq_pending = ~up_irq_mask & up_irq_source;\nassign up_irq_trigger  = {up_eot, up_sot};\nassign up_irq_source_clear = (up_wreq == 1'b1 && up_waddr == 9'h021) ? up_wdata[1:0] : 2'b00;\n\nalways @(posedge s_axi_aclk) begin\n  if (s_axi_aresetn == 1'b0) begin\n    irq <= 1'b0;\n"], ["hdl/library/axi_dmac/axi_dmac_regmap.v@143:153", "wire [1:0] up_irq_pending;\nwire [1:0] up_irq_trigger;\nwire [1:0] up_irq_source_clear;\n\n// IRQ handling\nassign up_irq_pending = ~up_irq_mask & up_irq_source;\nassign up_irq_trigger  = {up_eot, up_sot};\nassign up_irq_source_clear = (up_wreq == 1'b1 && up_waddr == 9'h021) ? up_wdata[1:0] : 2'b00;\n\nalways @(posedge s_axi_aclk) begin\n  if (s_axi_aresetn == 1'b0) begin\n"]], "Diff Content": {"Delete": [[152, "always @(posedge s_axi_aclk) begin\n"], [153, "  if (s_axi_aresetn == 1'b0) begin\n"], [154, "    irq <= 1'b0;\n"], [155, "  end else begin\n"], [156, "    irq <= |up_irq_pending;\n"], [158, "end\n"]], "Add": [[156, "  localparam PCORE_VERSION = 'h00040461;\n"], [156, "  reg [31:0] up_rdata = 32'h00;\n"], [156, "  reg up_wack = 1'b0;\n"], [156, "  reg up_rack = 1'b0;\n"], [156, "  wire up_wreq;\n"], [156, "  wire up_rreq;\n"], [156, "  wire [31:0] up_wdata;\n"], [156, "  wire [8:0] up_waddr;\n"], [156, "  wire [8:0] up_raddr;\n"], [156, "  wire [31:0] up_rdata_request;\n"], [156, "  reg [31:0] up_scratch = 32'h00;\n"], [156, "  wire up_eot; // Asserted for one cycle when a transfer has been completed\n"], [156, "  wire up_sot; // Asserted for one cycle when a transfer has been queued\n"], [156, "  reg [1:0] up_irq_mask = 2'h3;\n"], [156, "  reg [1:0] up_irq_source = 2'h0;\n"], [156, "  wire [1:0] up_irq_pending;\n"], [156, "  wire [1:0] up_irq_trigger;\n"], [156, "  wire [1:0] up_irq_source_clear;\n"], [156, "  assign up_irq_pending = ~up_irq_mask & up_irq_source;\n"], [156, "  assign up_irq_trigger  = {up_eot, up_sot};\n"], [156, "  assign up_irq_source_clear = (up_wreq == 1'b1 && up_waddr == 9'h021) ? up_wdata[1:0] : 2'b00;\n"], [156, "  always @(posedge s_axi_aclk) begin\n"], [156, "    if (s_axi_aresetn == 1'b0) begin\n"], [156, "      irq <= 1'b0;\n"], [156, "    end else begin\n"], [156, "      irq <= |up_irq_pending;\n"], [156, "    end\n"]]}}