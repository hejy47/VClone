{"Source Block": ["hdl/library/axi_dmac/request_arb.v@546:615@HdlStmIf", "assign m_axis_xfer_req = 1'b0;\nassign m_axis_data = 'h00;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_FIFO) begin\n\nassign dest_clk = fifo_rd_clk;\nassign dest_ext_resetn = 1'b1;\n\nwire [ID_WIDTH-1:0] data_id;\n\nwire data_eot = eot_mem_dest[data_id];\nwire response_eot = eot_mem_dest[dest_response_id];\n\nassign dest_data_request_id = dest_request_id;\n\nassign dbg_dest_address_id = 'h00;\nassign dbg_dest_data_id = data_id;\n\ndest_fifo_inf #(\n  .ID_WIDTH(ID_WIDTH),\n  .DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)\n) i_dest_dma_fifo (\n  .clk(fifo_rd_clk),\n  .resetn(dest_resetn),\n\n  .enable(dest_enable),\n  .enabled(dest_enabled),\n\n  .req_valid(dest_req_valid),\n  .req_ready(dest_req_ready),\n\n  .response_valid(dest_response_valid),\n  .response_ready(dest_response_ready),\n  .response_resp(dest_response_resp),\n  .response_resp_eot(dest_response_resp_eot),\n\n  .response_id(dest_response_id),\n  .data_id(data_id),\n\n  .data_eot(data_eot),\n  .response_eot(response_eot),\n\n  .fifo_valid(dest_valid),\n  .fifo_ready(dest_ready),\n  .fifo_data(dest_data),\n  .fifo_last(dest_last),\n\n  .en(fifo_rd_en),\n  .valid(fifo_rd_valid),\n  .dout(fifo_rd_dout),\n  .underflow(fifo_rd_underflow),\n  .xfer_req(fifo_rd_xfer_req)\n);\n\nend else begin\n\nassign fifo_rd_valid = 1'b0;\nassign fifo_rd_dout = 'h0;\nassign fifo_rd_underflow = 1'b0;\nassign fifo_rd_xfer_req = 1'b0;\n\nend endgenerate\n\ngenerate if (DMA_TYPE_SRC == DMA_TYPE_MM_AXI) begin\n\nwire [ID_WIDTH-1:0] src_data_id;\nwire [ID_WIDTH-1:0] src_address_id;\n"], "Clone Blocks": [["hdl/library/axi_dmac/request_arb.v@483:554", "assign dest_response_partial = 1'b0;\nassign dest_response_data_burst_length = 'h0;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin\n\nassign dest_clk = m_axis_aclk;\nassign dest_ext_resetn = 1'b1;\n\nwire [ID_WIDTH-1:0] data_id;\n\nwire data_eot = eot_mem_dest[data_id];\nwire response_eot = eot_mem_dest[dest_response_id];\n\nassign dest_data_request_id = dest_request_id;\n\nassign dbg_dest_address_id = 'h00;\nassign dbg_dest_data_id = data_id;\n\n\ndest_axi_stream #(\n  .ID_WIDTH(ID_WIDTH),\n  .S_AXIS_DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)\n) i_dest_dma_stream (\n  .s_axis_aclk(m_axis_aclk),\n  .s_axis_aresetn(dest_resetn),\n\n  .enable(dest_enable),\n  .enabled(dest_enabled),\n\n  .req_valid(dest_req_valid),\n  .req_ready(dest_req_ready),\n  .req_xlast(dest_req_xlast),\n\n  .response_valid(dest_response_valid),\n  .response_ready(dest_response_ready),\n  .response_resp(dest_response_resp),\n  .response_resp_eot(dest_response_resp_eot),\n\n  .response_id(dest_response_id),\n  .data_id(data_id),\n  .xfer_req(m_axis_xfer_req),\n\n  .data_eot(data_eot),\n  .response_eot(response_eot),\n\n  .fifo_valid(dest_valid),\n  .fifo_ready(dest_ready),\n  .fifo_data(dest_data),\n  .fifo_last(dest_last),\n\n  .m_axis_valid(m_axis_valid),\n  .m_axis_ready(m_axis_ready),\n  .m_axis_data(m_axis_data),\n  .m_axis_last(m_axis_last)\n);\n\nend else begin\n\nassign m_axis_valid = 1'b0;\nassign m_axis_last = 1'b0;\nassign m_axis_xfer_req = 1'b0;\nassign m_axis_data = 'h00;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_FIFO) begin\n\nassign dest_clk = fifo_rd_clk;\nassign dest_ext_resetn = 1'b1;\n"]], "Diff Content": {"Delete": [[551, "if (DMA_TYPE_DEST == DMA_TYPE_FIFO) begin\n"], [553, "assign dest_clk = fifo_rd_clk;\n"], [554, "assign dest_ext_resetn = 1'b1;\n"], [556, "wire [ID_WIDTH-1:0] data_id;\n"], [558, "wire data_eot = eot_mem_dest[data_id];\n"], [559, "wire response_eot = eot_mem_dest[dest_response_id];\n"], [561, "assign dest_data_request_id = dest_request_id;\n"], [563, "assign dbg_dest_address_id = 'h00;\n"], [564, "assign dbg_dest_data_id = data_id;\n"], [566, "dest_fifo_inf #(\n"], [567, "  .ID_WIDTH(ID_WIDTH),\n"], [568, "  .DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n"], [569, "  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)\n"], [570, ") i_dest_dma_fifo (\n"], [571, "  .clk(fifo_rd_clk),\n"], [572, "  .resetn(dest_resetn),\n"], [574, "  .enable(dest_enable),\n"], [575, "  .enabled(dest_enabled),\n"], [577, "  .req_valid(dest_req_valid),\n"], [578, "  .req_ready(dest_req_ready),\n"], [580, "  .response_valid(dest_response_valid),\n"], [581, "  .response_ready(dest_response_ready),\n"], [582, "  .response_resp(dest_response_resp),\n"], [583, "  .response_resp_eot(dest_response_resp_eot),\n"], [585, "  .response_id(dest_response_id),\n"], [586, "  .data_id(data_id),\n"], [588, "  .data_eot(data_eot),\n"], [589, "  .response_eot(response_eot),\n"], [591, "  .fifo_valid(dest_valid),\n"], [592, "  .fifo_ready(dest_ready),\n"], [593, "  .fifo_data(dest_data),\n"], [594, "  .fifo_last(dest_last),\n"], [596, "  .en(fifo_rd_en),\n"], [597, "  .valid(fifo_rd_valid),\n"], [598, "  .dout(fifo_rd_dout),\n"], [599, "  .underflow(fifo_rd_underflow),\n"], [600, "  .xfer_req(fifo_rd_xfer_req)\n"], [601, ");\n"], [603, "end else begin\n"], [605, "assign fifo_rd_valid = 1'b0;\n"], [606, "assign fifo_rd_dout = 'h0;\n"], [607, "assign fifo_rd_underflow = 1'b0;\n"], [608, "assign fifo_rd_xfer_req = 1'b0;\n"], [610, "end endgenerate\n"]], "Add": [[551, "    .m_axis_valid(m_axis_valid),\n"], [551, "    .m_axis_ready(m_axis_ready),\n"], [551, "    .m_axis_data(m_axis_data),\n"], [551, "    .m_axis_last(m_axis_last));\n"], [554, "  end else begin\n"], [556, "  assign m_axis_valid = 1'b0;\n"], [556, "  assign m_axis_last = 1'b0;\n"], [556, "  assign m_axis_xfer_req = 1'b0;\n"], [556, "  assign m_axis_data = 'h00;\n"], [559, "  end\n"], [561, "  if (DMA_TYPE_DEST == DMA_TYPE_FIFO) begin\n"], [564, "  assign dest_clk = fifo_rd_clk;\n"], [564, "  assign dest_ext_resetn = 1'b1;\n"], [572, "  wire [ID_WIDTH-1:0] data_id;\n"], [575, "  wire data_eot = eot_mem_dest[data_id];\n"], [575, "  wire response_eot = eot_mem_dest[dest_response_id];\n"], [578, "  assign dest_data_request_id = dest_request_id;\n"], [583, "  assign dbg_dest_address_id = 'h00;\n"], [583, "  assign dbg_dest_data_id = data_id;\n"], [586, "  dest_fifo_inf #(\n"], [586, "    .ID_WIDTH(ID_WIDTH),\n"], [586, "    .DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n"], [586, "    .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST)\n"], [586, "  ) i_dest_dma_fifo (\n"], [586, "    .clk(fifo_rd_clk),\n"], [586, "    .resetn(dest_resetn),\n"], [589, "    .enable(dest_enable),\n"], [589, "    .enabled(dest_enabled),\n"], [594, "    .req_valid(dest_req_valid),\n"], [594, "    .req_ready(dest_req_ready),\n"], [601, "    .response_valid(dest_response_valid),\n"], [601, "    .response_ready(dest_response_ready),\n"], [601, "    .response_resp(dest_response_resp),\n"], [601, "    .response_resp_eot(dest_response_resp_eot),\n"]]}}