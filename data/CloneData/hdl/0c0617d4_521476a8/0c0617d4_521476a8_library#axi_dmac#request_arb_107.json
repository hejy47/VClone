{"Source Block": ["hdl/library/axi_dmac/request_arb.v@796:867@HdlStmIf", "assign src_partial_burst = 1'b0;\nassign block_descr_to_dst = 1'b0;\n\nend\n\nif (DMA_TYPE_SRC == DMA_TYPE_FIFO) begin\n\nwire src_eot = eot_mem_src[src_response_id];\n\nassign source_id = src_response_id;\nassign source_eot = src_eot;\n\nassign src_clk = fifo_wr_clk;\nassign src_ext_resetn = 1'b1;\n\nassign dbg_src_address_id = 'h00;\nassign dbg_src_data_id = 'h00;\n\n/* TODO\nassign src_response_valid = 1'b0;\nassign src_response_resp = 2'b0;\n*/\n\nsrc_fifo_inf #(\n  .ID_WIDTH(ID_WIDTH),\n  .DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC)\n) i_src_dma_fifo (\n  .clk(fifo_wr_clk),\n  .resetn(src_resetn),\n\n  .enable(src_enable),\n  .enabled(src_enabled),\n\n  .req_valid(src_req_valid),\n  .req_ready(src_req_ready),\n  .req_last_burst_length(src_req_last_burst_length),\n  .req_sync_transfer_start(src_req_sync_transfer_start),\n\n  .request_id(src_throttled_request_id),\n  .response_id(src_response_id),\n\n  .eot(src_eot),\n\n  .bl_valid(src_bl_valid),\n  .bl_ready(src_bl_ready),\n  .measured_last_burst_length(src_burst_length),\n\n  .fifo_valid(src_valid),\n  .fifo_data(src_data),\n  .fifo_last(src_last),\n\n  .en(fifo_wr_en),\n  .din(fifo_wr_din),\n  .overflow(fifo_wr_overflow),\n  .sync(fifo_wr_sync),\n  .xfer_req(fifo_wr_xfer_req)\n);\n\nassign src_valid_bytes = {BYTES_PER_BEAT_WIDTH_SRC{1'b1}};\n\nend else begin\n\nassign fifo_wr_overflow = 1'b0;\nassign fifo_wr_xfer_req = 1'b0;\n\nend endgenerate\n\nsync_bits #(\n  .NUM_OF_BITS(ID_WIDTH),\n  .ASYNC_CLK(ASYNC_CLK_REQ_SRC)\n) i_sync_src_request_id (\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[801, "if (DMA_TYPE_SRC == DMA_TYPE_FIFO) begin\n"], [803, "wire src_eot = eot_mem_src[src_response_id];\n"], [805, "assign source_id = src_response_id;\n"], [806, "assign source_eot = src_eot;\n"], [808, "assign src_clk = fifo_wr_clk;\n"], [809, "assign src_ext_resetn = 1'b1;\n"], [811, "assign dbg_src_address_id = 'h00;\n"], [812, "assign dbg_src_data_id = 'h00;\n"], [814, "/* TODO\n"], [815, "assign src_response_valid = 1'b0;\n"], [816, "assign src_response_resp = 2'b0;\n"], [817, "*/\n"], [819, "src_fifo_inf #(\n"], [820, "  .ID_WIDTH(ID_WIDTH),\n"], [821, "  .DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n"], [822, "  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC)\n"], [823, ") i_src_dma_fifo (\n"], [824, "  .clk(fifo_wr_clk),\n"], [825, "  .resetn(src_resetn),\n"], [827, "  .enable(src_enable),\n"], [828, "  .enabled(src_enabled),\n"], [830, "  .req_valid(src_req_valid),\n"], [831, "  .req_ready(src_req_ready),\n"], [832, "  .req_last_burst_length(src_req_last_burst_length),\n"], [833, "  .req_sync_transfer_start(src_req_sync_transfer_start),\n"], [835, "  .request_id(src_throttled_request_id),\n"], [836, "  .response_id(src_response_id),\n"], [838, "  .eot(src_eot),\n"], [840, "  .bl_valid(src_bl_valid),\n"], [841, "  .bl_ready(src_bl_ready),\n"], [842, "  .measured_last_burst_length(src_burst_length),\n"], [844, "  .fifo_valid(src_valid),\n"], [845, "  .fifo_data(src_data),\n"], [846, "  .fifo_last(src_last),\n"], [848, "  .en(fifo_wr_en),\n"], [849, "  .din(fifo_wr_din),\n"], [850, "  .overflow(fifo_wr_overflow),\n"], [851, "  .sync(fifo_wr_sync),\n"], [852, "  .xfer_req(fifo_wr_xfer_req)\n"], [853, ");\n"], [855, "assign src_valid_bytes = {BYTES_PER_BEAT_WIDTH_SRC{1'b1}};\n"], [857, "end else begin\n"], [859, "assign fifo_wr_overflow = 1'b0;\n"], [860, "assign fifo_wr_xfer_req = 1'b0;\n"], [862, "end endgenerate\n"]], "Add": [[801, "  if (DMA_TYPE_SRC == DMA_TYPE_FIFO) begin\n"], [803, "  wire src_eot = eot_mem_src[src_response_id];\n"], [806, "  assign source_id = src_response_id;\n"], [806, "  assign source_eot = src_eot;\n"], [809, "  assign src_clk = fifo_wr_clk;\n"], [809, "  assign src_ext_resetn = 1'b1;\n"], [812, "  assign dbg_src_address_id = 'h00;\n"], [812, "  assign dbg_src_data_id = 'h00;\n"], [817, "  /* TODO\n"], [817, "  assign src_response_valid = 1'b0;\n"], [817, "  assign src_response_resp = 2'b0;\n"], [817, "  */\n"], [825, "  src_fifo_inf #(\n"], [825, "    .ID_WIDTH(ID_WIDTH),\n"], [825, "    .DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n"], [825, "    .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC)\n"], [825, "  ) i_src_dma_fifo (\n"], [825, "    .clk(fifo_wr_clk),\n"], [825, "    .resetn(src_resetn),\n"], [828, "    .enable(src_enable),\n"], [828, "    .enabled(src_enabled),\n"], [833, "    .req_valid(src_req_valid),\n"], [833, "    .req_ready(src_req_ready),\n"], [833, "    .req_last_burst_length(src_req_last_burst_length),\n"], [833, "    .req_sync_transfer_start(src_req_sync_transfer_start),\n"], [836, "    .request_id(src_throttled_request_id),\n"], [836, "    .response_id(src_response_id),\n"], [838, "    .eot(src_eot),\n"], [842, "    .bl_valid(src_bl_valid),\n"], [842, "    .bl_ready(src_bl_ready),\n"], [842, "    .measured_last_burst_length(src_burst_length),\n"], [846, "    .fifo_valid(src_valid),\n"], [846, "    .fifo_data(src_data),\n"], [846, "    .fifo_last(src_last),\n"], [853, "    .en(fifo_wr_en),\n"], [853, "    .din(fifo_wr_din),\n"], [853, "    .overflow(fifo_wr_overflow),\n"], [853, "    .sync(fifo_wr_sync),\n"], [853, "    .xfer_req(fifo_wr_xfer_req));\n"], [855, "  assign src_valid_bytes = {BYTES_PER_BEAT_WIDTH_SRC{1'b1}};\n"], [857, "  end else begin\n"], [860, "  assign fifo_wr_overflow = 1'b0;\n"], [860, "  assign fifo_wr_xfer_req = 1'b0;\n"], [862, "  end endgenerate\n"]]}}