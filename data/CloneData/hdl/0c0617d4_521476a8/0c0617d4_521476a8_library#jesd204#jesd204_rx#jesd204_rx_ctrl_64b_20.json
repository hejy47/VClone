{"Source Block": ["hdl/library/jesd204/jesd204_rx/jesd204_rx_ctrl_64b.v@91:133@HdlStmProcess", "assign emb_lock_masked = emb_lock_d | cfg_lanes_disable;\n\nassign all_block_sync = &phy_block_sync_masked;\nassign all_emb_lock = &emb_lock_masked;\n\nalways @(*) begin\n  next_state = state;\n  rst_good_cnt = 1'b1;\n  event_unexpected_lane_state_error_nx = 1'b0;\n  case (state)\n    STATE_RESET:\n      next_state = STATE_WAIT_BS;\n    STATE_WAIT_BS:\n      if (all_block_sync) begin\n        rst_good_cnt = 1'b0;\n        if (&good_cnt) begin\n          next_state = STATE_BLOCK_SYNC;\n        end\n      end\n    STATE_BLOCK_SYNC:\n      if (~all_block_sync) begin\n        next_state = STATE_WAIT_BS;\n      end else if (all_emb_lock & ~buffer_release_d_n) begin\n        rst_good_cnt = 1'b0;\n        if (&good_cnt) begin\n          next_state = STATE_DATA;\n        end\n      end\n    STATE_DATA:\n      if (~all_block_sync) begin\n        next_state = STATE_WAIT_BS;\n        event_unexpected_lane_state_error_nx = 1'b1;\n      end else if (~all_emb_lock | buffer_release_d_n) begin\n        next_state = STATE_BLOCK_SYNC;\n        event_unexpected_lane_state_error_nx = 1'b1;\n      end\n  endcase\nend\n\n// Wait n consecutive valid cycles before jumping into next state\nalways @(posedge clk) begin\n  if (reset || rst_good_cnt) begin\n    good_cnt <= 'h0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[96, "always @(*) begin\n"], [97, "  next_state = state;\n"], [98, "  rst_good_cnt = 1'b1;\n"], [99, "  event_unexpected_lane_state_error_nx = 1'b0;\n"], [100, "  case (state)\n"], [101, "    STATE_RESET:\n"], [102, "      next_state = STATE_WAIT_BS;\n"], [103, "    STATE_WAIT_BS:\n"], [104, "      if (all_block_sync) begin\n"], [105, "        rst_good_cnt = 1'b0;\n"], [106, "        if (&good_cnt) begin\n"], [107, "          next_state = STATE_BLOCK_SYNC;\n"], [108, "        end\n"], [109, "      end\n"], [110, "    STATE_BLOCK_SYNC:\n"], [111, "      if (~all_block_sync) begin\n"], [113, "      end else if (all_emb_lock & ~buffer_release_d_n) begin\n"], [114, "        rst_good_cnt = 1'b0;\n"], [115, "        if (&good_cnt) begin\n"], [116, "          next_state = STATE_DATA;\n"], [118, "      end\n"], [119, "    STATE_DATA:\n"], [120, "      if (~all_block_sync) begin\n"], [121, "        next_state = STATE_WAIT_BS;\n"], [122, "        event_unexpected_lane_state_error_nx = 1'b1;\n"], [123, "      end else if (~all_emb_lock | buffer_release_d_n) begin\n"], [124, "        next_state = STATE_BLOCK_SYNC;\n"], [125, "        event_unexpected_lane_state_error_nx = 1'b1;\n"], [126, "      end\n"], [127, "  endcase\n"], [128, "end\n"]], "Add": [[111, "  assign phy_block_sync_masked = phy_block_sync | cfg_lanes_disable;\n"], [111, "  assign emb_lock_masked = emb_lock_d | cfg_lanes_disable;\n"], [111, "  assign all_block_sync = &phy_block_sync_masked;\n"], [111, "  assign all_emb_lock = &emb_lock_masked;\n"], [111, "  always @(*) begin\n"], [111, "    next_state = state;\n"], [111, "    rst_good_cnt = 1'b1;\n"], [111, "    event_unexpected_lane_state_error_nx = 1'b0;\n"], [111, "    case (state)\n"], [111, "      STATE_RESET:\n"], [116, "      STATE_WAIT_BS:\n"], [116, "        if (all_block_sync) begin\n"], [116, "          rst_good_cnt = 1'b0;\n"], [116, "          if (&good_cnt) begin\n"], [116, "            next_state = STATE_BLOCK_SYNC;\n"], [116, "          end\n"]]}}