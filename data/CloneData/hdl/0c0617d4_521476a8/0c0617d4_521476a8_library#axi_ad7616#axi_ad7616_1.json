{"Source Block": ["hdl/library/axi_ad7616/axi_ad7616.v@151:379@HdlStmIf", "      up_rack <= up_rack_if_s | up_rack_cntrl_s;\n      up_rdata <= up_rdata_if_s | up_rdata_cntrl_s;\n    end\n  end\n\n  generate if (IF_TYPE == SERIAL) begin\n\n    // ground all parallel interface signals\n\n    assign rx_db_o = 16'b0;\n    assign rx_rd_n = 1'b0;\n    assign rx_wr_n = 1'b0;\n\n    // SPI Framework instances and logic\n\n    wire                                    spi_resetn_s;\n    wire                                    s0_cmd_ready_s;\n    wire                                    s0_cmd_valid_s;\n    wire  [15:0]                            s0_cmd_data_s;\n    wire                                    s0_sdo_data_ready_s;\n    wire                                    s0_sdo_data_valid_s;\n    wire  [ 7:0]                            s0_sdo_data_s;\n    wire                                    s0_sdi_data_ready_s;\n    wire                                    s0_sdi_data_valid_s;\n    wire  [15:0]                            s0_sdi_data_s;\n    wire                                    s0_sync_ready_s;\n    wire                                    s0_sync_valid_s;\n    wire  [ 7:0]                            s0_sync_s;\n    wire                                    s1_cmd_ready_s;\n    wire                                    s1_cmd_valid_s;\n    wire  [15:0]                            s1_cmd_data_s;\n    wire                                    s1_sdo_data_ready_s;\n    wire                                    s1_sdo_data_valid_s;\n    wire  [ 7:0]                            s1_sdo_data_s;\n    wire                                    s1_sdi_data_ready_s;\n    wire                                    s1_sdi_data_valid_s;\n    wire  [15:0]                            s1_sdi_data_s;\n    wire                                    s1_sync_ready_s;\n    wire                                    s1_sync_valid_s;\n    wire  [ 7:0]                            s1_sync_s;\n    wire                                    m_cmd_ready_s;\n    wire                                    m_cmd_valid_s;\n    wire  [15:0]                            m_cmd_data_s;\n    wire                                    m_sdo_data_ready_s;\n    wire                                    m_sdo_data_valid_s;\n    wire  [7:0]                             m_sdo_data_s;\n    wire                                    m_sdi_data_ready_s;\n    wire                                    m_sdi_data_valid_s;\n    wire  [15:0]                            m_sdi_data_s;\n    wire                                    m_sync_ready_s;\n    wire                                    m_sync_valid_s;\n    wire  [ 7:0]                            m_sync_s;\n    wire                                    offload0_cmd_wr_en_s;\n    wire  [15:0]                            offload0_cmd_wr_data_s;\n    wire                                    offload0_sdo_wr_en_s;\n    wire  [ 7:0]                            offload0_sdo_wr_data_s;\n    wire                                    offload0_mem_reset_s;\n    wire                                    offload0_enable_s;\n    wire                                    offload0_enabled_s;\n    wire                                    offload_sync_ready_s;\n    wire                                    offload_sync_valid_s;\n    wire  [ 7:0]                            offload_sync_data_s;\n\n    axi_spi_engine #(\n      .DATA_WIDTH (8),\n      .NUM_OF_SDI (NUM_OF_SDI),\n      .NUM_OFFLOAD(1),\n      .MM_IF_TYPE(1)\n    ) i_axi_spi_engine (\n      .up_clk (up_clk),\n      .up_rstn (up_rstn),\n      .up_wreq (up_wreq_s),\n      .up_waddr (up_waddr_s),\n      .up_wdata (up_wdata_s),\n      .up_wack (up_wack_if_s),\n      .up_rreq (up_rreq_s),\n      .up_raddr (up_raddr_s),\n      .up_rdata (up_rdata_if_s),\n      .up_rack (up_rack_if_s),\n      .irq (irq),\n      .spi_clk (up_clk),\n      .spi_resetn (spi_resetn_s),\n      .cmd_ready (s0_cmd_ready_s),\n      .cmd_valid (s0_cmd_valid_s),\n      .cmd_data (s0_cmd_data_s),\n      .sdo_data_ready (s0_sdo_data_ready_s),\n      .sdo_data_valid (s0_sdo_data_valid_s),\n      .sdo_data (s0_sdo_data_s),\n      .sdi_data_ready (s0_sdi_data_ready_s),\n      .sdi_data_valid (s0_sdi_data_valid_s),\n      .sdi_data (s0_sdi_data_s),\n      .sync_ready (s0_sync_ready_s),\n      .sync_valid (s0_sync_valid_s),\n      .sync_data (s0_sync_s),\n      .offload_sync_ready (offload_sync_ready_s),\n      .offload_sync_valid (offload_sync_valid_s),\n      .offload_sync_data (offload_sync_data_s),\n      .offload0_cmd_wr_en (offload0_cmd_wr_en_s),\n      .offload0_cmd_wr_data (offload0_cmd_wr_data_s),\n      .offload0_sdo_wr_en (offload0_sdo_wr_en_s),\n      .offload0_sdo_wr_data (offload0_sdo_wr_data_s),\n      .offload0_mem_reset (offload0_mem_reset_s),\n      .offload0_enable (offload0_enable_s),\n      .offload0_enabled(offload0_enabled_s));\n\n    spi_engine_offload #(\n      .DATA_WIDTH (8),\n      .NUM_OF_SDI (NUM_OF_SDI)\n    ) i_spi_engine_offload (\n      .ctrl_clk (up_clk),\n      .ctrl_cmd_wr_en (offload0_cmd_wr_en_s),\n      .ctrl_cmd_wr_data (offload0_cmd_wr_data_s),\n      .ctrl_sdo_wr_en (offload0_sdo_wr_en_s),\n      .ctrl_sdo_wr_data (offload0_sdo_wr_data_s),\n      .ctrl_enable (offload0_enable_s),\n      .ctrl_enabled (offload0_enabled_s),\n      .ctrl_mem_reset (offload0_mem_reset_s),\n      .spi_clk (up_clk),\n      .spi_resetn (spi_resetn_s),\n      .trigger (trigger_s),\n      .cmd_valid (s1_cmd_valid_s),\n      .cmd_ready (s1_cmd_ready_s),\n      .cmd (s1_cmd_data_s),\n      .sdo_data_valid (s1_sdo_data_valid_s),\n      .sdo_data_ready (s1_sdo_data_ready_s),\n      .sdo_data (s1_sdo_data_s),\n      .sdi_data_valid (s1_sdi_data_valid_s),\n      .sdi_data_ready (s1_sdi_data_ready_s),\n      .sdi_data (s1_sdi_data_s),\n      .sync_valid (s1_sync_valid_s),\n      .sync_ready (s1_sync_ready_s),\n      .sync_data (s1_sync_s),\n      .status_sync_ready (offload_sync_ready_s),\n      .status_sync_valid (offload_sync_valid_s),\n      .status_sync_data (offload_sync_data_s),\n      .offload_sdi_valid (m_axis_valid_s),\n      .offload_sdi_ready (m_axis_ready_s),\n      .offload_sdi_data (m_axis_data_s));\n\n    spi_engine_interconnect #(\n      .DATA_WIDTH (8),\n      .NUM_OF_SDI (NUM_OF_SDI)\n    ) i_spi_engine_interconnect (\n      .clk (up_clk),\n      .resetn (spi_resetn_s),\n      .m_cmd_valid (m_cmd_valid_s),\n      .m_cmd_ready (m_cmd_ready_s),\n      .m_cmd_data (m_cmd_data_s),\n      .m_sdo_valid (m_sdo_data_valid_s),\n      .m_sdo_ready (m_sdo_data_ready_s),\n      .m_sdo_data (m_sdo_data_s),\n      .m_sdi_valid (m_sdi_data_valid_s),\n      .m_sdi_ready (m_sdi_data_ready_s),\n      .m_sdi_data (m_sdi_data_s),\n      .m_sync_valid (m_sync_valid_s),\n      .m_sync_ready (m_sync_ready_s),\n      .m_sync (m_sync_s),\n      .s0_cmd_valid (s0_cmd_valid_s),\n      .s0_cmd_ready (s0_cmd_ready_s),\n      .s0_cmd_data (s0_cmd_data_s),\n      .s0_sdo_valid (s0_sdo_data_valid_s),\n      .s0_sdo_ready (s0_sdo_data_ready_s),\n      .s0_sdo_data (s0_sdo_data_s),\n      .s0_sdi_valid (s0_sdi_data_valid_s),\n      .s0_sdi_ready (s0_sdi_data_ready_s),\n      .s0_sdi_data (s0_sdi_data_s),\n      .s0_sync_valid (s0_sync_valid_s),\n      .s0_sync_ready (s0_sync_ready_s),\n      .s0_sync (s0_sync_s),\n      .s1_cmd_valid (s1_cmd_valid_s),\n      .s1_cmd_ready (s1_cmd_ready_s),\n      .s1_cmd_data (s1_cmd_data_s),\n      .s1_sdo_valid (s1_sdo_data_valid_s),\n      .s1_sdo_ready (s1_sdo_data_ready_s),\n      .s1_sdo_data (s1_sdo_data_s),\n      .s1_sdi_valid (s1_sdi_data_valid_s),\n      .s1_sdi_ready (s1_sdi_data_ready_s),\n      .s1_sdi_data (s1_sdi_data_s),\n      .s1_sync_valid (s1_sync_valid_s),\n      .s1_sync_ready (s1_sync_ready_s),\n      .s1_sync (s1_sync_s));\n\n    spi_engine_execution #(\n      .DATA_WIDTH (8),\n      .NUM_OF_SDI (NUM_OF_SDI)\n    ) i_spi_engine_execution (\n      .clk (up_clk),\n      .resetn (spi_resetn_s),\n      .active (),\n      .cmd_ready (m_cmd_ready_s),\n      .cmd_valid (m_cmd_valid_s),\n      .cmd (m_cmd_data_s),\n      .sdo_data_valid (m_sdo_data_valid_s),\n      .sdo_data_ready (m_sdo_data_ready_s),\n      .sdo_data (m_sdo_data_s),\n      .sdi_data_ready (m_sdi_data_ready_s),\n      .sdi_data_valid (m_sdi_data_valid_s),\n      .sdi_data (m_sdi_data_s),\n      .sync_ready (m_sync_ready_s),\n      .sync_valid (m_sync_valid_s),\n      .sync (m_sync_s),\n      .sclk (rx_sclk),\n      .sdo (rx_sdo),\n      .sdo_t (),\n      .sdi (rx_sdi),\n      .cs (rx_cs_n),\n      .three_wire ());\n\n    axi_ad7616_maxis2wrfifo #(\n      .DATA_WIDTH(16)\n    ) i_maxis2wrfifo (\n      .clk(up_clk),\n      .rstn(up_rstn),\n      .sync_in(trigger_s),\n      .m_axis_data(m_axis_data_s),\n      .m_axis_ready(m_axis_ready_s),\n      .m_axis_valid(m_axis_valid_s),\n      .fifo_wr_en(adc_valid),\n      .fifo_wr_data(adc_data),\n      .fifo_wr_sync(adc_sync),\n      .fifo_wr_xfer_req(1'b1)\n    );\n\n  end\n  endgenerate\n\n  generate if (IF_TYPE == PARALLEL) begin\n\n    assign rx_sclk = 1'h0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[371, "      .fifo_wr_xfer_req(1'b1)\n"], [372, "    );\n"]], "Add": [[372, "      .fifo_wr_xfer_req(1'b1));\n"]]}}