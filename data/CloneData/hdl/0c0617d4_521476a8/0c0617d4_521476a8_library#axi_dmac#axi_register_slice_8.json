{"Source Block": ["hdl/library/axi_dmac/axi_register_slice.v@99:138@HdlStmIf", "assign fwd_valid_s = bwd_valid_s;\nassign fwd_ready_s = m_axi_ready;\nend\nendgenerate\n\ngenerate if (BACKWARD_REGISTERED == 1) begin\n\nreg bwd_ready = 1'b1;\nreg [DATA_WIDTH-1:0] bwd_data = 'h00;\n\nassign bwd_valid_s = ~bwd_ready | s_axi_valid;\nassign bwd_data_s = bwd_ready ? s_axi_data : bwd_data;\nassign bwd_ready_s = bwd_ready;\n\nalways @(posedge clk) begin\n  if (bwd_ready)\n    bwd_data <= s_axi_data;\nend\n\nalways @(posedge clk) begin\n  if (resetn == 1'b0) begin\n    bwd_ready <= 1'b1;\n  end else begin\n    if (fwd_ready_s)\n      bwd_ready <= 1'b1;\n    else if (s_axi_valid)\n      bwd_ready <= 1'b0;\n  end\nend\n\nend else begin\nassign bwd_valid_s = s_axi_valid;\nassign bwd_data_s = s_axi_data;\nassign bwd_ready_s = fwd_ready_s;\nend endgenerate\n\nassign m_axi_data = fwd_data_s;\nassign m_axi_valid = fwd_valid_s;\nassign s_axi_ready = bwd_ready_s;\n\n"], "Clone Blocks": [["hdl/library/axi_dmac/axi_register_slice.v@67:106", "wire bwd_ready_s;\nwire [DATA_WIDTH-1:0] fwd_data_s;\nwire fwd_valid_s;\nwire fwd_ready_s;\n\ngenerate if (FORWARD_REGISTERED == 1) begin\n\nreg fwd_valid = 1'b0;\nreg [DATA_WIDTH-1:0] fwd_data = 'h00;\n\nassign fwd_ready_s = ~fwd_valid | m_axi_ready;\nassign fwd_valid_s = fwd_valid;\nassign fwd_data_s = fwd_data;\n\nalways @(posedge clk) begin\n  if (~fwd_valid | m_axi_ready)\n    fwd_data <= bwd_data_s;\nend\n\nalways @(posedge clk) begin\n  if (resetn == 1'b0) begin\n    fwd_valid <= 1'b0;\n  end else begin\n    if (bwd_valid_s)\n      fwd_valid <= 1'b1;\n    else if (m_axi_ready)\n      fwd_valid <= 1'b0;\n  end\nend\n\nend else begin\nassign fwd_data_s = bwd_data_s;\nassign fwd_valid_s = bwd_valid_s;\nassign fwd_ready_s = m_axi_ready;\nend\nendgenerate\n\ngenerate if (BACKWARD_REGISTERED == 1) begin\n\nreg bwd_ready = 1'b1;\n"]], "Diff Content": {"Delete": [[104, "generate if (BACKWARD_REGISTERED == 1) begin\n"], [106, "reg bwd_ready = 1'b1;\n"], [107, "reg [DATA_WIDTH-1:0] bwd_data = 'h00;\n"], [109, "assign bwd_valid_s = ~bwd_ready | s_axi_valid;\n"], [110, "assign bwd_data_s = bwd_ready ? s_axi_data : bwd_data;\n"], [111, "assign bwd_ready_s = bwd_ready;\n"], [113, "always @(posedge clk) begin\n"], [114, "  if (bwd_ready)\n"], [115, "    bwd_data <= s_axi_data;\n"], [116, "end\n"], [118, "always @(posedge clk) begin\n"], [119, "  if (resetn == 1'b0) begin\n"], [120, "    bwd_ready <= 1'b1;\n"], [122, "    if (fwd_ready_s)\n"], [123, "      bwd_ready <= 1'b1;\n"], [124, "    else if (s_axi_valid)\n"], [125, "      bwd_ready <= 1'b0;\n"], [126, "  end\n"], [127, "end\n"], [129, "end else begin\n"], [130, "assign bwd_valid_s = s_axi_valid;\n"], [131, "assign bwd_data_s = s_axi_data;\n"], [132, "assign bwd_ready_s = fwd_ready_s;\n"], [133, "end endgenerate\n"]], "Add": [[120, "  endgenerate\n"], [120, "  generate if (BACKWARD_REGISTERED == 1) begin\n"], [120, "    reg bwd_ready = 1'b1;\n"], [120, "    reg [DATA_WIDTH-1:0] bwd_data = 'h00;\n"], [120, "    assign bwd_valid_s = ~bwd_ready | s_axi_valid;\n"], [120, "    assign bwd_data_s = bwd_ready ? s_axi_data : bwd_data;\n"], [120, "    assign bwd_ready_s = bwd_ready;\n"], [120, "    always @(posedge clk) begin\n"], [120, "      if (bwd_ready)\n"], [120, "        bwd_data <= s_axi_data;\n"], [120, "    end\n"], [120, "    always @(posedge clk) begin\n"], [120, "      if (resetn == 1'b0) begin\n"], [120, "        bwd_ready <= 1'b1;\n"], [120, "      end else begin\n"], [120, "        if (fwd_ready_s)\n"], [120, "          bwd_ready <= 1'b1;\n"], [120, "        else if (s_axi_valid)\n"], [120, "          bwd_ready <= 1'b0;\n"], [120, "      end\n"], [120, "    end\n"]]}}