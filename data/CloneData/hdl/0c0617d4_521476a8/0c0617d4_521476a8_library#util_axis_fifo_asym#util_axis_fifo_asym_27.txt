Source Block: hdl/library/util_axis_fifo_asym/util_axis_fifo_asym.v@141:201@HdlStmIf
endgenerate

// write or slave logic
generate

  if (RATIO_TYPE) begin : big_slave


    for (i=0; i<RATIO; i=i+1) begin
      assign s_axis_valid_int_s[i] = s_axis_valid & s_axis_ready;
      assign s_axis_tlast_int_s[i] = s_axis_tlast;
    end

    assign s_axis_tkeep_int_s = s_axis_tkeep;
    assign s_axis_data_int_s = s_axis_data;
    // if every instance is ready, the interface is ready
    assign s_axis_ready = &(s_axis_ready_int_s);
    // if one of the atomic instance is full, s_axis_full is asserted
    assign s_axis_full = |s_axis_full_int_s;
    assign s_axis_almost_full = |s_axis_almost_full_int_s;
    // the FIFO has the same room as the atomic FIFO
    assign s_axis_room = s_axis_room_int_s[A_ADDRESS-1:0];

  end else begin : small_slave

    reg [RATIO-1:0] s_axis_valid_int_d = {RATIO{1'b0}};

    for (i=0; i<RATIO; i=i+1) begin
      assign s_axis_data_int_s[A_WIDTH*i+:A_WIDTH] = s_axis_data;
      assign s_axis_tkeep_int_s[A_WIDTH/8*i+:A_WIDTH/8] = (s_axis_counter == i) ? s_axis_tkeep : {A_WIDTH/8{1'b0}};
      assign s_axis_tlast_int_s[i] = (s_axis_counter == i) ? s_axis_tlast : 1'b0;
    end

    // insert invalid writes (TKEEP==0) in case if the TLAST arrives before the RATIO
    // boundary
    always @(*) begin
      case ({s_axis_valid, s_axis_tlast})
        2'b00 : s_axis_valid_int_d = {RATIO{1'b0}};
        2'b01 : s_axis_valid_int_d = {RATIO{1'b0}};
        2'b10 : s_axis_valid_int_d = {{RATIO-1{1'b0}}, 1'b1} << s_axis_counter;
        2'b11 : s_axis_valid_int_d = {RATIO{1'b1}} << s_axis_counter;
      endcase
    end
    assign s_axis_valid_int_s = s_axis_valid_int_d;

    // READY/FULL/ALMOST_FULL is driven by the current atomic instance
    assign s_axis_ready = s_axis_ready_int_s >> s_axis_counter;
    assign s_axis_almost_full = s_axis_almost_full_int_s >> s_axis_counter;

    // the FIFO has the same room as the last atomic instance
    // (NOTE: this is not the real room value, rather the value will be updated
    // after every RATIO number of writes)
    assign s_axis_full = s_axis_full_int_s[RATIO-1];
    assign s_axis_room = {s_axis_room_int_s[A_ADDRESS*(RATIO-1)+:A_ADDRESS], {$clog2(RATIO){1'b1}}};

  end

endgenerate

// read or slave logic
generate

Diff Content:
- 146   if (RATIO_TYPE) begin : big_slave
- 150       assign s_axis_valid_int_s[i] = s_axis_valid & s_axis_ready;
- 151       assign s_axis_tlast_int_s[i] = s_axis_tlast;
- 154     assign s_axis_tkeep_int_s = s_axis_tkeep;
- 155     assign s_axis_data_int_s = s_axis_data;
- 157     assign s_axis_ready = &(s_axis_ready_int_s);
- 159     assign s_axis_full = |s_axis_full_int_s;
- 160     assign s_axis_almost_full = |s_axis_almost_full_int_s;
- 162     assign s_axis_room = s_axis_room_int_s[A_ADDRESS-1:0];
- 164   end else begin : small_slave
- 166     reg [RATIO-1:0] s_axis_valid_int_d = {RATIO{1'b0}};
- 168     for (i=0; i<RATIO; i=i+1) begin
- 169       assign s_axis_data_int_s[A_WIDTH*i+:A_WIDTH] = s_axis_data;
- 170       assign s_axis_tkeep_int_s[A_WIDTH/8*i+:A_WIDTH/8] = (s_axis_counter == i) ? s_axis_tkeep : {A_WIDTH/8{1'b0}};
- 171       assign s_axis_tlast_int_s[i] = (s_axis_counter == i) ? s_axis_tlast : 1'b0;
- 172     end
- 176     always @(*) begin
- 177       case ({s_axis_valid, s_axis_tlast})
- 178         2'b00 : s_axis_valid_int_d = {RATIO{1'b0}};
- 179         2'b01 : s_axis_valid_int_d = {RATIO{1'b0}};
- 180         2'b10 : s_axis_valid_int_d = {{RATIO-1{1'b0}}, 1'b1} << s_axis_counter;
- 181         2'b11 : s_axis_valid_int_d = {RATIO{1'b1}} << s_axis_counter;
- 182       endcase
- 183     end
- 184     assign s_axis_valid_int_s = s_axis_valid_int_d;
- 187     assign s_axis_ready = s_axis_ready_int_s >> s_axis_counter;
- 188     assign s_axis_almost_full = s_axis_almost_full_int_s >> s_axis_counter;
- 193     assign s_axis_full = s_axis_full_int_s[RATIO-1];
- 194     assign s_axis_room = {s_axis_room_int_s[A_ADDRESS*(RATIO-1)+:A_ADDRESS], {$clog2(RATIO){1'b1}}};
- 196   end
+ 146   localparam RATIO_TYPE = (S_DATA_WIDTH >= M_DATA_WIDTH) ? 1 : 0;
+ 146   localparam RATIO = (RATIO_TYPE) ? S_DATA_WIDTH/M_DATA_WIDTH : M_DATA_WIDTH/S_DATA_WIDTH;
+ 146   localparam A_WIDTH = (RATIO_TYPE) ? M_DATA_WIDTH : S_DATA_WIDTH;
+ 146   localparam A_ADDRESS = (RATIO_TYPE) ? S_ADDRESS_WIDTH : (S_ADDRESS_WIDTH-$clog2(RATIO));
+ 146   localparam A_ALMOST_FULL_THRESHOLD = (RATIO_TYPE) ? ALMOST_FULL_THRESHOLD : (ALMOST_FULL_THRESHOLD/RATIO);
+ 146   localparam A_ALMOST_EMPTY_THRESHOLD = (RATIO_TYPE) ? (ALMOST_EMPTY_THRESHOLD/RATIO) : ALMOST_EMPTY_THRESHOLD;
+ 146   reg [$clog2(RATIO)-1:0] s_axis_counter;
+ 146   reg [$clog2(RATIO)-1:0] m_axis_counter;
+ 146   wire [RATIO-1:0] m_axis_ready_int_s;
+ 146   wire [RATIO-1:0] m_axis_valid_int_s;
+ 146   wire [RATIO*A_WIDTH-1:0] m_axis_data_int_s;
+ 146   wire [RATIO*A_WIDTH/8-1:0] m_axis_tkeep_int_s;
+ 146   wire [RATIO-1:0] m_axis_tlast_int_s;
+ 146   wire [RATIO-1:0] m_axis_empty_int_s;
+ 146   wire [RATIO-1:0] m_axis_almost_empty_int_s;
+ 146   wire [RATIO*A_ADDRESS-1:0] m_axis_level_int_s;
+ 146   wire [RATIO-1:0] s_axis_ready_int_s;
+ 146   wire [RATIO-1:0] s_axis_valid_int_s;
+ 146   wire [RATIO*A_WIDTH-1:0] s_axis_data_int_s;
+ 146   wire [RATIO*A_WIDTH/8-1:0] s_axis_tkeep_int_s;
+ 146   wire [RATIO-1:0] s_axis_tlast_int_s;
+ 146   wire [RATIO-1:0] s_axis_full_int_s;
+ 146   wire [RATIO-1:0] s_axis_almost_full_int_s;
+ 146   wire [RATIO*A_ADDRESS-1:0] s_axis_room_int_s;
+ 146   genvar i;
+ 146   generate
+ 151       util_axis_fifo #(
+ 151         .DATA_WIDTH (A_WIDTH),
+ 151         .ADDRESS_WIDTH (A_ADDRESS),
+ 151         .ASYNC_CLK (ASYNC_CLK),
+ 151         .M_AXIS_REGISTERED (M_AXIS_REGISTERED),
+ 151         .ALMOST_EMPTY_THRESHOLD (A_ALMOST_EMPTY_THRESHOLD),
+ 151         .ALMOST_FULL_THRESHOLD (A_ALMOST_FULL_THRESHOLD),
+ 151         .TKEEP_EN (TKEEP_EN),
+ 151         .TLAST_EN (TLAST_EN)
+ 151       ) i_fifo (
+ 151         .m_axis_aclk    (m_axis_aclk),
+ 151         .m_axis_aresetn (m_axis_aresetn),
+ 151         .m_axis_ready   (m_axis_ready_int_s[i]),
+ 151         .m_axis_valid   (m_axis_valid_int_s[i]),
+ 151         .m_axis_data    (m_axis_data_int_s[A_WIDTH*i+:A_WIDTH]),
+ 151         .m_axis_tlast   (m_axis_tlast_int_s[i]),
+ 151         .m_axis_tkeep   (m_axis_tkeep_int_s[A_WIDTH/8*i+:A_WIDTH/8]),
+ 151         .m_axis_level   (m_axis_level_int_s[A_ADDRESS*i+:A_ADDRESS]),
+ 151         .m_axis_empty   (m_axis_empty_int_s[i]),
+ 151         .m_axis_almost_empty (m_axis_almost_empty_int_s[i]),
+ 151         .s_axis_aclk    (s_axis_aclk),
+ 151         .s_axis_aresetn (s_axis_aresetn),
+ 151         .s_axis_ready   (s_axis_ready_int_s[i]),
+ 151         .s_axis_valid   (s_axis_valid_int_s[i]),
+ 151         .s_axis_data    (s_axis_data_int_s[A_WIDTH*i+:A_WIDTH]),
+ 151         .s_axis_tkeep   (s_axis_tkeep_int_s[A_WIDTH/8*i+:A_WIDTH/8]),
+ 151         .s_axis_tlast   (s_axis_tlast_int_s[i]),
+ 151         .s_axis_room    (s_axis_room_int_s[A_ADDRESS*i+:A_ADDRESS]),
+ 151         .s_axis_full    (s_axis_full_int_s[i]),
+ 151         .s_axis_almost_full (s_axis_almost_full_int_s[i]));
+ 152   endgenerate
+ 162   generate
+ 164     if (RATIO_TYPE) begin : big_slave
+ 166       for (i=0; i<RATIO; i=i+1) begin
+ 166         assign s_axis_valid_int_s[i] = s_axis_valid & s_axis_ready;
+ 166         assign s_axis_tlast_int_s[i] = s_axis_tlast;
+ 166       end
+ 172       assign s_axis_tkeep_int_s = s_axis_tkeep;
+ 172       assign s_axis_data_int_s = s_axis_data;
+ 172       assign s_axis_ready = &(s_axis_ready_int_s);
+ 172       assign s_axis_full = |s_axis_full_int_s;
+ 172       assign s_axis_almost_full = |s_axis_almost_full_int_s;
+ 172       assign s_axis_room = s_axis_room_int_s[A_ADDRESS-1:0];
+ 184     end else begin : small_slave
+ 188       reg [RATIO-1:0] s_axis_valid_int_d = {RATIO{1'b0}};
+ 194       for (i=0; i<RATIO; i=i+1) begin
+ 194         assign s_axis_data_int_s[A_WIDTH*i+:A_WIDTH] = s_axis_data;
+ 194         assign s_axis_tkeep_int_s[A_WIDTH/8*i+:A_WIDTH/8] = (s_axis_counter == i) ? s_axis_tkeep : {A_WIDTH/8{1'b0}};
+ 194         assign s_axis_tlast_int_s[i] = (s_axis_counter == i) ? s_axis_tlast : 1'b0;
+ 194       end
+ 196       always @(*) begin
+ 196         case ({s_axis_valid, s_axis_tlast})
+ 196           2'b00 : s_axis_valid_int_d = {RATIO{1'b0}};
+ 196           2'b01 : s_axis_valid_int_d = {RATIO{1'b0}};
+ 196           2'b10 : s_axis_valid_int_d = {{RATIO-1{1'b0}}, 1'b1} << s_axis_counter;
+ 196           2'b11 : s_axis_valid_int_d = {RATIO{1'b1}} << s_axis_counter;
+ 196         endcase
+ 196       end
+ 196       assign s_axis_valid_int_s = s_axis_valid_int_d;

Clone Blocks:
