{"Source Block": ["hdl/library/axi_dmac/request_arb.v@693:804@HdlStmIf", "assign m_axi_arprot = 'h00;\nassign m_axi_rready = 1'b0;\n\nend\n\nif (DMA_TYPE_SRC == DMA_TYPE_STREAM_AXI) begin\n\nassign src_clk = s_axis_aclk;\nassign src_ext_resetn = 1'b1;\n\nwire src_eot = eot_mem_src[src_response_id];\n\nassign dbg_src_address_id = 'h00;\nassign dbg_src_data_id = 'h00;\n\n/* TODO\nassign src_response_valid = 1'b0;\nassign src_response_resp = 2'b0;\n*/\n\n\nsrc_axi_stream #(\n  .ID_WIDTH(ID_WIDTH),\n  .S_AXIS_DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC)\n) i_src_dma_stream (\n  .s_axis_aclk(s_axis_aclk),\n  .s_axis_aresetn(src_resetn),\n\n  .enable(src_enable),\n  .enabled(src_enabled),\n\n  .req_valid(src_req_valid),\n  .req_ready(src_req_ready),\n  .req_last_burst_length(src_req_last_burst_length),\n  .req_sync_transfer_start(src_req_sync_transfer_start),\n  .req_xlast(src_req_xlast),\n\n  .request_id(src_throttled_request_id),\n  .response_id(src_response_id),\n\n  .eot(src_eot),\n\n  .rewind_req_valid(rewind_req_valid),\n  .rewind_req_ready(rewind_req_ready),\n  .rewind_req_data(rewind_req_data),\n\n  .bl_valid(src_bl_valid),\n  .bl_ready(src_bl_ready),\n  .measured_last_burst_length(src_burst_length),\n\n  .block_descr_to_dst(block_descr_to_dst),\n\n  .source_id(source_id),\n  .source_eot(source_eot),\n\n  .fifo_valid(src_valid),\n  .fifo_data(src_data),\n  .fifo_last(src_last),\n  .fifo_partial_burst(src_partial_burst),\n\n  .s_axis_valid(s_axis_valid),\n  .s_axis_ready(s_axis_ready),\n  .s_axis_data(s_axis_data),\n  .s_axis_last(s_axis_last),\n  .s_axis_user(s_axis_user),\n  .s_axis_xfer_req(s_axis_xfer_req)\n);\n\nassign src_valid_bytes = {BYTES_PER_BEAT_WIDTH_SRC{1'b1}};\n\nutil_axis_fifo #(\n  .DATA_WIDTH(ID_WIDTH + 3),\n  .ADDRESS_WIDTH(0),\n  .ASYNC_CLK(ASYNC_CLK_REQ_SRC)\n) i_rewind_req_fifo (\n  .s_axis_aclk(src_clk),\n  .s_axis_aresetn(src_resetn),\n  .s_axis_valid(rewind_req_valid),\n  .s_axis_ready(rewind_req_ready),\n  .s_axis_full(),\n  .s_axis_data(rewind_req_data),\n  .s_axis_room(),\n\n  .m_axis_aclk(req_clk),\n  .m_axis_aresetn(req_resetn),\n  .m_axis_valid(req_rewind_req_valid),\n  .m_axis_ready(req_rewind_req_ready),\n  .m_axis_data(req_rewind_req_data),\n  .m_axis_level(),\n  .m_axis_empty()\n);\n\nend else begin\n\nassign s_axis_ready = 1'b0;\nassign s_axis_xfer_req = 1'b0;\nassign rewind_req_valid = 1'b0;\nassign rewind_req_data = 'h0;\n\nassign req_rewind_req_valid = 'b0;\nassign req_rewind_req_data = 'h0;\n\nassign src_partial_burst = 1'b0;\nassign block_descr_to_dst = 1'b0;\n\nend\n\nif (DMA_TYPE_SRC == DMA_TYPE_FIFO) begin\n\nwire src_eot = eot_mem_src[src_response_id];\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[698, "if (DMA_TYPE_SRC == DMA_TYPE_STREAM_AXI) begin\n"], [700, "assign src_clk = s_axis_aclk;\n"], [701, "assign src_ext_resetn = 1'b1;\n"], [703, "wire src_eot = eot_mem_src[src_response_id];\n"], [705, "assign dbg_src_address_id = 'h00;\n"], [706, "assign dbg_src_data_id = 'h00;\n"], [708, "/* TODO\n"], [709, "assign src_response_valid = 1'b0;\n"], [710, "assign src_response_resp = 2'b0;\n"], [711, "*/\n"], [714, "src_axi_stream #(\n"], [715, "  .ID_WIDTH(ID_WIDTH),\n"], [716, "  .S_AXIS_DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n"], [717, "  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC)\n"], [718, ") i_src_dma_stream (\n"], [719, "  .s_axis_aclk(s_axis_aclk),\n"], [720, "  .s_axis_aresetn(src_resetn),\n"], [722, "  .enable(src_enable),\n"], [723, "  .enabled(src_enabled),\n"], [725, "  .req_valid(src_req_valid),\n"], [726, "  .req_ready(src_req_ready),\n"], [727, "  .req_last_burst_length(src_req_last_burst_length),\n"], [728, "  .req_sync_transfer_start(src_req_sync_transfer_start),\n"], [729, "  .req_xlast(src_req_xlast),\n"], [731, "  .request_id(src_throttled_request_id),\n"], [732, "  .response_id(src_response_id),\n"], [734, "  .eot(src_eot),\n"], [736, "  .rewind_req_valid(rewind_req_valid),\n"], [737, "  .rewind_req_ready(rewind_req_ready),\n"], [738, "  .rewind_req_data(rewind_req_data),\n"], [740, "  .bl_valid(src_bl_valid),\n"], [741, "  .bl_ready(src_bl_ready),\n"], [742, "  .measured_last_burst_length(src_burst_length),\n"], [744, "  .block_descr_to_dst(block_descr_to_dst),\n"], [746, "  .source_id(source_id),\n"], [747, "  .source_eot(source_eot),\n"], [749, "  .fifo_valid(src_valid),\n"], [750, "  .fifo_data(src_data),\n"], [751, "  .fifo_last(src_last),\n"], [752, "  .fifo_partial_burst(src_partial_burst),\n"], [754, "  .s_axis_valid(s_axis_valid),\n"], [755, "  .s_axis_ready(s_axis_ready),\n"], [756, "  .s_axis_data(s_axis_data),\n"], [757, "  .s_axis_last(s_axis_last),\n"], [758, "  .s_axis_user(s_axis_user),\n"], [759, "  .s_axis_xfer_req(s_axis_xfer_req)\n"], [760, ");\n"], [762, "assign src_valid_bytes = {BYTES_PER_BEAT_WIDTH_SRC{1'b1}};\n"], [764, "util_axis_fifo #(\n"], [765, "  .DATA_WIDTH(ID_WIDTH + 3),\n"], [766, "  .ADDRESS_WIDTH(0),\n"], [767, "  .ASYNC_CLK(ASYNC_CLK_REQ_SRC)\n"], [768, ") i_rewind_req_fifo (\n"], [769, "  .s_axis_aclk(src_clk),\n"], [770, "  .s_axis_aresetn(src_resetn),\n"], [771, "  .s_axis_valid(rewind_req_valid),\n"], [772, "  .s_axis_ready(rewind_req_ready),\n"], [773, "  .s_axis_full(),\n"], [774, "  .s_axis_data(rewind_req_data),\n"], [775, "  .s_axis_room(),\n"], [777, "  .m_axis_aclk(req_clk),\n"], [778, "  .m_axis_aresetn(req_resetn),\n"], [779, "  .m_axis_valid(req_rewind_req_valid),\n"], [780, "  .m_axis_ready(req_rewind_req_ready),\n"], [781, "  .m_axis_data(req_rewind_req_data),\n"], [782, "  .m_axis_level(),\n"], [783, "  .m_axis_empty()\n"], [784, ");\n"], [786, "end else begin\n"], [788, "assign s_axis_ready = 1'b0;\n"], [789, "assign s_axis_xfer_req = 1'b0;\n"], [790, "assign rewind_req_valid = 1'b0;\n"], [791, "assign rewind_req_data = 'h0;\n"], [793, "assign req_rewind_req_valid = 'b0;\n"], [794, "assign req_rewind_req_data = 'h0;\n"], [796, "assign src_partial_burst = 1'b0;\n"], [797, "assign block_descr_to_dst = 1'b0;\n"], [799, "end\n"]], "Add": [[698, "  assign src_clk = s_axis_aclk;\n"], [698, "  assign src_ext_resetn = 1'b1;\n"], [701, "  wire src_eot = eot_mem_src[src_response_id];\n"], [703, "  assign dbg_src_address_id = 'h00;\n"], [703, "  assign dbg_src_data_id = 'h00;\n"], [706, "  /* TODO\n"], [706, "  assign src_response_valid = 1'b0;\n"], [706, "  assign src_response_resp = 2'b0;\n"], [706, "  */\n"], [711, "  src_axi_stream #(\n"], [711, "    .ID_WIDTH(ID_WIDTH),\n"], [711, "    .S_AXIS_DATA_WIDTH(DMA_DATA_WIDTH_SRC),\n"], [711, "    .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_SRC)\n"], [711, "  ) i_src_dma_stream (\n"], [711, "    .s_axis_aclk(s_axis_aclk),\n"], [711, "    .s_axis_aresetn(src_resetn),\n"], [711, "    .enable(src_enable),\n"], [711, "    .enabled(src_enabled),\n"], [720, "    .req_valid(src_req_valid),\n"], [720, "    .req_ready(src_req_ready),\n"], [720, "    .req_last_burst_length(src_req_last_burst_length),\n"], [720, "    .req_sync_transfer_start(src_req_sync_transfer_start),\n"], [720, "    .req_xlast(src_req_xlast),\n"], [723, "    .request_id(src_throttled_request_id),\n"], [723, "    .response_id(src_response_id),\n"], [729, "    .eot(src_eot),\n"], [732, "    .rewind_req_valid(rewind_req_valid),\n"], [732, "    .rewind_req_ready(rewind_req_ready),\n"], [732, "    .rewind_req_data(rewind_req_data),\n"], [734, "    .bl_valid(src_bl_valid),\n"], [734, "    .bl_ready(src_bl_ready),\n"], [734, "    .measured_last_burst_length(src_burst_length),\n"], [738, "    .block_descr_to_dst(block_descr_to_dst),\n"], [742, "    .source_id(source_id),\n"], [742, "    .source_eot(source_eot),\n"], [744, "    .fifo_valid(src_valid),\n"], [744, "    .fifo_data(src_data),\n"], [744, "    .fifo_last(src_last),\n"], [744, "    .fifo_partial_burst(src_partial_burst),\n"], [747, "    .s_axis_valid(s_axis_valid),\n"], [747, "    .s_axis_ready(s_axis_ready),\n"], [747, "    .s_axis_data(s_axis_data),\n"], [747, "    .s_axis_last(s_axis_last),\n"], [747, "    .s_axis_user(s_axis_user),\n"], [747, "    .s_axis_xfer_req(s_axis_xfer_req));\n"], [752, "  assign src_valid_bytes = {BYTES_PER_BEAT_WIDTH_SRC{1'b1}};\n"], [760, "  util_axis_fifo #(\n"], [760, "    .DATA_WIDTH(ID_WIDTH + 3),\n"], [760, "    .ADDRESS_WIDTH(0),\n"], [760, "    .ASYNC_CLK(ASYNC_CLK_REQ_SRC)\n"], [760, "  ) i_rewind_req_fifo (\n"], [760, "    .s_axis_aclk(src_clk),\n"], [760, "    .s_axis_aresetn(src_resetn),\n"], [760, "    .s_axis_valid(rewind_req_valid),\n"], [760, "    .s_axis_ready(rewind_req_ready),\n"], [760, "    .s_axis_full(),\n"], [760, "    .s_axis_data(rewind_req_data),\n"], [760, "    .s_axis_room(),\n"], [784, "    .m_axis_aclk(req_clk),\n"], [784, "    .m_axis_aresetn(req_resetn),\n"], [784, "    .m_axis_valid(req_rewind_req_valid),\n"], [784, "    .m_axis_ready(req_rewind_req_ready),\n"], [784, "    .m_axis_data(req_rewind_req_data),\n"], [784, "    .m_axis_level(),\n"], [784, "    .m_axis_empty());\n"], [786, "  end else begin\n"], [791, "  assign s_axis_ready = 1'b0;\n"], [791, "  assign s_axis_xfer_req = 1'b0;\n"], [791, "  assign rewind_req_valid = 1'b0;\n"], [791, "  assign rewind_req_data = 'h0;\n"], [794, "  assign req_rewind_req_valid = 'b0;\n"], [794, "  assign req_rewind_req_data = 'h0;\n"], [797, "  assign src_partial_burst = 1'b0;\n"], [797, "  assign block_descr_to_dst = 1'b0;\n"], [799, "  end\n"]]}}