{"Source Block": ["hdl/library/axi_dmac/request_arb.v@333:491@HdlStmIf", "begin\n  eot_mem_dest[source_id] <= source_eot;\nend\n\n\ngenerate if (DMA_TYPE_DEST == DMA_TYPE_MM_AXI) begin\n\nwire                                  dest_bl_valid;\nwire                                  dest_bl_ready;\nwire [BEATS_PER_BURST_WIDTH_DEST-1:0] dest_burst_length;\nwire [BEATS_PER_BURST_WIDTH_SRC-1:0] dest_src_burst_length;\n\nassign dest_clk = m_dest_axi_aclk;\nassign dest_ext_resetn = m_dest_axi_aresetn;\n\nwire [ID_WIDTH-1:0] dest_address_id;\nwire dest_address_eot = eot_mem_dest[dest_address_id];\nwire dest_response_eot = eot_mem_dest[dest_response_id];\n\nassign dbg_dest_address_id = dest_address_id;\nassign dbg_dest_data_id = dest_data_response_id;\n\nassign dest_data_request_id = dest_address_id;\n\ndest_axi_mm #(\n  .ID_WIDTH(ID_WIDTH),\n  .DMA_DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n  .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST),\n  .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_DEST),\n  .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST),\n  .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST),\n  .CACHE_COHERENT(CACHE_COHERENT_DEST)\n) i_dest_dma_mm (\n  .m_axi_aclk(m_dest_axi_aclk),\n  .m_axi_aresetn(dest_resetn),\n\n  .enable(dest_enable),\n  .enabled(dest_enabled),\n\n  .req_valid(dest_req_valid),\n  .req_ready(dest_req_ready),\n  .req_address(dest_req_dest_address),\n\n  .bl_valid(dest_bl_valid),\n  .bl_ready(dest_bl_ready),\n  .measured_last_burst_length(dest_burst_length),\n\n  .response_valid(dest_response_valid),\n  .response_ready(dest_response_ready),\n  .response_resp(dest_response_resp),\n  .response_resp_eot(dest_response_resp_eot),\n  .response_resp_partial(dest_response_partial),\n  .response_data_burst_length(dest_response_data_burst_length),\n\n  .request_id(dest_request_id),\n  .response_id(dest_response_id),\n\n  .address_id(dest_address_id),\n\n  .address_eot(dest_address_eot),\n  .response_eot(dest_response_eot),\n\n  .fifo_valid(dest_valid),\n  .fifo_ready(dest_ready),\n  .fifo_data(dest_data),\n  .fifo_strb(dest_strb),\n  .fifo_last(dest_last),\n\n  .dest_burst_info_length(dest_burst_info_length),\n  .dest_burst_info_partial(dest_burst_info_partial),\n  .dest_burst_info_id(dest_burst_info_id),\n  .dest_burst_info_write(dest_burst_info_write),\n\n  .m_axi_awready(m_axi_awready),\n  .m_axi_awvalid(m_axi_awvalid),\n  .m_axi_awaddr(m_axi_awaddr),\n  .m_axi_awlen(m_axi_awlen),\n  .m_axi_awsize(m_axi_awsize),\n  .m_axi_awburst(m_axi_awburst),\n  .m_axi_awprot(m_axi_awprot),\n  .m_axi_awcache(m_axi_awcache),\n  .m_axi_wready(m_axi_wready),\n  .m_axi_wvalid(m_axi_wvalid),\n  .m_axi_wdata(m_axi_wdata),\n  .m_axi_wstrb(m_axi_wstrb),\n  .m_axi_wlast(m_axi_wlast),\n\n  .m_axi_bvalid(m_axi_bvalid),\n  .m_axi_bresp(m_axi_bresp),\n  .m_axi_bready(m_axi_bready)\n);\n\nutil_axis_fifo #(\n  .DATA_WIDTH(BEATS_PER_BURST_WIDTH_SRC),\n  .ADDRESS_WIDTH(0),\n  .ASYNC_CLK(ASYNC_CLK_SRC_DEST)\n) i_src_dest_bl_fifo (\n  .s_axis_aclk(src_clk),\n  .s_axis_aresetn(src_resetn),\n  .s_axis_valid(src_bl_valid),\n  .s_axis_ready(src_bl_ready),\n  .s_axis_full(),\n  .s_axis_data(src_burst_length),\n  .s_axis_room(),\n\n  .m_axis_aclk(dest_clk),\n  .m_axis_aresetn(dest_resetn),\n  .m_axis_valid(dest_bl_valid),\n  .m_axis_ready(dest_bl_ready),\n  .m_axis_data(dest_src_burst_length),\n  .m_axis_level(),\n  .m_axis_empty()\n);\n\n// Adapt burst length from source width to destination width by either\n// truncation or completion with ones.\nif (BEATS_PER_BURST_WIDTH_SRC == BEATS_PER_BURST_WIDTH_DEST) begin\nassign dest_burst_length = dest_src_burst_length;\nend\n\nif (BEATS_PER_BURST_WIDTH_SRC < BEATS_PER_BURST_WIDTH_DEST) begin\nassign dest_burst_length = {dest_src_burst_length,\n                           {BEATS_PER_BURST_WIDTH_DEST - BEATS_PER_BURST_WIDTH_SRC{1'b1}}};\nend\n\nif (BEATS_PER_BURST_WIDTH_SRC > BEATS_PER_BURST_WIDTH_DEST) begin\nassign dest_burst_length = dest_src_burst_length[BEATS_PER_BURST_WIDTH_SRC-1 -: BEATS_PER_BURST_WIDTH_DEST];\nend\n\nend else begin\n\nassign m_axi_awvalid = 1'b0;\nassign m_axi_awaddr = 'h00;\nassign m_axi_awlen = 'h00;\nassign m_axi_awsize = 'h00;\nassign m_axi_awburst = 'h00;\nassign m_axi_awprot = 'h00;\nassign m_axi_awcache = 'h00;\n\nassign m_axi_wvalid = 1'b0;\nassign m_axi_wdata = 'h00;\nassign m_axi_wstrb = 'h00;\nassign m_axi_wlast = 1'b0;\n\nassign m_axi_bready = 1'b0;\n\nassign src_bl_ready = 1'b1;\n\nassign dest_response_partial = 1'b0;\nassign dest_response_data_burst_length = 'h0;\n\nend\n\nif (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin\n\nassign dest_clk = m_axis_aclk;\nassign dest_ext_resetn = 1'b1;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[338, "generate if (DMA_TYPE_DEST == DMA_TYPE_MM_AXI) begin\n"], [340, "wire                                  dest_bl_valid;\n"], [341, "wire                                  dest_bl_ready;\n"], [342, "wire [BEATS_PER_BURST_WIDTH_DEST-1:0] dest_burst_length;\n"], [343, "wire [BEATS_PER_BURST_WIDTH_SRC-1:0] dest_src_burst_length;\n"], [345, "assign dest_clk = m_dest_axi_aclk;\n"], [346, "assign dest_ext_resetn = m_dest_axi_aresetn;\n"], [348, "wire [ID_WIDTH-1:0] dest_address_id;\n"], [349, "wire dest_address_eot = eot_mem_dest[dest_address_id];\n"], [350, "wire dest_response_eot = eot_mem_dest[dest_response_id];\n"], [352, "assign dbg_dest_address_id = dest_address_id;\n"], [353, "assign dbg_dest_data_id = dest_data_response_id;\n"], [355, "assign dest_data_request_id = dest_address_id;\n"], [357, "dest_axi_mm #(\n"], [358, "  .ID_WIDTH(ID_WIDTH),\n"], [359, "  .DMA_DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n"], [360, "  .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n"], [361, "  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST),\n"], [362, "  .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_DEST),\n"], [363, "  .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST),\n"], [364, "  .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n"], [365, "  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST),\n"], [366, "  .CACHE_COHERENT(CACHE_COHERENT_DEST)\n"], [367, ") i_dest_dma_mm (\n"], [368, "  .m_axi_aclk(m_dest_axi_aclk),\n"], [369, "  .m_axi_aresetn(dest_resetn),\n"], [371, "  .enable(dest_enable),\n"], [372, "  .enabled(dest_enabled),\n"], [374, "  .req_valid(dest_req_valid),\n"], [375, "  .req_ready(dest_req_ready),\n"], [376, "  .req_address(dest_req_dest_address),\n"], [378, "  .bl_valid(dest_bl_valid),\n"], [379, "  .bl_ready(dest_bl_ready),\n"], [380, "  .measured_last_burst_length(dest_burst_length),\n"], [382, "  .response_valid(dest_response_valid),\n"], [383, "  .response_ready(dest_response_ready),\n"], [384, "  .response_resp(dest_response_resp),\n"], [385, "  .response_resp_eot(dest_response_resp_eot),\n"], [386, "  .response_resp_partial(dest_response_partial),\n"], [387, "  .response_data_burst_length(dest_response_data_burst_length),\n"], [389, "  .request_id(dest_request_id),\n"], [390, "  .response_id(dest_response_id),\n"], [392, "  .address_id(dest_address_id),\n"], [394, "  .address_eot(dest_address_eot),\n"], [395, "  .response_eot(dest_response_eot),\n"], [397, "  .fifo_valid(dest_valid),\n"], [398, "  .fifo_ready(dest_ready),\n"], [399, "  .fifo_data(dest_data),\n"], [400, "  .fifo_strb(dest_strb),\n"], [401, "  .fifo_last(dest_last),\n"], [403, "  .dest_burst_info_length(dest_burst_info_length),\n"], [404, "  .dest_burst_info_partial(dest_burst_info_partial),\n"], [405, "  .dest_burst_info_id(dest_burst_info_id),\n"], [406, "  .dest_burst_info_write(dest_burst_info_write),\n"], [408, "  .m_axi_awready(m_axi_awready),\n"], [409, "  .m_axi_awvalid(m_axi_awvalid),\n"], [410, "  .m_axi_awaddr(m_axi_awaddr),\n"], [411, "  .m_axi_awlen(m_axi_awlen),\n"], [412, "  .m_axi_awsize(m_axi_awsize),\n"], [413, "  .m_axi_awburst(m_axi_awburst),\n"], [414, "  .m_axi_awprot(m_axi_awprot),\n"], [415, "  .m_axi_awcache(m_axi_awcache),\n"], [416, "  .m_axi_wready(m_axi_wready),\n"], [417, "  .m_axi_wvalid(m_axi_wvalid),\n"], [418, "  .m_axi_wdata(m_axi_wdata),\n"], [419, "  .m_axi_wstrb(m_axi_wstrb),\n"], [420, "  .m_axi_wlast(m_axi_wlast),\n"], [422, "  .m_axi_bvalid(m_axi_bvalid),\n"], [423, "  .m_axi_bresp(m_axi_bresp),\n"], [424, "  .m_axi_bready(m_axi_bready)\n"], [425, ");\n"], [427, "util_axis_fifo #(\n"], [428, "  .DATA_WIDTH(BEATS_PER_BURST_WIDTH_SRC),\n"], [429, "  .ADDRESS_WIDTH(0),\n"], [430, "  .ASYNC_CLK(ASYNC_CLK_SRC_DEST)\n"], [431, ") i_src_dest_bl_fifo (\n"], [432, "  .s_axis_aclk(src_clk),\n"], [433, "  .s_axis_aresetn(src_resetn),\n"], [434, "  .s_axis_valid(src_bl_valid),\n"], [435, "  .s_axis_ready(src_bl_ready),\n"], [436, "  .s_axis_full(),\n"], [437, "  .s_axis_data(src_burst_length),\n"], [438, "  .s_axis_room(),\n"], [440, "  .m_axis_aclk(dest_clk),\n"], [441, "  .m_axis_aresetn(dest_resetn),\n"], [442, "  .m_axis_valid(dest_bl_valid),\n"], [443, "  .m_axis_ready(dest_bl_ready),\n"], [444, "  .m_axis_data(dest_src_burst_length),\n"], [445, "  .m_axis_level(),\n"], [446, "  .m_axis_empty()\n"], [447, ");\n"], [451, "if (BEATS_PER_BURST_WIDTH_SRC == BEATS_PER_BURST_WIDTH_DEST) begin\n"], [452, "assign dest_burst_length = dest_src_burst_length;\n"], [453, "end\n"], [455, "if (BEATS_PER_BURST_WIDTH_SRC < BEATS_PER_BURST_WIDTH_DEST) begin\n"], [456, "assign dest_burst_length = {dest_src_burst_length,\n"], [457, "                           {BEATS_PER_BURST_WIDTH_DEST - BEATS_PER_BURST_WIDTH_SRC{1'b1}}};\n"], [458, "end\n"], [460, "if (BEATS_PER_BURST_WIDTH_SRC > BEATS_PER_BURST_WIDTH_DEST) begin\n"], [461, "assign dest_burst_length = dest_src_burst_length[BEATS_PER_BURST_WIDTH_SRC-1 -: BEATS_PER_BURST_WIDTH_DEST];\n"], [462, "end\n"], [464, "end else begin\n"], [466, "assign m_axi_awvalid = 1'b0;\n"], [467, "assign m_axi_awaddr = 'h00;\n"], [468, "assign m_axi_awlen = 'h00;\n"], [469, "assign m_axi_awsize = 'h00;\n"], [470, "assign m_axi_awburst = 'h00;\n"], [471, "assign m_axi_awprot = 'h00;\n"], [472, "assign m_axi_awcache = 'h00;\n"], [474, "assign m_axi_wvalid = 1'b0;\n"], [475, "assign m_axi_wdata = 'h00;\n"], [476, "assign m_axi_wstrb = 'h00;\n"], [477, "assign m_axi_wlast = 1'b0;\n"], [479, "assign m_axi_bready = 1'b0;\n"], [481, "assign src_bl_ready = 1'b1;\n"], [483, "assign dest_response_partial = 1'b0;\n"], [484, "assign dest_response_data_burst_length = 'h0;\n"], [486, "end\n"]], "Add": [[464, "  localparam DMA_TYPE_MM_AXI = 0;\n"], [464, "  localparam DMA_TYPE_STREAM_AXI = 1;\n"], [464, "  localparam DMA_TYPE_FIFO = 2;\n"], [464, "  localparam DMA_ADDRESS_WIDTH_DEST = DMA_AXI_ADDR_WIDTH - BYTES_PER_BEAT_WIDTH_DEST;\n"], [464, "  localparam DMA_ADDRESS_WIDTH_SRC = DMA_AXI_ADDR_WIDTH - BYTES_PER_BEAT_WIDTH_SRC;\n"], [464, "  localparam BEATS_PER_BURST_WIDTH_SRC = BYTES_PER_BURST_WIDTH - BYTES_PER_BEAT_WIDTH_SRC;\n"], [464, "  localparam BEATS_PER_BURST_WIDTH_DEST = BYTES_PER_BURST_WIDTH - BYTES_PER_BEAT_WIDTH_DEST;\n"], [464, "  localparam BURSTS_PER_TRANSFER_WIDTH = DMA_LENGTH_WIDTH - BYTES_PER_BURST_WIDTH;\n"], [464, "  reg eot_mem_src[0:2**ID_WIDTH-1];\n"], [464, "  reg eot_mem_dest[0:2**ID_WIDTH-1];\n"], [464, "  wire request_eot;\n"], [464, "  wire source_eot;\n"], [464, "  wire [ID_WIDTH-1:0] request_id;\n"], [464, "  wire [ID_WIDTH-1:0] source_id;\n"], [464, "  wire [ID_WIDTH-1:0] response_id;\n"], [464, "  wire enabled_src;\n"], [464, "  wire enabled_dest;\n"], [464, "  wire req_gen_valid;\n"], [464, "  wire req_gen_ready;\n"], [464, "  wire src_dest_valid;\n"], [464, "  wire src_dest_ready;\n"], [464, "  wire req_src_valid;\n"], [464, "  wire req_src_ready;\n"], [464, "  wire dest_req_valid;\n"], [464, "  wire dest_req_ready;\n"], [464, "  wire [DMA_ADDRESS_WIDTH_DEST-1:0] dest_req_dest_address;\n"], [464, "  wire dest_req_xlast;\n"], [464, "  wire dest_response_valid;\n"], [464, "  wire dest_response_ready;\n"], [464, "  wire [1:0] dest_response_resp;\n"], [464, "  wire dest_response_resp_eot;\n"], [464, "  wire [BYTES_PER_BURST_WIDTH-1:0] dest_response_data_burst_length;\n"], [464, "  wire dest_response_partial;\n"], [464, "  wire [ID_WIDTH-1:0] dest_request_id;\n"], [464, "  wire [ID_WIDTH-1:0] dest_data_request_id;\n"], [464, "  wire [ID_WIDTH-1:0] dest_data_response_id;\n"], [464, "  wire [ID_WIDTH-1:0] dest_response_id;\n"], [464, "  wire dest_valid;\n"], [464, "  wire dest_ready;\n"], [464, "  wire [DMA_DATA_WIDTH_DEST-1:0] dest_data;\n"], [464, "  wire [DMA_DATA_WIDTH_DEST/8-1:0] dest_strb;\n"], [464, "  wire dest_last;\n"], [464, "  wire dest_fifo_valid;\n"], [464, "  wire dest_fifo_ready;\n"], [464, "  wire [DMA_DATA_WIDTH_DEST-1:0] dest_fifo_data;\n"], [464, "  wire [DMA_DATA_WIDTH_DEST/8-1:0] dest_fifo_strb;\n"], [464, "  wire dest_fifo_last;\n"], [464, "  wire src_req_valid;\n"], [464, "  wire src_req_ready;\n"], [464, "  wire [DMA_ADDRESS_WIDTH_DEST-1:0] src_req_dest_address;\n"], [464, "  wire [DMA_ADDRESS_WIDTH_SRC-1:0] src_req_src_address;\n"], [464, "  wire [BEATS_PER_BURST_WIDTH_SRC-1:0] src_req_last_burst_length;\n"], [464, "  wire [BYTES_PER_BEAT_WIDTH_SRC-1:0] src_req_last_beat_bytes;\n"], [464, "  wire src_req_sync_transfer_start;\n"], [464, "  wire src_req_xlast;\n"], [464, "  reg [DMA_ADDRESS_WIDTH_DEST-1:0] src_req_dest_address_cur = 'h0;\n"], [464, "  reg src_req_xlast_cur = 1'b0;\n"], [464, "  /* TODO\n"], [464, "  wire src_response_valid;\n"], [464, "  wire src_response_ready;\n"], [464, "  wire src_response_empty;\n"], [464, "  wire [1:0] src_response_resp;\n"], [464, "  */\n"], [464, "  wire [ID_WIDTH-1:0] src_request_id;\n"], [464, "  reg [ID_WIDTH-1:0] src_throttled_request_id;\n"], [464, "  wire [ID_WIDTH-1:0] src_data_request_id;\n"], [464, "  wire [ID_WIDTH-1:0] src_response_id;\n"], [464, "  wire src_valid;\n"], [464, "  wire [DMA_DATA_WIDTH_SRC-1:0] src_data;\n"], [464, "  wire [BYTES_PER_BEAT_WIDTH_SRC-1:0] src_valid_bytes;\n"], [464, "  wire src_last;\n"], [464, "  wire src_partial_burst;\n"], [464, "  wire block_descr_to_dst;\n"], [464, "  wire src_fifo_valid;\n"], [464, "  wire [DMA_DATA_WIDTH_SRC-1:0] src_fifo_data;\n"], [464, "  wire [BYTES_PER_BEAT_WIDTH_SRC-1:0] src_fifo_valid_bytes;\n"], [464, "  wire src_fifo_last;\n"], [464, "  wire src_fifo_partial_burst;\n"], [464, "  wire                                 src_bl_valid;\n"], [464, "  wire                                 src_bl_ready;\n"], [464, "  wire [BEATS_PER_BURST_WIDTH_SRC-1:0] src_burst_length;\n"], [464, "  wire [BYTES_PER_BURST_WIDTH-1:0] dest_burst_info_length;\n"], [464, "  wire                             dest_burst_info_partial;\n"], [464, "  wire [ID_WIDTH-1:0] dest_burst_info_id;\n"], [464, "  wire                dest_burst_info_write;\n"], [464, "  reg src_dest_valid_hs = 1'b0;\n"], [464, "  wire src_dest_valid_hs_masked;\n"], [464, "  wire src_dest_ready_hs;\n"], [464, "  wire req_rewind_req_valid;\n"], [464, "  wire req_rewind_req_ready;\n"], [464, "  wire [ID_WIDTH+3-1:0] req_rewind_req_data;\n"], [464, "  wire completion_req_valid;\n"], [464, "  wire completion_req_ready;\n"], [464, "  wire completion_req_last;\n"], [464, "  wire [1:0] completion_transfer_id;\n"], [464, "  wire rewind_req_valid;\n"], [464, "  wire rewind_req_ready;\n"], [464, "  wire [ID_WIDTH+3-1:0] rewind_req_data;\n"], [464, "  reg src_throttler_enabled = 1'b1;\n"], [464, "  wire src_throttler_enable;\n"], [464, "  wire rewind_state;\n"], [464, "  /* Unused for now\n"], [464, "  wire response_src_valid;\n"], [464, "  wire response_src_ready = 1'b1;\n"], [464, "  wire [1:0] response_src_resp;\n"], [464, "  */\n"], [464, "  assign dbg_dest_request_id = dest_request_id;\n"], [464, "  assign dbg_dest_response_id = dest_response_id;\n"], [464, "  assign dbg_src_request_id = src_request_id;\n"], [464, "  assign dbg_src_response_id = src_response_id;\n"], [464, "  always @(posedge req_clk)\n"], [464, "  begin\n"], [464, "    eot_mem_src[request_id] <= request_eot;\n"], [464, "  end\n"], [472, "  always @(posedge src_clk)\n"], [472, "  begin\n"], [472, "    eot_mem_dest[source_id] <= source_eot;\n"], [472, "  end\n"], [477, "  generate if (DMA_TYPE_DEST == DMA_TYPE_MM_AXI) begin\n"], [477, "  wire                                  dest_bl_valid;\n"], [477, "  wire                                  dest_bl_ready;\n"], [477, "  wire [BEATS_PER_BURST_WIDTH_DEST-1:0] dest_burst_length;\n"], [477, "  wire [BEATS_PER_BURST_WIDTH_SRC-1:0] dest_src_burst_length;\n"], [477, "  assign dest_clk = m_dest_axi_aclk;\n"], [477, "  assign dest_ext_resetn = m_dest_axi_aresetn;\n"], [477, "  wire [ID_WIDTH-1:0] dest_address_id;\n"], [477, "  wire dest_address_eot = eot_mem_dest[dest_address_id];\n"], [477, "  wire dest_response_eot = eot_mem_dest[dest_response_id];\n"], [477, "  assign dbg_dest_address_id = dest_address_id;\n"], [477, "  assign dbg_dest_data_id = dest_data_response_id;\n"], [477, "  assign dest_data_request_id = dest_address_id;\n"], [477, "  dest_axi_mm #(\n"], [477, "    .ID_WIDTH(ID_WIDTH),\n"], [477, "    .DMA_DATA_WIDTH(DMA_DATA_WIDTH_DEST),\n"], [477, "    .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),\n"], [477, "    .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST),\n"], [477, "    .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_DEST),\n"], [477, "    .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST),\n"], [477, "    .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n"], [477, "    .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST),\n"], [477, "    .CACHE_COHERENT(CACHE_COHERENT_DEST)\n"], [477, "  ) i_dest_dma_mm (\n"], [477, "    .m_axi_aclk(m_dest_axi_aclk),\n"], [477, "    .m_axi_aresetn(dest_resetn),\n"], [477, "    .enable(dest_enable),\n"], [477, "    .enabled(dest_enabled),\n"], [477, "    .req_valid(dest_req_valid),\n"], [477, "    .req_ready(dest_req_ready),\n"], [477, "    .req_address(dest_req_dest_address),\n"], [477, "    .bl_valid(dest_bl_valid),\n"], [477, "    .bl_ready(dest_bl_ready),\n"], [477, "    .measured_last_burst_length(dest_burst_length),\n"], [477, "    .response_valid(dest_response_valid),\n"], [477, "    .response_ready(dest_response_ready),\n"], [477, "    .response_resp(dest_response_resp),\n"], [477, "    .response_resp_eot(dest_response_resp_eot),\n"], [477, "    .response_resp_partial(dest_response_partial),\n"], [477, "    .response_data_burst_length(dest_response_data_burst_length),\n"], [477, "    .request_id(dest_request_id),\n"], [477, "    .response_id(dest_response_id),\n"], [477, "    .address_id(dest_address_id),\n"], [477, "    .address_eot(dest_address_eot),\n"], [477, "    .response_eot(dest_response_eot),\n"], [477, "    .fifo_valid(dest_valid),\n"], [477, "    .fifo_ready(dest_ready),\n"], [477, "    .fifo_data(dest_data),\n"], [477, "    .fifo_strb(dest_strb),\n"], [477, "    .fifo_last(dest_last),\n"], [477, "    .dest_burst_info_length(dest_burst_info_length),\n"], [477, "    .dest_burst_info_partial(dest_burst_info_partial),\n"], [477, "    .dest_burst_info_id(dest_burst_info_id),\n"], [477, "    .dest_burst_info_write(dest_burst_info_write),\n"], [477, "    .m_axi_awready(m_axi_awready),\n"], [477, "    .m_axi_awvalid(m_axi_awvalid),\n"], [477, "    .m_axi_awaddr(m_axi_awaddr),\n"], [477, "    .m_axi_awlen(m_axi_awlen),\n"], [477, "    .m_axi_awsize(m_axi_awsize),\n"], [477, "    .m_axi_awburst(m_axi_awburst),\n"], [477, "    .m_axi_awprot(m_axi_awprot),\n"], [477, "    .m_axi_awcache(m_axi_awcache),\n"], [477, "    .m_axi_wready(m_axi_wready),\n"], [477, "    .m_axi_wvalid(m_axi_wvalid),\n"], [477, "    .m_axi_wdata(m_axi_wdata),\n"], [477, "    .m_axi_wstrb(m_axi_wstrb),\n"], [477, "    .m_axi_wlast(m_axi_wlast),\n"], [477, "    .m_axi_bvalid(m_axi_bvalid),\n"], [477, "    .m_axi_bresp(m_axi_bresp),\n"], [477, "    .m_axi_bready(m_axi_bready));\n"], [477, "  util_axis_fifo #(\n"], [477, "    .DATA_WIDTH(BEATS_PER_BURST_WIDTH_SRC),\n"], [477, "    .ADDRESS_WIDTH(0),\n"], [477, "    .ASYNC_CLK(ASYNC_CLK_SRC_DEST)\n"], [477, "  ) i_src_dest_bl_fifo (\n"], [477, "    .s_axis_aclk(src_clk),\n"], [477, "    .s_axis_aresetn(src_resetn),\n"], [477, "    .s_axis_valid(src_bl_valid),\n"], [477, "    .s_axis_ready(src_bl_ready),\n"], [477, "    .s_axis_full(),\n"], [477, "    .s_axis_data(src_burst_length),\n"], [477, "    .s_axis_room(),\n"], [477, "    .m_axis_aclk(dest_clk),\n"], [477, "    .m_axis_aresetn(dest_resetn),\n"], [477, "    .m_axis_valid(dest_bl_valid),\n"], [477, "    .m_axis_ready(dest_bl_ready),\n"], [477, "    .m_axis_data(dest_src_burst_length),\n"], [477, "    .m_axis_level(),\n"], [477, "    .m_axis_empty());\n"], [477, "  if (BEATS_PER_BURST_WIDTH_SRC == BEATS_PER_BURST_WIDTH_DEST) begin\n"], [477, "  assign dest_burst_length = dest_src_burst_length;\n"], [477, "  end\n"], [479, "  if (BEATS_PER_BURST_WIDTH_SRC < BEATS_PER_BURST_WIDTH_DEST) begin\n"], [479, "  assign dest_burst_length = {dest_src_burst_length,\n"], [479, "                             {BEATS_PER_BURST_WIDTH_DEST - BEATS_PER_BURST_WIDTH_SRC{1'b1}}};\n"], [479, "  end\n"], [481, "  if (BEATS_PER_BURST_WIDTH_SRC > BEATS_PER_BURST_WIDTH_DEST) begin\n"], [481, "  assign dest_burst_length = dest_src_burst_length[BEATS_PER_BURST_WIDTH_SRC-1 -: BEATS_PER_BURST_WIDTH_DEST];\n"], [481, "  end\n"], [484, "  end else begin\n"], [486, "  assign m_axi_awvalid = 1'b0;\n"], [486, "  assign m_axi_awaddr = 'h00;\n"], [486, "  assign m_axi_awlen = 'h00;\n"], [486, "  assign m_axi_awsize = 'h00;\n"], [486, "  assign m_axi_awburst = 'h00;\n"], [486, "  assign m_axi_awprot = 'h00;\n"], [486, "  assign m_axi_awcache = 'h00;\n"]]}}