Source Block: hdl/library/axi_fan_control/axi_fan_control.v@205:215@HdlStmAssign
assign up_clk = s_axi_aclk;
assign pwm = ~pulse_gen_out & up_resetn; //reverse polarity because the board is also reversing it
assign pwm_change_done_int = counter_overflow & !pwm_change_done;

//IRQ handling
assign up_irq_pending = ~up_irq_mask & up_irq_source;
assign up_irq_trigger  = {tacho_meas_int, temp_increase_alarm, tacho_alarm, pwm_change_done_int};
assign up_irq_source_clear = (up_wreq_s == 1'b1 && up_waddr_s == 8'h11) ? up_wdata_s[3:0] : 4'b0000;

//switching the reset signal for the counter
//counter is used to measure tacho and to provide delay between pwm_ontime changes

Diff Content:
- 210 assign up_irq_pending = ~up_irq_mask & up_irq_source;

Clone Blocks:
Clone Blocks 1:
hdl/library/axi_fan_control/axi_fan_control.v@201:211
wire  [3:0]   up_irq_pending;
wire  [3:0]   up_irq_trigger;
wire  [3:0]   up_irq_source_clear;

assign up_clk = s_axi_aclk;
assign pwm = ~pulse_gen_out & up_resetn; //reverse polarity because the board is also reversing it
assign pwm_change_done_int = counter_overflow & !pwm_change_done;

//IRQ handling
assign up_irq_pending = ~up_irq_mask & up_irq_source;
assign up_irq_trigger  = {tacho_meas_int, temp_increase_alarm, tacho_alarm, pwm_change_done_int};

Clone Blocks 2:
hdl/library/axi_fan_control/axi_fan_control.v@211:221
assign up_irq_trigger  = {tacho_meas_int, temp_increase_alarm, tacho_alarm, pwm_change_done_int};
assign up_irq_source_clear = (up_wreq_s == 1'b1 && up_waddr_s == 8'h11) ? up_wdata_s[3:0] : 4'b0000;

//switching the reset signal for the counter
//counter is used to measure tacho and to provide delay between pwm_ontime changes
assign counter_resetn = (pwm_change_done ) ? (!tacho_edge_det) : ((!pwm_change_done) & (!counter_overflow));

up_axi #(
  .AXI_ADDRESS_WIDTH(10))
i_up_axi (
  .up_rstn (s_axi_aresetn),

Clone Blocks 3:
hdl/library/axi_fan_control/axi_fan_control.v@207:217
assign pwm_change_done_int = counter_overflow & !pwm_change_done;

//IRQ handling
assign up_irq_pending = ~up_irq_mask & up_irq_source;
assign up_irq_trigger  = {tacho_meas_int, temp_increase_alarm, tacho_alarm, pwm_change_done_int};
assign up_irq_source_clear = (up_wreq_s == 1'b1 && up_waddr_s == 8'h11) ? up_wdata_s[3:0] : 4'b0000;

//switching the reset signal for the counter
//counter is used to measure tacho and to provide delay between pwm_ontime changes
assign counter_resetn = (pwm_change_done ) ? (!tacho_edge_det) : ((!pwm_change_done) & (!counter_overflow));


Clone Blocks 4:
hdl/library/axi_fan_control/axi_fan_control.v@206:216
assign pwm = ~pulse_gen_out & up_resetn; //reverse polarity because the board is also reversing it
assign pwm_change_done_int = counter_overflow & !pwm_change_done;

//IRQ handling
assign up_irq_pending = ~up_irq_mask & up_irq_source;
assign up_irq_trigger  = {tacho_meas_int, temp_increase_alarm, tacho_alarm, pwm_change_done_int};
assign up_irq_source_clear = (up_wreq_s == 1'b1 && up_waddr_s == 8'h11) ? up_wdata_s[3:0] : 4'b0000;

//switching the reset signal for the counter
//counter is used to measure tacho and to provide delay between pwm_ontime changes
assign counter_resetn = (pwm_change_done ) ? (!tacho_edge_det) : ((!pwm_change_done) & (!counter_overflow));

Clone Blocks 5:
hdl/library/axi_fan_control/axi_fan_control.v@202:212
wire  [3:0]   up_irq_trigger;
wire  [3:0]   up_irq_source_clear;

assign up_clk = s_axi_aclk;
assign pwm = ~pulse_gen_out & up_resetn; //reverse polarity because the board is also reversing it
assign pwm_change_done_int = counter_overflow & !pwm_change_done;

//IRQ handling
assign up_irq_pending = ~up_irq_mask & up_irq_source;
assign up_irq_trigger  = {tacho_meas_int, temp_increase_alarm, tacho_alarm, pwm_change_done_int};
assign up_irq_source_clear = (up_wreq_s == 1'b1 && up_waddr_s == 8'h11) ? up_wdata_s[3:0] : 4'b0000;

