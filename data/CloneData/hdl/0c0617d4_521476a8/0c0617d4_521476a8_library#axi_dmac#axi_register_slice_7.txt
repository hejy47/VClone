Source Block: hdl/library/axi_dmac/axi_register_slice.v@67:106@HdlStmIf
wire bwd_ready_s;
wire [DATA_WIDTH-1:0] fwd_data_s;
wire fwd_valid_s;
wire fwd_ready_s;

generate if (FORWARD_REGISTERED == 1) begin

reg fwd_valid = 1'b0;
reg [DATA_WIDTH-1:0] fwd_data = 'h00;

assign fwd_ready_s = ~fwd_valid | m_axi_ready;
assign fwd_valid_s = fwd_valid;
assign fwd_data_s = fwd_data;

always @(posedge clk) begin
  if (~fwd_valid | m_axi_ready)
    fwd_data <= bwd_data_s;
end

always @(posedge clk) begin
  if (resetn == 1'b0) begin
    fwd_valid <= 1'b0;
  end else begin
    if (bwd_valid_s)
      fwd_valid <= 1'b1;
    else if (m_axi_ready)
      fwd_valid <= 1'b0;
  end
end

end else begin
assign fwd_data_s = bwd_data_s;
assign fwd_valid_s = bwd_valid_s;
assign fwd_ready_s = m_axi_ready;
end
endgenerate

generate if (BACKWARD_REGISTERED == 1) begin

reg bwd_ready = 1'b1;

Diff Content:
- 72 generate if (FORWARD_REGISTERED == 1) begin
- 74 reg fwd_valid = 1'b0;
- 75 reg [DATA_WIDTH-1:0] fwd_data = 'h00;
- 77 assign fwd_ready_s = ~fwd_valid | m_axi_ready;
- 78 assign fwd_valid_s = fwd_valid;
- 79 assign fwd_data_s = fwd_data;
- 81 always @(posedge clk) begin
- 82   if (~fwd_valid | m_axi_ready)
- 83     fwd_data <= bwd_data_s;
- 84 end
- 86 always @(posedge clk) begin
- 87   if (resetn == 1'b0) begin
- 88     fwd_valid <= 1'b0;
- 90     if (bwd_valid_s)
- 91       fwd_valid <= 1'b1;
- 92     else if (m_axi_ready)
- 93       fwd_valid <= 1'b0;
- 95 end
- 97 end else begin
- 98 assign fwd_data_s = bwd_data_s;
- 99 assign fwd_valid_s = bwd_valid_s;
- 100 assign fwd_ready_s = m_axi_ready;
- 101 end
+ 88   /*
+ 88    s_axi_data  -> bwd_data     -> fwd_data(1)  -> m_axi_data
+ 88    s_axi_valid -> bwd_valid    -> fwd_valid(1) -> m_axi_valid
+ 88    s_axi_ready <- bwd_ready(2) <- fwd_ready <- m_axi_ready
+ 88    (1) FORWARD_REGISTERED inserts a set of FF before m_axi_data and m_axi_valid
+ 88    (2) BACKWARD_REGISTERED insters a FF before s_axi_ready
+ 88   */
+ 88   wire [DATA_WIDTH-1:0] bwd_data_s;
+ 88   wire bwd_valid_s;
+ 88   wire bwd_ready_s;
+ 88   wire [DATA_WIDTH-1:0] fwd_data_s;
+ 88   wire fwd_valid_s;
+ 88   wire fwd_ready_s;
+ 88   generate if (FORWARD_REGISTERED == 1) begin
+ 88     reg fwd_valid = 1'b0;
+ 88     reg [DATA_WIDTH-1:0] fwd_data = 'h00;
+ 88     assign fwd_ready_s = ~fwd_valid | m_axi_ready;
+ 88     assign fwd_valid_s = fwd_valid;
+ 88     assign fwd_data_s = fwd_data;
+ 88     always @(posedge clk) begin
+ 88       if (~fwd_valid | m_axi_ready)
+ 88         fwd_data <= bwd_data_s;
+ 88     end
+ 88     always @(posedge clk) begin
+ 88       if (resetn == 1'b0) begin
+ 88         fwd_valid <= 1'b0;
+ 88       end else begin
+ 88         if (bwd_valid_s)
+ 88           fwd_valid <= 1'b1;
+ 88         else if (m_axi_ready)
+ 88           fwd_valid <= 1'b0;
+ 88       end
+ 88     end
+ 93     assign fwd_data_s = bwd_data_s;
+ 93     assign fwd_valid_s = bwd_valid_s;
+ 93     assign fwd_ready_s = m_axi_ready;

Clone Blocks:
Clone Blocks 1:
hdl/library/axi_dmac/axi_register_slice.v@99:138
assign fwd_valid_s = bwd_valid_s;
assign fwd_ready_s = m_axi_ready;
end
endgenerate

generate if (BACKWARD_REGISTERED == 1) begin

reg bwd_ready = 1'b1;
reg [DATA_WIDTH-1:0] bwd_data = 'h00;

assign bwd_valid_s = ~bwd_ready | s_axi_valid;
assign bwd_data_s = bwd_ready ? s_axi_data : bwd_data;
assign bwd_ready_s = bwd_ready;

always @(posedge clk) begin
  if (bwd_ready)
    bwd_data <= s_axi_data;
end

always @(posedge clk) begin
  if (resetn == 1'b0) begin
    bwd_ready <= 1'b1;
  end else begin
    if (fwd_ready_s)
      bwd_ready <= 1'b1;
    else if (s_axi_valid)
      bwd_ready <= 1'b0;
  end
end

end else begin
assign bwd_valid_s = s_axi_valid;
assign bwd_data_s = s_axi_data;
assign bwd_ready_s = fwd_ready_s;
end endgenerate

assign m_axi_data = fwd_data_s;
assign m_axi_valid = fwd_valid_s;
assign s_axi_ready = bwd_ready_s;


