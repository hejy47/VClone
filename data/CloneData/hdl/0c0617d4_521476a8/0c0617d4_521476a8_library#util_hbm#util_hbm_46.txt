Source Block: hdl/library/util_hbm/util_hbm.v@249:571@HdlStmFor
always @(posedge m_axis_aclk) begin
  rd_response_eot <= rd_eot_pending_all;
end

generate
for (i = 0; i < NUM_M; i=i+1) begin

  wire [11:0] rd_dbg_status;
  wire rd_needs_reset;
  wire s_axis_xfer_req;
  wire m_axis_xfer_req;

  reg rd_needs_reset_d = 1'b0;

  // 2Gb (256MB) per segment
  localparam ADDR_OFFSET = (MEM_TYPE == 1) ? DDR_BASE_ADDDRESS :
     (HBM_SEGMENT_INDEX+i) * HBM_SEGMENTS_PER_MASTER * 256 * 1024 * 1024 ;

  always @(posedge s_axis_aclk) begin
    if (wr_eot_pending_all) begin
      wr_eot_pending[i] <= 1'b0;
    end else if (wr_request_eot_loc[i] & wr_response_valid_loc[i]) begin
      wr_eot_pending[i] <= 1'b1;
    end
  end

  // For last burst wait until all masters are done
  assign wr_response_ready_loc[i] = wr_request_eot_loc[i] ? wr_eot_pending_all : wr_response_valid_loc[i];

  // Overflow whenever s_axis_ready deasserts during capture (RX_PATH)
  assign wr_overflow_loc[i] =  TX_RX_N[0] ? 1'b0 : s_axis_xfer_req & ~s_axis_ready_loc[i];

  // AXIS to AXI3
  axi_dmac_transfer #(
    .DMA_DATA_WIDTH_SRC(SRC_DATA_WIDTH_PER_M),
    .DMA_DATA_WIDTH_DEST(AXI_DATA_WIDTH),
    .DMA_LENGTH_WIDTH(LENGTH_WIDTH),
    .DMA_LENGTH_ALIGN(SRC_BYTES_PER_BEAT_WIDTH),
    .BYTES_PER_BEAT_WIDTH_DEST(AXI_BYTES_PER_BEAT_WIDTH),
    .BYTES_PER_BEAT_WIDTH_SRC(SRC_BYTES_PER_BEAT_WIDTH),
    .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),
    .DMA_TYPE_DEST(DMA_TYPE_AXI_MM),
    .DMA_TYPE_SRC(DMA_TYPE_AXI_STREAM),
    .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),
    .DMA_2D_TRANSFER(1'b0),
    .ASYNC_CLK_REQ_SRC(0),
    .ASYNC_CLK_SRC_DEST(1),
    .ASYNC_CLK_DEST_REQ(1),
    .AXI_SLICE_DEST(1),
    .AXI_SLICE_SRC(1),
    .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),
    .FIFO_SIZE(SRC_FIFO_SIZE),
    .ID_WIDTH($clog2(SRC_FIFO_SIZE)),
    .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),
    .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),
    .ENABLE_DIAGNOSTICS_IF(0),
    .ALLOW_ASYM_MEM(1)
  ) i_wr_transfer (
    .ctrl_clk(s_axis_aclk),
    .ctrl_resetn(s_axis_aresetn),

     // Control interface
    .ctrl_enable(wr_request_enable),
    .ctrl_pause(1'b0),

    .req_valid(wr_request_valid),
    .req_ready(wr_request_ready_loc[i]),
    .req_dest_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),
    .req_src_address('h0),
    .req_x_length(wr_request_length >> NUM_M_LOG2),
    .req_y_length(0),
    .req_dest_stride(0),
    .req_src_stride(0),
    .req_sync_transfer_start(1'b0),
    .req_last(1'b1),

    .req_eot(wr_request_eot_loc[i]),
    .req_measured_burst_length(wr_measured_burst_length[BYTES_PER_BURST_WIDTH*i+:BYTES_PER_BURST_WIDTH]),
    .req_response_partial(),
    .req_response_valid(wr_response_valid_loc[i]),
    .req_response_ready(wr_response_ready_loc[i]),

    .m_dest_axi_aclk(m_axi_aclk),
    .m_dest_axi_aresetn(m_axi_aresetn),
    .m_src_axi_aclk(1'b0),
    .m_src_axi_aresetn(1'b0),

    .m_axi_awaddr(m_axi_awaddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),
    .m_axi_awlen(m_axi_awlen[AXI_ALEN*i+:AXI_ALEN]),
    .m_axi_awsize(m_axi_awsize[3*i+:3]),
    .m_axi_awburst(m_axi_awburst[2*i+:2]),
    .m_axi_awprot(),
    .m_axi_awcache(),
    .m_axi_awvalid(m_axi_awvalid[i]),
    .m_axi_awready(m_axi_awready[i]),

    .m_axi_wdata(m_axi_wdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),
    .m_axi_wstrb(m_axi_wstrb[(AXI_DATA_WIDTH/8)*i+:(AXI_DATA_WIDTH/8)]),
    .m_axi_wready(m_axi_wready[i]),
    .m_axi_wvalid(m_axi_wvalid[i]),
    .m_axi_wlast(m_axi_wlast[i]),

    .m_axi_bvalid(m_axi_bvalid[i]),
    .m_axi_bresp(m_axi_bresp[2*i+:2]),
    .m_axi_bready(m_axi_bready[i]),

    .m_axi_arready(),
    .m_axi_arvalid(),
    .m_axi_araddr(),
    .m_axi_arlen(),
    .m_axi_arsize(),
    .m_axi_arburst(),
    .m_axi_arprot(),
    .m_axi_arcache(),

    .m_axi_rdata(),
    .m_axi_rready(),
    .m_axi_rvalid(),
    .m_axi_rlast(),
    .m_axi_rresp(),

    .s_axis_aclk(s_axis_aclk),
    .s_axis_ready(s_axis_ready_loc[i]),
    .s_axis_valid(s_axis_valid),
    .s_axis_data(s_axis_data[SRC_DATA_WIDTH_PER_M*i+:SRC_DATA_WIDTH_PER_M]),
    .s_axis_user(s_axis_user),
    .s_axis_last(s_axis_last),
    .s_axis_xfer_req(s_axis_xfer_req),

    .m_axis_aclk(1'b0),
    .m_axis_ready(1'b1),
    .m_axis_valid(),
    .m_axis_data(),
    .m_axis_last(),
    .m_axis_xfer_req(),

    .fifo_wr_clk(1'b0),
    .fifo_wr_en(1'b0),
    .fifo_wr_din('b0),
    .fifo_wr_overflow(),
    .fifo_wr_sync(),
    .fifo_wr_xfer_req(),

    .fifo_rd_clk(1'b0),
    .fifo_rd_en(1'b0),
    .fifo_rd_valid(),
    .fifo_rd_dout(),
    .fifo_rd_underflow(),
    .fifo_rd_xfer_req(),

    // DBG
    .dbg_dest_request_id(),
    .dbg_dest_address_id(),
    .dbg_dest_data_id(),
    .dbg_dest_response_id(),
    .dbg_src_request_id(),
    .dbg_src_address_id(),
    .dbg_src_data_id(),
    .dbg_src_response_id(),
    .dbg_status(),

    .dest_diag_level_bursts()
  );

  always @(posedge m_axis_aclk) begin
    rd_needs_reset_d <= rd_needs_reset;
  end

  // Generate an end of transfer at the end of flush marked by rd_needs_reset
  always @(posedge m_axis_aclk) begin
    if (rd_eot_pending_all) begin
      rd_eot_pending[i] <= 1'b0;
    end else if ((rd_request_eot_loc[i] & rd_response_valid_loc[i]) ||
                 (~rd_needs_reset & rd_needs_reset_d)) begin
      rd_eot_pending[i] <= 1'b1;
    end
  end

  assign rd_response_ready_loc[i] = rd_request_eot_loc[i] ? rd_eot_pending_all : rd_response_valid_loc[i];

  // Underflow whenever m_axis_valid deasserts during play (TX_PATH)
  assign rd_underflow_loc[i] = ~TX_RX_N[0] ? 1'b0 : m_axis_xfer_req & m_axis_ready & ~m_axis_valid_loc[i];

  // AXI3 to MAXIS
  axi_dmac_transfer #(
    .DMA_DATA_WIDTH_SRC(AXI_DATA_WIDTH),
    .DMA_DATA_WIDTH_DEST(DST_DATA_WIDTH_PER_M),
    .DMA_LENGTH_WIDTH(LENGTH_WIDTH),
    .DMA_LENGTH_ALIGN(DST_BYTES_PER_BEAT_WIDTH),
    .BYTES_PER_BEAT_WIDTH_DEST(DST_BYTES_PER_BEAT_WIDTH),
    .BYTES_PER_BEAT_WIDTH_SRC(AXI_BYTES_PER_BEAT_WIDTH),
    .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),
    .DMA_TYPE_DEST(DMA_TYPE_AXI_STREAM),
    .DMA_TYPE_SRC(DMA_TYPE_AXI_MM),
    .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),
    .DMA_2D_TRANSFER(1'b0),
    .ASYNC_CLK_REQ_SRC(1),
    .ASYNC_CLK_SRC_DEST(1),
    .ASYNC_CLK_DEST_REQ(0),
    .AXI_SLICE_DEST(1),
    .AXI_SLICE_SRC(1),
    .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),
    .FIFO_SIZE(DST_FIFO_SIZE),
    .ID_WIDTH($clog2(DST_FIFO_SIZE)),
    .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),
    .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),
    .ENABLE_DIAGNOSTICS_IF(0),
    .ALLOW_ASYM_MEM(1)
  ) i_rd_transfer (
    .ctrl_clk(m_axis_aclk),
    .ctrl_resetn(m_axis_aresetn),

     // Control interface
    .ctrl_enable(rd_request_enable),
    .ctrl_pause(1'b0),

    .req_valid(rd_request_valid),
    .req_ready(rd_request_ready_loc[i]),
    .req_dest_address(0),
    .req_src_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),
    .req_x_length(rd_request_length >> NUM_M_LOG2),
    .req_y_length(0),
    .req_dest_stride(0),
    .req_src_stride(0),
    .req_sync_transfer_start(1'b0),
    .req_last(1'b1),

    .req_eot(rd_request_eot_loc[i]),
    .req_measured_burst_length(),
    .req_response_partial(),
    .req_response_valid(rd_response_valid_loc[i]),
    .req_response_ready(rd_response_ready_loc[i]),

    .m_dest_axi_aclk(1'b0),
    .m_dest_axi_aresetn(1'b0),
    .m_src_axi_aclk(m_axi_aclk),
    .m_src_axi_aresetn(m_axi_aresetn),

    .m_axi_awaddr(),
    .m_axi_awlen(),
    .m_axi_awsize(),
    .m_axi_awburst(),
    .m_axi_awprot(),
    .m_axi_awcache(),
    .m_axi_awvalid(),
    .m_axi_awready(1'b1),

    .m_axi_wdata(),
    .m_axi_wstrb(),
    .m_axi_wready(1'b1),
    .m_axi_wvalid(),
    .m_axi_wlast(),

    .m_axi_bvalid(1'b0),
    .m_axi_bresp(),
    .m_axi_bready(),

    .m_axi_arready(m_axi_arready[i]),
    .m_axi_arvalid(m_axi_arvalid[i]),
    .m_axi_araddr(m_axi_araddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),
    .m_axi_arlen(m_axi_arlen[AXI_ALEN*i+:AXI_ALEN]),
    .m_axi_arsize(m_axi_arsize[3*i+:3]),
    .m_axi_arburst(m_axi_arburst[2*i+:2]),
    .m_axi_arprot(),
    .m_axi_arcache(),

    .m_axi_rdata(m_axi_rdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),
    .m_axi_rready(m_axi_rready[i]),
    .m_axi_rvalid(m_axi_rvalid[i]),
    .m_axi_rlast(m_axi_rlast[i]),
    .m_axi_rresp(m_axi_rresp[2*i+:2]),

    .s_axis_aclk(1'b0),
    .s_axis_ready(),
    .s_axis_valid(1'b0),
    .s_axis_data(),
    .s_axis_user(),
    .s_axis_last(),
    .s_axis_xfer_req(),

    .m_axis_aclk(m_axis_aclk),
    .m_axis_ready((m_axis_ready & m_axis_valid) | rd_needs_reset),
    .m_axis_valid(m_axis_valid_loc[i]),
    .m_axis_data(m_axis_data[DST_DATA_WIDTH_PER_M*i+:DST_DATA_WIDTH_PER_M]),
    .m_axis_last(m_axis_last_loc[i]),
    .m_axis_xfer_req(m_axis_xfer_req),

    .fifo_wr_clk(1'b0),
    .fifo_wr_en(1'b0),
    .fifo_wr_din('b0),
    .fifo_wr_overflow(),
    .fifo_wr_sync(),
    .fifo_wr_xfer_req(),

    .fifo_rd_clk(1'b0),
    .fifo_rd_en(1'b0),
    .fifo_rd_valid(),
    .fifo_rd_dout(),
    .fifo_rd_underflow(),
    .fifo_rd_xfer_req(),

    // DBG
    .dbg_dest_request_id(),
    .dbg_dest_address_id(),
    .dbg_dest_data_id(),
    .dbg_dest_response_id(),
    .dbg_src_request_id(),
    .dbg_src_address_id(),
    .dbg_src_data_id(),
    .dbg_src_response_id(),
    .dbg_status(rd_dbg_status),

    .dest_diag_level_bursts()
  );

  assign rd_needs_reset = rd_dbg_status[11];

end
endgenerate

assign wr_overflow = |wr_overflow_loc;

assign rd_underflow = |rd_underflow_loc;

Diff Content:
- 254 for (i = 0; i < NUM_M; i=i+1) begin
- 256   wire [11:0] rd_dbg_status;
- 257   wire rd_needs_reset;
- 258   wire s_axis_xfer_req;
- 259   wire m_axis_xfer_req;
- 261   reg rd_needs_reset_d = 1'b0;
- 264   localparam ADDR_OFFSET = (MEM_TYPE == 1) ? DDR_BASE_ADDDRESS :
- 265      (HBM_SEGMENT_INDEX+i) * HBM_SEGMENTS_PER_MASTER * 256 * 1024 * 1024 ;
- 268     if (wr_eot_pending_all) begin
- 269       wr_eot_pending[i] <= 1'b0;
- 270     end else if (wr_request_eot_loc[i] & wr_response_valid_loc[i]) begin
- 271       wr_eot_pending[i] <= 1'b1;
- 276   assign wr_response_ready_loc[i] = wr_request_eot_loc[i] ? wr_eot_pending_all : wr_response_valid_loc[i];
- 279   assign wr_overflow_loc[i] =  TX_RX_N[0] ? 1'b0 : s_axis_xfer_req & ~s_axis_ready_loc[i];
- 282   axi_dmac_transfer #(
- 283     .DMA_DATA_WIDTH_SRC(SRC_DATA_WIDTH_PER_M),
- 284     .DMA_DATA_WIDTH_DEST(AXI_DATA_WIDTH),
- 285     .DMA_LENGTH_WIDTH(LENGTH_WIDTH),
- 286     .DMA_LENGTH_ALIGN(SRC_BYTES_PER_BEAT_WIDTH),
- 287     .BYTES_PER_BEAT_WIDTH_DEST(AXI_BYTES_PER_BEAT_WIDTH),
- 288     .BYTES_PER_BEAT_WIDTH_SRC(SRC_BYTES_PER_BEAT_WIDTH),
- 289     .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),
- 290     .DMA_TYPE_DEST(DMA_TYPE_AXI_MM),
- 291     .DMA_TYPE_SRC(DMA_TYPE_AXI_STREAM),
- 292     .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),
- 293     .DMA_2D_TRANSFER(1'b0),
- 294     .ASYNC_CLK_REQ_SRC(0),
- 295     .ASYNC_CLK_SRC_DEST(1),
- 296     .ASYNC_CLK_DEST_REQ(1),
- 297     .AXI_SLICE_DEST(1),
- 298     .AXI_SLICE_SRC(1),
- 299     .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),
- 300     .FIFO_SIZE(SRC_FIFO_SIZE),
- 301     .ID_WIDTH($clog2(SRC_FIFO_SIZE)),
- 302     .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),
- 303     .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),
- 304     .ENABLE_DIAGNOSTICS_IF(0),
- 305     .ALLOW_ASYM_MEM(1)
- 306   ) i_wr_transfer (
- 307     .ctrl_clk(s_axis_aclk),
- 308     .ctrl_resetn(s_axis_aresetn),
- 311     .ctrl_enable(wr_request_enable),
- 312     .ctrl_pause(1'b0),
- 314     .req_valid(wr_request_valid),
- 315     .req_ready(wr_request_ready_loc[i]),
- 316     .req_dest_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),
- 317     .req_src_address('h0),
- 318     .req_x_length(wr_request_length >> NUM_M_LOG2),
- 319     .req_y_length(0),
- 320     .req_dest_stride(0),
- 321     .req_src_stride(0),
- 322     .req_sync_transfer_start(1'b0),
- 323     .req_last(1'b1),
- 325     .req_eot(wr_request_eot_loc[i]),
- 326     .req_measured_burst_length(wr_measured_burst_length[BYTES_PER_BURST_WIDTH*i+:BYTES_PER_BURST_WIDTH]),
- 327     .req_response_partial(),
- 328     .req_response_valid(wr_response_valid_loc[i]),
- 329     .req_response_ready(wr_response_ready_loc[i]),
- 331     .m_dest_axi_aclk(m_axi_aclk),
- 332     .m_dest_axi_aresetn(m_axi_aresetn),
- 333     .m_src_axi_aclk(1'b0),
- 334     .m_src_axi_aresetn(1'b0),
- 336     .m_axi_awaddr(m_axi_awaddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),
- 337     .m_axi_awlen(m_axi_awlen[AXI_ALEN*i+:AXI_ALEN]),
- 338     .m_axi_awsize(m_axi_awsize[3*i+:3]),
- 339     .m_axi_awburst(m_axi_awburst[2*i+:2]),
- 340     .m_axi_awprot(),
- 341     .m_axi_awcache(),
- 342     .m_axi_awvalid(m_axi_awvalid[i]),
- 343     .m_axi_awready(m_axi_awready[i]),
- 345     .m_axi_wdata(m_axi_wdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),
- 346     .m_axi_wstrb(m_axi_wstrb[(AXI_DATA_WIDTH/8)*i+:(AXI_DATA_WIDTH/8)]),
- 347     .m_axi_wready(m_axi_wready[i]),
- 348     .m_axi_wvalid(m_axi_wvalid[i]),
- 349     .m_axi_wlast(m_axi_wlast[i]),
- 351     .m_axi_bvalid(m_axi_bvalid[i]),
- 352     .m_axi_bresp(m_axi_bresp[2*i+:2]),
- 353     .m_axi_bready(m_axi_bready[i]),
- 355     .m_axi_arready(),
- 356     .m_axi_arvalid(),
- 357     .m_axi_araddr(),
- 358     .m_axi_arlen(),
- 359     .m_axi_arsize(),
- 360     .m_axi_arburst(),
- 361     .m_axi_arprot(),
- 362     .m_axi_arcache(),
- 364     .m_axi_rdata(),
- 365     .m_axi_rready(),
- 366     .m_axi_rvalid(),
- 367     .m_axi_rlast(),
- 368     .m_axi_rresp(),
- 370     .s_axis_aclk(s_axis_aclk),
- 371     .s_axis_ready(s_axis_ready_loc[i]),
- 372     .s_axis_valid(s_axis_valid),
- 373     .s_axis_data(s_axis_data[SRC_DATA_WIDTH_PER_M*i+:SRC_DATA_WIDTH_PER_M]),
- 374     .s_axis_user(s_axis_user),
- 375     .s_axis_last(s_axis_last),
- 376     .s_axis_xfer_req(s_axis_xfer_req),
- 378     .m_axis_aclk(1'b0),
- 379     .m_axis_ready(1'b1),
- 380     .m_axis_valid(),
- 381     .m_axis_data(),
- 382     .m_axis_last(),
- 383     .m_axis_xfer_req(),
- 385     .fifo_wr_clk(1'b0),
- 386     .fifo_wr_en(1'b0),
- 387     .fifo_wr_din('b0),
- 388     .fifo_wr_overflow(),
- 389     .fifo_wr_sync(),
- 390     .fifo_wr_xfer_req(),
- 392     .fifo_rd_clk(1'b0),
- 393     .fifo_rd_en(1'b0),
- 394     .fifo_rd_valid(),
- 395     .fifo_rd_dout(),
- 396     .fifo_rd_underflow(),
- 397     .fifo_rd_xfer_req(),
- 400     .dbg_dest_request_id(),
- 401     .dbg_dest_address_id(),
- 402     .dbg_dest_data_id(),
- 403     .dbg_dest_response_id(),
- 404     .dbg_src_request_id(),
- 405     .dbg_src_address_id(),
- 406     .dbg_src_data_id(),
- 407     .dbg_src_response_id(),
- 408     .dbg_status(),
- 410     .dest_diag_level_bursts()
- 411   );
- 414     rd_needs_reset_d <= rd_needs_reset;
- 418   always @(posedge m_axis_aclk) begin
- 419     if (rd_eot_pending_all) begin
- 420       rd_eot_pending[i] <= 1'b0;
- 421     end else if ((rd_request_eot_loc[i] & rd_response_valid_loc[i]) ||
- 422                  (~rd_needs_reset & rd_needs_reset_d)) begin
- 423       rd_eot_pending[i] <= 1'b1;
- 427   assign rd_response_ready_loc[i] = rd_request_eot_loc[i] ? rd_eot_pending_all : rd_response_valid_loc[i];
- 430   assign rd_underflow_loc[i] = ~TX_RX_N[0] ? 1'b0 : m_axis_xfer_req & m_axis_ready & ~m_axis_valid_loc[i];
- 433   axi_dmac_transfer #(
- 434     .DMA_DATA_WIDTH_SRC(AXI_DATA_WIDTH),
- 435     .DMA_DATA_WIDTH_DEST(DST_DATA_WIDTH_PER_M),
- 436     .DMA_LENGTH_WIDTH(LENGTH_WIDTH),
- 437     .DMA_LENGTH_ALIGN(DST_BYTES_PER_BEAT_WIDTH),
- 438     .BYTES_PER_BEAT_WIDTH_DEST(DST_BYTES_PER_BEAT_WIDTH),
- 439     .BYTES_PER_BEAT_WIDTH_SRC(AXI_BYTES_PER_BEAT_WIDTH),
- 440     .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),
- 441     .DMA_TYPE_DEST(DMA_TYPE_AXI_STREAM),
- 442     .DMA_TYPE_SRC(DMA_TYPE_AXI_MM),
- 443     .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),
- 444     .DMA_2D_TRANSFER(1'b0),
- 445     .ASYNC_CLK_REQ_SRC(1),
- 446     .ASYNC_CLK_SRC_DEST(1),
- 447     .ASYNC_CLK_DEST_REQ(0),
- 448     .AXI_SLICE_DEST(1),
- 449     .AXI_SLICE_SRC(1),
- 450     .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),
- 451     .FIFO_SIZE(DST_FIFO_SIZE),
- 452     .ID_WIDTH($clog2(DST_FIFO_SIZE)),
- 453     .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),
- 454     .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),
- 455     .ENABLE_DIAGNOSTICS_IF(0),
- 456     .ALLOW_ASYM_MEM(1)
- 457   ) i_rd_transfer (
- 458     .ctrl_clk(m_axis_aclk),
- 459     .ctrl_resetn(m_axis_aresetn),
- 462     .ctrl_enable(rd_request_enable),
- 463     .ctrl_pause(1'b0),
- 465     .req_valid(rd_request_valid),
- 466     .req_ready(rd_request_ready_loc[i]),
- 467     .req_dest_address(0),
- 468     .req_src_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),
- 469     .req_x_length(rd_request_length >> NUM_M_LOG2),
- 470     .req_y_length(0),
- 471     .req_dest_stride(0),
- 472     .req_src_stride(0),
- 473     .req_sync_transfer_start(1'b0),
- 474     .req_last(1'b1),
- 476     .req_eot(rd_request_eot_loc[i]),
- 477     .req_measured_burst_length(),
- 478     .req_response_partial(),
- 479     .req_response_valid(rd_response_valid_loc[i]),
- 480     .req_response_ready(rd_response_ready_loc[i]),
- 482     .m_dest_axi_aclk(1'b0),
- 483     .m_dest_axi_aresetn(1'b0),
- 484     .m_src_axi_aclk(m_axi_aclk),
- 485     .m_src_axi_aresetn(m_axi_aresetn),
- 487     .m_axi_awaddr(),
- 488     .m_axi_awlen(),
- 489     .m_axi_awsize(),
- 490     .m_axi_awburst(),
- 491     .m_axi_awprot(),
- 492     .m_axi_awcache(),
- 493     .m_axi_awvalid(),
- 494     .m_axi_awready(1'b1),
- 496     .m_axi_wdata(),
- 497     .m_axi_wstrb(),
- 498     .m_axi_wready(1'b1),
- 499     .m_axi_wvalid(),
- 500     .m_axi_wlast(),
- 502     .m_axi_bvalid(1'b0),
- 503     .m_axi_bresp(),
- 504     .m_axi_bready(),
- 506     .m_axi_arready(m_axi_arready[i]),
- 507     .m_axi_arvalid(m_axi_arvalid[i]),
- 508     .m_axi_araddr(m_axi_araddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),
- 509     .m_axi_arlen(m_axi_arlen[AXI_ALEN*i+:AXI_ALEN]),
- 510     .m_axi_arsize(m_axi_arsize[3*i+:3]),
- 511     .m_axi_arburst(m_axi_arburst[2*i+:2]),
- 512     .m_axi_arprot(),
- 513     .m_axi_arcache(),
- 515     .m_axi_rdata(m_axi_rdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),
- 516     .m_axi_rready(m_axi_rready[i]),
- 517     .m_axi_rvalid(m_axi_rvalid[i]),
- 518     .m_axi_rlast(m_axi_rlast[i]),
- 519     .m_axi_rresp(m_axi_rresp[2*i+:2]),
- 521     .s_axis_aclk(1'b0),
- 522     .s_axis_ready(),
- 523     .s_axis_valid(1'b0),
- 524     .s_axis_data(),
- 525     .s_axis_user(),
- 526     .s_axis_last(),
- 527     .s_axis_xfer_req(),
- 529     .m_axis_aclk(m_axis_aclk),
- 530     .m_axis_ready((m_axis_ready & m_axis_valid) | rd_needs_reset),
- 531     .m_axis_valid(m_axis_valid_loc[i]),
- 532     .m_axis_data(m_axis_data[DST_DATA_WIDTH_PER_M*i+:DST_DATA_WIDTH_PER_M]),
- 533     .m_axis_last(m_axis_last_loc[i]),
- 534     .m_axis_xfer_req(m_axis_xfer_req),
- 536     .fifo_wr_clk(1'b0),
- 537     .fifo_wr_en(1'b0),
- 538     .fifo_wr_din('b0),
- 539     .fifo_wr_overflow(),
- 540     .fifo_wr_sync(),
- 541     .fifo_wr_xfer_req(),
- 543     .fifo_rd_clk(1'b0),
- 544     .fifo_rd_en(1'b0),
- 545     .fifo_rd_valid(),
- 546     .fifo_rd_dout(),
- 547     .fifo_rd_underflow(),
- 548     .fifo_rd_xfer_req(),
- 551     .dbg_dest_request_id(),
- 552     .dbg_dest_address_id(),
- 553     .dbg_dest_data_id(),
- 554     .dbg_dest_response_id(),
- 555     .dbg_src_request_id(),
- 556     .dbg_src_address_id(),
- 557     .dbg_src_data_id(),
- 558     .dbg_src_response_id(),
- 559     .dbg_status(rd_dbg_status),
- 561     .dest_diag_level_bursts()
- 562   );
- 564   assign rd_needs_reset = rd_dbg_status[11];
- 566 end
+ 254   wire [NUM_M-1:0] m_axis_last_loc;
+ 254   assign m_axis_last = &m_axis_last_loc;
+ 259   wire [NUM_M-1:0] m_axis_valid_loc;
+ 259   assign m_axis_valid = &m_axis_valid_loc;
+ 261   wire [NUM_M-1:0] wr_response_ready_loc;
+ 261   wire [NUM_M-1:0] rd_response_ready_loc;
+ 265   wire [NUM_M-1:0] wr_overflow_loc;
+ 265   wire [NUM_M-1:0] rd_underflow_loc;
+ 265   localparam LW_PER_M = LENGTH_WIDTH-NUM_M_LOG2;
+ 265   wire [NUM_M*BYTES_PER_BURST_WIDTH-1:0] wr_measured_burst_length;
+ 265   reg [LW_PER_M-1:0] wr_response_measured_length_per_m = 'h0;
+ 271     if (wr_request_enable == 1'b0) begin
+ 271       wr_response_measured_length_per_m <= {LW_PER_M{1'h0}};
+ 271     end else if (wr_response_valid_loc[0] == 1'b1 && wr_response_ready_loc[0] == 1'b1) begin
+ 271       wr_response_measured_length_per_m <= wr_response_measured_length_per_m +
+ 271         {{LW_PER_M-BYTES_PER_BURST_WIDTH{1'b0}},wr_measured_burst_length[BYTES_PER_BURST_WIDTH-1:0]} +
+ 271         {{LW_PER_M-1{1'b0}},~wr_request_eot_loc[0]};
+ 271     end else if (wr_response_eot == 1'b1) begin
+ 271       wr_response_measured_length_per_m <= {LW_PER_M{1'h0}};
+ 273   assign wr_response_measured_length = {wr_response_measured_length_per_m,{NUM_M_LOG2{1'b1}}};
+ 411   always @(posedge s_axis_aclk) begin
+ 411     wr_response_eot <= wr_eot_pending_all;
+ 411   end
+ 414     rd_response_eot <= rd_eot_pending_all;
+ 423   generate
+ 423   for (i = 0; i < NUM_M; i=i+1) begin
+ 423     wire [11:0] rd_dbg_status;
+ 423     wire rd_needs_reset;
+ 423     wire s_axis_xfer_req;
+ 423     wire m_axis_xfer_req;
+ 423     reg rd_needs_reset_d = 1'b0;
+ 423     localparam ADDR_OFFSET = (MEM_TYPE == 1) ? DDR_BASE_ADDDRESS :
+ 423        (HBM_SEGMENT_INDEX+i) * HBM_SEGMENTS_PER_MASTER * 256 * 1024 * 1024 ;
+ 423     always @(posedge s_axis_aclk) begin
+ 423       if (wr_eot_pending_all) begin
+ 423         wr_eot_pending[i] <= 1'b0;
+ 423       end else if (wr_request_eot_loc[i] & wr_response_valid_loc[i]) begin
+ 423         wr_eot_pending[i] <= 1'b1;
+ 423       end
+ 424     assign wr_response_ready_loc[i] = wr_request_eot_loc[i] ? wr_eot_pending_all : wr_response_valid_loc[i];
+ 424     assign wr_overflow_loc[i] =  TX_RX_N[0] ? 1'b0 : s_axis_xfer_req & ~s_axis_ready_loc[i];
+ 424     axi_dmac_transfer #(
+ 424       .DMA_DATA_WIDTH_SRC(SRC_DATA_WIDTH_PER_M),
+ 424       .DMA_DATA_WIDTH_DEST(AXI_DATA_WIDTH),
+ 424       .DMA_LENGTH_WIDTH(LENGTH_WIDTH),
+ 424       .DMA_LENGTH_ALIGN(SRC_BYTES_PER_BEAT_WIDTH),
+ 424       .BYTES_PER_BEAT_WIDTH_DEST(AXI_BYTES_PER_BEAT_WIDTH),
+ 424       .BYTES_PER_BEAT_WIDTH_SRC(SRC_BYTES_PER_BEAT_WIDTH),
+ 424       .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),
+ 424       .DMA_TYPE_DEST(DMA_TYPE_AXI_MM),
+ 424       .DMA_TYPE_SRC(DMA_TYPE_AXI_STREAM),
+ 424       .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),
+ 424       .DMA_2D_TRANSFER(1'b0),
+ 424       .ASYNC_CLK_REQ_SRC(0),
+ 424       .ASYNC_CLK_SRC_DEST(1),
+ 424       .ASYNC_CLK_DEST_REQ(1),
+ 424       .AXI_SLICE_DEST(1),
+ 424       .AXI_SLICE_SRC(1),
+ 424       .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),
+ 424       .FIFO_SIZE(SRC_FIFO_SIZE),
+ 424       .ID_WIDTH($clog2(SRC_FIFO_SIZE)),
+ 424       .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),
+ 424       .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),
+ 424       .ENABLE_DIAGNOSTICS_IF(0),
+ 424       .ALLOW_ASYM_MEM(1)
+ 424     ) i_wr_transfer (
+ 424       .ctrl_clk(s_axis_aclk),
+ 424       .ctrl_resetn(s_axis_aresetn),
+ 424       .ctrl_enable(wr_request_enable),
+ 424       .ctrl_pause(1'b0),
+ 424       .req_valid(wr_request_valid),
+ 424       .req_ready(wr_request_ready_loc[i]),
+ 424       .req_dest_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),
+ 424       .req_src_address('h0),
+ 424       .req_x_length(wr_request_length >> NUM_M_LOG2),
+ 424       .req_y_length(0),
+ 424       .req_dest_stride(0),
+ 424       .req_src_stride(0),
+ 424       .req_sync_transfer_start(1'b0),
+ 424       .req_last(1'b1),
+ 424       .req_eot(wr_request_eot_loc[i]),
+ 424       .req_measured_burst_length(wr_measured_burst_length[BYTES_PER_BURST_WIDTH*i+:BYTES_PER_BURST_WIDTH]),
+ 424       .req_response_partial(),
+ 424       .req_response_valid(wr_response_valid_loc[i]),
+ 424       .req_response_ready(wr_response_ready_loc[i]),
+ 424       .m_dest_axi_aclk(m_axi_aclk),
+ 424       .m_dest_axi_aresetn(m_axi_aresetn),
+ 424       .m_src_axi_aclk(1'b0),
+ 424       .m_src_axi_aresetn(1'b0),
+ 424       .m_axi_awaddr(m_axi_awaddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),
+ 424       .m_axi_awlen(m_axi_awlen[AXI_ALEN*i+:AXI_ALEN]),
+ 424       .m_axi_awsize(m_axi_awsize[3*i+:3]),
+ 424       .m_axi_awburst(m_axi_awburst[2*i+:2]),
+ 424       .m_axi_awprot(),
+ 424       .m_axi_awcache(),
+ 424       .m_axi_awvalid(m_axi_awvalid[i]),
+ 424       .m_axi_awready(m_axi_awready[i]),
+ 424       .m_axi_wdata(m_axi_wdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),
+ 424       .m_axi_wstrb(m_axi_wstrb[(AXI_DATA_WIDTH/8)*i+:(AXI_DATA_WIDTH/8)]),
+ 424       .m_axi_wready(m_axi_wready[i]),
+ 424       .m_axi_wvalid(m_axi_wvalid[i]),
+ 424       .m_axi_wlast(m_axi_wlast[i]),
+ 424       .m_axi_bvalid(m_axi_bvalid[i]),
+ 424       .m_axi_bresp(m_axi_bresp[2*i+:2]),
+ 424       .m_axi_bready(m_axi_bready[i]),
+ 424       .m_axi_arready(),
+ 424       .m_axi_arvalid(),
+ 424       .m_axi_araddr(),
+ 424       .m_axi_arlen(),
+ 424       .m_axi_arsize(),
+ 424       .m_axi_arburst(),
+ 424       .m_axi_arprot(),
+ 424       .m_axi_arcache(),
+ 424       .m_axi_rdata(),
+ 424       .m_axi_rready(),
+ 424       .m_axi_rvalid(),
+ 424       .m_axi_rlast(),
+ 424       .m_axi_rresp(),
+ 424       .s_axis_aclk(s_axis_aclk),
+ 424       .s_axis_ready(s_axis_ready_loc[i]),
+ 424       .s_axis_valid(s_axis_valid),
+ 424       .s_axis_data(s_axis_data[SRC_DATA_WIDTH_PER_M*i+:SRC_DATA_WIDTH_PER_M]),
+ 424       .s_axis_user(s_axis_user),
+ 424       .s_axis_last(s_axis_last),
+ 424       .s_axis_xfer_req(s_axis_xfer_req),
+ 424       .m_axis_aclk(1'b0),
+ 424       .m_axis_ready(1'b1),
+ 424       .m_axis_valid(),
+ 424       .m_axis_data(),
+ 424       .m_axis_last(),
+ 424       .m_axis_xfer_req(),
+ 424       .fifo_wr_clk(1'b0),
+ 424       .fifo_wr_en(1'b0),
+ 424       .fifo_wr_din('b0),
+ 424       .fifo_wr_overflow(),
+ 424       .fifo_wr_sync(),
+ 424       .fifo_wr_xfer_req(),
+ 424       .fifo_rd_clk(1'b0),
+ 424       .fifo_rd_en(1'b0),
+ 424       .fifo_rd_valid(),
+ 424       .fifo_rd_dout(),
+ 424       .fifo_rd_underflow(),
+ 424       .fifo_rd_xfer_req(),
+ 424       .dbg_dest_request_id(),
+ 424       .dbg_dest_address_id(),
+ 424       .dbg_dest_data_id(),
+ 424       .dbg_dest_response_id(),
+ 424       .dbg_src_request_id(),
+ 424       .dbg_src_address_id(),
+ 424       .dbg_src_data_id(),
+ 424       .dbg_src_response_id(),
+ 424       .dbg_status(),
+ 424       .dest_diag_level_bursts());
+ 424     always @(posedge m_axis_aclk) begin
+ 424       rd_needs_reset_d <= rd_needs_reset;
+ 424     end
+ 424     always @(posedge m_axis_aclk) begin
+ 424       if (rd_eot_pending_all) begin
+ 424         rd_eot_pending[i] <= 1'b0;
+ 424       end else if ((rd_request_eot_loc[i] & rd_response_valid_loc[i]) ||
+ 424                    (~rd_needs_reset & rd_needs_reset_d)) begin
+ 424         rd_eot_pending[i] <= 1'b1;
+ 424       end
+ 424     end
+ 424     assign rd_response_ready_loc[i] = rd_request_eot_loc[i] ? rd_eot_pending_all : rd_response_valid_loc[i];
+ 424     assign rd_underflow_loc[i] = ~TX_RX_N[0] ? 1'b0 : m_axis_xfer_req & m_axis_ready & ~m_axis_valid_loc[i];
+ 424     axi_dmac_transfer #(
+ 424       .DMA_DATA_WIDTH_SRC(AXI_DATA_WIDTH),
+ 424       .DMA_DATA_WIDTH_DEST(DST_DATA_WIDTH_PER_M),
+ 424       .DMA_LENGTH_WIDTH(LENGTH_WIDTH),
+ 424       .DMA_LENGTH_ALIGN(DST_BYTES_PER_BEAT_WIDTH),
+ 424       .BYTES_PER_BEAT_WIDTH_DEST(DST_BYTES_PER_BEAT_WIDTH),
+ 424       .BYTES_PER_BEAT_WIDTH_SRC(AXI_BYTES_PER_BEAT_WIDTH),
+ 424       .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),
+ 424       .DMA_TYPE_DEST(DMA_TYPE_AXI_STREAM),
+ 424       .DMA_TYPE_SRC(DMA_TYPE_AXI_MM),
+ 424       .DMA_AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),
+ 424       .DMA_2D_TRANSFER(1'b0),
+ 424       .ASYNC_CLK_REQ_SRC(1),
+ 424       .ASYNC_CLK_SRC_DEST(1),
+ 424       .ASYNC_CLK_DEST_REQ(0),
+ 424       .AXI_SLICE_DEST(1),
+ 424       .AXI_SLICE_SRC(1),
+ 424       .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST_LMT),
+ 424       .FIFO_SIZE(DST_FIFO_SIZE),
+ 424       .ID_WIDTH($clog2(DST_FIFO_SIZE)),
+ 424       .AXI_LENGTH_WIDTH_SRC(8-(4*AXI_PROTOCOL)),
+ 424       .AXI_LENGTH_WIDTH_DEST(8-(4*AXI_PROTOCOL)),
+ 424       .ENABLE_DIAGNOSTICS_IF(0),
+ 424       .ALLOW_ASYM_MEM(1)
+ 424     ) i_rd_transfer (
+ 424       .ctrl_clk(m_axis_aclk),
+ 424       .ctrl_resetn(m_axis_aresetn),
+ 424       .ctrl_enable(rd_request_enable),
+ 424       .ctrl_pause(1'b0),
+ 424       .req_valid(rd_request_valid),
+ 424       .req_ready(rd_request_ready_loc[i]),
+ 424       .req_dest_address(0),
+ 424       .req_src_address(ADDR_OFFSET[AXI_ADDR_WIDTH-1:AXI_BYTES_PER_BEAT_WIDTH]),
+ 424       .req_x_length(rd_request_length >> NUM_M_LOG2),
+ 424       .req_y_length(0),
+ 424       .req_dest_stride(0),
+ 424       .req_src_stride(0),
+ 424       .req_sync_transfer_start(1'b0),
+ 424       .req_last(1'b1),
+ 424       .req_eot(rd_request_eot_loc[i]),
+ 424       .req_measured_burst_length(),
+ 424       .req_response_partial(),
+ 424       .req_response_valid(rd_response_valid_loc[i]),
+ 424       .req_response_ready(rd_response_ready_loc[i]),
+ 424       .m_dest_axi_aclk(1'b0),
+ 424       .m_dest_axi_aresetn(1'b0),
+ 424       .m_src_axi_aclk(m_axi_aclk),
+ 424       .m_src_axi_aresetn(m_axi_aresetn),
+ 424       .m_axi_awaddr(),
+ 424       .m_axi_awlen(),
+ 424       .m_axi_awsize(),
+ 424       .m_axi_awburst(),
+ 424       .m_axi_awprot(),
+ 424       .m_axi_awcache(),
+ 424       .m_axi_awvalid(),
+ 424       .m_axi_awready(1'b1),
+ 424       .m_axi_wdata(),
+ 424       .m_axi_wstrb(),
+ 424       .m_axi_wready(1'b1),
+ 424       .m_axi_wvalid(),
+ 424       .m_axi_wlast(),
+ 424       .m_axi_bvalid(1'b0),
+ 424       .m_axi_bresp(),
+ 424       .m_axi_bready(),
+ 424       .m_axi_arready(m_axi_arready[i]),
+ 424       .m_axi_arvalid(m_axi_arvalid[i]),
+ 424       .m_axi_araddr(m_axi_araddr[AXI_ADDR_WIDTH*i+:AXI_ADDR_WIDTH]),
+ 424       .m_axi_arlen(m_axi_arlen[AXI_ALEN*i+:AXI_ALEN]),
+ 424       .m_axi_arsize(m_axi_arsize[3*i+:3]),
+ 424       .m_axi_arburst(m_axi_arburst[2*i+:2]),
+ 424       .m_axi_arprot(),
+ 424       .m_axi_arcache(),
+ 424       .m_axi_rdata(m_axi_rdata[AXI_DATA_WIDTH*i+:AXI_DATA_WIDTH]),
+ 424       .m_axi_rready(m_axi_rready[i]),
+ 424       .m_axi_rvalid(m_axi_rvalid[i]),
+ 424       .m_axi_rlast(m_axi_rlast[i]),
+ 424       .m_axi_rresp(m_axi_rresp[2*i+:2]),
+ 424       .s_axis_aclk(1'b0),
+ 424       .s_axis_ready(),
+ 424       .s_axis_valid(1'b0),
+ 424       .s_axis_data(),
+ 424       .s_axis_user(),
+ 424       .s_axis_last(),
+ 424       .s_axis_xfer_req(),
+ 424       .m_axis_aclk(m_axis_aclk),
+ 424       .m_axis_ready((m_axis_ready & m_axis_valid) | rd_needs_reset),
+ 424       .m_axis_valid(m_axis_valid_loc[i]),
+ 424       .m_axis_data(m_axis_data[DST_DATA_WIDTH_PER_M*i+:DST_DATA_WIDTH_PER_M]),
+ 424       .m_axis_last(m_axis_last_loc[i]),
+ 424       .m_axis_xfer_req(m_axis_xfer_req),
+ 424       .fifo_wr_clk(1'b0),
+ 424       .fifo_wr_en(1'b0),
+ 424       .fifo_wr_din('b0),
+ 424       .fifo_wr_overflow(),
+ 424       .fifo_wr_sync(),
+ 424       .fifo_wr_xfer_req(),
+ 424       .fifo_rd_clk(1'b0),
+ 424       .fifo_rd_en(1'b0),
+ 424       .fifo_rd_valid(),
+ 424       .fifo_rd_dout(),
+ 424       .fifo_rd_underflow(),
+ 424       .fifo_rd_xfer_req(),
+ 424       .dbg_dest_request_id(),
+ 424       .dbg_dest_address_id(),
+ 424       .dbg_dest_data_id(),
+ 424       .dbg_dest_response_id(),
+ 424       .dbg_src_request_id(),
+ 424       .dbg_src_address_id(),
+ 424       .dbg_src_data_id(),
+ 424       .dbg_src_response_id(),
+ 424       .dbg_status(rd_dbg_status),
+ 424       .dest_diag_level_bursts());
+ 424     assign rd_needs_reset = rd_dbg_status[11];
+ 425   endgenerate

Clone Blocks:
