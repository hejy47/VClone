Source Block: hdl/library/jesd204/jesd204_common/jesd204_eof_generator.v@129:154@HdlStmProcess
endfunction

integer i;

/* Only 1, 2 and multiples of 4 are supported atm */
always @(posedge clk) begin
  if (reset == 1'b1) begin
    sof <= {DATA_PATH_WIDTH{1'b0}};
    eof <= {DATA_PATH_WIDTH{1'b0}};
  end else begin
    sof <= {{DATA_PATH_WIDTH-1{1'b0}},beat_counter_sof};
    eof <= {beat_counter_eof,{DATA_PATH_WIDTH-1{1'b0}}};

    if (small_octets_per_frame == 1'b1) begin
      for (i = 1; i < DATA_PATH_WIDTH; i = i + 1) begin
        if (cfg_octets_per_frame[ffs(i)] != 1'b1) begin
          sof[i] <= 1'b1;
          eof[DATA_PATH_WIDTH-1-i] <= 1'b1;
        end
      end
    end else begin
    end
  end
end

endmodule

Diff Content:
- 134 always @(posedge clk) begin
- 135   if (reset == 1'b1) begin
- 136     sof <= {DATA_PATH_WIDTH{1'b0}};
- 137     eof <= {DATA_PATH_WIDTH{1'b0}};
- 139     sof <= {{DATA_PATH_WIDTH-1{1'b0}},beat_counter_sof};
- 140     eof <= {beat_counter_eof,{DATA_PATH_WIDTH-1{1'b0}}};
- 142     if (small_octets_per_frame == 1'b1) begin
- 143       for (i = 1; i < DATA_PATH_WIDTH; i = i + 1) begin
- 144         if (cfg_octets_per_frame[ffs(i)] != 1'b1) begin
- 145           sof[i] <= 1'b1;
- 146           eof[DATA_PATH_WIDTH-1-i] <= 1'b1;
- 149     end else begin
- 152 end
+ 137   generate
+ 137   if (CW > DPW_LOG2) begin
+ 137     reg [CW-DPW_LOG2-1:0] beat_counter = 'h00;
+ 137     wire [CW-DPW_LOG2-1:0] cfg_beats_per_frame = cfg_octets_per_frame[CW-1:DPW_LOG2];
+ 137     assign beat_counter_sof = beat_counter == 'h00;
+ 137     assign beat_counter_eof = beat_counter == cfg_beats_per_frame;
+ 137     assign small_octets_per_frame = cfg_beats_per_frame == 'h00;
+ 137     always @(posedge clk) begin
+ 137       if (reset == 1'b1) begin
+ 137         beat_counter <= 'h00;
+ 137       end else if (beat_counter_eof == 1'b1) begin
+ 137         beat_counter <= 'h00;
+ 137       end else begin
+ 137         beat_counter <= beat_counter + 1'b1;
+ 137       end
+ 137     end
+ 146     assign beat_counter_sof = 1'b1;
+ 146     assign beat_counter_eof = 1'b1;
+ 146     assign small_octets_per_frame = 1'b1;
+ 146   end
+ 146   endgenerate
+ 146   function [1:0] ffs;
+ 146   input [2:0] x;
+ 146   begin
+ 146     case (x)
+ 146     1: ffs = 0;
+ 146     2: ffs = 1;
+ 146     3: ffs = 0;
+ 146     4: ffs = 2;
+ 146     5: ffs = 0;
+ 146     6: ffs = 1;
+ 146     7: ffs = 0;
+ 146     default: ffs = 0;
+ 146     endcase
+ 146   end
+ 146   endfunction
+ 146   integer i;
+ 146   /* Only 1, 2 and multiples of 4 are supported atm */
+ 146   always @(posedge clk) begin
+ 146     if (reset == 1'b1) begin
+ 146       sof <= {DATA_PATH_WIDTH{1'b0}};
+ 146       eof <= {DATA_PATH_WIDTH{1'b0}};
+ 146     end else begin
+ 146       sof <= {{DATA_PATH_WIDTH-1{1'b0}},beat_counter_sof};
+ 146       eof <= {beat_counter_eof,{DATA_PATH_WIDTH-1{1'b0}}};
+ 146       if (small_octets_per_frame == 1'b1) begin
+ 146         for (i = 1; i < DATA_PATH_WIDTH; i = i + 1) begin
+ 146           if (cfg_octets_per_frame[ffs(i)] != 1'b1) begin
+ 146             sof[i] <= 1'b1;
+ 146             eof[DATA_PATH_WIDTH-1-i] <= 1'b1;
+ 146           end
+ 147       end else begin

Clone Blocks:
