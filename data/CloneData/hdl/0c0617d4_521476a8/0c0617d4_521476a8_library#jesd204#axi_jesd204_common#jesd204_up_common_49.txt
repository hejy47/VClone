Source Block: hdl/library/jesd204/axi_jesd204_common/jesd204_up_common.v@356:421@HdlStmProcess
  end else begin
    up_irq_clear = {NUM_IRQS{1'b0}};
  end
end

always @(posedge up_clk) begin
  if (up_reset == 1'b1) begin
    up_scratch <= 'h00;
    up_irq_enable <= {NUM_IRQS{1'b0}};
    up_reset_core <= 1'b1;

    up_cfg_octets_per_frame <= 'h00;
    up_cfg_octets_per_multiframe <= {DATA_PATH_WIDTH_LOG2{1'b1}};
    up_cfg_lanes_disable <= {NUM_LANES{1'b0}};
    up_cfg_links_disable <= {NUM_LINKS{1'b0}};
    up_cfg_beats_per_multiframe <= 'h00;

    up_cfg_disable_char_replacement <= 1'b0;
    up_cfg_disable_scrambler <= 1'b0;
  end else if (up_wreq == 1'b1) begin
    case (up_waddr)
    /* Standard registers */
    12'h002: up_scratch <= up_wdata;

    /* IRQ block */
    12'h020: up_irq_enable <= up_wdata[NUM_IRQS-1:0];

    /* JESD common control */
    12'h030: up_reset_core <= up_wdata[0];

    endcase

    /*
     * The configuration needs to be static while the core is
     * active. To enforce this writes to configuration registers
     * will be ignored while the core is out of reset.
     */
    if (up_cfg_is_writeable == 1'b1) begin
      case (up_waddr)
      12'h080: begin
        up_cfg_lanes_disable <= up_wdata[NUM_LANES-1:0];
      end
      12'h084: begin
        up_cfg_octets_per_frame <= up_wdata[23:16];
        up_cfg_octets_per_multiframe <= {up_wdata[9:DATA_PATH_WIDTH_LOG2],
                                        {DATA_PATH_WIDTH_LOG2{1'b1}}};
      end
      12'h085: begin
        up_cfg_disable_char_replacement <= up_wdata[1];
        up_cfg_disable_scrambler <= up_wdata[0];
      end
      12'h086: begin
        up_cfg_links_disable <= up_wdata[NUM_LINKS-1:0];
      end
      12'h087: begin
        up_cfg_beats_per_multiframe <= up_wdata[7:0];
      end
      endcase
    end
  end
end

up_clock_mon #(
  .TOTAL_WIDTH(21)
) i_clock_mon (
  .up_rstn(~up_reset),

Diff Content:
- 361 always @(posedge up_clk) begin
- 362   if (up_reset == 1'b1) begin
- 363     up_scratch <= 'h00;
- 364     up_irq_enable <= {NUM_IRQS{1'b0}};
- 365     up_reset_core <= 1'b1;
- 367     up_cfg_octets_per_frame <= 'h00;
- 368     up_cfg_octets_per_multiframe <= {DATA_PATH_WIDTH_LOG2{1'b1}};
- 369     up_cfg_lanes_disable <= {NUM_LANES{1'b0}};
- 370     up_cfg_links_disable <= {NUM_LINKS{1'b0}};
- 371     up_cfg_beats_per_multiframe <= 'h00;
- 373     up_cfg_disable_char_replacement <= 1'b0;
- 374     up_cfg_disable_scrambler <= 1'b0;
- 375   end else if (up_wreq == 1'b1) begin
- 376     case (up_waddr)
- 377     /* Standard registers */
- 378     12'h002: up_scratch <= up_wdata;
- 380     /* IRQ block */
- 381     12'h020: up_irq_enable <= up_wdata[NUM_IRQS-1:0];
- 383     /* JESD common control */
- 384     12'h030: up_reset_core <= up_wdata[0];
- 388     /*
- 389      * The configuration needs to be static while the core is
- 390      * active. To enforce this writes to configuration registers
- 391      * will be ignored while the core is out of reset.
- 392      */
- 393     if (up_cfg_is_writeable == 1'b1) begin
- 395       12'h080: begin
- 396         up_cfg_lanes_disable <= up_wdata[NUM_LANES-1:0];
- 397       end
- 398       12'h084: begin
- 399         up_cfg_octets_per_frame <= up_wdata[23:16];
- 400         up_cfg_octets_per_multiframe <= {up_wdata[9:DATA_PATH_WIDTH_LOG2],
- 401                                         {DATA_PATH_WIDTH_LOG2{1'b1}}};
- 402       end
- 403       12'h085: begin
- 404         up_cfg_disable_char_replacement <= up_wdata[1];
- 405         up_cfg_disable_scrambler <= up_wdata[0];
- 406       end
- 407       12'h086: begin
- 408         up_cfg_links_disable <= up_wdata[NUM_LINKS-1:0];
- 409       end
- 410       12'h087: begin
- 411         up_cfg_beats_per_multiframe <= up_wdata[7:0];
- 412       end
- 416 end
+ 365     /* Count IRQ events for max 8 interrupt sources */
+ 371     for (i = 0; i < NUM_IRQS; i=i+1) begin : irq_cnt
+ 378       reg [15:0] up_irq_event_cnt = 'h0;
+ 381       always @(posedge up_clk) begin
+ 381         if (up_stat_clear) begin
+ 381           up_irq_event_cnt <= 'h0;
+ 381         end else if (up_irq_trigger[i]) begin
+ 381           up_irq_event_cnt <= up_irq_event_cnt + 16'd1;
+ 381         end
+ 381       end
+ 384       assign up_irq_event_cnt_bus[i*16 +: 16] = up_irq_event_cnt;
+ 384     end
+ 384   end else begin : g_no_link_stats
+ 384     assign up_irq_event_cnt_bus = 'h0;
+ 384     assign up_link_enable_cnt_s = 'h0;
+ 384   end
+ 384   endgenerate
+ 384   wire [20:0] clk_mon_count;
+ 384   wire [20:0] device_clk_mon_count;
+ 384   always @(*) begin
+ 384     case (up_raddr)
+ 384       /* Standard registers */
+ 384       12'h000: up_rdata = PCORE_VERSION;
+ 384       12'h001: up_rdata = ID;
+ 384       12'h002: up_rdata = up_scratch;
+ 384       12'h003: up_rdata = PCORE_MAGIC;
+ 384       /* Core configuration */
+ 384       12'h004: up_rdata = status_synth_params0;
+ 384       12'h005: up_rdata = status_synth_params1;
+ 384       12'h006: up_rdata = status_synth_params2;
+ 384       /* 0x07-0x0f reserved for future use */
+ 384       /* 0x10-0x1f reserved for core specific HDL configuration information */
+ 384       /* IRQ block */
+ 384       12'h020: up_rdata = up_irq_enable;
+ 384       12'h021: up_rdata = up_irq_pending;
+ 384       12'h022: up_rdata = up_irq_source;
+ 384       /* 0x23-0x30 reserved for future use */
+ 384       /* JESD common control */
+ 384       12'h030: up_rdata = up_reset_core;
+ 384       12'h031: up_rdata = {up_core_reset_ext, up_reset_synchronizer}; /* core ready */
+ 384       12'h032: up_rdata = {11'h00, clk_mon_count}; /* Make it 16.16 */
+ 384       12'h033: up_rdata = {11'h00, device_clk_mon_count}; /* Make it 16.16 */
+ 384       /* 0x34-0x34 reserver for future use */
+ 384       12'h080: up_rdata = up_cfg_lanes_disable;
+ 384       /* 0x82-0x83 reserved for future lane disable bits (max 128 lanes) */
+ 384       12'h084: up_rdata = {
+ 384         /* 24-31 */ 8'h00, /* Reserved for future extensions of octets_per_frame */
+ 384         /* 16-23 */ up_cfg_octets_per_frame,
+ 384         /* 10-15 */ 6'b000000, /* Reserved for future extensions of beats_per_multiframe */
+ 384         /* 00-09 */ up_cfg_octets_per_multiframe
+ 384       };
+ 384       12'h85: up_rdata = {
+ 384         /* 02-31 */ 30'h00, /* Reserved for future additions */
+ 384         /*    01 */ up_cfg_disable_char_replacement, /* Disable character replacement */
+ 384         /*    00 */ up_cfg_disable_scrambler /* Disable scrambler */
+ 384       };
+ 384       12'h086: up_rdata = up_cfg_links_disable;
+ 384       12'h087: up_rdata = up_cfg_beats_per_multiframe;
+ 384       /* 0x88-0x8f reserved for future use */
+ 384       /* 0x90-0x9f reserved for core specific configuration options */
+ 384       /* 0xb0 Stat control */
+ 384       12'h0b1: up_rdata = up_link_enable_cnt_s;
+ 384       /* 0xb4-0xb7 IRQ Stat, max 8 interrupt sources */
+ 384       12'h0b4: up_rdata = up_irq_event_cnt_bus[0*32 +: 32];
+ 384       12'h0b5: up_rdata = up_irq_event_cnt_bus[1*32 +: 32];
+ 384       12'h0b6: up_rdata = up_irq_event_cnt_bus[2*32 +: 32];
+ 384       12'h0b7: up_rdata = up_irq_event_cnt_bus[3*32 +: 32];
+ 384       default: up_rdata = 'h00;
+ 386   end
+ 386   /* IRQ pending register is write-1-to-clear */
+ 386   always @(*) begin
+ 386     if (up_wreq == 1'b1 && up_waddr == 12'h21) begin
+ 386       up_irq_clear = up_wdata[NUM_IRQS-1:0];
+ 386     end else begin
+ 386       up_irq_clear = {NUM_IRQS{1'b0}};
+ 386     end
+ 386   end
+ 393   always @(posedge up_clk) begin
+ 393     if (up_reset == 1'b1) begin
+ 393       up_scratch <= 'h00;
+ 393       up_irq_enable <= {NUM_IRQS{1'b0}};
+ 393       up_reset_core <= 1'b1;
+ 393       up_cfg_octets_per_frame <= 'h00;
+ 393       up_cfg_octets_per_multiframe <= {DATA_PATH_WIDTH_LOG2{1'b1}};
+ 393       up_cfg_lanes_disable <= {NUM_LANES{1'b0}};
+ 393       up_cfg_links_disable <= {NUM_LINKS{1'b0}};
+ 393       up_cfg_beats_per_multiframe <= 'h00;
+ 393       up_cfg_disable_char_replacement <= 1'b0;
+ 393       up_cfg_disable_scrambler <= 1'b0;
+ 393     end else if (up_wreq == 1'b1) begin
+ 412         /* Standard registers */
+ 412         12'h002: up_scratch <= up_wdata;
+ 412         /* IRQ block */
+ 412         12'h020: up_irq_enable <= up_wdata[NUM_IRQS-1:0];
+ 412         /* JESD common control */
+ 412         12'h030: up_reset_core <= up_wdata[0];
+ 413       /*
+ 413        * The configuration needs to be static while the core is
+ 413        * active. To enforce this writes to configuration registers
+ 413        * will be ignored while the core is out of reset.
+ 413        */
+ 413       if (up_cfg_is_writeable == 1'b1) begin
+ 413         case (up_waddr)
+ 413           12'h080: begin
+ 413             up_cfg_lanes_disable <= up_wdata[NUM_LANES-1:0];
+ 413           end
+ 413           12'h084: begin
+ 413             up_cfg_octets_per_frame <= up_wdata[23:16];
+ 413             up_cfg_octets_per_multiframe <= {up_wdata[9:DATA_PATH_WIDTH_LOG2],
+ 413                                             {DATA_PATH_WIDTH_LOG2{1'b1}}};
+ 413           end
+ 413           12'h085: begin
+ 413             up_cfg_disable_char_replacement <= up_wdata[1];
+ 413             up_cfg_disable_scrambler <= up_wdata[0];
+ 413           end
+ 413           12'h086: begin
+ 413             up_cfg_links_disable <= up_wdata[NUM_LINKS-1:0];
+ 413           end
+ 413           12'h087: begin
+ 413             up_cfg_beats_per_multiframe <= up_wdata[7:0];
+ 413           end
+ 413         endcase
+ 413       end

Clone Blocks:
