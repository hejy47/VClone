Source Block: hdl/library/util_cdc/sync_gray.v@55:115@HdlStmIf
  input [DATA_WIDTH-1:0] in_count,
  input out_resetn,
  input out_clk,
  output [DATA_WIDTH-1:0] out_count);

generate if (ASYNC_CLK == 1) begin
  reg [DATA_WIDTH-1:0] cdc_sync_stage0 = 'h0;
  reg [DATA_WIDTH-1:0] cdc_sync_stage1 = 'h0;
  reg [DATA_WIDTH-1:0] cdc_sync_stage2 = 'h0;
  reg [DATA_WIDTH-1:0] out_count_m = 'h0;

  function [DATA_WIDTH-1:0] g2b;
    input [DATA_WIDTH-1:0] g;
    reg   [DATA_WIDTH-1:0] b;
    integer i;
    begin
      b[DATA_WIDTH-1] = g[DATA_WIDTH-1];
      for (i = DATA_WIDTH - 2; i >= 0; i =  i - 1)
        b[i] = b[i + 1] ^ g[i];
      g2b = b;
    end
  endfunction

  function [DATA_WIDTH-1:0] b2g;
    input [DATA_WIDTH-1:0] b;
    reg [DATA_WIDTH-1:0] g;
    integer i;
    begin
      g[DATA_WIDTH-1] = b[DATA_WIDTH-1];
      for (i = DATA_WIDTH - 2; i >= 0; i = i -1)
          g[i] = b[i + 1] ^ b[i];
      b2g = g;
    end
  endfunction

  always @(posedge in_clk) begin
    if (in_resetn == 1'b0) begin
      cdc_sync_stage0 <= 'h00;
    end else begin
      cdc_sync_stage0 <= b2g(in_count);
    end
  end

  always @(posedge out_clk) begin
    if (out_resetn == 1'b0) begin
      cdc_sync_stage1 <= 'h00;
      cdc_sync_stage2 <= 'h00;
      out_count_m <= 'h00;
    end else begin
      cdc_sync_stage1 <= cdc_sync_stage0;
      cdc_sync_stage2 <= cdc_sync_stage1;
      out_count_m <= g2b(cdc_sync_stage2);
    end
  end

  assign out_count = out_count_m;
end else begin
  assign out_count = in_count;
end endgenerate

endmodule

Diff Content:
- 60 generate if (ASYNC_CLK == 1) begin
- 61   reg [DATA_WIDTH-1:0] cdc_sync_stage0 = 'h0;
- 62   reg [DATA_WIDTH-1:0] cdc_sync_stage1 = 'h0;
- 63   reg [DATA_WIDTH-1:0] cdc_sync_stage2 = 'h0;
- 64   reg [DATA_WIDTH-1:0] out_count_m = 'h0;
- 66   function [DATA_WIDTH-1:0] g2b;
- 67     input [DATA_WIDTH-1:0] g;
- 68     reg   [DATA_WIDTH-1:0] b;
- 69     integer i;
- 70     begin
- 71       b[DATA_WIDTH-1] = g[DATA_WIDTH-1];
- 72       for (i = DATA_WIDTH - 2; i >= 0; i =  i - 1)
- 73         b[i] = b[i + 1] ^ g[i];
- 74       g2b = b;
- 75     end
- 76   endfunction
- 78   function [DATA_WIDTH-1:0] b2g;
- 79     input [DATA_WIDTH-1:0] b;
- 80     reg [DATA_WIDTH-1:0] g;
- 81     integer i;
- 82     begin
- 83       g[DATA_WIDTH-1] = b[DATA_WIDTH-1];
- 84       for (i = DATA_WIDTH - 2; i >= 0; i = i -1)
- 85           g[i] = b[i + 1] ^ b[i];
- 86       b2g = g;
- 87     end
- 88   endfunction
- 90   always @(posedge in_clk) begin
- 91     if (in_resetn == 1'b0) begin
- 92       cdc_sync_stage0 <= 'h00;
- 93     end else begin
- 94       cdc_sync_stage0 <= b2g(in_count);
- 96   end
- 98   always @(posedge out_clk) begin
- 99     if (out_resetn == 1'b0) begin
- 100       cdc_sync_stage1 <= 'h00;
- 101       cdc_sync_stage2 <= 'h00;
- 102       out_count_m <= 'h00;
- 103     end else begin
- 104       cdc_sync_stage1 <= cdc_sync_stage0;
- 105       cdc_sync_stage2 <= cdc_sync_stage1;
- 106       out_count_m <= g2b(cdc_sync_stage2);
- 108   end
- 110   assign out_count = out_count_m;
- 111 end else begin
- 112   assign out_count = in_count;
- 113 end endgenerate
+ 64   generate if (ASYNC_CLK == 1) begin
+ 64     reg [DATA_WIDTH-1:0] cdc_sync_stage0 = 'h0;
+ 64     reg [DATA_WIDTH-1:0] cdc_sync_stage1 = 'h0;
+ 64     reg [DATA_WIDTH-1:0] cdc_sync_stage2 = 'h0;
+ 64     reg [DATA_WIDTH-1:0] out_count_m = 'h0;
+ 76     function [DATA_WIDTH-1:0] g2b;
+ 76       input [DATA_WIDTH-1:0] g;
+ 76       reg   [DATA_WIDTH-1:0] b;
+ 76       integer i;
+ 76       begin
+ 76         b[DATA_WIDTH-1] = g[DATA_WIDTH-1];
+ 76         for (i = DATA_WIDTH - 2; i >= 0; i =  i - 1)
+ 76           b[i] = b[i + 1] ^ g[i];
+ 76         g2b = b;
+ 76       end
+ 76     endfunction
+ 88     function [DATA_WIDTH-1:0] b2g;
+ 88       input [DATA_WIDTH-1:0] b;
+ 88       reg [DATA_WIDTH-1:0] g;
+ 88       integer i;
+ 88       begin
+ 88         g[DATA_WIDTH-1] = b[DATA_WIDTH-1];
+ 88         for (i = DATA_WIDTH - 2; i >= 0; i = i -1)
+ 88             g[i] = b[i + 1] ^ b[i];
+ 88         b2g = g;
+ 88       end
+ 88     endfunction
+ 94     always @(posedge in_clk) begin
+ 94       if (in_resetn == 1'b0) begin
+ 94         cdc_sync_stage0 <= 'h00;
+ 94       end else begin
+ 94         cdc_sync_stage0 <= b2g(in_count);
+ 94       end
+ 106     always @(posedge out_clk) begin
+ 106       if (out_resetn == 1'b0) begin
+ 106         cdc_sync_stage1 <= 'h00;
+ 106         cdc_sync_stage2 <= 'h00;
+ 106         out_count_m <= 'h00;
+ 106       end else begin
+ 106         cdc_sync_stage1 <= cdc_sync_stage0;
+ 106         cdc_sync_stage2 <= cdc_sync_stage1;
+ 106         out_count_m <= g2b(cdc_sync_stage2);
+ 106       end
+ 113     assign out_count = out_count_m;
+ 113   end else begin
+ 113     assign out_count = in_count;
+ 113   end endgenerate

Clone Blocks:
