{"Source Block": ["hdl/library/jesd204/jesd204_tx/jesd204_tx.v@205:342@HdlStmIf", "  .lmc_quarter_edge(device_lmc_quarter_edge),\n  .eoemb(device_eoemb)\n);\n\ngenerate\nif (ASYNC_CLK) begin : dual_lmfc_mode\n\n  reg link_lmfc_reset = 1'b1;\n  reg device_lmfc_edge_d1 = 1'b0;\n  reg device_tx_ready = 1'b0;\n\n  jesd204_lmfc #(\n    .LINK_MODE(LINK_MODE),\n    .DATA_PATH_WIDTH(DATA_PATH_WIDTH)\n  ) i_link_lmfc (\n    .clk(clk),\n    .reset(link_lmfc_reset),\n\n    .cfg_octets_per_multiframe(cfg_octets_per_multiframe),\n    .cfg_lmfc_offset('h0),\n    .cfg_beats_per_multiframe(cfg_beats_per_multiframe),\n    .cfg_sysref_oneshot(1'b0),\n    .cfg_sysref_disable(1'b1),\n\n    .sysref(sysref),\n\n    .sysref_edge(),\n    .sysref_alignment_error(),\n\n    .lmfc_edge(link_lmfc_edge),\n    .lmfc_clk(link_lmfc_clk),\n    .lmfc_counter(),\n    .lmc_edge(lmc_edge),\n    .lmc_quarter_edge(lmc_quarter_edge),\n    .eoemb(eoemb)\n  );\n\n  sync_bits #(\n    .NUM_OF_BITS (1),\n    .ASYNC_CLK(ASYNC_CLK)\n  ) i_link_reset_done_cdc (\n    .in_bits(~reset),\n    .out_clk(device_clk),\n    .out_resetn(~device_reset),\n    .out_bits(link_reset_n)\n  );\n\n  sync_event #(\n    .NUM_OF_EVENTS (1)\n  ) i_sync_lmfc (\n    .in_clk(device_clk),\n    .in_event(device_lmfc_edge & link_reset_n),\n    .out_clk(clk),\n    .out_event(lmfc_edge_synced)\n  );\n\n  always @(posedge clk) begin\n    if (reset) begin\n      link_lmfc_reset <= 1'b1;\n    end else if (lmfc_edge_synced) begin\n      link_lmfc_reset <= 1'b0;\n    end\n  end\n\n  jesd204_tx_gearbox #(\n    .IN_DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH),\n    .OUT_DATA_PATH_WIDTH(DATA_PATH_WIDTH),\n    .NUM_LANES(NUM_LANES),\n    .DEPTH(8)\n  ) i_tx_gearbox(\n    .link_clk(clk),\n    .reset(reset),\n    .device_clk(device_clk),\n    .device_reset(device_reset),\n    .device_data(tx_data),\n    .device_lmfc_edge(device_lmfc_edge_d1),\n    .link_data(gearbox_data),\n    .output_ready(tx_ready_nx)\n  );\n\n  always @(posedge device_clk) begin\n    device_lmfc_edge_d1 <= device_lmfc_edge;\n  end\n\n  sync_bits #(\n    .NUM_OF_BITS (1),\n    .ASYNC_CLK(ASYNC_CLK)\n  ) i_next_mf_ready_cdc (\n    .in_bits(tx_next_mf_ready),\n    .out_clk(device_clk),\n    .out_resetn(1'b1),\n    .out_bits(device_tx_next_mf_ready)\n  );\n\n  always @(posedge device_clk) begin\n    if (device_reset) begin\n      device_tx_ready <= 1'b0;\n    end else if (device_lmfc_edge & device_tx_next_mf_ready) begin\n      device_tx_ready <= 1'b1;\n    end\n  end\n\n  jesd204_frame_mark #(\n    .DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH)\n  ) i_device_frame_mark (\n    .clk(device_clk),\n    .reset(~device_tx_ready),\n    .cfg_octets_per_multiframe(device_cfg_octets_per_multiframe),\n    .cfg_beats_per_multiframe(device_cfg_beats_per_multiframe_s),\n    .cfg_octets_per_frame(device_cfg_octets_per_frame),\n    .sof(tx_sof),\n    .eof(tx_eof),\n    .somf(tx_somf),\n    .eomf(tx_eomf)\n  );\n\n  assign tx_ready = device_tx_ready;\n\nend else begin\n  assign link_lmfc_edge = device_lmfc_edge;\n  assign link_lmfc_clk = device_lmfc_clk;\n  assign lmc_edge = device_lmc_edge;\n  assign lmc_quarter_edge = device_lmc_quarter_edge;\n  assign eoemb = device_eoemb;\n  assign gearbox_data = tx_data;\n\n  assign tx_sof = (LINK_MODE == 1) ? tx_sof_fm_d2 : tx_sof_fm;\n  assign tx_eof = (LINK_MODE == 1) ? tx_eof_fm_d2 : tx_eof_fm;\n  assign tx_somf = (LINK_MODE == 1) ? tx_somf_fm_d2 : tx_somf_fm;\n  assign tx_eomf = (LINK_MODE == 1) ? tx_eomf_fm_d2 : tx_eomf_fm;\n  assign tx_ready = link_tx_ready;\n\nend\nendgenerate\n\nassign lmfc_edge = device_lmfc_edge;\nassign lmfc_clk = device_lmfc_clk;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[210, "if (ASYNC_CLK) begin : dual_lmfc_mode\n"], [212, "  reg link_lmfc_reset = 1'b1;\n"], [213, "  reg device_lmfc_edge_d1 = 1'b0;\n"], [214, "  reg device_tx_ready = 1'b0;\n"], [218, "    .DATA_PATH_WIDTH(DATA_PATH_WIDTH)\n"], [219, "  ) i_link_lmfc (\n"], [220, "    .clk(clk),\n"], [221, "    .reset(link_lmfc_reset),\n"], [223, "    .cfg_octets_per_multiframe(cfg_octets_per_multiframe),\n"], [224, "    .cfg_lmfc_offset('h0),\n"], [225, "    .cfg_beats_per_multiframe(cfg_beats_per_multiframe),\n"], [226, "    .cfg_sysref_oneshot(1'b0),\n"], [227, "    .cfg_sysref_disable(1'b1),\n"], [231, "    .sysref_edge(),\n"], [232, "    .sysref_alignment_error(),\n"], [234, "    .lmfc_edge(link_lmfc_edge),\n"], [235, "    .lmfc_clk(link_lmfc_clk),\n"], [237, "    .lmc_edge(lmc_edge),\n"], [238, "    .lmc_quarter_edge(lmc_quarter_edge),\n"], [239, "    .eoemb(eoemb)\n"], [240, "  );\n"], [242, "  sync_bits #(\n"], [243, "    .NUM_OF_BITS (1),\n"], [244, "    .ASYNC_CLK(ASYNC_CLK)\n"], [245, "  ) i_link_reset_done_cdc (\n"], [246, "    .in_bits(~reset),\n"], [247, "    .out_clk(device_clk),\n"], [248, "    .out_resetn(~device_reset),\n"], [249, "    .out_bits(link_reset_n)\n"], [250, "  );\n"], [252, "  sync_event #(\n"], [253, "    .NUM_OF_EVENTS (1)\n"], [254, "  ) i_sync_lmfc (\n"], [255, "    .in_clk(device_clk),\n"], [256, "    .in_event(device_lmfc_edge & link_reset_n),\n"], [257, "    .out_clk(clk),\n"], [258, "    .out_event(lmfc_edge_synced)\n"], [259, "  );\n"], [261, "  always @(posedge clk) begin\n"], [262, "    if (reset) begin\n"], [263, "      link_lmfc_reset <= 1'b1;\n"], [264, "    end else if (lmfc_edge_synced) begin\n"], [265, "      link_lmfc_reset <= 1'b0;\n"], [267, "  end\n"], [269, "  jesd204_tx_gearbox #(\n"], [270, "    .IN_DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH),\n"], [271, "    .OUT_DATA_PATH_WIDTH(DATA_PATH_WIDTH),\n"], [272, "    .NUM_LANES(NUM_LANES),\n"], [273, "    .DEPTH(8)\n"], [274, "  ) i_tx_gearbox(\n"], [275, "    .link_clk(clk),\n"], [276, "    .reset(reset),\n"], [277, "    .device_clk(device_clk),\n"], [278, "    .device_reset(device_reset),\n"], [279, "    .device_data(tx_data),\n"], [280, "    .device_lmfc_edge(device_lmfc_edge_d1),\n"], [281, "    .link_data(gearbox_data),\n"], [282, "    .output_ready(tx_ready_nx)\n"], [283, "  );\n"], [285, "  always @(posedge device_clk) begin\n"], [286, "    device_lmfc_edge_d1 <= device_lmfc_edge;\n"], [287, "  end\n"], [289, "  sync_bits #(\n"], [290, "    .NUM_OF_BITS (1),\n"], [291, "    .ASYNC_CLK(ASYNC_CLK)\n"], [292, "  ) i_next_mf_ready_cdc (\n"], [293, "    .in_bits(tx_next_mf_ready),\n"], [294, "    .out_clk(device_clk),\n"], [295, "    .out_resetn(1'b1),\n"], [296, "    .out_bits(device_tx_next_mf_ready)\n"], [297, "  );\n"], [299, "  always @(posedge device_clk) begin\n"], [300, "    if (device_reset) begin\n"], [301, "      device_tx_ready <= 1'b0;\n"], [302, "    end else if (device_lmfc_edge & device_tx_next_mf_ready) begin\n"], [303, "      device_tx_ready <= 1'b1;\n"], [307, "  jesd204_frame_mark #(\n"], [308, "    .DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH)\n"], [309, "  ) i_device_frame_mark (\n"], [310, "    .clk(device_clk),\n"], [311, "    .reset(~device_tx_ready),\n"], [312, "    .cfg_octets_per_multiframe(device_cfg_octets_per_multiframe),\n"], [313, "    .cfg_beats_per_multiframe(device_cfg_beats_per_multiframe_s),\n"], [314, "    .cfg_octets_per_frame(device_cfg_octets_per_frame),\n"], [315, "    .sof(tx_sof),\n"], [316, "    .eof(tx_eof),\n"], [317, "    .somf(tx_somf),\n"], [318, "    .eomf(tx_eomf)\n"], [319, "  );\n"], [321, "  assign tx_ready = device_tx_ready;\n"], [323, "end else begin\n"], [324, "  assign link_lmfc_edge = device_lmfc_edge;\n"], [325, "  assign link_lmfc_clk = device_lmfc_clk;\n"], [326, "  assign lmc_edge = device_lmc_edge;\n"], [327, "  assign lmc_quarter_edge = device_lmc_quarter_edge;\n"], [328, "  assign eoemb = device_eoemb;\n"], [329, "  assign gearbox_data = tx_data;\n"], [331, "  assign tx_sof = (LINK_MODE == 1) ? tx_sof_fm_d2 : tx_sof_fm;\n"], [332, "  assign tx_eof = (LINK_MODE == 1) ? tx_eof_fm_d2 : tx_eof_fm;\n"], [333, "  assign tx_somf = (LINK_MODE == 1) ? tx_somf_fm_d2 : tx_somf_fm;\n"], [334, "  assign tx_eomf = (LINK_MODE == 1) ? tx_eomf_fm_d2 : tx_eomf_fm;\n"], [335, "  assign tx_ready = link_tx_ready;\n"], [337, "end\n"]], "Add": [[214, "  localparam MAX_OCTETS_PER_FRAME = 32;\n"], [214, "  localparam MAX_OCTETS_PER_MULTIFRAME =\n"], [214, "    (MAX_OCTETS_PER_FRAME * 32) > 1024 ? 1024 : (MAX_OCTETS_PER_FRAME * 32);\n"], [214, "  localparam MAX_BEATS_PER_MULTIFRAME = MAX_OCTETS_PER_MULTIFRAME / DATA_PATH_WIDTH;\n"], [214, "  localparam DPW_LOG2 = DATA_PATH_WIDTH == 8 ? 3 : DATA_PATH_WIDTH == 4 ? 2 : 1;\n"], [214, "  localparam LMFC_COUNTER_WIDTH = MAX_BEATS_PER_MULTIFRAME > 256 ? 9 :\n"], [214, "    MAX_BEATS_PER_MULTIFRAME > 128 ? 8 :\n"], [214, "    MAX_BEATS_PER_MULTIFRAME > 64 ? 7 :\n"], [214, "    MAX_BEATS_PER_MULTIFRAME > 32 ? 6 :\n"], [214, "    MAX_BEATS_PER_MULTIFRAME > 16 ? 5 :\n"], [214, "    MAX_BEATS_PER_MULTIFRAME > 8 ? 4 :\n"], [214, "    MAX_BEATS_PER_MULTIFRAME > 4 ? 3 :\n"], [214, "    MAX_BEATS_PER_MULTIFRAME > 2 ? 2 : 1;\n"], [214, "  localparam DW = DATA_PATH_WIDTH * 8 * NUM_LANES;\n"], [214, "  localparam CW = DATA_PATH_WIDTH * NUM_LANES;\n"], [214, "  localparam HW = 2 * NUM_LANES;\n"], [214, "  wire [DW-1:0] phy_data_r;\n"], [214, "  wire [CW-1:0] phy_charisk_r;\n"], [214, "  wire [HW-1:0] phy_header_r;\n"], [214, "  wire eof_gen_reset;\n"], [214, "  wire tx_ready_64b_next;\n"], [214, "  reg tx_ready_64b = 1'b0;\n"], [214, "  wire frame_mark_reset;\n"], [214, "  wire [DATA_PATH_WIDTH-1:0] tx_sof_fm;\n"], [214, "  wire [DATA_PATH_WIDTH-1:0] tx_eof_fm;\n"], [214, "  wire [DATA_PATH_WIDTH-1:0] tx_somf_fm;\n"], [214, "  wire [DATA_PATH_WIDTH-1:0] tx_eomf_fm;\n"], [214, "  reg [DATA_PATH_WIDTH-1:0] tx_sof_fm_d1;\n"], [214, "  reg [DATA_PATH_WIDTH-1:0] tx_eof_fm_d1;\n"], [214, "  reg [DATA_PATH_WIDTH-1:0] tx_somf_fm_d1;\n"], [214, "  reg [DATA_PATH_WIDTH-1:0] tx_eomf_fm_d1;\n"], [214, "  reg [DATA_PATH_WIDTH-1:0] tx_sof_fm_d2;\n"], [214, "  reg [DATA_PATH_WIDTH-1:0] tx_eof_fm_d2;\n"], [214, "  reg [DATA_PATH_WIDTH-1:0] tx_somf_fm_d2;\n"], [214, "  reg [DATA_PATH_WIDTH-1:0] tx_eomf_fm_d2;\n"], [214, "  wire lmfc_edge_synced;\n"], [214, "  wire lmc_edge;\n"], [214, "  wire lmc_quarter_edge;\n"], [214, "  wire eoemb;\n"], [214, "  wire [DATA_PATH_WIDTH*8*NUM_LANES-1:0] gearbox_data;\n"], [214, "  wire tx_ready_nx;\n"], [214, "  wire link_lmfc_edge;\n"], [214, "  wire link_lmfc_clk;\n"], [214, "  wire device_lmfc_edge;\n"], [214, "  wire device_lmfc_clk;\n"], [214, "  wire device_lmc_edge;\n"], [214, "  wire device_lmc_quarter_edge;\n"], [214, "  wire device_eoemb;\n"], [214, "  wire tx_next_mf_ready;\n"], [214, "  wire link_tx_ready;\n"], [214, "  wire [7:0] cfg_beats_per_multiframe = cfg_octets_per_multiframe >> DPW_LOG2;\n"], [214, "  wire [7:0] device_cfg_beats_per_multiframe_s;\n"], [214, "  assign device_cfg_beats_per_multiframe_s = (TPL_DATA_PATH_WIDTH == DATA_PATH_WIDTH) ?\n"], [214, "                                     device_cfg_octets_per_multiframe >> DPW_LOG2 :\n"], [214, "                                     device_cfg_beats_per_multiframe;\n"], [221, "    .DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH)\n"], [221, "  ) i_lmfc (\n"], [221, "    .clk(device_clk),\n"], [221, "    .reset(device_reset),\n"], [227, "    .cfg_octets_per_multiframe(device_cfg_octets_per_multiframe),\n"], [227, "    .cfg_lmfc_offset(device_cfg_lmfc_offset),\n"], [227, "    .cfg_beats_per_multiframe(device_cfg_beats_per_multiframe_s),\n"], [227, "    .cfg_sysref_oneshot(device_cfg_sysref_oneshot),\n"], [227, "    .cfg_sysref_disable(device_cfg_sysref_disable),\n"], [232, "    .sysref_edge(device_event_sysref_edge),\n"], [232, "    .sysref_alignment_error(device_event_sysref_alignment_error),\n"], [235, "    .lmfc_edge(device_lmfc_edge),\n"], [235, "    .lmfc_clk(device_lmfc_clk),\n"], [259, "    .lmc_edge(device_lmc_edge),\n"], [259, "    .lmc_quarter_edge(device_lmc_quarter_edge),\n"], [259, "    .eoemb(device_eoemb));\n"], [265, "  generate\n"], [265, "  if (ASYNC_CLK) begin : dual_lmfc_mode\n"], [265, "    reg link_lmfc_reset = 1'b1;\n"], [265, "    reg device_lmfc_edge_d1 = 1'b0;\n"], [265, "    reg device_tx_ready = 1'b0;\n"], [265, "    jesd204_lmfc #(\n"], [265, "      .LINK_MODE(LINK_MODE),\n"], [265, "      .DATA_PATH_WIDTH(DATA_PATH_WIDTH)\n"], [265, "    ) i_link_lmfc (\n"], [265, "      .clk(clk),\n"], [265, "      .reset(link_lmfc_reset),\n"], [265, "      .cfg_octets_per_multiframe(cfg_octets_per_multiframe),\n"], [265, "      .cfg_lmfc_offset('h0),\n"], [265, "      .cfg_beats_per_multiframe(cfg_beats_per_multiframe),\n"], [265, "      .cfg_sysref_oneshot(1'b0),\n"], [265, "      .cfg_sysref_disable(1'b1),\n"], [265, "      .sysref(sysref),\n"], [265, "      .sysref_edge(),\n"], [265, "      .sysref_alignment_error(),\n"], [265, "      .lmfc_edge(link_lmfc_edge),\n"], [265, "      .lmfc_clk(link_lmfc_clk),\n"], [265, "      .lmfc_counter(),\n"], [265, "      .lmc_edge(lmc_edge),\n"], [265, "      .lmc_quarter_edge(lmc_quarter_edge),\n"], [265, "      .eoemb(eoemb));\n"], [265, "    sync_bits #(\n"], [265, "      .NUM_OF_BITS (1),\n"], [265, "      .ASYNC_CLK(ASYNC_CLK)\n"], [265, "    ) i_link_reset_done_cdc (\n"], [265, "      .in_bits(~reset),\n"], [265, "      .out_clk(device_clk),\n"], [265, "      .out_resetn(~device_reset),\n"], [265, "      .out_bits(link_reset_n));\n"], [265, "    sync_event #(\n"], [265, "      .NUM_OF_EVENTS (1)\n"], [265, "    ) i_sync_lmfc (\n"], [265, "      .in_clk(device_clk),\n"], [265, "      .in_event(device_lmfc_edge & link_reset_n),\n"], [265, "      .out_clk(clk),\n"], [265, "      .out_event(lmfc_edge_synced));\n"], [265, "    always @(posedge clk) begin\n"], [265, "      if (reset) begin\n"], [265, "        link_lmfc_reset <= 1'b1;\n"], [265, "      end else if (lmfc_edge_synced) begin\n"], [265, "        link_lmfc_reset <= 1'b0;\n"], [265, "      end\n"], [287, "    jesd204_tx_gearbox #(\n"], [287, "      .IN_DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH),\n"], [287, "      .OUT_DATA_PATH_WIDTH(DATA_PATH_WIDTH),\n"], [287, "      .NUM_LANES(NUM_LANES),\n"], [287, "      .DEPTH(8)\n"], [287, "    ) i_tx_gearbox (\n"], [287, "      .link_clk(clk),\n"], [287, "      .reset(reset),\n"], [287, "      .device_clk(device_clk),\n"], [287, "      .device_reset(device_reset),\n"], [287, "      .device_data(tx_data),\n"], [287, "      .device_lmfc_edge(device_lmfc_edge_d1),\n"], [287, "      .link_data(gearbox_data),\n"], [287, "      .output_ready(tx_ready_nx));\n"], [287, "    always @(posedge device_clk) begin\n"], [287, "      device_lmfc_edge_d1 <= device_lmfc_edge;\n"], [287, "    end\n"], [303, "    sync_bits #(\n"], [303, "      .NUM_OF_BITS (1),\n"], [303, "      .ASYNC_CLK(ASYNC_CLK)\n"], [303, "    ) i_next_mf_ready_cdc (\n"], [303, "      .in_bits(tx_next_mf_ready),\n"], [303, "      .out_clk(device_clk),\n"], [303, "      .out_resetn(1'b1),\n"], [303, "      .out_bits(device_tx_next_mf_ready));\n"], [303, "    always @(posedge device_clk) begin\n"], [303, "      if (device_reset) begin\n"], [303, "        device_tx_ready <= 1'b0;\n"], [303, "      end else if (device_lmfc_edge & device_tx_next_mf_ready) begin\n"], [303, "        device_tx_ready <= 1'b1;\n"], [303, "      end\n"], [304, "    jesd204_frame_mark #(\n"], [304, "      .DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH)\n"], [304, "    ) i_device_frame_mark (\n"], [304, "      .clk(device_clk),\n"], [304, "      .reset(~device_tx_ready),\n"], [304, "      .cfg_octets_per_multiframe(device_cfg_octets_per_multiframe),\n"], [304, "      .cfg_beats_per_multiframe(device_cfg_beats_per_multiframe_s),\n"], [304, "      .cfg_octets_per_frame(device_cfg_octets_per_frame),\n"], [304, "      .sof(tx_sof),\n"], [304, "      .eof(tx_eof),\n"], [304, "      .somf(tx_somf),\n"], [304, "      .eomf(tx_eomf));\n"], [304, "    assign tx_ready = device_tx_ready;\n"], [304, "  end else begin\n"], [304, "    assign link_lmfc_edge = device_lmfc_edge;\n"], [304, "    assign link_lmfc_clk = device_lmfc_clk;\n"], [304, "    assign lmc_edge = device_lmc_edge;\n"], [304, "    assign lmc_quarter_edge = device_lmc_quarter_edge;\n"], [304, "    assign eoemb = device_eoemb;\n"], [304, "    assign gearbox_data = tx_data;\n"], [304, "    assign tx_sof = (LINK_MODE == 1) ? tx_sof_fm_d2 : tx_sof_fm;\n"], [304, "    assign tx_eof = (LINK_MODE == 1) ? tx_eof_fm_d2 : tx_eof_fm;\n"], [304, "    assign tx_somf = (LINK_MODE == 1) ? tx_somf_fm_d2 : tx_somf_fm;\n"], [304, "    assign tx_eomf = (LINK_MODE == 1) ? tx_eomf_fm_d2 : tx_eomf_fm;\n"], [304, "    assign tx_ready = link_tx_ready;\n"], [305, "  endgenerate\n"]]}}