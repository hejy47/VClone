Source Block: hdl/library/spi_engine/spi_engine_execution/spi_engine_execution.v@386:398@HdlStmProcess
// the SDI line can be delayed with 1, 2 or 3 SPI core clock cycle.
// Taking the fact that in high SCLK frequencies the pre-scaler most likely will
// be set to 0, to reduce the core clock's speed, this delay will mean that SDI will
// be latched at one of the next consecutive SCLK edge.

always @(posedge clk) begin
  trigger_rx_d <= {trigger_rx_d, trigger_rx};
end

assign trigger_rx_s = trigger_rx_d[SDI_DELAY+1];

// Load the serial data into SDI shift register(s), then link it to the output
// register of the module

Diff Content:
- 391 always @(posedge clk) begin
- 392   trigger_rx_d <= {trigger_rx_d, trigger_rx};
- 393 end
+ 393   always @(posedge clk) begin
+ 393     if (transfer_active == 1'b1 || wait_for_io == 1'b1)
+ 393     begin
+ 393       sdo_t_int <= ~sdo_enabled;
+ 393     end else begin
+ 393       sdo_t_int <= 1'b1;
+ 393     end
+ 393   end

Clone Blocks:
Clone Blocks 1:
hdl/library/spi_engine/spi_engine_execution/spi_engine_execution.v@390:400

always @(posedge clk) begin
  trigger_rx_d <= {trigger_rx_d, trigger_rx};
end

assign trigger_rx_s = trigger_rx_d[SDI_DELAY+1];

// Load the serial data into SDI shift register(s), then link it to the output
// register of the module
// NOTE: ECHO_SCLK mode can be used when the SCLK line is looped back to the FPGA
// through an other level shifter, in order to remove the round-trip timing delays

