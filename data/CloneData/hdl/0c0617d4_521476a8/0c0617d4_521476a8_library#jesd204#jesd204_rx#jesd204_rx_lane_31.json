{"Source Block": ["hdl/library/jesd204/jesd204_rx/jesd204_rx_lane.v@134:166@HdlStmFor", "assign status_frame_align = frame_align;\n\ngenvar i;\ngenerate\n\nfor (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_char\n  assign char[i] = phy_data[i*8+7:i*8];\n  assign char_is_valid[i] = ~(phy_notintable[i] | phy_disperr[i]);\n\n  always @(*) begin\n    char_is_error[i] = ~char_is_valid[i];\n\n    char_is_cgs[i] = 1'b0;\n    charisk28[i] = 1'b0;\n    unexpected_char[i] = 1'b0;\n\n    if (phy_charisk[i] == 1'b1 && char_is_valid[i] == 1'b1) begin\n      if (char[i][4:0] == 'd28) begin\n        charisk28[i] = 1'b1;\n        if (char[i][7:5] == 'd5) begin\n          char_is_cgs[i] = 1'b1;\n        end\n      end else begin\n        unexpected_char[i] = 1'b1;\n      end\n    end\n  end\nend\nendgenerate\n\nalways @(posedge clk) begin\n  if (cgs_ready == 1'b1) begin\n    /*\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[139, "for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_char\n"], [140, "  assign char[i] = phy_data[i*8+7:i*8];\n"], [141, "  assign char_is_valid[i] = ~(phy_notintable[i] | phy_disperr[i]);\n"], [143, "  always @(*) begin\n"], [144, "    char_is_error[i] = ~char_is_valid[i];\n"], [146, "    char_is_cgs[i] = 1'b0;\n"], [147, "    charisk28[i] = 1'b0;\n"], [148, "    unexpected_char[i] = 1'b0;\n"], [150, "    if (phy_charisk[i] == 1'b1 && char_is_valid[i] == 1'b1) begin\n"], [151, "      if (char[i][4:0] == 'd28) begin\n"], [152, "        charisk28[i] = 1'b1;\n"], [153, "        if (char[i][7:5] == 'd5) begin\n"], [154, "          char_is_cgs[i] = 1'b1;\n"], [156, "      end else begin\n"], [157, "        unexpected_char[i] = 1'b1;\n"], [161, "end\n"]], "Add": [[154, "  localparam MAX_DATA_PATH_WIDTH = 8;\n"], [154, "  localparam DPW_LOG2 = DATA_PATH_WIDTH == 8 ? 3 : DATA_PATH_WIDTH == 4 ? 2 : 1;\n"], [154, "  wire [7:0] char[0:DATA_PATH_WIDTH-1];\n"], [154, "  wire [DATA_PATH_WIDTH-1:0] char_is_valid;\n"], [154, "  reg [DATA_PATH_WIDTH-1:0] char_is_cgs = 1'b0;        // K28.5 /K/\n"], [154, "  reg [DATA_PATH_WIDTH-1:0] char_is_error = 1'b0;\n"], [154, "  reg [DATA_PATH_WIDTH-1:0] charisk28 = 4'b0000;\n"], [154, "  wire cgs_beat_is_cgs = &char_is_cgs;\n"], [154, "  wire cgs_beat_has_error = |char_is_error;\n"], [154, "  reg ifs_ready = 1'b0;\n"], [154, "  reg [2:0] frame_align = 'h00;\n"], [154, "  reg [2:0] frame_align_int;\n"], [154, "  wire [DATA_PATH_WIDTH*8-1:0] phy_data_s;\n"], [154, "  wire [DATA_PATH_WIDTH-1:0] charisk28_aligned_s;\n"], [154, "  wire [DATA_PATH_WIDTH*8-1:0] data_aligned_s;\n"], [154, "  wire [DATA_PATH_WIDTH-1:0] charisk28_aligned;\n"], [154, "  wire [DATA_PATH_WIDTH*8-1:0] data_aligned;\n"], [154, "  wire [DATA_PATH_WIDTH*8-1:0] data_replaced;\n"], [154, "  wire [DATA_PATH_WIDTH*8-1:0] data_scrambled_s;\n"], [154, "  wire [DATA_PATH_WIDTH*8-1:0] data_scrambled;\n"], [154, "  reg  [DATA_PATH_WIDTH-1:0] unexpected_char;\n"], [154, "  reg  [DATA_PATH_WIDTH-1:0] phy_char_err;\n"], [154, "  wire ilas_monitor_reset_s;\n"], [154, "  wire ilas_monitor_reset;\n"], [154, "  wire buffer_ready_n_s;\n"], [154, "  reg  [DPW_LOG2:0] jj;\n"], [154, "  reg  align_found;\n"], [154, "  assign status_ifs_ready = ifs_ready;\n"], [154, "  assign status_frame_align = frame_align;\n"], [154, "  genvar i;\n"], [154, "  generate\n"], [154, "  for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_char\n"], [154, "    assign char[i] = phy_data[i*8+7:i*8];\n"], [154, "    assign char_is_valid[i] = ~(phy_notintable[i] | phy_disperr[i]);\n"], [154, "    always @(*) begin\n"], [154, "      char_is_error[i] = ~char_is_valid[i];\n"], [154, "      char_is_cgs[i] = 1'b0;\n"], [154, "      charisk28[i] = 1'b0;\n"], [154, "      unexpected_char[i] = 1'b0;\n"], [154, "      if (phy_charisk[i] == 1'b1 && char_is_valid[i] == 1'b1) begin\n"], [154, "        if (char[i][4:0] == 'd28) begin\n"], [154, "          charisk28[i] = 1'b1;\n"], [154, "          if (char[i][7:5] == 'd5) begin\n"], [154, "            char_is_cgs[i] = 1'b1;\n"], [154, "          end\n"], [154, "        end else begin\n"], [154, "          unexpected_char[i] = 1'b1;\n"]]}}