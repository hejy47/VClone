{"Source Block": ["hdl/library/spi_engine/spi_engine_execution/spi_engine_execution.v@406:578@HdlStmIf", "wire cs_active_s = (inst_d1 == CMD_CHIPSELECT) & ~(&cmd_d1[NUM_OF_CS-1:0]);\ngenvar i;\n\n// NOTE: SPI configuration (CPOL/PHA) is only hardware configurable at this point\ngenerate\nif (ECHO_SCLK == 1) begin : g_echo_sclk_miso_latch\n\n  reg [7:0] sdi_counter_d = 8'b0;\n  reg [7:0] sdi_transfer_counter = 8'b0;\n  reg [7:0] num_of_transfers = 8'b0;\n  reg [(NUM_OF_SDI * DATA_WIDTH)-1:0] sdi_data_latch = {(NUM_OF_SDI * DATA_WIDTH){1'b0}};\n\n  if ((DEFAULT_SPI_CFG[1:0] == 2'b01) || (DEFAULT_SPI_CFG[1:0] == 2'b10)) begin : g_echo_miso_nshift_reg\n\n    // MISO shift register runs on negative echo_sclk\n    for (i=0; i<NUM_OF_SDI; i=i+1) begin: g_sdi_shift_reg\n      reg [DATA_WIDTH-1:0] data_sdi_shift;\n\n      always @(negedge echo_sclk or posedge cs_active_s) begin\n        if (cs_active_s) begin\n          data_sdi_shift <= 0;\n        end else begin\n          data_sdi_shift <= {data_sdi_shift, sdi[i]};\n        end\n      end\n\n      // intended LATCH\n      always @(negedge echo_sclk) begin\n        if (last_sdi_bit)\n          sdi_data_latch[i*DATA_WIDTH+:DATA_WIDTH] <= {data_sdi_shift, sdi[i]};\n      end\n\n    end\n\n    always @(posedge echo_sclk or posedge cs_active_s) begin\n      if (cs_active_s == 1'b1) begin\n        sdi_counter <= 8'b0;\n        sdi_counter_d <= 8'b0;\n      end else begin\n        sdi_counter <= (sdi_counter == word_length-1) ? 8'b0 : sdi_counter + 1'b1;\n        sdi_counter_d <= sdi_counter;\n      end\n    end\n\n  end else begin : g_echo_miso_pshift_reg\n\n    // MISO shift register runs on positive echo_sclk\n    for (i=0; i<NUM_OF_SDI; i=i+1) begin: g_sdi_shift_reg\n      reg [DATA_WIDTH-1:0] data_sdi_shift;\n      always @(posedge echo_sclk or posedge cs_active_s) begin\n        if (cs_active_s) begin\n          data_sdi_shift <= 0;\n        end else begin\n          data_sdi_shift <= {data_sdi_shift, sdi[i]};\n        end\n      end\n      // intended LATCH\n      always @(posedge echo_sclk) begin\n        if (last_sdi_bit)\n          sdi_data_latch[i*DATA_WIDTH+:DATA_WIDTH] <= data_sdi_shift;\n      end\n    end\n\n    always @(posedge echo_sclk or posedge cs_active_s) begin\n      if (cs_active_s == 1'b1) begin\n        sdi_counter <= 8'b0;\n        sdi_counter_d <= 8'b0;\n      end else begin\n        sdi_counter <= (sdi_counter == word_length-1) ? 8'b0 : sdi_counter + 1'b1;\n        sdi_counter_d <= sdi_counter;\n      end\n    end\n\n  end\n\n  assign sdi_data = sdi_data_latch;\n  assign last_sdi_bit = (sdi_counter == 0) && (sdi_counter_d == word_length-1);\n\n  // sdi_data_valid is synchronous to SPI clock, so synchronize the\n  // last_sdi_bit to SPI clock\n\n  reg [3:0] last_sdi_bit_m = 4'b0;\n  always @(posedge clk) begin\n    if (cs_active_s) begin\n      last_sdi_bit_m <= 4'b0;\n    end else begin\n      last_sdi_bit_m <= {last_sdi_bit_m, last_sdi_bit};\n    end\n  end\n\n  always @(posedge clk) begin\n    if (cs_active_s) begin\n      sdi_data_valid <= 1'b0;\n    end else if (sdi_enabled == 1'b1 &&\n                 last_sdi_bit_m[3] == 1'b0 &&\n                 last_sdi_bit_m[2] == 1'b1) begin\n      sdi_data_valid <= 1'b1;\n    end else if (sdi_data_ready == 1'b1) begin\n      sdi_data_valid <= 1'b0;\n    end\n  end\n\n  always @(posedge clk) begin\n    if (cs_active_s) begin\n      num_of_transfers <= 8'b0;\n    end else begin\n      if (cmd_d1[15:12] == 4'b0) begin\n        num_of_transfers <= cmd_d1[7:0] + 1'b1; // cmd_d1 contains the NUM_OF_TRANSFERS - 1\n      end\n    end\n  end\n\n  always @(posedge clk) begin\n    if (cs_active_s) begin\n      sdi_transfer_counter <= 0;\n    end else if (last_sdi_bit_m[2] == 1'b0 &&\n                 last_sdi_bit_m[1] == 1'b1) begin\n      sdi_transfer_counter <= sdi_transfer_counter + 1'b1;\n    end\n  end\n\n  assign end_of_sdi_latch = last_sdi_bit_m[2] & (sdi_transfer_counter == num_of_transfers);\n\nend /* g_echo_sclk_miso_latch */\nelse\nbegin : g_sclk_miso_latch\n\n  assign end_of_sdi_latch = 1'b1;\n\n  for (i=0; i<NUM_OF_SDI; i=i+1) begin: g_sdi_shift_reg\n\n    reg [DATA_WIDTH-1:0] data_sdi_shift;\n\n    always @(posedge clk) begin\n      if (cs_active_s) begin\n        data_sdi_shift <= 0;\n      end else begin\n        if (trigger_rx_s == 1'b1) begin\n          data_sdi_shift <= {data_sdi_shift, sdi[i]};\n        end\n      end\n    end\n\n    assign sdi_data[i*DATA_WIDTH+:DATA_WIDTH] = data_sdi_shift;\n\n  end\n\n  assign last_sdi_bit = (sdi_counter == word_length-1);\n  always @(posedge clk) begin\n    if (resetn == 1'b0) begin\n      sdi_counter <= 8'b0;\n    end else begin\n      if (trigger_rx_s == 1'b1) begin\n        sdi_counter <= last_sdi_bit ? 8'b0 : sdi_counter + 1'b1;\n      end\n    end\n  end\n\n  always @(posedge clk) begin\n    if (resetn == 1'b0)\n      sdi_data_valid <= 1'b0;\n    else if (sdi_enabled == 1'b1 && last_sdi_bit == 1'b1 && trigger_rx_s == 1'b1)\n      sdi_data_valid <= 1'b1;\n    else if (sdi_data_ready == 1'b1)\n      sdi_data_valid <= 1'b0;\n  end\n\nend /* g_sclk_miso_latch */\nendgenerate\n\n// end_of_word will signal the end of a transaction, pushing the command\n// stream execution to the next command. end_of_word in normal mode can be\n// generated using the global bit_counter\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[411, "if (ECHO_SCLK == 1) begin : g_echo_sclk_miso_latch\n"], [413, "  reg [7:0] sdi_counter_d = 8'b0;\n"], [414, "  reg [7:0] sdi_transfer_counter = 8'b0;\n"], [415, "  reg [7:0] num_of_transfers = 8'b0;\n"], [416, "  reg [(NUM_OF_SDI * DATA_WIDTH)-1:0] sdi_data_latch = {(NUM_OF_SDI * DATA_WIDTH){1'b0}};\n"], [418, "  if ((DEFAULT_SPI_CFG[1:0] == 2'b01) || (DEFAULT_SPI_CFG[1:0] == 2'b10)) begin : g_echo_miso_nshift_reg\n"], [421, "    for (i=0; i<NUM_OF_SDI; i=i+1) begin: g_sdi_shift_reg\n"], [422, "      reg [DATA_WIDTH-1:0] data_sdi_shift;\n"], [424, "      always @(negedge echo_sclk or posedge cs_active_s) begin\n"], [425, "        if (cs_active_s) begin\n"], [426, "          data_sdi_shift <= 0;\n"], [428, "          data_sdi_shift <= {data_sdi_shift, sdi[i]};\n"], [433, "      always @(negedge echo_sclk) begin\n"], [434, "        if (last_sdi_bit)\n"], [435, "          sdi_data_latch[i*DATA_WIDTH+:DATA_WIDTH] <= {data_sdi_shift, sdi[i]};\n"], [436, "      end\n"], [438, "    end\n"], [440, "    always @(posedge echo_sclk or posedge cs_active_s) begin\n"], [441, "      if (cs_active_s == 1'b1) begin\n"], [442, "        sdi_counter <= 8'b0;\n"], [443, "        sdi_counter_d <= 8'b0;\n"], [444, "      end else begin\n"], [445, "        sdi_counter <= (sdi_counter == word_length-1) ? 8'b0 : sdi_counter + 1'b1;\n"], [446, "        sdi_counter_d <= sdi_counter;\n"], [448, "    end\n"], [450, "  end else begin : g_echo_miso_pshift_reg\n"], [453, "    for (i=0; i<NUM_OF_SDI; i=i+1) begin: g_sdi_shift_reg\n"], [454, "      reg [DATA_WIDTH-1:0] data_sdi_shift;\n"], [456, "        if (cs_active_s) begin\n"], [457, "          data_sdi_shift <= 0;\n"], [459, "          data_sdi_shift <= {data_sdi_shift, sdi[i]};\n"], [463, "      always @(posedge echo_sclk) begin\n"], [464, "        if (last_sdi_bit)\n"], [465, "          sdi_data_latch[i*DATA_WIDTH+:DATA_WIDTH] <= data_sdi_shift;\n"], [466, "      end\n"], [467, "    end\n"], [469, "    always @(posedge echo_sclk or posedge cs_active_s) begin\n"], [470, "      if (cs_active_s == 1'b1) begin\n"], [471, "        sdi_counter <= 8'b0;\n"], [472, "        sdi_counter_d <= 8'b0;\n"], [473, "      end else begin\n"], [474, "        sdi_counter <= (sdi_counter == word_length-1) ? 8'b0 : sdi_counter + 1'b1;\n"], [475, "        sdi_counter_d <= sdi_counter;\n"], [476, "      end\n"], [479, "  end\n"], [481, "  assign sdi_data = sdi_data_latch;\n"], [482, "  assign last_sdi_bit = (sdi_counter == 0) && (sdi_counter_d == word_length-1);\n"], [487, "  reg [3:0] last_sdi_bit_m = 4'b0;\n"], [488, "  always @(posedge clk) begin\n"], [489, "    if (cs_active_s) begin\n"], [490, "      last_sdi_bit_m <= 4'b0;\n"], [491, "    end else begin\n"], [492, "      last_sdi_bit_m <= {last_sdi_bit_m, last_sdi_bit};\n"], [494, "  end\n"], [496, "  always @(posedge clk) begin\n"], [497, "    if (cs_active_s) begin\n"], [498, "      sdi_data_valid <= 1'b0;\n"], [499, "    end else if (sdi_enabled == 1'b1 &&\n"], [500, "                 last_sdi_bit_m[3] == 1'b0 &&\n"], [501, "                 last_sdi_bit_m[2] == 1'b1) begin\n"], [502, "      sdi_data_valid <= 1'b1;\n"], [503, "    end else if (sdi_data_ready == 1'b1) begin\n"], [504, "      sdi_data_valid <= 1'b0;\n"], [506, "  end\n"], [508, "  always @(posedge clk) begin\n"], [509, "    if (cs_active_s) begin\n"], [510, "      num_of_transfers <= 8'b0;\n"], [511, "    end else begin\n"], [512, "      if (cmd_d1[15:12] == 4'b0) begin\n"], [513, "        num_of_transfers <= cmd_d1[7:0] + 1'b1; // cmd_d1 contains the NUM_OF_TRANSFERS - 1\n"], [516, "  end\n"], [518, "  always @(posedge clk) begin\n"], [519, "    if (cs_active_s) begin\n"], [520, "      sdi_transfer_counter <= 0;\n"], [521, "    end else if (last_sdi_bit_m[2] == 1'b0 &&\n"], [522, "                 last_sdi_bit_m[1] == 1'b1) begin\n"], [523, "      sdi_transfer_counter <= sdi_transfer_counter + 1'b1;\n"], [525, "  end\n"], [527, "  assign end_of_sdi_latch = last_sdi_bit_m[2] & (sdi_transfer_counter == num_of_transfers);\n"], [529, "end /* g_echo_sclk_miso_latch */\n"], [530, "else\n"], [531, "begin : g_sclk_miso_latch\n"], [533, "  assign end_of_sdi_latch = 1'b1;\n"], [535, "  for (i=0; i<NUM_OF_SDI; i=i+1) begin: g_sdi_shift_reg\n"], [537, "    reg [DATA_WIDTH-1:0] data_sdi_shift;\n"], [540, "      if (cs_active_s) begin\n"], [541, "        data_sdi_shift <= 0;\n"], [544, "          data_sdi_shift <= {data_sdi_shift, sdi[i]};\n"], [549, "    assign sdi_data[i*DATA_WIDTH+:DATA_WIDTH] = data_sdi_shift;\n"], [551, "  end\n"], [553, "  assign last_sdi_bit = (sdi_counter == word_length-1);\n"], [555, "    if (resetn == 1'b0) begin\n"], [556, "      sdi_counter <= 8'b0;\n"], [558, "      if (trigger_rx_s == 1'b1) begin\n"], [559, "        sdi_counter <= last_sdi_bit ? 8'b0 : sdi_counter + 1'b1;\n"], [560, "      end\n"], [565, "    if (resetn == 1'b0)\n"], [566, "      sdi_data_valid <= 1'b0;\n"], [567, "    else if (sdi_enabled == 1'b1 && last_sdi_bit == 1'b1 && trigger_rx_s == 1'b1)\n"], [568, "      sdi_data_valid <= 1'b1;\n"], [569, "    else if (sdi_data_ready == 1'b1)\n"], [570, "      sdi_data_valid <= 1'b0;\n"], [571, "  end\n"], [573, "end /* g_sclk_miso_latch */\n"]], "Add": [[411, "  always @(posedge clk) begin\n"], [411, "    trigger_rx_d <= {trigger_rx_d, trigger_rx};\n"], [411, "  end\n"], [416, "  assign trigger_rx_s = trigger_rx_d[SDI_DELAY+1];\n"], [416, "  wire cs_active_s = (inst_d1 == CMD_CHIPSELECT) & ~(&cmd_d1[NUM_OF_CS-1:0]);\n"], [416, "  genvar i;\n"], [416, "  generate\n"], [416, "  if (ECHO_SCLK == 1) begin : g_echo_sclk_miso_latch\n"], [416, "    reg [7:0] sdi_counter_d = 8'b0;\n"], [416, "    reg [7:0] sdi_transfer_counter = 8'b0;\n"], [416, "    reg [7:0] num_of_transfers = 8'b0;\n"], [416, "    reg [(NUM_OF_SDI * DATA_WIDTH)-1:0] sdi_data_latch = {(NUM_OF_SDI * DATA_WIDTH){1'b0}};\n"], [416, "    if ((DEFAULT_SPI_CFG[1:0] == 2'b01) || (DEFAULT_SPI_CFG[1:0] == 2'b10)) begin : g_echo_miso_nshift_reg\n"], [416, "      for (i=0; i<NUM_OF_SDI; i=i+1) begin: g_sdi_shift_reg\n"], [416, "        reg [DATA_WIDTH-1:0] data_sdi_shift;\n"], [416, "        always @(negedge echo_sclk or posedge cs_active_s) begin\n"], [416, "          if (cs_active_s) begin\n"], [416, "            data_sdi_shift <= 0;\n"], [416, "          end else begin\n"], [416, "            data_sdi_shift <= {data_sdi_shift, sdi[i]};\n"], [416, "          end\n"], [416, "        end\n"], [418, "        always @(negedge echo_sclk) begin\n"], [418, "          if (last_sdi_bit)\n"], [418, "            sdi_data_latch[i*DATA_WIDTH+:DATA_WIDTH] <= {data_sdi_shift, sdi[i]};\n"], [418, "        end\n"], [422, "      end\n"], [426, "      always @(posedge echo_sclk or posedge cs_active_s) begin\n"], [426, "        if (cs_active_s == 1'b1) begin\n"], [426, "          sdi_counter <= 8'b0;\n"], [426, "          sdi_counter_d <= 8'b0;\n"], [428, "          sdi_counter <= (sdi_counter == word_length-1) ? 8'b0 : sdi_counter + 1'b1;\n"], [428, "          sdi_counter_d <= sdi_counter;\n"], [446, "    end else begin : g_echo_miso_pshift_reg\n"], [446, "      for (i=0; i<NUM_OF_SDI; i=i+1) begin: g_sdi_shift_reg\n"], [446, "        reg [DATA_WIDTH-1:0] data_sdi_shift;\n"], [446, "        always @(posedge echo_sclk or posedge cs_active_s) begin\n"], [446, "          if (cs_active_s) begin\n"], [446, "            data_sdi_shift <= 0;\n"], [446, "          end else begin\n"], [446, "            data_sdi_shift <= {data_sdi_shift, sdi[i]};\n"], [446, "          end\n"], [446, "        end\n"], [446, "        always @(posedge echo_sclk) begin\n"], [446, "          if (last_sdi_bit)\n"], [446, "            sdi_data_latch[i*DATA_WIDTH+:DATA_WIDTH] <= data_sdi_shift;\n"], [446, "        end\n"], [457, "        if (cs_active_s == 1'b1) begin\n"], [457, "          sdi_counter <= 8'b0;\n"], [457, "          sdi_counter_d <= 8'b0;\n"], [459, "          sdi_counter <= (sdi_counter == word_length-1) ? 8'b0 : sdi_counter + 1'b1;\n"], [459, "          sdi_counter_d <= sdi_counter;\n"], [479, "    assign sdi_data = sdi_data_latch;\n"], [479, "    assign last_sdi_bit = (sdi_counter == 0) && (sdi_counter_d == word_length-1);\n"], [492, "    reg [3:0] last_sdi_bit_m = 4'b0;\n"], [492, "    always @(posedge clk) begin\n"], [492, "      if (cs_active_s) begin\n"], [492, "        last_sdi_bit_m <= 4'b0;\n"], [492, "      end else begin\n"], [492, "        last_sdi_bit_m <= {last_sdi_bit_m, last_sdi_bit};\n"], [492, "      end\n"], [504, "    always @(posedge clk) begin\n"], [504, "      if (cs_active_s) begin\n"], [504, "        sdi_data_valid <= 1'b0;\n"], [504, "      end else if (sdi_enabled == 1'b1 &&\n"], [504, "                   last_sdi_bit_m[3] == 1'b0 &&\n"], [504, "                   last_sdi_bit_m[2] == 1'b1) begin\n"], [504, "        sdi_data_valid <= 1'b1;\n"], [504, "      end else if (sdi_data_ready == 1'b1) begin\n"], [504, "        sdi_data_valid <= 1'b0;\n"], [504, "      end\n"], [513, "    always @(posedge clk) begin\n"], [513, "      if (cs_active_s) begin\n"], [513, "        num_of_transfers <= 8'b0;\n"], [513, "      end else begin\n"], [513, "        if (cmd_d1[15:12] == 4'b0) begin\n"], [513, "          num_of_transfers <= cmd_d1[7:0] + 1'b1; // cmd_d1 contains the NUM_OF_TRANSFERS - 1\n"], [513, "        end\n"], [523, "    always @(posedge clk) begin\n"], [523, "      if (cs_active_s) begin\n"], [523, "        sdi_transfer_counter <= 0;\n"], [523, "      end else if (last_sdi_bit_m[2] == 1'b0 &&\n"], [523, "                   last_sdi_bit_m[1] == 1'b1) begin\n"], [523, "        sdi_transfer_counter <= sdi_transfer_counter + 1'b1;\n"], [523, "      end\n"], [527, "    assign end_of_sdi_latch = last_sdi_bit_m[2] & (sdi_transfer_counter == num_of_transfers);\n"], [531, "  end /* g_echo_sclk_miso_latch */\n"], [531, "  else\n"], [531, "  begin : g_sclk_miso_latch\n"], [533, "    assign end_of_sdi_latch = 1'b1;\n"], [535, "    for (i=0; i<NUM_OF_SDI; i=i+1) begin: g_sdi_shift_reg\n"], [537, "      reg [DATA_WIDTH-1:0] data_sdi_shift;\n"], [537, "      always @(posedge clk) begin\n"], [537, "        if (cs_active_s) begin\n"], [537, "          data_sdi_shift <= 0;\n"], [537, "        end else begin\n"], [537, "          if (trigger_rx_s == 1'b1) begin\n"], [537, "            data_sdi_shift <= {data_sdi_shift, sdi[i]};\n"], [537, "          end\n"], [537, "        end\n"], [537, "      end\n"], [537, "      assign sdi_data[i*DATA_WIDTH+:DATA_WIDTH] = data_sdi_shift;\n"], [537, "    end\n"], [537, "    assign last_sdi_bit = (sdi_counter == word_length-1);\n"], [541, "      if (resetn == 1'b0) begin\n"], [541, "        sdi_counter <= 8'b0;\n"], [544, "          sdi_counter <= last_sdi_bit ? 8'b0 : sdi_counter + 1'b1;\n"], [549, "    always @(posedge clk) begin\n"], [549, "      if (resetn == 1'b0)\n"], [549, "        sdi_data_valid <= 1'b0;\n"], [549, "      else if (sdi_enabled == 1'b1 && last_sdi_bit == 1'b1 && trigger_rx_s == 1'b1)\n"], [549, "        sdi_data_valid <= 1'b1;\n"], [549, "      else if (sdi_data_ready == 1'b1)\n"], [549, "        sdi_data_valid <= 1'b0;\n"], [549, "    end\n"], [551, "  end /* g_sclk_miso_latch */\n"], [551, "  endgenerate\n"], [551, "  assign last_bit = bit_counter == word_length - 1;\n"], [551, "  assign end_of_word = last_bit == 1'b1 && ntx_rx == 1'b1 && clk_div_last == 1'b1;\n"], [556, "    if (transfer_active == 1'b1) begin\n"], [556, "      sclk_int <= cpol ^ cpha ^ ntx_rx;\n"], [560, "      sclk_int <= cpol;\n"]]}}