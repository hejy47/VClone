{"Source Block": ["hdl/library/axi_dmac/request_arb.v@1093:1111@HdlStmProcess", "    src_req_dest_address_cur <= src_req_dest_address;\n    src_req_xlast_cur <= src_req_xlast;\n  end\nend\n\nalways @(posedge src_clk) begin\n  if (src_resetn == 1'b0) begin\n    src_dest_valid_hs <= 1'b0;\n  end else if (src_req_valid == 1'b1 && src_req_ready == 1'b1) begin\n    src_dest_valid_hs <= 1'b1;\n  end else if (src_dest_ready_hs == 1'b1) begin\n    src_dest_valid_hs <= 1'b0;\n  end\nend\n\n// Forward the descriptor to the destination only after the source decided to\n// do so\nassign src_dest_valid_hs_masked = src_dest_valid_hs == 1'b1 && block_descr_to_dst == 1'b0;\nassign src_req_spltr_ready = src_req_ready && src_dest_ready_hs;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[1098, "always @(posedge src_clk) begin\n"], [1099, "  if (src_resetn == 1'b0) begin\n"], [1100, "    src_dest_valid_hs <= 1'b0;\n"], [1101, "  end else if (src_req_valid == 1'b1 && src_req_ready == 1'b1) begin\n"], [1102, "    src_dest_valid_hs <= 1'b1;\n"], [1103, "  end else if (src_dest_ready_hs == 1'b1) begin\n"], [1104, "    src_dest_valid_hs <= 1'b0;\n"], [1106, "end\n"]], "Add": [[1104, "  sync_bits #(\n"], [1104, "    .NUM_OF_BITS(ID_WIDTH),\n"], [1104, "    .ASYNC_CLK(ASYNC_CLK_DEST_REQ)\n"], [1104, "  ) i_sync_req_response_id (\n"], [1104, "    .out_clk(req_clk),\n"], [1104, "    .out_resetn(1'b1),\n"], [1104, "    .in_bits(dest_response_id),\n"], [1104, "    .out_bits(response_id));\n"], [1104, "  axi_register_slice #(\n"], [1104, "    .DATA_WIDTH(DMA_DATA_WIDTH_SRC + BYTES_PER_BEAT_WIDTH_SRC + 2),\n"], [1104, "    .FORWARD_REGISTERED(AXI_SLICE_SRC),\n"], [1104, "    .BACKWARD_REGISTERED(0)\n"], [1104, "  ) i_src_slice (\n"], [1104, "    .clk(src_clk),\n"], [1104, "    .resetn(src_resetn),\n"], [1104, "    .s_axi_valid(src_valid),\n"], [1104, "    .s_axi_ready(),\n"], [1104, "    .s_axi_data({src_data,src_valid_bytes,src_last,src_partial_burst}),\n"], [1104, "    .m_axi_valid(src_fifo_valid),\n"], [1104, "    .m_axi_ready(1'b1), /* No backpressure */\n"], [1104, "    .m_axi_data({src_fifo_data,src_fifo_valid_bytes,src_fifo_last,src_fifo_partial_burst}));\n"], [1104, "  axi_dmac_burst_memory #(\n"], [1104, "    .DATA_WIDTH_SRC(DMA_DATA_WIDTH_SRC),\n"], [1104, "    .DATA_WIDTH_DEST(DMA_DATA_WIDTH_DEST),\n"], [1104, "    .ID_WIDTH(ID_WIDTH),\n"], [1104, "    .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST),\n"], [1104, "    .ASYNC_CLK(ASYNC_CLK_SRC_DEST),\n"], [1104, "    .BYTES_PER_BEAT_WIDTH_SRC(BYTES_PER_BEAT_WIDTH_SRC),\n"], [1104, "    .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),\n"], [1104, "    .DMA_LENGTH_ALIGN(DMA_LENGTH_ALIGN),\n"], [1104, "    .ENABLE_DIAGNOSTICS_IF(ENABLE_DIAGNOSTICS_IF),\n"], [1104, "    .ALLOW_ASYM_MEM(ALLOW_ASYM_MEM)\n"], [1104, "  ) i_store_and_forward (\n"], [1104, "    .src_clk(src_clk),\n"], [1104, "    .src_reset(~src_resetn),\n"], [1104, "    .src_data_valid(src_fifo_valid),\n"], [1104, "    .src_data(src_fifo_data),\n"], [1104, "    .src_data_last(src_fifo_last),\n"], [1104, "    .src_data_valid_bytes(src_fifo_valid_bytes),\n"], [1104, "    .src_data_partial_burst(src_fifo_partial_burst),\n"], [1104, "    .src_data_request_id(src_data_request_id),\n"], [1104, "    .dest_clk(dest_clk),\n"], [1104, "    .dest_reset(~dest_resetn),\n"], [1104, "    .dest_data_valid(dest_fifo_valid),\n"], [1104, "    .dest_data_ready(dest_fifo_ready),\n"], [1104, "    .dest_data(dest_fifo_data),\n"], [1104, "    .dest_data_last(dest_fifo_last),\n"], [1104, "    .dest_data_strb(dest_fifo_strb),\n"], [1104, "    .dest_burst_info_length(dest_burst_info_length),\n"], [1104, "    .dest_burst_info_partial(dest_burst_info_partial),\n"], [1104, "    .dest_burst_info_id(dest_burst_info_id),\n"], [1104, "    .dest_burst_info_write(dest_burst_info_write),\n"], [1104, "    .dest_request_id(dest_request_id),\n"], [1104, "    .dest_data_request_id(dest_data_request_id),\n"], [1104, "    .dest_data_response_id(dest_data_response_id),\n"], [1104, "    .dest_diag_level_bursts(dest_diag_level_bursts));\n"], [1104, "  axi_register_slice #(\n"], [1104, "    .DATA_WIDTH(DMA_DATA_WIDTH_DEST + DMA_DATA_WIDTH_DEST / 8 + 1),\n"], [1104, "    .FORWARD_REGISTERED(AXI_SLICE_DEST),\n"], [1104, "    .BACKWARD_REGISTERED(AXI_SLICE_DEST)\n"], [1104, "  ) i_dest_slice (\n"], [1104, "    .clk(dest_clk),\n"], [1104, "    .resetn(dest_resetn),\n"], [1104, "    .s_axi_valid(dest_fifo_valid),\n"], [1104, "    .s_axi_ready(dest_fifo_ready),\n"], [1104, "    .s_axi_data({\n"], [1104, "      dest_fifo_last,\n"], [1104, "      dest_fifo_strb,\n"], [1104, "      dest_fifo_data}),\n"], [1104, "    .m_axi_valid(dest_valid),\n"], [1104, "    .m_axi_ready(dest_ready),\n"], [1104, "    .m_axi_data({\n"], [1104, "      dest_last,\n"], [1104, "      dest_strb,\n"], [1104, "      dest_data}));\n"], [1104, "  assign req_gen_valid = req_valid & req_ready;\n"], [1104, "  assign req_src_valid = req_valid & req_ready;\n"], [1104, "  assign req_ready = req_gen_ready & req_src_ready;\n"], [1104, "  util_axis_fifo #(\n"], [1104, "    .DATA_WIDTH(DMA_ADDRESS_WIDTH_DEST + 1),\n"], [1104, "    .ADDRESS_WIDTH(0),\n"], [1104, "    .ASYNC_CLK(ASYNC_CLK_SRC_DEST)\n"], [1104, "  ) i_dest_req_fifo (\n"], [1104, "    .s_axis_aclk(src_clk),\n"], [1104, "    .s_axis_aresetn(src_resetn),\n"], [1104, "    .s_axis_valid(src_dest_valid_hs_masked),\n"], [1104, "    .s_axis_ready(src_dest_ready_hs),\n"], [1104, "    .s_axis_full(),\n"], [1104, "    .s_axis_data({\n"], [1104, "      src_req_dest_address_cur,\n"], [1104, "      src_req_xlast_cur}),\n"], [1104, "    .s_axis_room(),\n"], [1104, "    .m_axis_aclk(dest_clk),\n"], [1104, "    .m_axis_aresetn(dest_resetn),\n"], [1104, "    .m_axis_valid(dest_req_valid),\n"], [1104, "    .m_axis_ready(dest_req_ready),\n"], [1104, "    .m_axis_data({\n"], [1104, "      dest_req_dest_address,\n"], [1104, "      dest_req_xlast}),\n"], [1104, "    .m_axis_level(),\n"], [1104, "    .m_axis_empty());\n"], [1104, "  util_axis_fifo #(\n"], [1104, "    .DATA_WIDTH(DMA_ADDRESS_WIDTH_DEST + DMA_ADDRESS_WIDTH_SRC + BYTES_PER_BURST_WIDTH + 2),\n"], [1104, "    .ADDRESS_WIDTH(0),\n"], [1104, "    .ASYNC_CLK(ASYNC_CLK_REQ_SRC)\n"], [1104, "  ) i_src_req_fifo (\n"], [1104, "    .s_axis_aclk(req_clk),\n"], [1104, "    .s_axis_aresetn(req_resetn),\n"], [1104, "    .s_axis_valid(req_src_valid),\n"], [1104, "    .s_axis_ready(req_src_ready),\n"], [1104, "    .s_axis_full(),\n"], [1104, "    .s_axis_data({\n"], [1104, "      req_dest_address,\n"], [1104, "      req_src_address,\n"], [1104, "      req_length[BYTES_PER_BURST_WIDTH-1:0],\n"], [1104, "      req_sync_transfer_start,\n"], [1104, "      req_xlast}),\n"], [1104, "    .s_axis_room(),\n"], [1104, "    .m_axis_aclk(src_clk),\n"], [1104, "    .m_axis_aresetn(src_resetn),\n"], [1104, "    .m_axis_valid(src_req_spltr_valid),\n"], [1104, "    .m_axis_ready(src_req_spltr_ready),\n"], [1104, "    .m_axis_data({\n"], [1104, "      src_req_dest_address,\n"], [1104, "      src_req_src_address,\n"], [1104, "      src_req_last_burst_length,\n"], [1104, "      src_req_last_beat_bytes,\n"], [1104, "      src_req_sync_transfer_start,\n"], [1104, "      src_req_xlast}),\n"], [1104, "    .m_axis_level(),\n"], [1104, "    .m_axis_empty());\n"], [1104, "  always @(posedge src_clk) begin\n"], [1104, "    if (src_req_valid == 1'b1 && src_req_ready == 1'b1) begin\n"], [1104, "      src_req_dest_address_cur <= src_req_dest_address;\n"], [1104, "      src_req_xlast_cur <= src_req_xlast;\n"], [1104, "    end\n"]]}}