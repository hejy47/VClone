Source Block: hdl/library/axi_dmac/src_axi_mm.v@183:193@HdlStmAssign
  .cache(m_axi_arcache)
);

assign fifo_valid = m_axi_rvalid;
assign fifo_data = m_axi_rdata;
assign fifo_last = m_axi_rlast;

/*
 * There is a requirement that data_id <= address_id (modulo 2**ID_WIDTH).  We
 * know that we will never receive data before we have requested it so there is
 * an implicit dependency between data_id and address_id and no need to

Diff Content:
- 188 assign fifo_last = m_axi_rlast;

Clone Blocks:
Clone Blocks 1:
hdl/library/axi_dmac/src_axi_mm.v@191:207
 * There is a requirement that data_id <= address_id (modulo 2**ID_WIDTH).  We
 * know that we will never receive data before we have requested it so there is
 * an implicit dependency between data_id and address_id and no need to
 * explicitly track it.
 */
always @(posedge m_axi_aclk) begin
  if (m_axi_aresetn == 1'b0) begin
    id <= 'h00;
  end else if (m_axi_rvalid == 1'b1 && m_axi_rlast == 1'b1) begin
    id <= inc_id(id);
  end
end

/*
 * We won't be receiving data before we've requested it and we won't request
 * data unless there is room in the store-and-forward memory.
 */

Clone Blocks 2:
hdl/library/axi_dmac/src_axi_mm.v@182:192
  .prot(m_axi_arprot),
  .cache(m_axi_arcache)
);

assign fifo_valid = m_axi_rvalid;
assign fifo_data = m_axi_rdata;
assign fifo_last = m_axi_rlast;

/*
 * There is a requirement that data_id <= address_id (modulo 2**ID_WIDTH).  We
 * know that we will never receive data before we have requested it so there is

