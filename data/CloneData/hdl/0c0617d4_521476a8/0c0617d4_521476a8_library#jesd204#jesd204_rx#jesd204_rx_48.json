{"Source Block": ["hdl/library/jesd204/jesd204_rx/jesd204_rx.v@334:510@HdlStmIf", "  .in_event(lmfc_edge),\n  .out_clk(clk),\n  .out_event(lmfc_edge_synced)\n);\n\nif (LINK_MODE[0] == 1) begin : mode_8b10b\n\nwire unexpected_lane_state_error;\nreg unexpected_lane_state_error_d = 1'b0;\n\njesd204_rx_ctrl #(\n  .NUM_LANES(NUM_LANES),\n  .NUM_LINKS(NUM_LINKS),\n  .ENABLE_FRAME_ALIGN_ERR_RESET(ENABLE_FRAME_ALIGN_ERR_RESET)\n) i_rx_ctrl (\n  .clk(clk),\n  .reset(reset),\n\n  .cfg_lanes_disable(cfg_lanes_disable),\n  .cfg_links_disable(cfg_links_disable),\n\n  .phy_ready(1'b1),\n  .phy_en_char_align(phy_en_char_align),\n\n  .lmfc_edge(lmfc_edge_synced),\n  .frame_align_err_thresh_met(frame_align_err_thresh_met),\n  .sync(sync),\n\n  .latency_monitor_reset(latency_monitor_reset),\n\n  .cgs_reset(cgs_reset),\n  .cgs_ready(cgs_ready),\n\n  .ifs_reset(ifs_reset),\n\n  .status_state(status_ctrl_state),\n\n  .event_data_phase(event_data_phase)\n);\n\nassign err_statistics_reset = ctrl_err_statistics_reset ||\n                              event_data_phase;\n\nfor (i = 0; i < NUM_LANES; i = i + 1) begin: gen_lane\n\n  localparam D_START = i * DATA_PATH_WIDTH*8;\n  localparam D_STOP = D_START + DATA_PATH_WIDTH*8-1;\n  localparam OD_START = i * TPL_DATA_PATH_WIDTH*8;\n  localparam OD_STOP = OD_START + TPL_DATA_PATH_WIDTH*8-1;\n  localparam C_START = i * DATA_PATH_WIDTH;\n  localparam C_STOP = C_START + DATA_PATH_WIDTH-1;\n\n  jesd204_rx_lane #(\n    .DATA_PATH_WIDTH(DATA_PATH_WIDTH),\n    .TPL_DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH),\n    .CHAR_INFO_REGISTERED(CHAR_INFO_REGISTERED),\n    .ALIGN_MUX_REGISTERED(ALIGN_MUX_REGISTERED),\n    .SCRAMBLER_REGISTERED(SCRAMBLER_REGISTERED),\n    .ELASTIC_BUFFER_SIZE(ELASTIC_BUFFER_SIZE),\n    .ENABLE_FRAME_ALIGN_CHECK(ENABLE_FRAME_ALIGN_CHECK),\n    .ENABLE_CHAR_REPLACE(ENABLE_CHAR_REPLACE),\n    .ASYNC_CLK(ASYNC_CLK)\n  ) i_lane (\n    .clk(clk),\n    .reset(reset),\n\n    .device_clk(device_clk),\n    .device_reset(device_reset),\n\n    .phy_data(phy_data_r[D_STOP:D_START]),\n    .phy_charisk(phy_charisk_r[C_STOP:C_START]),\n    .phy_notintable(phy_notintable_r[C_STOP:C_START]),\n    .phy_disperr(phy_disperr_r[C_STOP:C_START]),\n\n    .cgs_reset(cgs_reset[i]),\n    .cgs_ready(cgs_ready[i]),\n\n    .ifs_reset(ifs_reset[i]),\n\n    .rx_data(rx_data_s[OD_STOP:OD_START]),\n\n    .buffer_release_n(buffer_release_n),\n    .buffer_ready_n(buffer_ready_n[i]),\n\n    .cfg_octets_per_multiframe(cfg_octets_per_multiframe),\n    .cfg_octets_per_frame(cfg_octets_per_frame),\n    .cfg_disable_char_replacement(cfg_disable_char_replacement),\n    .cfg_disable_scrambler(cfg_disable_scrambler),\n\n    .err_statistics_reset(err_statistics_reset),\n    .ctrl_err_statistics_mask(ctrl_err_statistics_mask[2:0]),\n    .status_err_statistics_cnt(status_err_statistics_cnt[32*i+31:32*i]),\n\n    .ilas_config_valid(ilas_config_valid[i]),\n    .ilas_config_addr(ilas_config_addr[2*i+1:2*i]),\n    .ilas_config_data(ilas_config_data[D_STOP:D_START]),\n\n    .status_cgs_state(status_lane_cgs_state[2*i+1:2*i]),\n    .status_ifs_ready(ifs_ready[i]),\n    .status_frame_align(frame_align[3*i+2:3*i]),\n\n    .status_frame_align_err_cnt(status_lane_frame_align_err_cnt[8*i+7:8*i])\n  );\n\n  if(ENABLE_FRAME_ALIGN_CHECK) begin : gen_frame_align_err_thresh\n    always @(posedge clk) begin\n      if (reset) begin\n        frame_align_err_thresh_met[i] <= 1'b0;\n        event_frame_alignment_error_per_lane[i] <= 1'b0;\n      end else begin\n        if (status_lane_frame_align_err_cnt[8*i+7:8*i] >= cfg_frame_align_err_threshold) begin\n          frame_align_err_thresh_met[i] <= cgs_ready[i];\n          event_frame_alignment_error_per_lane[i] <= ~frame_align_err_thresh_met[i];\n        end else begin\n          frame_align_err_thresh_met[i] <= 1'b0;\n          event_frame_alignment_error_per_lane[i] <= 1'b0;\n        end\n      end\n    end\n  end else begin : gen_no_frame_align_err_thresh\n    always @(*) begin\n      frame_align_err_thresh_met[i] <= 1'b0;\n      event_frame_alignment_error_per_lane[i] <= 1'b0;\n    end\n  end\nend\n\nassign event_frame_alignment_error = |event_frame_alignment_error_per_lane;\n\n/* If one of the enabled lanes falls out of DATA phase while the link is in DATA phase\n * report an error event */\nassign unexpected_lane_state_error = |(~(cgs_ready|cfg_lanes_disable)) & &status_ctrl_state;\nalways @(posedge clk) begin\n  unexpected_lane_state_error_d <= unexpected_lane_state_error;\nend\nassign event_unexpected_lane_state_error = unexpected_lane_state_error & ~unexpected_lane_state_error_d;\n\n\n/* Delay matching based on the number of pipeline stages */\nreg [NUM_LANES-1:0] ifs_ready_d1 = 1'b0;\nreg [NUM_LANES-1:0] ifs_ready_d2 = 1'b0;\nreg [NUM_LANES-1:0] ifs_ready_mux;\n\nalways @(posedge clk) begin\n  ifs_ready_d1 <= ifs_ready;\n  ifs_ready_d2 <= ifs_ready_d1;\nend\n\nalways @(*) begin\n  case (SCRAMBLER_REGISTERED + ALIGN_MUX_REGISTERED)\n  1: ifs_ready_mux = ifs_ready_d1;\n  2: ifs_ready_mux = ifs_ready_d2;\n  default: ifs_ready_mux = ifs_ready;\n  endcase\nend\n\njesd204_lane_latency_monitor #(\n  .NUM_LANES(NUM_LANES),\n  .DATA_PATH_WIDTH(DATA_PATH_WIDTH)\n) i_lane_latency_monitor (\n  .clk(clk),\n  .reset(latency_monitor_reset),\n\n  .lane_ready(ifs_ready_mux),\n  .lane_frame_align(frame_align),\n  .lane_latency_ready(status_lane_ifs_ready),\n  .lane_latency(status_lane_latency)\n);\n\nassign status_lane_emb_state = 'b0;\n\nend\n\nif (LINK_MODE[1] == 1) begin : mode_64b66b\n\nwire [NUM_LANES-1:0] emb_lock;\nwire link_buffer_release_n;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[339, "if (LINK_MODE[0] == 1) begin : mode_8b10b\n"], [341, "wire unexpected_lane_state_error;\n"], [342, "reg unexpected_lane_state_error_d = 1'b0;\n"], [344, "jesd204_rx_ctrl #(\n"], [345, "  .NUM_LANES(NUM_LANES),\n"], [346, "  .NUM_LINKS(NUM_LINKS),\n"], [347, "  .ENABLE_FRAME_ALIGN_ERR_RESET(ENABLE_FRAME_ALIGN_ERR_RESET)\n"], [348, ") i_rx_ctrl (\n"], [349, "  .clk(clk),\n"], [350, "  .reset(reset),\n"], [352, "  .cfg_lanes_disable(cfg_lanes_disable),\n"], [353, "  .cfg_links_disable(cfg_links_disable),\n"], [355, "  .phy_ready(1'b1),\n"], [356, "  .phy_en_char_align(phy_en_char_align),\n"], [358, "  .lmfc_edge(lmfc_edge_synced),\n"], [359, "  .frame_align_err_thresh_met(frame_align_err_thresh_met),\n"], [360, "  .sync(sync),\n"], [362, "  .latency_monitor_reset(latency_monitor_reset),\n"], [364, "  .cgs_reset(cgs_reset),\n"], [365, "  .cgs_ready(cgs_ready),\n"], [367, "  .ifs_reset(ifs_reset),\n"], [369, "  .status_state(status_ctrl_state),\n"], [371, "  .event_data_phase(event_data_phase)\n"], [372, ");\n"], [374, "assign err_statistics_reset = ctrl_err_statistics_reset ||\n"], [375, "                              event_data_phase;\n"], [377, "for (i = 0; i < NUM_LANES; i = i + 1) begin: gen_lane\n"], [379, "  localparam D_START = i * DATA_PATH_WIDTH*8;\n"], [380, "  localparam D_STOP = D_START + DATA_PATH_WIDTH*8-1;\n"], [381, "  localparam OD_START = i * TPL_DATA_PATH_WIDTH*8;\n"], [382, "  localparam OD_STOP = OD_START + TPL_DATA_PATH_WIDTH*8-1;\n"], [383, "  localparam C_START = i * DATA_PATH_WIDTH;\n"], [384, "  localparam C_STOP = C_START + DATA_PATH_WIDTH-1;\n"], [386, "  jesd204_rx_lane #(\n"], [387, "    .DATA_PATH_WIDTH(DATA_PATH_WIDTH),\n"], [388, "    .TPL_DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH),\n"], [389, "    .CHAR_INFO_REGISTERED(CHAR_INFO_REGISTERED),\n"], [390, "    .ALIGN_MUX_REGISTERED(ALIGN_MUX_REGISTERED),\n"], [391, "    .SCRAMBLER_REGISTERED(SCRAMBLER_REGISTERED),\n"], [392, "    .ELASTIC_BUFFER_SIZE(ELASTIC_BUFFER_SIZE),\n"], [393, "    .ENABLE_FRAME_ALIGN_CHECK(ENABLE_FRAME_ALIGN_CHECK),\n"], [394, "    .ENABLE_CHAR_REPLACE(ENABLE_CHAR_REPLACE),\n"], [395, "    .ASYNC_CLK(ASYNC_CLK)\n"], [396, "  ) i_lane (\n"], [397, "    .clk(clk),\n"], [398, "    .reset(reset),\n"], [400, "    .device_clk(device_clk),\n"], [401, "    .device_reset(device_reset),\n"], [403, "    .phy_data(phy_data_r[D_STOP:D_START]),\n"], [404, "    .phy_charisk(phy_charisk_r[C_STOP:C_START]),\n"], [405, "    .phy_notintable(phy_notintable_r[C_STOP:C_START]),\n"], [406, "    .phy_disperr(phy_disperr_r[C_STOP:C_START]),\n"], [408, "    .cgs_reset(cgs_reset[i]),\n"], [409, "    .cgs_ready(cgs_ready[i]),\n"], [411, "    .ifs_reset(ifs_reset[i]),\n"], [413, "    .rx_data(rx_data_s[OD_STOP:OD_START]),\n"], [415, "    .buffer_release_n(buffer_release_n),\n"], [416, "    .buffer_ready_n(buffer_ready_n[i]),\n"], [418, "    .cfg_octets_per_multiframe(cfg_octets_per_multiframe),\n"], [419, "    .cfg_octets_per_frame(cfg_octets_per_frame),\n"], [420, "    .cfg_disable_char_replacement(cfg_disable_char_replacement),\n"], [421, "    .cfg_disable_scrambler(cfg_disable_scrambler),\n"], [423, "    .err_statistics_reset(err_statistics_reset),\n"], [424, "    .ctrl_err_statistics_mask(ctrl_err_statistics_mask[2:0]),\n"], [425, "    .status_err_statistics_cnt(status_err_statistics_cnt[32*i+31:32*i]),\n"], [427, "    .ilas_config_valid(ilas_config_valid[i]),\n"], [428, "    .ilas_config_addr(ilas_config_addr[2*i+1:2*i]),\n"], [429, "    .ilas_config_data(ilas_config_data[D_STOP:D_START]),\n"], [431, "    .status_cgs_state(status_lane_cgs_state[2*i+1:2*i]),\n"], [432, "    .status_ifs_ready(ifs_ready[i]),\n"], [433, "    .status_frame_align(frame_align[3*i+2:3*i]),\n"], [435, "    .status_frame_align_err_cnt(status_lane_frame_align_err_cnt[8*i+7:8*i])\n"], [436, "  );\n"], [438, "  if(ENABLE_FRAME_ALIGN_CHECK) begin : gen_frame_align_err_thresh\n"], [439, "    always @(posedge clk) begin\n"], [440, "      if (reset) begin\n"], [441, "        frame_align_err_thresh_met[i] <= 1'b0;\n"], [442, "        event_frame_alignment_error_per_lane[i] <= 1'b0;\n"], [443, "      end else begin\n"], [444, "        if (status_lane_frame_align_err_cnt[8*i+7:8*i] >= cfg_frame_align_err_threshold) begin\n"], [445, "          frame_align_err_thresh_met[i] <= cgs_ready[i];\n"], [446, "          event_frame_alignment_error_per_lane[i] <= ~frame_align_err_thresh_met[i];\n"], [447, "        end else begin\n"], [452, "    end\n"], [453, "  end else begin : gen_no_frame_align_err_thresh\n"], [454, "    always @(*) begin\n"], [455, "      frame_align_err_thresh_met[i] <= 1'b0;\n"], [456, "      event_frame_alignment_error_per_lane[i] <= 1'b0;\n"], [459, "end\n"], [461, "assign event_frame_alignment_error = |event_frame_alignment_error_per_lane;\n"], [463, "/* If one of the enabled lanes falls out of DATA phase while the link is in DATA phase\n"], [464, " * report an error event */\n"], [465, "assign unexpected_lane_state_error = |(~(cgs_ready|cfg_lanes_disable)) & &status_ctrl_state;\n"], [466, "always @(posedge clk) begin\n"], [467, "  unexpected_lane_state_error_d <= unexpected_lane_state_error;\n"], [468, "end\n"], [469, "assign event_unexpected_lane_state_error = unexpected_lane_state_error & ~unexpected_lane_state_error_d;\n"], [472, "/* Delay matching based on the number of pipeline stages */\n"], [473, "reg [NUM_LANES-1:0] ifs_ready_d1 = 1'b0;\n"], [474, "reg [NUM_LANES-1:0] ifs_ready_d2 = 1'b0;\n"], [475, "reg [NUM_LANES-1:0] ifs_ready_mux;\n"], [477, "always @(posedge clk) begin\n"], [478, "  ifs_ready_d1 <= ifs_ready;\n"], [479, "  ifs_ready_d2 <= ifs_ready_d1;\n"], [480, "end\n"], [482, "always @(*) begin\n"], [483, "  case (SCRAMBLER_REGISTERED + ALIGN_MUX_REGISTERED)\n"], [484, "  1: ifs_ready_mux = ifs_ready_d1;\n"], [485, "  2: ifs_ready_mux = ifs_ready_d2;\n"], [486, "  default: ifs_ready_mux = ifs_ready;\n"], [487, "  endcase\n"], [488, "end\n"], [490, "jesd204_lane_latency_monitor #(\n"], [491, "  .NUM_LANES(NUM_LANES),\n"], [492, "  .DATA_PATH_WIDTH(DATA_PATH_WIDTH)\n"], [493, ") i_lane_latency_monitor (\n"], [494, "  .clk(clk),\n"], [495, "  .reset(latency_monitor_reset),\n"], [497, "  .lane_ready(ifs_ready_mux),\n"], [498, "  .lane_frame_align(frame_align),\n"], [499, "  .lane_latency_ready(status_lane_ifs_ready),\n"], [500, "  .lane_latency(status_lane_latency)\n"], [501, ");\n"], [503, "assign status_lane_emb_state = 'b0;\n"], [505, "end\n"]], "Add": [[339, "    .cfg_lanes_disable (cfg_lanes_disable),\n"], [339, "    .cfg_links_disable (cfg_links_disable),\n"], [342, "    .phy_ready (1'b1),\n"], [342, "    .phy_en_char_align (phy_en_char_align),\n"], [350, "    .lmfc_edge (lmfc_edge_synced),\n"], [350, "    .frame_align_err_thresh_met (frame_align_err_thresh_met),\n"], [350, "    .sync (sync),\n"], [353, "    .latency_monitor_reset (latency_monitor_reset),\n"], [356, "    .cgs_reset (cgs_reset),\n"], [356, "    .cgs_ready (cgs_ready),\n"], [360, "    .ifs_reset (ifs_reset),\n"], [362, "    .status_state (status_ctrl_state),\n"], [365, "    .event_data_phase (event_data_phase));\n"], [367, "  assign err_statistics_reset = ctrl_err_statistics_reset ||\n"], [367, "                                event_data_phase;\n"], [369, "  for (i = 0; i < NUM_LANES; i = i + 1) begin: gen_lane\n"], [372, "    localparam D_START = i * DATA_PATH_WIDTH*8;\n"], [372, "    localparam D_STOP = D_START + DATA_PATH_WIDTH*8-1;\n"], [372, "    localparam OD_START = i * TPL_DATA_PATH_WIDTH*8;\n"], [372, "    localparam OD_STOP = OD_START + TPL_DATA_PATH_WIDTH*8-1;\n"], [372, "    localparam C_START = i * DATA_PATH_WIDTH;\n"], [372, "    localparam C_STOP = C_START + DATA_PATH_WIDTH-1;\n"], [398, "    jesd204_rx_lane #(\n"], [398, "      .DATA_PATH_WIDTH(DATA_PATH_WIDTH),\n"], [398, "      .TPL_DATA_PATH_WIDTH(TPL_DATA_PATH_WIDTH),\n"], [398, "      .CHAR_INFO_REGISTERED(CHAR_INFO_REGISTERED),\n"], [398, "      .ALIGN_MUX_REGISTERED(ALIGN_MUX_REGISTERED),\n"], [398, "      .SCRAMBLER_REGISTERED(SCRAMBLER_REGISTERED),\n"], [398, "      .ELASTIC_BUFFER_SIZE(ELASTIC_BUFFER_SIZE),\n"], [398, "      .ENABLE_FRAME_ALIGN_CHECK(ENABLE_FRAME_ALIGN_CHECK),\n"], [398, "      .ENABLE_CHAR_REPLACE(ENABLE_CHAR_REPLACE),\n"], [398, "      .ASYNC_CLK(ASYNC_CLK)\n"], [398, "    ) i_lane (\n"], [398, "      .clk(clk),\n"], [398, "      .reset(reset),\n"], [401, "      .device_clk(device_clk),\n"], [401, "      .device_reset(device_reset),\n"], [406, "      .phy_data(phy_data_r[D_STOP:D_START]),\n"], [406, "      .phy_charisk(phy_charisk_r[C_STOP:C_START]),\n"], [406, "      .phy_notintable(phy_notintable_r[C_STOP:C_START]),\n"], [406, "      .phy_disperr(phy_disperr_r[C_STOP:C_START]),\n"], [409, "      .cgs_reset(cgs_reset[i]),\n"], [409, "      .cgs_ready(cgs_ready[i]),\n"], [411, "      .ifs_reset(ifs_reset[i]),\n"], [413, "      .rx_data(rx_data_s[OD_STOP:OD_START]),\n"], [416, "      .buffer_release_n(buffer_release_n),\n"], [416, "      .buffer_ready_n(buffer_ready_n[i]),\n"], [421, "      .cfg_octets_per_multiframe(cfg_octets_per_multiframe),\n"], [421, "      .cfg_octets_per_frame(cfg_octets_per_frame),\n"], [421, "      .cfg_disable_char_replacement(cfg_disable_char_replacement),\n"], [421, "      .cfg_disable_scrambler(cfg_disable_scrambler),\n"], [425, "      .err_statistics_reset(err_statistics_reset),\n"], [425, "      .ctrl_err_statistics_mask(ctrl_err_statistics_mask[2:0]),\n"], [425, "      .status_err_statistics_cnt(status_err_statistics_cnt[32*i+31:32*i]),\n"], [429, "      .ilas_config_valid(ilas_config_valid[i]),\n"], [429, "      .ilas_config_addr(ilas_config_addr[2*i+1:2*i]),\n"], [429, "      .ilas_config_data(ilas_config_data[D_STOP:D_START]),\n"], [433, "      .status_cgs_state(status_lane_cgs_state[2*i+1:2*i]),\n"], [433, "      .status_ifs_ready(ifs_ready[i]),\n"], [433, "      .status_frame_align(frame_align[3*i+2:3*i]),\n"], [436, "      .status_frame_align_err_cnt(status_lane_frame_align_err_cnt[8*i+7:8*i]));\n"], [447, "    if(ENABLE_FRAME_ALIGN_CHECK) begin : gen_frame_align_err_thresh\n"], [447, "      always @(posedge clk) begin\n"], [447, "        if (reset) begin\n"], [449, "        end else begin\n"], [449, "          if (status_lane_frame_align_err_cnt[8*i+7:8*i] >= cfg_frame_align_err_threshold) begin\n"], [449, "            frame_align_err_thresh_met[i] <= cgs_ready[i];\n"], [449, "            event_frame_alignment_error_per_lane[i] <= ~frame_align_err_thresh_met[i];\n"], [449, "          end else begin\n"], [449, "            frame_align_err_thresh_met[i] <= 1'b0;\n"], [449, "            event_frame_alignment_error_per_lane[i] <= 1'b0;\n"], [449, "          end\n"], [456, "    end else begin : gen_no_frame_align_err_thresh\n"], [456, "      always @(*) begin\n"], [456, "        frame_align_err_thresh_met[i] <= 1'b0;\n"], [456, "        event_frame_alignment_error_per_lane[i] <= 1'b0;\n"], [456, "      end\n"], [505, "  assign event_frame_alignment_error = |event_frame_alignment_error_per_lane;\n"]]}}