Source Block: hdl/library/util_cic/cic_int.v@53:74@HdlStmFor
assign data_out = state;
assign sum = (data_in & mask) + (state & mask);
generate
genvar i;

for (i = 0; i < NUM_STAGES; i = i + 1) begin
  localparam j = NUM_STAGES - i - 1;
  localparam H = DATA_WIDTH - STAGE_WIDTH * i - 1;
  localparam L = j == 0 ? 0 : DATA_WIDTH - STAGE_WIDTH * (i+1);

  assign mask[H:L] = {{H-L{1'b1}},j != 0 ? ce[j] : 1'b1};

  always @(posedge clk) begin
    if (ce[j] == 1'b1) begin
      state[H:L] <= sum[H:L];
    end
  end
end

endgenerate

endmodule

Diff Content:
- 58 for (i = 0; i < NUM_STAGES; i = i + 1) begin
- 59   localparam j = NUM_STAGES - i - 1;
- 60   localparam H = DATA_WIDTH - STAGE_WIDTH * i - 1;
- 61   localparam L = j == 0 ? 0 : DATA_WIDTH - STAGE_WIDTH * (i+1);
- 63   assign mask[H:L] = {{H-L{1'b1}},j != 0 ? ce[j] : 1'b1};
- 65   always @(posedge clk) begin
- 66     if (ce[j] == 1'b1) begin
- 67       state[H:L] <= sum[H:L];
- 70 end
+ 61   for (i = 0; i < NUM_STAGES; i = i + 1) begin
+ 61     localparam j = NUM_STAGES - i - 1;
+ 61     localparam H = DATA_WIDTH - STAGE_WIDTH * i - 1;
+ 61     localparam L = j == 0 ? 0 : DATA_WIDTH - STAGE_WIDTH * (i+1);
+ 63     assign mask[H:L] = {{H-L{1'b1}},j != 0 ? ce[j] : 1'b1};
+ 67     always @(posedge clk) begin
+ 67       if (ce[j] == 1'b1) begin
+ 67         state[H:L] <= sum[H:L];
+ 67       end

Clone Blocks:
