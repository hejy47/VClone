{"Source Block": ["hdl/library/util_cdc/sync_bits.v@54:79@HdlStmIf", "  input [NUM_OF_BITS-1:0] in_bits,\n  input out_resetn,\n  input out_clk,\n  output [NUM_OF_BITS-1:0] out_bits);\n\ngenerate if (ASYNC_CLK == 1) begin\n  reg [NUM_OF_BITS-1:0] cdc_sync_stage1 = 'h0;\n  reg [NUM_OF_BITS-1:0] cdc_sync_stage2 = 'h0;\n\n  always @(posedge out_clk)\n  begin\n    if (out_resetn == 1'b0) begin\n      cdc_sync_stage1 <= 'b0;\n      cdc_sync_stage2 <= 'b0;\n    end else begin\n      cdc_sync_stage1 <= in_bits;\n      cdc_sync_stage2 <= cdc_sync_stage1;\n    end\n  end\n\n  assign out_bits = cdc_sync_stage2;\nend else begin\n  assign out_bits = in_bits;\nend endgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[59, "generate if (ASYNC_CLK == 1) begin\n"], [60, "  reg [NUM_OF_BITS-1:0] cdc_sync_stage1 = 'h0;\n"], [61, "  reg [NUM_OF_BITS-1:0] cdc_sync_stage2 = 'h0;\n"], [63, "  always @(posedge out_clk)\n"], [64, "  begin\n"], [65, "    if (out_resetn == 1'b0) begin\n"], [66, "      cdc_sync_stage1 <= 'b0;\n"], [67, "      cdc_sync_stage2 <= 'b0;\n"], [68, "    end else begin\n"], [69, "      cdc_sync_stage1 <= in_bits;\n"], [70, "      cdc_sync_stage2 <= cdc_sync_stage1;\n"], [72, "  end\n"], [74, "  assign out_bits = cdc_sync_stage2;\n"], [75, "end else begin\n"], [76, "  assign out_bits = in_bits;\n"], [77, "end endgenerate\n"]], "Add": [[61, "  generate if (ASYNC_CLK == 1) begin\n"], [61, "    reg [NUM_OF_BITS-1:0] cdc_sync_stage1 = 'h0;\n"], [61, "    reg [NUM_OF_BITS-1:0] cdc_sync_stage2 = 'h0;\n"], [70, "    always @(posedge out_clk)\n"], [70, "    begin\n"], [70, "      if (out_resetn == 1'b0) begin\n"], [70, "        cdc_sync_stage1 <= 'b0;\n"], [70, "        cdc_sync_stage2 <= 'b0;\n"], [70, "      end else begin\n"], [70, "        cdc_sync_stage1 <= in_bits;\n"], [70, "        cdc_sync_stage2 <= cdc_sync_stage1;\n"], [70, "      end\n"], [77, "    assign out_bits = cdc_sync_stage2;\n"], [77, "  end else begin\n"], [77, "    assign out_bits = in_bits;\n"], [77, "  end endgenerate\n"]]}}