{"Source Block": ["hdl/library/util_do_ram/util_do_ram.v@223:236@HdlStmProcess", "// <TODO> make this depend on parameter\nreg rd_valid_l1 = 1'b0;\nreg rd_valid_l2 = 1'b0;\nreg rd_last_l1 = 1'b0;\nreg rd_last_l2 = 1'b0;\nalways @(posedge m_axis_aclk) begin\n  rd_valid_l1 <= rd_enable;\n  rd_last_l1 <= rd_last_beat;\nend\n\n// Extra pipeline to be sucked in by the BRAM/URAM output stage\nalways @(posedge m_axis_aclk) begin\n  if (rd_valid_l1)\n    rd_data_l2 <= rd_data;\n"], "Clone Blocks": [["hdl/library/util_do_ram/util_do_ram.v@220:230", "end\n\n// Delay read enable with latency cycles\n// <TODO> make this depend on parameter\nreg rd_valid_l1 = 1'b0;\nreg rd_valid_l2 = 1'b0;\nreg rd_last_l1 = 1'b0;\nreg rd_last_l2 = 1'b0;\nalways @(posedge m_axis_aclk) begin\n  rd_valid_l1 <= rd_enable;\n  rd_last_l1 <= rd_last_beat;\n"], ["hdl/library/util_do_ram/util_do_ram.v@221:231", "\n// Delay read enable with latency cycles\n// <TODO> make this depend on parameter\nreg rd_valid_l1 = 1'b0;\nreg rd_valid_l2 = 1'b0;\nreg rd_last_l1 = 1'b0;\nreg rd_last_l2 = 1'b0;\nalways @(posedge m_axis_aclk) begin\n  rd_valid_l1 <= rd_enable;\n  rd_last_l1 <= rd_last_beat;\nend\n"], ["hdl/library/util_do_ram/util_do_ram.v@219:229", "    rd_addr <= rd_addr + 1;\nend\n\n// Delay read enable with latency cycles\n// <TODO> make this depend on parameter\nreg rd_valid_l1 = 1'b0;\nreg rd_valid_l2 = 1'b0;\nreg rd_last_l1 = 1'b0;\nreg rd_last_l2 = 1'b0;\nalways @(posedge m_axis_aclk) begin\n  rd_valid_l1 <= rd_enable;\n"], ["hdl/library/util_do_ram/util_do_ram.v@229:242", "  rd_valid_l1 <= rd_enable;\n  rd_last_l1 <= rd_last_beat;\nend\n\n// Extra pipeline to be sucked in by the BRAM/URAM output stage\nalways @(posedge m_axis_aclk) begin\n  if (rd_valid_l1)\n    rd_data_l2 <= rd_data;\n end\n\n always @(posedge m_axis_aclk) begin\n  if (rd_valid_l1)\n    rd_valid_l2 <= 1'b1;\n  else if (rd_fifo_s_ready)\n"], ["hdl/library/util_do_ram/util_do_ram.v@222:232", "// Delay read enable with latency cycles\n// <TODO> make this depend on parameter\nreg rd_valid_l1 = 1'b0;\nreg rd_valid_l2 = 1'b0;\nreg rd_last_l1 = 1'b0;\nreg rd_last_l2 = 1'b0;\nalways @(posedge m_axis_aclk) begin\n  rd_valid_l1 <= rd_enable;\n  rd_last_l1 <= rd_last_beat;\nend\n\n"]], "Diff Content": {"Delete": [[228, "always @(posedge m_axis_aclk) begin\n"], [229, "  rd_valid_l1 <= rd_enable;\n"], [230, "  rd_last_l1 <= rd_last_beat;\n"], [231, "end\n"]], "Add": []}}