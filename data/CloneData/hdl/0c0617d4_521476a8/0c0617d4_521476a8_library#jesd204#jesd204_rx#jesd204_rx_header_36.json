{"Source Block": ["hdl/library/jesd204/jesd204_rx/jesd204_rx_header.v@176:186@HdlStmAssign", "      end\n  endcase\n  if (sh_lock == 1'b0) next_state = STATE_EMB_INIT;\nend\n\nassign invalid_eoemb = (sh_count == 0 && ~eoemb);\nassign invalid_eomb = (sh_count[4:0] == 0 && ~eomb);\nassign valid_eomb = next_state[BIT_EMB_LOCK] && eomb;\nassign valid_eoemb = next_state[BIT_EMB_LOCK] && eoemb;\n\nassign invalid_sequence = (invalid_eoemb || invalid_eomb);\n"], "Clone Blocks": [["hdl/library/jesd204/jesd204_rx/jesd204_rx_header.v@179:189", "end\n\nassign invalid_eoemb = (sh_count == 0 && ~eoemb);\nassign invalid_eomb = (sh_count[4:0] == 0 && ~eomb);\nassign valid_eomb = next_state[BIT_EMB_LOCK] && eomb;\nassign valid_eoemb = next_state[BIT_EMB_LOCK] && eoemb;\n\nassign invalid_sequence = (invalid_eoemb || invalid_eomb);\n\nalways @(posedge clk) begin\n  if (reset == 1'b1) begin\n"], ["hdl/library/jesd204/jesd204_rx/jesd204_rx_header.v@178:188", "  if (sh_lock == 1'b0) next_state = STATE_EMB_INIT;\nend\n\nassign invalid_eoemb = (sh_count == 0 && ~eoemb);\nassign invalid_eomb = (sh_count[4:0] == 0 && ~eomb);\nassign valid_eomb = next_state[BIT_EMB_LOCK] && eomb;\nassign valid_eoemb = next_state[BIT_EMB_LOCK] && eoemb;\n\nassign invalid_sequence = (invalid_eoemb || invalid_eomb);\n\nalways @(posedge clk) begin\n"], ["hdl/library/jesd204/jesd204_rx/jesd204_rx_header.v@181:191", "assign invalid_eoemb = (sh_count == 0 && ~eoemb);\nassign invalid_eomb = (sh_count[4:0] == 0 && ~eomb);\nassign valid_eomb = next_state[BIT_EMB_LOCK] && eomb;\nassign valid_eoemb = next_state[BIT_EMB_LOCK] && eoemb;\n\nassign invalid_sequence = (invalid_eoemb || invalid_eomb);\n\nalways @(posedge clk) begin\n  if (reset == 1'b1) begin\n    state <= STATE_EMB_INIT;\n  end else begin\n"], ["hdl/library/jesd204/jesd204_rx/jesd204_rx_header.v@177:187", "  endcase\n  if (sh_lock == 1'b0) next_state = STATE_EMB_INIT;\nend\n\nassign invalid_eoemb = (sh_count == 0 && ~eoemb);\nassign invalid_eomb = (sh_count[4:0] == 0 && ~eomb);\nassign valid_eomb = next_state[BIT_EMB_LOCK] && eomb;\nassign valid_eoemb = next_state[BIT_EMB_LOCK] && eoemb;\n\nassign invalid_sequence = (invalid_eoemb || invalid_eomb);\n\n"]], "Diff Content": {"Delete": [[181, "assign invalid_eoemb = (sh_count == 0 && ~eoemb);\n"]], "Add": []}}