{"Source Block": ["hdl/library/jesd204/jesd204_rx/jesd204_rx_frame_align.v@110:148@HdlStmFor", "  .eomf                       (eomf)\n);\n\ngenvar ii;\ngenerate\nfor (ii = 0; ii < DATA_PATH_WIDTH; ii = ii + 1) begin: gen_k_char\n  always @(*) begin\n    char_is_a[ii] = 1'b0;\n    char_is_f[ii] = 1'b0;\n\n    if(charisk28[ii]) begin\n      if(data[ii*8+7:ii*8+5] == 3'd3) begin\n        char_is_a[ii] = 1'b1;\n      end\n      if(data[ii*8+7:ii*8+5] == 3'd7) begin\n        char_is_f[ii] = 1'b1;\n      end\n    end\n  end\n\n  always @(posedge clk) begin\n    if(reset) begin\n      eomf_err[ii] <= 1'b0;\n      eomf_good[ii] <= 1'b0;\n      eof_err[ii] <= 1'b0;\n      eof_good[ii] <= 1'b0;\n    end else begin\n      eomf_err[ii]  <= char_is_a[ii] && !eomf[ii];\n      eomf_good[ii] <= char_is_a[ii] && eomf[ii];\n      eof_err[ii]   <= char_is_f[ii] && !eof[ii];\n      eof_good[ii]  <= char_is_f[ii] && eof[ii];\n    end\n  end\nend\nendgenerate\n\nalways @(posedge clk) begin\n  if(reset) begin\n    align_good <= 1'b0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[115, "for (ii = 0; ii < DATA_PATH_WIDTH; ii = ii + 1) begin: gen_k_char\n"], [116, "  always @(*) begin\n"], [117, "    char_is_a[ii] = 1'b0;\n"], [118, "    char_is_f[ii] = 1'b0;\n"], [120, "    if(charisk28[ii]) begin\n"], [121, "      if(data[ii*8+7:ii*8+5] == 3'd3) begin\n"], [122, "        char_is_a[ii] = 1'b1;\n"], [124, "      if(data[ii*8+7:ii*8+5] == 3'd7) begin\n"], [125, "        char_is_f[ii] = 1'b1;\n"], [132, "      eomf_err[ii] <= 1'b0;\n"], [133, "      eomf_good[ii] <= 1'b0;\n"], [134, "      eof_err[ii] <= 1'b0;\n"], [135, "      eof_good[ii] <= 1'b0;\n"], [136, "    end else begin\n"], [137, "      eomf_err[ii]  <= char_is_a[ii] && !eomf[ii];\n"], [138, "      eomf_good[ii] <= char_is_a[ii] && eomf[ii];\n"], [139, "      eof_err[ii]   <= char_is_f[ii] && !eof[ii];\n"], [140, "      eof_good[ii]  <= char_is_f[ii] && eof[ii];\n"], [141, "    end\n"], [142, "  end\n"], [143, "end\n"]], "Add": [[122, "  endfunction\n"], [122, "  reg  [DATA_PATH_WIDTH-1:0]        char_is_a;\n"], [122, "  reg  [DATA_PATH_WIDTH-1:0]        char_is_f;\n"], [122, "  wire [DATA_PATH_WIDTH-1:0]        eof;\n"], [122, "  wire [DATA_PATH_WIDTH-1:0]        eomf;\n"], [122, "  reg  [DATA_PATH_WIDTH-1:0]        eof_err;\n"], [122, "  reg  [DATA_PATH_WIDTH-1:0]        eof_good;\n"], [122, "  reg  [DATA_PATH_WIDTH-1:0]        eomf_err;\n"], [122, "  reg  [DATA_PATH_WIDTH-1:0]        eomf_good;\n"], [122, "  reg                               align_good;\n"], [122, "  reg                               align_err;\n"], [122, "  reg  [DPW_LOG2*2:0]               cur_align_err_cnt;\n"], [122, "  wire [8:0]                        align_err_cnt_next;\n"], [122, "  wire [7:0] cfg_beats_per_multiframe = cfg_octets_per_multiframe>>DPW_LOG2;\n"], [122, "  jesd204_frame_mark #(\n"], [122, "    .DATA_PATH_WIDTH (DATA_PATH_WIDTH)\n"], [122, "  ) i_frame_mark (\n"], [122, "    .clk (clk),\n"], [122, "    .reset (reset),\n"], [122, "    .cfg_octets_per_multiframe (cfg_octets_per_multiframe),\n"], [122, "    .cfg_beats_per_multiframe (cfg_beats_per_multiframe),\n"], [122, "    .cfg_octets_per_frame (cfg_octets_per_frame),\n"], [122, "    .sof (),\n"], [122, "    .eof (eof),\n"], [122, "    .somf (),\n"], [122, "    .eomf (eomf));\n"], [122, "  genvar ii;\n"], [122, "  generate\n"], [122, "  for (ii = 0; ii < DATA_PATH_WIDTH; ii = ii + 1) begin: gen_k_char\n"], [122, "    always @(*) begin\n"], [122, "      char_is_a[ii] = 1'b0;\n"], [122, "      char_is_f[ii] = 1'b0;\n"], [122, "      if(charisk28[ii]) begin\n"], [122, "        if(data[ii*8+7:ii*8+5] == 3'd3) begin\n"], [122, "          char_is_a[ii] = 1'b1;\n"], [122, "        end\n"], [122, "        if(data[ii*8+7:ii*8+5] == 3'd7) begin\n"], [122, "          char_is_f[ii] = 1'b1;\n"], [122, "        end\n"], [125, "    end\n"], [125, "    always @(posedge clk) begin\n"], [125, "      if(reset) begin\n"], [125, "        eomf_err[ii] <= 1'b0;\n"], [125, "        eomf_good[ii] <= 1'b0;\n"], [125, "        eof_err[ii] <= 1'b0;\n"], [125, "        eof_good[ii] <= 1'b0;\n"], [125, "      end else begin\n"], [125, "        eomf_err[ii]  <= char_is_a[ii] && !eomf[ii];\n"], [125, "        eomf_good[ii] <= char_is_a[ii] && eomf[ii];\n"], [125, "        eof_err[ii]   <= char_is_f[ii] && !eof[ii];\n"], [125, "        eof_good[ii]  <= char_is_f[ii] && eof[ii];\n"], [128, "  endgenerate\n"]]}}