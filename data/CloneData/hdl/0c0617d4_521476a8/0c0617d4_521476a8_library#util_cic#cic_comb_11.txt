Source Block: hdl/library/util_cic/cic_comb.v@80:90@HdlIdDef
endgenerate

wire [DATA_WIDTH-1:0] mask;
reg [DATA_WIDTH-1:0] data_in_seq;
wire [DATA_WIDTH-1:0] storage_out;
wire [DATA_WIDTH-1:0] diff = (data_in_seq | ~mask) - (storage_out & mask);

always @(*) begin
  if (ce == 1'b1) begin
    data_in_seq <= data_in;
  end else begin

Diff Content:
- 85 wire [DATA_WIDTH-1:0] diff = (data_in_seq | ~mask) - (storage_out & mask);
+ 85   always @(posedge clk) begin
+ 85     if (ce == 1'b1) begin
+ 85       counter <= SEQ-1;
+ 85       active <= 1'b1;
+ 85     end else if (active == 1'b1) begin
+ 85       counter <= counter - 1'b1;
+ 85       if (counter == 'h1) begin
+ 85         active <= 1'b0;
+ 85       end
+ 85     end
+ 85   end

Clone Blocks:
Clone Blocks 1:
hdl/library/util_cic/cic_comb.v@82:98
wire [DATA_WIDTH-1:0] mask;
reg [DATA_WIDTH-1:0] data_in_seq;
wire [DATA_WIDTH-1:0] storage_out;
wire [DATA_WIDTH-1:0] diff = (data_in_seq | ~mask) - (storage_out & mask);

always @(*) begin
  if (ce == 1'b1) begin
    data_in_seq <= data_in;
  end else begin
    data_in_seq <= SEQ != 1 ? state : 'h00;
  end
end

generate
genvar i, j;

for (j = 0; j < NUM_STAGES; j = j + 1) begin

Clone Blocks 2:
hdl/library/util_cic/cic_comb.v@79:89
end
endgenerate

wire [DATA_WIDTH-1:0] mask;
reg [DATA_WIDTH-1:0] data_in_seq;
wire [DATA_WIDTH-1:0] storage_out;
wire [DATA_WIDTH-1:0] diff = (data_in_seq | ~mask) - (storage_out & mask);

always @(*) begin
  if (ce == 1'b1) begin
    data_in_seq <= data_in;

Clone Blocks 3:
hdl/library/util_cic/cic_comb.v@78:88

end
endgenerate

wire [DATA_WIDTH-1:0] mask;
reg [DATA_WIDTH-1:0] data_in_seq;
wire [DATA_WIDTH-1:0] storage_out;
wire [DATA_WIDTH-1:0] diff = (data_in_seq | ~mask) - (storage_out & mask);

always @(*) begin
  if (ce == 1'b1) begin

Clone Blocks 4:
hdl/library/util_cic/cic_comb.v@77:87
end

end
endgenerate

wire [DATA_WIDTH-1:0] mask;
reg [DATA_WIDTH-1:0] data_in_seq;
wire [DATA_WIDTH-1:0] storage_out;
wire [DATA_WIDTH-1:0] diff = (data_in_seq | ~mask) - (storage_out & mask);

always @(*) begin

