{"Source Block": ["hdl/library/axi_dmac/axi_dmac_reset_manager.v@200:210@HdlIdDef", " * for at least 4 clock cycles of the slowest domain, no matter what. If\n * successive domains have the same clock they'll share their reset signal.\n */\n\nwire [3:0] reset_async_chain;\nwire [3:0] reset_sync_chain;\nwire [2:0] reset_chain_clks = {clk, src_clk, dest_clk};\n\nlocalparam GEN_ASYNC_RESET = {\n  ASYNC_CLK_REQ_SRC ? 1'b1 : 1'b0,\n  ASYNC_CLK_SRC_DEST ? 1'b1 : 1'b0,\n"], "Clone Blocks": [["hdl/library/axi_dmac/axi_dmac_reset_manager.v@199:209", " * Chain the reset through all clock domains. This makes sure that is asserted\n * for at least 4 clock cycles of the slowest domain, no matter what. If\n * successive domains have the same clock they'll share their reset signal.\n */\n\nwire [3:0] reset_async_chain;\nwire [3:0] reset_sync_chain;\nwire [2:0] reset_chain_clks = {clk, src_clk, dest_clk};\n\nlocalparam GEN_ASYNC_RESET = {\n  ASYNC_CLK_REQ_SRC ? 1'b1 : 1'b0,\n"], ["hdl/library/axi_dmac/axi_dmac_reset_manager.v@201:211", " * successive domains have the same clock they'll share their reset signal.\n */\n\nwire [3:0] reset_async_chain;\nwire [3:0] reset_sync_chain;\nwire [2:0] reset_chain_clks = {clk, src_clk, dest_clk};\n\nlocalparam GEN_ASYNC_RESET = {\n  ASYNC_CLK_REQ_SRC ? 1'b1 : 1'b0,\n  ASYNC_CLK_SRC_DEST ? 1'b1 : 1'b0,\n  1'b1\n"]], "Diff Content": {"Delete": [[205, "wire [3:0] reset_sync_chain;\n"]], "Add": []}}