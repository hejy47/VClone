{"Source Block": ["hdl/library/jesd204/jesd204_tx/jesd204_tx.v@461:522@HdlStmIf", "\nassign phy_header_r = 'h0;\n\nend\n\nif (LINK_MODE[1] == 1) begin : mode_64b66b\n\n  for (i = 0; i < NUM_LANES; i = i + 1) begin: gen_lane\n    localparam D_START = i * DATA_PATH_WIDTH*8;\n    localparam D_STOP = D_START + DATA_PATH_WIDTH*8-1;\n    localparam H_START = i * 2;\n    localparam H_STOP = H_START + 2 -1;\n    jesd204_tx_lane_64b i_lane(\n      .clk(clk),\n      .reset(reset),\n\n      .tx_data(gearbox_data[D_STOP:D_START]),\n      .tx_ready(tx_ready_64b),\n\n      .phy_data(phy_data_r[D_STOP:D_START]),\n      .phy_header(phy_header_r[H_STOP:H_START]),\n\n      .lmc_edge(lmc_edge),\n      .lmc_quarter_edge(lmc_quarter_edge),\n      .eoemb(eoemb),\n\n      .cfg_disable_scrambler(cfg_disable_scrambler),\n      .cfg_header_mode(2'b0),\n      .cfg_lane_disable(cfg_lanes_disable[i])\n    );\n  end\n\n  assign tx_ready_64b_next = reset ? 1'b0 : (link_lmfc_edge || tx_ready_64b);\n\n  always @(posedge clk) begin\n    if (reset) begin\n      tx_ready_64b <= 1'b0;\n    end else begin\n      tx_ready_64b <= tx_ready_64b_next;\n    end\n  end\n\n  assign tx_ready_nx = tx_ready_64b_next;\n  assign tx_next_mf_ready = 1'b1;\n\n  assign link_tx_ready = tx_ready_64b;\n  // Link considered in DATA phase when SYSREF received and LEMC clock started\n  // running\n  assign status_state = {2{tx_ready_64b}};\n\n\n  assign phy_charisk_r = 'h0;\n  assign ilas_config_rd = 'h0;\n  assign ilas_config_addr = 'h0;\n  assign status_sync = 'h0;\n\nend\n\nendgenerate\n\npipeline_stage #(\n  .WIDTH(CW + DW + HW),\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[466, "if (LINK_MODE[1] == 1) begin : mode_64b66b\n"], [471, "    localparam H_START = i * 2;\n"], [472, "    localparam H_STOP = H_START + 2 -1;\n"], [473, "    jesd204_tx_lane_64b i_lane(\n"], [475, "      .reset(reset),\n"], [478, "      .tx_ready(tx_ready_64b),\n"], [481, "      .phy_header(phy_header_r[H_STOP:H_START]),\n"], [483, "      .lmc_edge(lmc_edge),\n"], [484, "      .lmc_quarter_edge(lmc_quarter_edge),\n"], [485, "      .eoemb(eoemb),\n"], [487, "      .cfg_disable_scrambler(cfg_disable_scrambler),\n"], [488, "      .cfg_header_mode(2'b0),\n"], [489, "      .cfg_lane_disable(cfg_lanes_disable[i])\n"], [490, "    );\n"], [493, "  assign tx_ready_64b_next = reset ? 1'b0 : (link_lmfc_edge || tx_ready_64b);\n"], [495, "  always @(posedge clk) begin\n"], [496, "    if (reset) begin\n"], [497, "      tx_ready_64b <= 1'b0;\n"], [498, "    end else begin\n"], [499, "      tx_ready_64b <= tx_ready_64b_next;\n"], [503, "  assign tx_ready_nx = tx_ready_64b_next;\n"], [504, "  assign tx_next_mf_ready = 1'b1;\n"], [506, "  assign link_tx_ready = tx_ready_64b;\n"], [509, "  assign status_state = {2{tx_ready_64b}};\n"], [512, "  assign phy_charisk_r = 'h0;\n"], [513, "  assign ilas_config_rd = 'h0;\n"], [514, "  assign ilas_config_addr = 'h0;\n"], [515, "  assign status_sync = 'h0;\n"], [517, "end\n"]], "Add": [[466, "    .status_sync(status_sync),\n"], [466, "    .status_state(status_state));\n"], [473, "    localparam C_START = i * DATA_PATH_WIDTH;\n"], [473, "    localparam C_STOP = C_START + DATA_PATH_WIDTH-1;\n"], [473, "    jesd204_tx_lane #(\n"], [473, "      .DATA_PATH_WIDTH(DATA_PATH_WIDTH),\n"], [473, "      .ENABLE_CHAR_REPLACE(ENABLE_CHAR_REPLACE)\n"], [473, "    ) i_lane (\n"], [475, "      .eof(tx_eof_fm_d3),\n"], [475, "      .eomf(tx_eomf_fm_d3),\n"], [475, "      .cgs_enable(lane_cgs_enable[i]),\n"], [475, "      .ilas_data(ilas_data[D_STOP:D_START]),\n"], [475, "      .ilas_charisk(ilas_charisk[C_STOP:C_START]),\n"], [478, "      .tx_ready(link_tx_ready),\n"], [481, "      .phy_charisk(phy_charisk_r[C_STOP:C_START]),\n"], [485, "      .cfg_octets_per_frame(cfg_octets_per_frame),\n"], [485, "      .cfg_disable_char_replacement(cfg_disable_char_replacement),\n"], [485, "      .cfg_disable_scrambler(cfg_disable_scrambler));\n"], [485, "  end\n"], [485, "  assign phy_header_r = 'h0;\n"], [493, "  if (LINK_MODE[1] == 1) begin : mode_64b66b\n"], [499, "    for (i = 0; i < NUM_LANES; i = i + 1) begin: gen_lane\n"], [499, "      localparam D_START = i * DATA_PATH_WIDTH*8;\n"], [499, "      localparam D_STOP = D_START + DATA_PATH_WIDTH*8-1;\n"], [499, "      localparam H_START = i * 2;\n"], [499, "      localparam H_STOP = H_START + 2 -1;\n"], [499, "      jesd204_tx_lane_64b i_lane(\n"], [499, "        .clk(clk),\n"], [499, "        .reset(reset),\n"], [499, "        .tx_data(gearbox_data[D_STOP:D_START]),\n"], [499, "        .tx_ready(tx_ready_64b),\n"], [499, "        .phy_data(phy_data_r[D_STOP:D_START]),\n"], [499, "        .phy_header(phy_header_r[H_STOP:H_START]),\n"], [499, "        .lmc_edge(lmc_edge),\n"], [499, "        .lmc_quarter_edge(lmc_quarter_edge),\n"], [499, "        .eoemb(eoemb),\n"], [499, "        .cfg_disable_scrambler(cfg_disable_scrambler),\n"], [499, "        .cfg_header_mode(2'b0),\n"], [499, "        .cfg_lane_disable(cfg_lanes_disable[i]));\n"], [500, "    assign tx_ready_64b_next = reset ? 1'b0 : (link_lmfc_edge || tx_ready_64b);\n"], [500, "    always @(posedge clk) begin\n"], [500, "      if (reset) begin\n"], [500, "        tx_ready_64b <= 1'b0;\n"], [500, "      end else begin\n"], [500, "        tx_ready_64b <= tx_ready_64b_next;\n"], [500, "      end\n"], [500, "    end\n"], [500, "    assign tx_ready_nx = tx_ready_64b_next;\n"], [500, "    assign tx_next_mf_ready = 1'b1;\n"], [500, "    assign link_tx_ready = tx_ready_64b;\n"], [500, "    assign status_state = {2{tx_ready_64b}};\n"], [500, "    assign phy_charisk_r = 'h0;\n"], [500, "    assign ilas_config_rd = 'h0;\n"], [500, "    assign ilas_config_addr = 'h0;\n"], [500, "    assign status_sync = 'h0;\n"]]}}