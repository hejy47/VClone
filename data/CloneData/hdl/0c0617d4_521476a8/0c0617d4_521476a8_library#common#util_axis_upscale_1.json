{"Source Block": ["hdl/library/common/util_axis_upscale.v@70:89@HdlStmFor", "  assign type_s = dfmt_enable & dfmt_type;\n  assign signext_s = dfmt_enable & dfmt_se;\n\n  genvar i;\n  generate\n  for (i=1; i <= NUM_OF_CHANNELS; i=i+1) begin : signext_data\n\n    wire sign_s;\n\n    assign sign_s = signext_s & (type_s ^ s_axis_data[(i*DATA_WIDTH-1)]);\n    assign data_out_s[(i*UDATA_WIDTH-1):(i*UDATA_WIDTH-MSB_WIDTH)] = {(MSB_WIDTH){sign_s}};\n    assign data_out_s[((i-1)*UDATA_WIDTH+DATA_WIDTH-1)] = type_s ^ s_axis_data[(i*DATA_WIDTH-1)];\n    assign data_out_s[((i-1)*UDATA_WIDTH+DATA_WIDTH-2):((i-1)*UDATA_WIDTH)] = s_axis_data[(i*DATA_WIDTH-2):((i-1)*DATA_WIDTH)];\n\n  end\n  endgenerate\n\n  always @(posedge clk) begin\n    if (resetn == 1'b0) begin\n      m_axis_valid <= 1'b0;\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[75, "  for (i=1; i <= NUM_OF_CHANNELS; i=i+1) begin : signext_data\n"], [77, "    wire sign_s;\n"], [79, "    assign sign_s = signext_s & (type_s ^ s_axis_data[(i*DATA_WIDTH-1)]);\n"], [80, "    assign data_out_s[(i*UDATA_WIDTH-1):(i*UDATA_WIDTH-MSB_WIDTH)] = {(MSB_WIDTH){sign_s}};\n"], [81, "    assign data_out_s[((i-1)*UDATA_WIDTH+DATA_WIDTH-1)] = type_s ^ s_axis_data[(i*DATA_WIDTH-1)];\n"], [82, "    assign data_out_s[((i-1)*UDATA_WIDTH+DATA_WIDTH-2):((i-1)*UDATA_WIDTH)] = s_axis_data[(i*DATA_WIDTH-2):((i-1)*DATA_WIDTH)];\n"], [84, "  end\n"]], "Add": [[82, "    for (i=1; i <= NUM_OF_CHANNELS; i=i+1) begin : signext_data\n"], [82, "      wire sign_s;\n"], [84, "      assign sign_s = signext_s & (type_s ^ s_axis_data[(i*DATA_WIDTH-1)]);\n"], [84, "      assign data_out_s[(i*UDATA_WIDTH-1):(i*UDATA_WIDTH-MSB_WIDTH)] = {(MSB_WIDTH){sign_s}};\n"], [84, "      assign data_out_s[((i-1)*UDATA_WIDTH+DATA_WIDTH-1)] = type_s ^ s_axis_data[(i*DATA_WIDTH-1)];\n"], [84, "      assign data_out_s[((i-1)*UDATA_WIDTH+DATA_WIDTH-2):((i-1)*UDATA_WIDTH)] = s_axis_data[(i*DATA_WIDTH-2):((i-1)*DATA_WIDTH)];\n"], [84, "    end\n"]]}}