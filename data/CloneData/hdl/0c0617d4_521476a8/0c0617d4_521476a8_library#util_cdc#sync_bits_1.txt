Source Block: hdl/library/util_cdc/sync_bits.v@54:79@HdlStmIf
  input [NUM_OF_BITS-1:0] in_bits,
  input out_resetn,
  input out_clk,
  output [NUM_OF_BITS-1:0] out_bits);

generate if (ASYNC_CLK == 1) begin
  reg [NUM_OF_BITS-1:0] cdc_sync_stage1 = 'h0;
  reg [NUM_OF_BITS-1:0] cdc_sync_stage2 = 'h0;

  always @(posedge out_clk)
  begin
    if (out_resetn == 1'b0) begin
      cdc_sync_stage1 <= 'b0;
      cdc_sync_stage2 <= 'b0;
    end else begin
      cdc_sync_stage1 <= in_bits;
      cdc_sync_stage2 <= cdc_sync_stage1;
    end
  end

  assign out_bits = cdc_sync_stage2;
end else begin
  assign out_bits = in_bits;
end endgenerate

endmodule

Diff Content:
- 59 generate if (ASYNC_CLK == 1) begin
- 60   reg [NUM_OF_BITS-1:0] cdc_sync_stage1 = 'h0;
- 61   reg [NUM_OF_BITS-1:0] cdc_sync_stage2 = 'h0;
- 63   always @(posedge out_clk)
- 64   begin
- 65     if (out_resetn == 1'b0) begin
- 66       cdc_sync_stage1 <= 'b0;
- 67       cdc_sync_stage2 <= 'b0;
- 68     end else begin
- 69       cdc_sync_stage1 <= in_bits;
- 70       cdc_sync_stage2 <= cdc_sync_stage1;
- 72   end
- 74   assign out_bits = cdc_sync_stage2;
- 75 end else begin
- 76   assign out_bits = in_bits;
- 77 end endgenerate
+ 61   generate if (ASYNC_CLK == 1) begin
+ 61     reg [NUM_OF_BITS-1:0] cdc_sync_stage1 = 'h0;
+ 61     reg [NUM_OF_BITS-1:0] cdc_sync_stage2 = 'h0;
+ 70     always @(posedge out_clk)
+ 70     begin
+ 70       if (out_resetn == 1'b0) begin
+ 70         cdc_sync_stage1 <= 'b0;
+ 70         cdc_sync_stage2 <= 'b0;
+ 70       end else begin
+ 70         cdc_sync_stage1 <= in_bits;
+ 70         cdc_sync_stage2 <= cdc_sync_stage1;
+ 70       end
+ 77     assign out_bits = cdc_sync_stage2;
+ 77   end else begin
+ 77     assign out_bits = in_bits;
+ 77   end endgenerate

Clone Blocks:
