{"Source Block": ["hdl/library/util_cdc/sync_gray.v@55:115@HdlStmIf", "  input [DATA_WIDTH-1:0] in_count,\n  input out_resetn,\n  input out_clk,\n  output [DATA_WIDTH-1:0] out_count);\n\ngenerate if (ASYNC_CLK == 1) begin\n  reg [DATA_WIDTH-1:0] cdc_sync_stage0 = 'h0;\n  reg [DATA_WIDTH-1:0] cdc_sync_stage1 = 'h0;\n  reg [DATA_WIDTH-1:0] cdc_sync_stage2 = 'h0;\n  reg [DATA_WIDTH-1:0] out_count_m = 'h0;\n\n  function [DATA_WIDTH-1:0] g2b;\n    input [DATA_WIDTH-1:0] g;\n    reg   [DATA_WIDTH-1:0] b;\n    integer i;\n    begin\n      b[DATA_WIDTH-1] = g[DATA_WIDTH-1];\n      for (i = DATA_WIDTH - 2; i >= 0; i =  i - 1)\n        b[i] = b[i + 1] ^ g[i];\n      g2b = b;\n    end\n  endfunction\n\n  function [DATA_WIDTH-1:0] b2g;\n    input [DATA_WIDTH-1:0] b;\n    reg [DATA_WIDTH-1:0] g;\n    integer i;\n    begin\n      g[DATA_WIDTH-1] = b[DATA_WIDTH-1];\n      for (i = DATA_WIDTH - 2; i >= 0; i = i -1)\n          g[i] = b[i + 1] ^ b[i];\n      b2g = g;\n    end\n  endfunction\n\n  always @(posedge in_clk) begin\n    if (in_resetn == 1'b0) begin\n      cdc_sync_stage0 <= 'h00;\n    end else begin\n      cdc_sync_stage0 <= b2g(in_count);\n    end\n  end\n\n  always @(posedge out_clk) begin\n    if (out_resetn == 1'b0) begin\n      cdc_sync_stage1 <= 'h00;\n      cdc_sync_stage2 <= 'h00;\n      out_count_m <= 'h00;\n    end else begin\n      cdc_sync_stage1 <= cdc_sync_stage0;\n      cdc_sync_stage2 <= cdc_sync_stage1;\n      out_count_m <= g2b(cdc_sync_stage2);\n    end\n  end\n\n  assign out_count = out_count_m;\nend else begin\n  assign out_count = in_count;\nend endgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[60, "generate if (ASYNC_CLK == 1) begin\n"], [61, "  reg [DATA_WIDTH-1:0] cdc_sync_stage0 = 'h0;\n"], [62, "  reg [DATA_WIDTH-1:0] cdc_sync_stage1 = 'h0;\n"], [63, "  reg [DATA_WIDTH-1:0] cdc_sync_stage2 = 'h0;\n"], [64, "  reg [DATA_WIDTH-1:0] out_count_m = 'h0;\n"], [66, "  function [DATA_WIDTH-1:0] g2b;\n"], [67, "    input [DATA_WIDTH-1:0] g;\n"], [68, "    reg   [DATA_WIDTH-1:0] b;\n"], [69, "    integer i;\n"], [70, "    begin\n"], [71, "      b[DATA_WIDTH-1] = g[DATA_WIDTH-1];\n"], [72, "      for (i = DATA_WIDTH - 2; i >= 0; i =  i - 1)\n"], [73, "        b[i] = b[i + 1] ^ g[i];\n"], [74, "      g2b = b;\n"], [75, "    end\n"], [76, "  endfunction\n"], [78, "  function [DATA_WIDTH-1:0] b2g;\n"], [79, "    input [DATA_WIDTH-1:0] b;\n"], [80, "    reg [DATA_WIDTH-1:0] g;\n"], [81, "    integer i;\n"], [82, "    begin\n"], [83, "      g[DATA_WIDTH-1] = b[DATA_WIDTH-1];\n"], [84, "      for (i = DATA_WIDTH - 2; i >= 0; i = i -1)\n"], [85, "          g[i] = b[i + 1] ^ b[i];\n"], [86, "      b2g = g;\n"], [87, "    end\n"], [88, "  endfunction\n"], [90, "  always @(posedge in_clk) begin\n"], [91, "    if (in_resetn == 1'b0) begin\n"], [92, "      cdc_sync_stage0 <= 'h00;\n"], [93, "    end else begin\n"], [94, "      cdc_sync_stage0 <= b2g(in_count);\n"], [96, "  end\n"], [98, "  always @(posedge out_clk) begin\n"], [99, "    if (out_resetn == 1'b0) begin\n"], [100, "      cdc_sync_stage1 <= 'h00;\n"], [101, "      cdc_sync_stage2 <= 'h00;\n"], [102, "      out_count_m <= 'h00;\n"], [103, "    end else begin\n"], [104, "      cdc_sync_stage1 <= cdc_sync_stage0;\n"], [105, "      cdc_sync_stage2 <= cdc_sync_stage1;\n"], [106, "      out_count_m <= g2b(cdc_sync_stage2);\n"], [108, "  end\n"], [110, "  assign out_count = out_count_m;\n"], [111, "end else begin\n"], [112, "  assign out_count = in_count;\n"], [113, "end endgenerate\n"]], "Add": [[64, "  generate if (ASYNC_CLK == 1) begin\n"], [64, "    reg [DATA_WIDTH-1:0] cdc_sync_stage0 = 'h0;\n"], [64, "    reg [DATA_WIDTH-1:0] cdc_sync_stage1 = 'h0;\n"], [64, "    reg [DATA_WIDTH-1:0] cdc_sync_stage2 = 'h0;\n"], [64, "    reg [DATA_WIDTH-1:0] out_count_m = 'h0;\n"], [76, "    function [DATA_WIDTH-1:0] g2b;\n"], [76, "      input [DATA_WIDTH-1:0] g;\n"], [76, "      reg   [DATA_WIDTH-1:0] b;\n"], [76, "      integer i;\n"], [76, "      begin\n"], [76, "        b[DATA_WIDTH-1] = g[DATA_WIDTH-1];\n"], [76, "        for (i = DATA_WIDTH - 2; i >= 0; i =  i - 1)\n"], [76, "          b[i] = b[i + 1] ^ g[i];\n"], [76, "        g2b = b;\n"], [76, "      end\n"], [76, "    endfunction\n"], [88, "    function [DATA_WIDTH-1:0] b2g;\n"], [88, "      input [DATA_WIDTH-1:0] b;\n"], [88, "      reg [DATA_WIDTH-1:0] g;\n"], [88, "      integer i;\n"], [88, "      begin\n"], [88, "        g[DATA_WIDTH-1] = b[DATA_WIDTH-1];\n"], [88, "        for (i = DATA_WIDTH - 2; i >= 0; i = i -1)\n"], [88, "            g[i] = b[i + 1] ^ b[i];\n"], [88, "        b2g = g;\n"], [88, "      end\n"], [88, "    endfunction\n"], [94, "    always @(posedge in_clk) begin\n"], [94, "      if (in_resetn == 1'b0) begin\n"], [94, "        cdc_sync_stage0 <= 'h00;\n"], [94, "      end else begin\n"], [94, "        cdc_sync_stage0 <= b2g(in_count);\n"], [94, "      end\n"], [106, "    always @(posedge out_clk) begin\n"], [106, "      if (out_resetn == 1'b0) begin\n"], [106, "        cdc_sync_stage1 <= 'h00;\n"], [106, "        cdc_sync_stage2 <= 'h00;\n"], [106, "        out_count_m <= 'h00;\n"], [106, "      end else begin\n"], [106, "        cdc_sync_stage1 <= cdc_sync_stage0;\n"], [106, "        cdc_sync_stage2 <= cdc_sync_stage1;\n"], [106, "        out_count_m <= g2b(cdc_sync_stage2);\n"], [106, "      end\n"], [113, "    assign out_count = out_count_m;\n"], [113, "  end else begin\n"], [113, "    assign out_count = in_count;\n"], [113, "  end endgenerate\n"]]}}