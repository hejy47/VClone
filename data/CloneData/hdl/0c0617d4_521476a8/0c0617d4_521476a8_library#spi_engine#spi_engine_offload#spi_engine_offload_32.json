{"Source Block": ["hdl/library/spi_engine/spi_engine_offload/spi_engine_offload.v@249:272@HdlStmProcess", "  .out_clk(spi_clk),\n  .out_resetn(1'b1),\n  .out_bits(trigger_s)\n);\n\nalways @(posedge spi_clk) begin\n  if (spi_resetn == 1'b0) begin\n    spi_active <= 1'b0;\n  end else begin\n    if (spi_active == 1'b0) begin\n      // start offload when we have a valid trigger, offload is enabled and\n      // the DMA is enabled\n      if (trigger_s == 1'b1 && spi_enable == 1'b1 && offload_sdi_ready == 1'b1)\n        spi_active <= 1'b1;\n    end else if (cmd_ready == 1'b1 && spi_cmd_rd_addr_next == ctrl_cmd_wr_addr) begin\n      spi_active <= 1'b0;\n    end\n  end\nend\n\nalways @(posedge spi_clk) begin\n  if (cmd_valid == 1'b0) begin\n    spi_cmd_rd_addr <= 'h00;\n  end else if (cmd_ready == 1'b1) begin\n"], "Clone Blocks": [["hdl/library/axi_ad5766/axi_ad5766.v@228:250", "    assign spi_mem_reset_s = ctrl_mem_reset;\n  end endgenerate\n\n  assign spi_cmd_rd_addr_next = spi_cmd_rd_addr + 1;\n\n  always @(posedge spi_clk) begin\n    if (spi_resetn == 1'b0) begin\n      spi_active <= 1'b0;\n    end else begin\n      if (spi_active == 1'b0) begin\n        if ((trigger_s == 1'b1 && spi_enable_s == 1'b1)) begin\n          spi_active <= 1'b1;\n        end\n      end else if (cmd_ready == 1'b1 && spi_cmd_rd_addr_next == ctrl_cmd_wr_addr) begin\n          spi_active <= 1'b0;\n      end\n    end\n  end\n\n  always @(posedge spi_clk) begin\n    if (cmd_valid == 1'b0) begin\n      spi_cmd_rd_addr <= 'h00;\n    end else if (cmd_ready == 1'b1) begin\n"]], "Diff Content": {"Delete": [[254, "always @(posedge spi_clk) begin\n"], [255, "  if (spi_resetn == 1'b0) begin\n"], [256, "    spi_active <= 1'b0;\n"], [258, "    if (spi_active == 1'b0) begin\n"], [261, "      if (trigger_s == 1'b1 && spi_enable == 1'b1 && offload_sdi_ready == 1'b1)\n"], [262, "        spi_active <= 1'b1;\n"], [263, "    end else if (cmd_ready == 1'b1 && spi_cmd_rd_addr_next == ctrl_cmd_wr_addr) begin\n"], [267, "end\n"]], "Add": [[263, "  assign spi_enable = ctrl_enable;\n"], [263, "  assign ctrl_enabled = spi_enable | spi_active;\n"], [263, "  end endgenerate\n"], [263, "  assign spi_cmd_rd_addr_next = spi_cmd_rd_addr + 1;\n"], [263, "  wire trigger_s;\n"], [263, "  sync_bits #(\n"], [263, "    .NUM_OF_BITS(1),\n"], [263, "    .ASYNC_CLK(ASYNC_TRIG)\n"], [263, "  ) i_sync_trigger (\n"], [263, "    .in_bits(trigger),\n"], [263, "    .out_clk(spi_clk),\n"], [263, "    .out_resetn(1'b1),\n"], [263, "    .out_bits(trigger_s));\n"], [263, "  always @(posedge spi_clk) begin\n"], [263, "    if (spi_resetn == 1'b0) begin\n"], [264, "    end else begin\n"], [264, "      if (spi_active == 1'b0) begin\n"], [264, "        if (trigger_s == 1'b1 && spi_enable == 1'b1 && offload_sdi_ready == 1'b1)\n"], [264, "          spi_active <= 1'b1;\n"], [264, "      end else if (cmd_ready == 1'b1 && spi_cmd_rd_addr_next == ctrl_cmd_wr_addr) begin\n"], [264, "        spi_active <= 1'b0;\n"], [264, "      end\n"], [264, "    end\n"], [264, "  end\n"], [264, "  always @(posedge spi_clk) begin\n"], [264, "    if (cmd_valid == 1'b0) begin\n"], [264, "      spi_cmd_rd_addr <= 'h00;\n"], [264, "    end else if (cmd_ready == 1'b1) begin\n"], [264, "      spi_cmd_rd_addr <= spi_cmd_rd_addr_next;\n"]]}}