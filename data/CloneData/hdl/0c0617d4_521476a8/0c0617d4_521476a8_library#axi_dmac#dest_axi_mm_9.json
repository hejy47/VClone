{"Source Block": ["hdl/library/axi_dmac/dest_axi_mm.v@180:193@HdlStmProcess", "reg [BYTES_PER_BURST_WIDTH+1-1:0] bl_mem [0:2**(ID_WIDTH)-1];\n\nassign {response_resp_partial,\n        response_data_burst_length} = bl_mem[response_id];\n\nalways @(posedge m_axi_aclk) begin\n  if (dest_burst_info_write) begin\n    bl_mem[dest_burst_info_id] <= {dest_burst_info_partial,\n                                   dest_burst_info_length};\n  end\nend\n\n\nendmodule\n"], "Clone Blocks": [["hdl/library/axi_dmac/dest_axi_mm.v@177:188", "  .resp_eot(response_resp_eot)\n);\n\nreg [BYTES_PER_BURST_WIDTH+1-1:0] bl_mem [0:2**(ID_WIDTH)-1];\n\nassign {response_resp_partial,\n        response_data_burst_length} = bl_mem[response_id];\n\nalways @(posedge m_axi_aclk) begin\n  if (dest_burst_info_write) begin\n    bl_mem[dest_burst_info_id] <= {dest_burst_info_partial,\n                                   dest_burst_info_length};\n"]], "Diff Content": {"Delete": [[185, "always @(posedge m_axi_aclk) begin\n"], [186, "  if (dest_burst_info_write) begin\n"], [187, "    bl_mem[dest_burst_info_id] <= {dest_burst_info_partial,\n"], [188, "                                   dest_burst_info_length};\n"], [190, "end\n"]], "Add": [[188, "  wire address_enabled;\n"], [188, "  address_generator #(\n"], [188, "    .ID_WIDTH(ID_WIDTH),\n"], [188, "    .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH),\n"], [188, "    .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH),\n"], [188, "    .DMA_DATA_WIDTH(DMA_DATA_WIDTH),\n"], [188, "    .LENGTH_WIDTH(AXI_LENGTH_WIDTH),\n"], [188, "    .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),\n"], [188, "    .CACHE_COHERENT(CACHE_COHERENT)\n"], [188, "  ) i_addr_gen (\n"], [188, "    .clk(m_axi_aclk),\n"], [188, "    .resetn(m_axi_aresetn),\n"], [188, "    .enable(enable),\n"], [188, "    .enabled(address_enabled),\n"], [188, "    .id(address_id),\n"], [188, "    .request_id(request_id),\n"], [188, "    .req_valid(req_valid),\n"], [188, "    .req_ready(req_ready),\n"], [188, "    .req_address(req_address),\n"], [188, "    .bl_valid(bl_valid),\n"], [188, "    .bl_ready(bl_ready),\n"], [188, "    .measured_last_burst_length(measured_last_burst_length),\n"], [188, "    .eot(address_eot),\n"], [188, "    .addr_ready(m_axi_awready),\n"], [188, "    .addr_valid(m_axi_awvalid),\n"], [188, "    .addr(m_axi_awaddr),\n"], [188, "    .len(m_axi_awlen),\n"], [188, "    .size(m_axi_awsize),\n"], [188, "    .burst(m_axi_awburst),\n"], [188, "    .prot(m_axi_awprot),\n"], [188, "    .cache(m_axi_awcache));\n"], [188, "  assign m_axi_wvalid = fifo_valid;\n"], [188, "  assign fifo_ready = m_axi_wready;\n"], [188, "  assign m_axi_wlast = fifo_last;\n"], [188, "  assign m_axi_wdata = fifo_data;\n"], [188, "  assign m_axi_wstrb = fifo_strb;\n"], [188, "  response_handler #(\n"], [188, "    .ID_WIDTH(ID_WIDTH)\n"], [188, "  ) i_response_handler (\n"], [188, "    .clk(m_axi_aclk),\n"], [188, "    .resetn(m_axi_aresetn),\n"], [188, "    .bvalid(m_axi_bvalid),\n"], [188, "    .bready(m_axi_bready),\n"], [188, "    .bresp(m_axi_bresp),\n"], [188, "    .enable(address_enabled),\n"], [188, "    .enabled(enabled),\n"], [188, "    .id(response_id),\n"], [188, "    .request_id(address_id),\n"], [188, "    .eot(response_eot),\n"], [188, "    .resp_valid(response_valid),\n"], [188, "    .resp_ready(response_ready),\n"], [188, "    .resp_resp(response_resp),\n"], [188, "    .resp_eot(response_resp_eot));\n"], [188, "  reg [BYTES_PER_BURST_WIDTH+1-1:0] bl_mem [0:2**(ID_WIDTH)-1];\n"], [188, "  assign {response_resp_partial,\n"], [188, "          response_data_burst_length} = bl_mem[response_id];\n"], [188, "  always @(posedge m_axi_aclk) begin\n"], [188, "    if (dest_burst_info_write) begin\n"], [188, "      bl_mem[dest_burst_info_id] <= {dest_burst_info_partial,\n"], [188, "                                     dest_burst_info_length};\n"], [188, "    end\n"]]}}