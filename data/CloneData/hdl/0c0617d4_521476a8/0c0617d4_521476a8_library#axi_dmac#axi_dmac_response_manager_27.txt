Source Block: hdl/library/axi_dmac/axi_dmac_response_manager.v@144:161@HdlStmProcess
    req_response_partial <= response_dest_partial;
    req_response_dest_data_burst_length <= response_dest_data_burst_length;
  end
end

always @(posedge req_clk)
begin
  if (req_resetn == 1'b0) begin
    response_dest_ready <= 1'b1;
  end else begin
    response_dest_ready <= (nx_state == STATE_IDLE);
  end
end

assign response_eot = (state == STATE_WRITE_RESPR) ? req_eot : 1'b1;
assign response_partial = (state == STATE_WRITE_RESPR) ? req_response_partial : 1'b0;

always @(posedge req_clk)

Diff Content:
- 149 always @(posedge req_clk)
- 150 begin
- 151   if (req_resetn == 1'b0) begin
- 152     response_dest_ready <= 1'b1;
- 153   end else begin
- 154     response_dest_ready <= (nx_state == STATE_IDLE);
- 156 end
+ 154   always @(posedge req_clk)
+ 154   begin
+ 154     if (req_resetn == 1'b0) begin
+ 154       response_dest_ready <= 1'b1;
+ 154     end else begin
+ 154       response_dest_ready <= (nx_state == STATE_IDLE);
+ 154     end

Clone Blocks:
Clone Blocks 1:
hdl/library/axi_dmac/axi_dmac_response_manager.v@156:177
end

assign response_eot = (state == STATE_WRITE_RESPR) ? req_eot : 1'b1;
assign response_partial = (state == STATE_WRITE_RESPR) ? req_response_partial : 1'b0;

always @(posedge req_clk)
begin
  if (req_resetn == 1'b0) begin
    response_valid <= 1'b0;
  end else begin
    if (nx_state == STATE_WRITE_RESPR || nx_state == STATE_WRITE_ZRCMPL) begin
      response_valid <= 1'b1;
    end else if (response_ready == 1'b1) begin
      response_valid <= 1'b0;
    end
  end
end

always @(posedge req_clk)
begin
  if (state == STATE_ZERO_COMPL) begin
    measured_burst_length <= {BYTES_PER_BURST_WIDTH{1'b1}};

Clone Blocks 2:
hdl/library/axi_dmac/axi_dmac_response_manager.v@135:152
                response_dest_resp_eot}),
  .m_axis_level(),
  .m_axis_empty()
);

always @(posedge req_clk)
begin
  if (response_dest_valid & response_dest_ready) begin
    req_eot <= response_dest_resp_eot;
    req_response_partial <= response_dest_partial;
    req_response_dest_data_burst_length <= response_dest_data_burst_length;
  end
end

always @(posedge req_clk)
begin
  if (req_resetn == 1'b0) begin
    response_dest_ready <= 1'b1;

