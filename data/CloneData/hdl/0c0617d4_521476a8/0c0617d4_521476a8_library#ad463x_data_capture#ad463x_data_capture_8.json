{"Source Block": ["hdl/library/ad463x_data_capture/ad463x_data_capture.v@72:134@HdlStmIf", "// ready, the data will be discarded\nassign m_axis_valid = csn & ~csn_d & m_axis_ready;\n\ngenvar i, j;\ngenerate\nif (DDR_EN) // Double Data Rate mode\nbegin\n\n  for (i=0; i<NUM_OF_LANES; i=i+1) begin\n\n    reg [DATA_WIDTH-1:0] data_shift_p;\n    reg [DATA_WIDTH-1:0] data_shift_n;\n\n    // shift register for positive edge\n    always @(negedge echo_sclk or posedge reset) begin\n      if (reset) begin\n        data_shift_n <= 0;\n      end else begin\n        data_shift_n <= {data_shift_n, data_in[i]};\n      end\n    end\n\n    // shift register for positive edge\n    always @(posedge echo_sclk or posedge reset) begin\n      if (reset) begin\n        data_shift_p <= 0;\n      end else begin\n        data_shift_p <= {data_shift_p, data_in[i]};\n      end\n    end\n\n    // DDR output logic - only the first 16 bits are forwarded\n    for (j=0; j<DATA_WIDTH/2; j=j+1) begin\n      assign m_axis_data[DATA_WIDTH*i+(j*2)+:2] = {data_shift_p[j], data_shift_n[j]};\n    end\n\n  end /* for loop */\n\nend else begin  // Single Data Rate mode\n\n  for (i=0; i<NUM_OF_LANES; i=i+1) begin\n\n    reg [DATA_WIDTH-1:0] data_shift_n;\n\n    // shift register for positive edge\n    always @(negedge echo_sclk or posedge reset) begin\n      if (reset) begin\n        data_shift_n <= 0;\n      end else begin\n        data_shift_n <= {data_shift_n, data_in[i]};\n      end\n    end\n\n    // SDR output logic\n    assign m_axis_data[DATA_WIDTH*i+:DATA_WIDTH] = data_shift_n;\n\n  end /* for loop */\n\nend\nendgenerate\n\nendmodule\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[77, "if (DDR_EN) // Double Data Rate mode\n"], [78, "begin\n"], [80, "  for (i=0; i<NUM_OF_LANES; i=i+1) begin\n"], [82, "    reg [DATA_WIDTH-1:0] data_shift_p;\n"], [83, "    reg [DATA_WIDTH-1:0] data_shift_n;\n"], [86, "    always @(negedge echo_sclk or posedge reset) begin\n"], [87, "      if (reset) begin\n"], [88, "        data_shift_n <= 0;\n"], [89, "      end else begin\n"], [90, "        data_shift_n <= {data_shift_n, data_in[i]};\n"], [92, "    end\n"], [95, "    always @(posedge echo_sclk or posedge reset) begin\n"], [96, "      if (reset) begin\n"], [97, "        data_shift_p <= 0;\n"], [98, "      end else begin\n"], [99, "        data_shift_p <= {data_shift_p, data_in[i]};\n"], [101, "    end\n"], [104, "    for (j=0; j<DATA_WIDTH/2; j=j+1) begin\n"], [105, "      assign m_axis_data[DATA_WIDTH*i+(j*2)+:2] = {data_shift_p[j], data_shift_n[j]};\n"], [106, "    end\n"], [108, "  end /* for loop */\n"], [110, "end else begin  // Single Data Rate mode\n"], [112, "  for (i=0; i<NUM_OF_LANES; i=i+1) begin\n"], [114, "    reg [DATA_WIDTH-1:0] data_shift_n;\n"], [117, "    always @(negedge echo_sclk or posedge reset) begin\n"], [118, "      if (reset) begin\n"], [119, "        data_shift_n <= 0;\n"], [120, "      end else begin\n"], [121, "        data_shift_n <= {data_shift_n, data_in[i]};\n"], [123, "    end\n"], [126, "    assign m_axis_data[DATA_WIDTH*i+:DATA_WIDTH] = data_shift_n;\n"], [128, "  end /* for loop */\n"], [130, "end\n"]], "Add": [[78, "  genvar i, j;\n"], [78, "  generate\n"], [78, "  if (DDR_EN) // Double Data Rate mode\n"], [78, "  begin\n"], [80, "    for (i=0; i<NUM_OF_LANES; i=i+1) begin\n"], [83, "      reg [DATA_WIDTH-1:0] data_shift_p;\n"], [83, "      reg [DATA_WIDTH-1:0] data_shift_n;\n"], [90, "      always @(negedge echo_sclk or posedge reset) begin\n"], [90, "        if (reset) begin\n"], [90, "          data_shift_n <= 0;\n"], [90, "        end else begin\n"], [90, "          data_shift_n <= {data_shift_n, data_in[i]};\n"], [90, "        end\n"], [99, "      always @(posedge echo_sclk or posedge reset) begin\n"], [99, "        if (reset) begin\n"], [99, "          data_shift_p <= 0;\n"], [99, "        end else begin\n"], [99, "          data_shift_p <= {data_shift_p, data_in[i]};\n"], [99, "        end\n"], [106, "      for (j=0; j<DATA_WIDTH/2; j=j+1) begin\n"], [106, "        assign m_axis_data[DATA_WIDTH*i+(j*2)+:2] = {data_shift_p[j], data_shift_n[j]};\n"], [106, "      end\n"], [108, "    end /* for loop */\n"], [110, "  end else begin  // Single Data Rate mode\n"], [112, "    for (i=0; i<NUM_OF_LANES; i=i+1) begin\n"], [114, "      reg [DATA_WIDTH-1:0] data_shift_n;\n"], [121, "      always @(negedge echo_sclk or posedge reset) begin\n"], [121, "        if (reset) begin\n"], [121, "          data_shift_n <= 0;\n"], [121, "        end else begin\n"], [121, "          data_shift_n <= {data_shift_n, data_in[i]};\n"], [121, "        end\n"], [126, "      assign m_axis_data[DATA_WIDTH*i+:DATA_WIDTH] = data_shift_n;\n"], [128, "    end /* for loop */\n"]]}}