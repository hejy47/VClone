{"Source Block": ["hdl/library/axi_dmac/axi_dmac_response_manager.v@156:177@HdlStmProcess", "end\n\nassign response_eot = (state == STATE_WRITE_RESPR) ? req_eot : 1'b1;\nassign response_partial = (state == STATE_WRITE_RESPR) ? req_response_partial : 1'b0;\n\nalways @(posedge req_clk)\nbegin\n  if (req_resetn == 1'b0) begin\n    response_valid <= 1'b0;\n  end else begin\n    if (nx_state == STATE_WRITE_RESPR || nx_state == STATE_WRITE_ZRCMPL) begin\n      response_valid <= 1'b1;\n    end else if (response_ready == 1'b1) begin\n      response_valid <= 1'b0;\n    end\n  end\nend\n\nalways @(posedge req_clk)\nbegin\n  if (state == STATE_ZERO_COMPL) begin\n    measured_burst_length <= {BYTES_PER_BURST_WIDTH{1'b1}};\n"], "Clone Blocks": [["hdl/library/axi_dmac/axi_dmac_response_manager.v@144:161", "    req_response_partial <= response_dest_partial;\n    req_response_dest_data_burst_length <= response_dest_data_burst_length;\n  end\nend\n\nalways @(posedge req_clk)\nbegin\n  if (req_resetn == 1'b0) begin\n    response_dest_ready <= 1'b1;\n  end else begin\n    response_dest_ready <= (nx_state == STATE_IDLE);\n  end\nend\n\nassign response_eot = (state == STATE_WRITE_RESPR) ? req_eot : 1'b1;\nassign response_partial = (state == STATE_WRITE_RESPR) ? req_response_partial : 1'b0;\n\nalways @(posedge req_clk)\n"]], "Diff Content": {"Delete": [[161, "always @(posedge req_clk)\n"], [162, "begin\n"], [163, "  if (req_resetn == 1'b0) begin\n"], [164, "    response_valid <= 1'b0;\n"], [165, "  end else begin\n"], [166, "    if (nx_state == STATE_WRITE_RESPR || nx_state == STATE_WRITE_ZRCMPL) begin\n"], [167, "      response_valid <= 1'b1;\n"], [168, "    end else if (response_ready == 1'b1) begin\n"], [172, "end\n"]], "Add": [[168, "  assign response_eot = (state == STATE_WRITE_RESPR) ? req_eot : 1'b1;\n"], [168, "  assign response_partial = (state == STATE_WRITE_RESPR) ? req_response_partial : 1'b0;\n"], [168, "  always @(posedge req_clk)\n"], [168, "  begin\n"], [168, "    if (req_resetn == 1'b0) begin\n"], [169, "    end else begin\n"], [169, "      if (nx_state == STATE_WRITE_RESPR || nx_state == STATE_WRITE_ZRCMPL) begin\n"], [169, "        response_valid <= 1'b1;\n"], [169, "      end else if (response_ready == 1'b1) begin\n"], [169, "        response_valid <= 1'b0;\n"], [169, "      end\n"]]}}