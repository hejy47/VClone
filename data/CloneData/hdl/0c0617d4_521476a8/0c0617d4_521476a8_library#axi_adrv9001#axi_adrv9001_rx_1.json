{"Source Block": ["hdl/library/axi_adrv9001/axi_adrv9001_rx.v@107:409@HdlStmIf", "  output  reg [ 31:0]     up_rdata,\n  output  reg             up_rack\n);\n\ngenerate\nif (ENABLED == 0) begin : core_disabled\n\n  assign adc_rst = 1'b0;\n  assign adc_single_lane = 1'b0;\n  assign adc_sdr_ddr_n = 1'b0;\n  assign adc_symb_op = 1'b0;\n  assign adc_symb_8_16b = 1'b0;\n  assign up_adc_r1_mode = 1'b0;\n  assign adc_valid = 1'b0;\n  assign adc_enable_i0 = 1'b0;\n  assign adc_data_i0 = 16'b0;\n  assign adc_enable_q0 = 1'b0;\n  assign adc_data_q0 = 16'b0;\n  assign adc_enable_i1 = 1'b0;\n  assign adc_data_i1 = 16'b0;\n  assign adc_enable_q1 = 1'b0;\n  assign adc_data_q1 = 16'b0;\n\n  always @(*) begin\n    up_wack = 1'b0;\n    up_rdata = 32'b0;\n    up_rack = 1'b0;\n  end\n\nend else begin : core_enabled\n\n  // configuration settings\n\n  localparam  CONFIG =  (CMOS_LVDS_N * 128) +\n                        (MODE_R1 * 16) +\n                        (DATAFORMAT_DISABLE * 4) +\n                        (DCFILTER_DISABLE * 2) +\n                        (IQCORRECTION_DISABLE * 1);\n\n  // internal registers\n\n  reg               up_status_pn_err = 'd0;\n  reg               up_status_pn_oos = 'd0;\n  reg               up_status_or = 'd0;\n\n  // internal signals\n\n  wire    [ 15:0]   adc_data_iq_i0_s;\n  wire    [ 15:0]   adc_data_iq_q0_s;\n  wire    [ 15:0]   adc_data_iq_i1_s;\n  wire    [ 15:0]   adc_data_iq_q1_s;\n  wire    [  4:0]   adc_num_lanes;\n  wire    [  3:0]   up_adc_pn_err_s;\n  wire    [  3:0]   up_adc_pn_oos_s;\n  wire    [  3:0]   up_adc_or_s;\n  wire    [  4:0]   up_wack_s;\n  wire    [  4:0]   up_rack_s;\n  wire    [ 31:0]   up_rdata_s[0:4];\n  wire              adc_valid_out_i0;\n  wire              adc_valid_out_i1;\n\n  // processor read interface\n\n  always @(negedge up_rstn or posedge up_clk) begin\n    if (up_rstn == 0) begin\n      up_status_pn_err <= 'd0;\n      up_status_pn_oos <= 'd0;\n      up_status_or <= 'd0;\n      up_wack <= 'd0;\n      up_rack <= 'd0;\n      up_rdata <= 'd0;\n    end else begin\n      up_status_pn_err <= up_adc_r1_mode ? | up_adc_pn_err_s[1:0] : | up_adc_pn_err_s[3:0];\n      up_status_pn_oos <= up_adc_r1_mode ? | up_adc_pn_oos_s[1:0] : | up_adc_pn_oos_s[3:0];\n      up_status_or <= | up_adc_or_s;\n      up_wack <= | up_wack_s;\n      up_rack <= | up_rack_s;\n      up_rdata <= up_rdata_s[0] | up_rdata_s[1] | up_rdata_s[2] |\n                  up_rdata_s[3] | up_rdata_s[4];\n    end\n  end\n\n  // channel width is 32 bits\n\n  assign adc_valid = adc_enable_i0 ? adc_valid_out_i0 : adc_valid_out_i1;\n\n  // channel 0 (i)\n\n  axi_adrv9001_rx_channel #(\n    .Q_OR_I_N (0),\n    .COMMON_ID (CHANNEL_BASE_ADDR),\n    .DISABLE (0),\n    .DATAFORMAT_DISABLE (DATAFORMAT_DISABLE),\n    .DCFILTER_DISABLE (DCFILTER_DISABLE),\n    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n    .DATA_WIDTH (16))\n  i_rx_channel_0 (\n    .adc_clk (adc_clk),\n    .adc_rst (adc_rst),\n    .adc_valid_in (adc_valid_A),\n    .adc_data_in (adc_data_i_A[15:0]),\n    .adc_valid_out (adc_valid_out_i0),\n    .adc_data_out (adc_data_i0),\n    .adc_data_iq_in (adc_data_iq_q0_s),\n    .adc_data_iq_out (adc_data_iq_i0_s),\n    .adc_enable (adc_enable_i0),\n    .dac_valid_in (dac_data_valid_A),\n    .dac_data_in (dac_data_i_A),\n    .up_adc_pn_err (up_adc_pn_err_s[0]),\n    .up_adc_pn_oos (up_adc_pn_oos_s[0]),\n    .up_adc_or (up_adc_or_s[0]),\n    .up_rstn (up_rstn),\n    .up_clk (up_clk),\n    .up_wreq (up_wreq),\n    .up_waddr (up_waddr),\n    .up_wdata (up_wdata),\n    .up_wack (up_wack_s[0]),\n    .up_rreq (up_rreq),\n    .up_raddr (up_raddr),\n    .up_rdata (up_rdata_s[0]),\n    .up_rack (up_rack_s[0]));\n\n  // channel 1 (q)\n\n  axi_adrv9001_rx_channel #(\n    .Q_OR_I_N (1),\n    .COMMON_ID (CHANNEL_BASE_ADDR),\n    .CHANNEL_ID (1),\n    .DISABLE (0),\n    .DATAFORMAT_DISABLE (DATAFORMAT_DISABLE),\n    .DCFILTER_DISABLE (DCFILTER_DISABLE),\n    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n    .DATA_WIDTH (16))\n  i_rx_channel_1 (\n    .adc_clk (adc_clk),\n    .adc_rst (adc_rst),\n    .adc_valid_in (adc_valid_A),\n    .adc_data_in (adc_data_q_A[15:0]),\n    .adc_valid_out (),\n    .adc_data_out (adc_data_q0),\n    .adc_data_iq_in (adc_data_iq_i0_s),\n    .adc_data_iq_out (adc_data_iq_q0_s),\n    .adc_enable (adc_enable_q0),\n    .dac_valid_in (dac_data_valid_A),\n    .dac_data_in (dac_data_q_A),\n    .up_adc_pn_err (up_adc_pn_err_s[1]),\n    .up_adc_pn_oos (up_adc_pn_oos_s[1]),\n    .up_adc_or (up_adc_or_s[1]),\n    .up_rstn (up_rstn),\n    .up_clk (up_clk),\n    .up_wreq (up_wreq),\n    .up_waddr (up_waddr),\n    .up_wdata (up_wdata),\n    .up_wack (up_wack_s[1]),\n    .up_rreq (up_rreq),\n    .up_raddr (up_raddr),\n    .up_rdata (up_rdata_s[1]),\n    .up_rack (up_rack_s[1]));\n\n  // channel 2 (i)\n\n  axi_adrv9001_rx_channel #(\n    .Q_OR_I_N (0),\n    .COMMON_ID (CHANNEL_BASE_ADDR),\n    .CHANNEL_ID (2),\n    .DISABLE (MODE_R1),\n    .DATAFORMAT_DISABLE (DATAFORMAT_DISABLE),\n    .DCFILTER_DISABLE (DCFILTER_DISABLE),\n    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n    .DATA_WIDTH (16))\n  i_rx_channel_2 (\n    .adc_clk (adc_clk),\n    .adc_rst (adc_rst),\n    .adc_valid_in (adc_valid_B),\n    .adc_data_in (adc_data_i_B[15:0]),\n    .adc_valid_out (adc_valid_out_i1),\n    .adc_data_out (adc_data_i1),\n    .adc_data_iq_in (adc_data_iq_q1_s),\n    .adc_data_iq_out (adc_data_iq_i1_s),\n    .adc_enable (adc_enable_i1),\n    .dac_valid_in (dac_data_valid_B),\n    .dac_data_in (dac_data_i_B),\n    .up_adc_pn_err (up_adc_pn_err_s[2]),\n    .up_adc_pn_oos (up_adc_pn_oos_s[2]),\n    .up_adc_or (up_adc_or_s[2]),\n    .up_rstn (up_rstn),\n    .up_clk (up_clk),\n    .up_wreq (up_wreq),\n    .up_waddr (up_waddr),\n    .up_wdata (up_wdata),\n    .up_wack (up_wack_s[2]),\n    .up_rreq (up_rreq),\n    .up_raddr (up_raddr),\n    .up_rdata (up_rdata_s[2]),\n    .up_rack (up_rack_s[2]));\n\n  // channel 3 (q)\n\n  axi_adrv9001_rx_channel #(\n    .Q_OR_I_N (1),\n    .COMMON_ID (CHANNEL_BASE_ADDR),\n    .CHANNEL_ID (3),\n    .DISABLE (MODE_R1),\n    .DATAFORMAT_DISABLE (DATAFORMAT_DISABLE),\n    .DCFILTER_DISABLE (DCFILTER_DISABLE),\n    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n    .DATA_WIDTH (16))\n  i_rx_channel_3 (\n    .adc_clk (adc_clk),\n    .adc_rst (adc_rst),\n    .adc_valid_in (adc_valid_B),\n    .adc_data_in (adc_data_q_B[15:0]),\n    .adc_valid_out (),\n    .adc_data_out (adc_data_q1),\n    .adc_data_iq_in (adc_data_iq_i1_s),\n    .adc_data_iq_out (adc_data_iq_q1_s),\n    .adc_enable (adc_enable_q1),\n    .dac_valid_in (dac_data_valid_B),\n    .dac_data_in (dac_data_q_B),\n    .up_adc_pn_err (up_adc_pn_err_s[3]),\n    .up_adc_pn_oos (up_adc_pn_oos_s[3]),\n    .up_adc_or (up_adc_or_s[3]),\n    .up_rstn (up_rstn),\n    .up_clk (up_clk),\n    .up_wreq (up_wreq),\n    .up_waddr (up_waddr),\n    .up_wdata (up_wdata),\n    .up_wack (up_wack_s[3]),\n    .up_rreq (up_rreq),\n    .up_raddr (up_raddr),\n    .up_rdata (up_rdata_s[3]),\n    .up_rack (up_rack_s[3]));\n\n  // common processor control\n\n  up_adc_common #(\n    .ID (ID),\n    .FPGA_TECHNOLOGY (FPGA_TECHNOLOGY),\n    .FPGA_FAMILY (FPGA_FAMILY),\n    .SPEED_GRADE (SPEED_GRADE),\n    .DEV_PACKAGE (DEV_PACKAGE),\n    .COMMON_ID (COMMON_BASE_ADDR),\n    .CONFIG(CONFIG),\n    .DRP_DISABLE(1),\n    .USERPORTS_DISABLE(1),\n    .GPIO_DISABLE(1),\n    .START_CODE_DISABLE(1))\n  i_up_adc_common (\n    .mmcm_rst (),\n    .adc_clk (adc_clk),\n    .adc_rst (adc_rst),\n    .adc_r1_mode (),\n    .adc_ddr_edgesel (),\n    .adc_pin_mode (),\n    .adc_status (1'b1),\n    .adc_sync_status (1'd0),\n    .adc_status_ovf (adc_dovf),\n    .adc_clk_ratio (adc_clk_ratio),\n    .adc_start_code (),\n    .adc_sref_sync (),\n    .adc_sync (adc_sync),\n    .adc_num_lanes (adc_num_lanes),\n    .adc_sdr_ddr_n (adc_sdr_ddr_n),\n    .adc_symb_op (adc_symb_op),\n    .adc_symb_8_16b (adc_symb_8_16b),\n    .up_pps_rcounter(32'h0),\n    .up_pps_status(1'b0),\n    .up_pps_irq_mask(),\n    .up_adc_r1_mode (up_adc_r1_mode),\n    .up_adc_ce (),\n    .up_status_pn_err (up_status_pn_err),\n    .up_status_pn_oos (up_status_pn_oos),\n    .up_status_or (up_status_or),\n    .up_drp_sel (),\n    .up_drp_wr (),\n    .up_drp_addr (),\n    .up_drp_wdata (),\n    .up_drp_rdata (32'd0),\n    .up_drp_ready (1'd0),\n    .up_drp_locked (1'd1),\n    .up_usr_chanmax_out (),\n    .up_usr_chanmax_in (8'd3),\n    .up_adc_gpio_in (32'd0),\n    .up_adc_gpio_out (),\n    .up_rstn (up_rstn),\n    .up_clk (up_clk),\n    .up_wreq (up_wreq),\n    .up_waddr (up_waddr),\n    .up_wdata (up_wdata),\n    .up_wack (up_wack_s[4]),\n    .up_rreq (up_rreq),\n    .up_raddr (up_raddr),\n    .up_rdata (up_rdata_s[4]),\n    .up_rack (up_rack_s[4]));\n\n  assign adc_single_lane = adc_num_lanes[0];\n\nend\nendgenerate\n\nendmodule\n\n// ***************************************************************************\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[112, "if (ENABLED == 0) begin : core_disabled\n"], [114, "  assign adc_rst = 1'b0;\n"], [115, "  assign adc_single_lane = 1'b0;\n"], [116, "  assign adc_sdr_ddr_n = 1'b0;\n"], [117, "  assign adc_symb_op = 1'b0;\n"], [118, "  assign adc_symb_8_16b = 1'b0;\n"], [119, "  assign up_adc_r1_mode = 1'b0;\n"], [120, "  assign adc_valid = 1'b0;\n"], [121, "  assign adc_enable_i0 = 1'b0;\n"], [122, "  assign adc_data_i0 = 16'b0;\n"], [123, "  assign adc_enable_q0 = 1'b0;\n"], [124, "  assign adc_data_q0 = 16'b0;\n"], [125, "  assign adc_enable_i1 = 1'b0;\n"], [126, "  assign adc_data_i1 = 16'b0;\n"], [127, "  assign adc_enable_q1 = 1'b0;\n"], [128, "  assign adc_data_q1 = 16'b0;\n"], [130, "  always @(*) begin\n"], [131, "    up_wack = 1'b0;\n"], [132, "    up_rdata = 32'b0;\n"], [133, "    up_rack = 1'b0;\n"], [134, "  end\n"], [136, "end else begin : core_enabled\n"], [140, "  localparam  CONFIG =  (CMOS_LVDS_N * 128) +\n"], [141, "                        (MODE_R1 * 16) +\n"], [142, "                        (DATAFORMAT_DISABLE * 4) +\n"], [143, "                        (DCFILTER_DISABLE * 2) +\n"], [144, "                        (IQCORRECTION_DISABLE * 1);\n"], [148, "  reg               up_status_pn_err = 'd0;\n"], [149, "  reg               up_status_pn_oos = 'd0;\n"], [150, "  reg               up_status_or = 'd0;\n"], [154, "  wire    [ 15:0]   adc_data_iq_i0_s;\n"], [155, "  wire    [ 15:0]   adc_data_iq_q0_s;\n"], [156, "  wire    [ 15:0]   adc_data_iq_i1_s;\n"], [157, "  wire    [ 15:0]   adc_data_iq_q1_s;\n"], [158, "  wire    [  4:0]   adc_num_lanes;\n"], [159, "  wire    [  3:0]   up_adc_pn_err_s;\n"], [160, "  wire    [  3:0]   up_adc_pn_oos_s;\n"], [161, "  wire    [  3:0]   up_adc_or_s;\n"], [162, "  wire    [  4:0]   up_wack_s;\n"], [163, "  wire    [  4:0]   up_rack_s;\n"], [164, "  wire    [ 31:0]   up_rdata_s[0:4];\n"], [165, "  wire              adc_valid_out_i0;\n"], [166, "  wire              adc_valid_out_i1;\n"], [170, "  always @(negedge up_rstn or posedge up_clk) begin\n"], [171, "    if (up_rstn == 0) begin\n"], [172, "      up_status_pn_err <= 'd0;\n"], [173, "      up_status_pn_oos <= 'd0;\n"], [174, "      up_status_or <= 'd0;\n"], [175, "      up_wack <= 'd0;\n"], [176, "      up_rack <= 'd0;\n"], [177, "      up_rdata <= 'd0;\n"], [178, "    end else begin\n"], [179, "      up_status_pn_err <= up_adc_r1_mode ? | up_adc_pn_err_s[1:0] : | up_adc_pn_err_s[3:0];\n"], [180, "      up_status_pn_oos <= up_adc_r1_mode ? | up_adc_pn_oos_s[1:0] : | up_adc_pn_oos_s[3:0];\n"], [181, "      up_status_or <= | up_adc_or_s;\n"], [182, "      up_wack <= | up_wack_s;\n"], [183, "      up_rack <= | up_rack_s;\n"], [184, "      up_rdata <= up_rdata_s[0] | up_rdata_s[1] | up_rdata_s[2] |\n"], [185, "                  up_rdata_s[3] | up_rdata_s[4];\n"], [187, "  end\n"], [191, "  assign adc_valid = adc_enable_i0 ? adc_valid_out_i0 : adc_valid_out_i1;\n"], [195, "  axi_adrv9001_rx_channel #(\n"], [196, "    .Q_OR_I_N (0),\n"], [197, "    .COMMON_ID (CHANNEL_BASE_ADDR),\n"], [198, "    .DISABLE (0),\n"], [199, "    .DATAFORMAT_DISABLE (DATAFORMAT_DISABLE),\n"], [200, "    .DCFILTER_DISABLE (DCFILTER_DISABLE),\n"], [201, "    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n"], [202, "    .DATA_WIDTH (16))\n"], [203, "  i_rx_channel_0 (\n"], [204, "    .adc_clk (adc_clk),\n"], [205, "    .adc_rst (adc_rst),\n"], [206, "    .adc_valid_in (adc_valid_A),\n"], [207, "    .adc_data_in (adc_data_i_A[15:0]),\n"], [208, "    .adc_valid_out (adc_valid_out_i0),\n"], [209, "    .adc_data_out (adc_data_i0),\n"], [210, "    .adc_data_iq_in (adc_data_iq_q0_s),\n"], [211, "    .adc_data_iq_out (adc_data_iq_i0_s),\n"], [212, "    .adc_enable (adc_enable_i0),\n"], [213, "    .dac_valid_in (dac_data_valid_A),\n"], [214, "    .dac_data_in (dac_data_i_A),\n"], [215, "    .up_adc_pn_err (up_adc_pn_err_s[0]),\n"], [216, "    .up_adc_pn_oos (up_adc_pn_oos_s[0]),\n"], [217, "    .up_adc_or (up_adc_or_s[0]),\n"], [218, "    .up_rstn (up_rstn),\n"], [219, "    .up_clk (up_clk),\n"], [220, "    .up_wreq (up_wreq),\n"], [221, "    .up_waddr (up_waddr),\n"], [222, "    .up_wdata (up_wdata),\n"], [223, "    .up_wack (up_wack_s[0]),\n"], [224, "    .up_rreq (up_rreq),\n"], [225, "    .up_raddr (up_raddr),\n"], [226, "    .up_rdata (up_rdata_s[0]),\n"], [227, "    .up_rack (up_rack_s[0]));\n"], [231, "  axi_adrv9001_rx_channel #(\n"], [232, "    .Q_OR_I_N (1),\n"], [233, "    .COMMON_ID (CHANNEL_BASE_ADDR),\n"], [234, "    .CHANNEL_ID (1),\n"], [235, "    .DISABLE (0),\n"], [236, "    .DATAFORMAT_DISABLE (DATAFORMAT_DISABLE),\n"], [237, "    .DCFILTER_DISABLE (DCFILTER_DISABLE),\n"], [238, "    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n"], [239, "    .DATA_WIDTH (16))\n"], [240, "  i_rx_channel_1 (\n"], [241, "    .adc_clk (adc_clk),\n"], [242, "    .adc_rst (adc_rst),\n"], [243, "    .adc_valid_in (adc_valid_A),\n"], [244, "    .adc_data_in (adc_data_q_A[15:0]),\n"], [245, "    .adc_valid_out (),\n"], [246, "    .adc_data_out (adc_data_q0),\n"], [247, "    .adc_data_iq_in (adc_data_iq_i0_s),\n"], [248, "    .adc_data_iq_out (adc_data_iq_q0_s),\n"], [249, "    .adc_enable (adc_enable_q0),\n"], [250, "    .dac_valid_in (dac_data_valid_A),\n"], [251, "    .dac_data_in (dac_data_q_A),\n"], [252, "    .up_adc_pn_err (up_adc_pn_err_s[1]),\n"], [253, "    .up_adc_pn_oos (up_adc_pn_oos_s[1]),\n"], [254, "    .up_adc_or (up_adc_or_s[1]),\n"], [255, "    .up_rstn (up_rstn),\n"], [256, "    .up_clk (up_clk),\n"], [257, "    .up_wreq (up_wreq),\n"], [258, "    .up_waddr (up_waddr),\n"], [259, "    .up_wdata (up_wdata),\n"], [260, "    .up_wack (up_wack_s[1]),\n"], [261, "    .up_rreq (up_rreq),\n"], [262, "    .up_raddr (up_raddr),\n"], [263, "    .up_rdata (up_rdata_s[1]),\n"], [264, "    .up_rack (up_rack_s[1]));\n"], [268, "  axi_adrv9001_rx_channel #(\n"], [269, "    .Q_OR_I_N (0),\n"], [270, "    .COMMON_ID (CHANNEL_BASE_ADDR),\n"], [271, "    .CHANNEL_ID (2),\n"], [272, "    .DISABLE (MODE_R1),\n"], [273, "    .DATAFORMAT_DISABLE (DATAFORMAT_DISABLE),\n"], [274, "    .DCFILTER_DISABLE (DCFILTER_DISABLE),\n"], [275, "    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n"], [276, "    .DATA_WIDTH (16))\n"], [277, "  i_rx_channel_2 (\n"], [278, "    .adc_clk (adc_clk),\n"], [279, "    .adc_rst (adc_rst),\n"], [280, "    .adc_valid_in (adc_valid_B),\n"], [281, "    .adc_data_in (adc_data_i_B[15:0]),\n"], [282, "    .adc_valid_out (adc_valid_out_i1),\n"], [283, "    .adc_data_out (adc_data_i1),\n"], [284, "    .adc_data_iq_in (adc_data_iq_q1_s),\n"], [285, "    .adc_data_iq_out (adc_data_iq_i1_s),\n"], [286, "    .adc_enable (adc_enable_i1),\n"], [287, "    .dac_valid_in (dac_data_valid_B),\n"], [288, "    .dac_data_in (dac_data_i_B),\n"], [289, "    .up_adc_pn_err (up_adc_pn_err_s[2]),\n"], [290, "    .up_adc_pn_oos (up_adc_pn_oos_s[2]),\n"], [291, "    .up_adc_or (up_adc_or_s[2]),\n"], [292, "    .up_rstn (up_rstn),\n"], [293, "    .up_clk (up_clk),\n"], [294, "    .up_wreq (up_wreq),\n"], [295, "    .up_waddr (up_waddr),\n"], [296, "    .up_wdata (up_wdata),\n"], [297, "    .up_wack (up_wack_s[2]),\n"], [298, "    .up_rreq (up_rreq),\n"], [299, "    .up_raddr (up_raddr),\n"], [300, "    .up_rdata (up_rdata_s[2]),\n"], [301, "    .up_rack (up_rack_s[2]));\n"], [305, "  axi_adrv9001_rx_channel #(\n"], [306, "    .Q_OR_I_N (1),\n"], [307, "    .COMMON_ID (CHANNEL_BASE_ADDR),\n"], [308, "    .CHANNEL_ID (3),\n"], [309, "    .DISABLE (MODE_R1),\n"], [310, "    .DATAFORMAT_DISABLE (DATAFORMAT_DISABLE),\n"], [311, "    .DCFILTER_DISABLE (DCFILTER_DISABLE),\n"], [312, "    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n"], [313, "    .DATA_WIDTH (16))\n"], [314, "  i_rx_channel_3 (\n"], [315, "    .adc_clk (adc_clk),\n"], [316, "    .adc_rst (adc_rst),\n"], [317, "    .adc_valid_in (adc_valid_B),\n"], [318, "    .adc_data_in (adc_data_q_B[15:0]),\n"], [319, "    .adc_valid_out (),\n"], [320, "    .adc_data_out (adc_data_q1),\n"], [321, "    .adc_data_iq_in (adc_data_iq_i1_s),\n"], [322, "    .adc_data_iq_out (adc_data_iq_q1_s),\n"], [323, "    .adc_enable (adc_enable_q1),\n"], [324, "    .dac_valid_in (dac_data_valid_B),\n"], [325, "    .dac_data_in (dac_data_q_B),\n"], [326, "    .up_adc_pn_err (up_adc_pn_err_s[3]),\n"], [327, "    .up_adc_pn_oos (up_adc_pn_oos_s[3]),\n"], [328, "    .up_adc_or (up_adc_or_s[3]),\n"], [329, "    .up_rstn (up_rstn),\n"], [330, "    .up_clk (up_clk),\n"], [331, "    .up_wreq (up_wreq),\n"], [332, "    .up_waddr (up_waddr),\n"], [333, "    .up_wdata (up_wdata),\n"], [334, "    .up_wack (up_wack_s[3]),\n"], [335, "    .up_rreq (up_rreq),\n"], [336, "    .up_raddr (up_raddr),\n"], [337, "    .up_rdata (up_rdata_s[3]),\n"], [338, "    .up_rack (up_rack_s[3]));\n"], [342, "  up_adc_common #(\n"], [343, "    .ID (ID),\n"], [344, "    .FPGA_TECHNOLOGY (FPGA_TECHNOLOGY),\n"], [345, "    .FPGA_FAMILY (FPGA_FAMILY),\n"], [346, "    .SPEED_GRADE (SPEED_GRADE),\n"], [347, "    .DEV_PACKAGE (DEV_PACKAGE),\n"], [348, "    .COMMON_ID (COMMON_BASE_ADDR),\n"], [349, "    .CONFIG(CONFIG),\n"], [350, "    .DRP_DISABLE(1),\n"], [351, "    .USERPORTS_DISABLE(1),\n"], [352, "    .GPIO_DISABLE(1),\n"], [353, "    .START_CODE_DISABLE(1))\n"], [354, "  i_up_adc_common (\n"], [355, "    .mmcm_rst (),\n"], [356, "    .adc_clk (adc_clk),\n"], [357, "    .adc_rst (adc_rst),\n"], [358, "    .adc_r1_mode (),\n"], [359, "    .adc_ddr_edgesel (),\n"], [360, "    .adc_pin_mode (),\n"], [361, "    .adc_status (1'b1),\n"], [362, "    .adc_sync_status (1'd0),\n"], [363, "    .adc_status_ovf (adc_dovf),\n"], [364, "    .adc_clk_ratio (adc_clk_ratio),\n"], [365, "    .adc_start_code (),\n"], [366, "    .adc_sref_sync (),\n"], [367, "    .adc_sync (adc_sync),\n"], [368, "    .adc_num_lanes (adc_num_lanes),\n"], [369, "    .adc_sdr_ddr_n (adc_sdr_ddr_n),\n"], [370, "    .adc_symb_op (adc_symb_op),\n"], [371, "    .adc_symb_8_16b (adc_symb_8_16b),\n"], [372, "    .up_pps_rcounter(32'h0),\n"], [373, "    .up_pps_status(1'b0),\n"], [374, "    .up_pps_irq_mask(),\n"], [375, "    .up_adc_r1_mode (up_adc_r1_mode),\n"], [376, "    .up_adc_ce (),\n"], [377, "    .up_status_pn_err (up_status_pn_err),\n"], [378, "    .up_status_pn_oos (up_status_pn_oos),\n"], [379, "    .up_status_or (up_status_or),\n"], [380, "    .up_drp_sel (),\n"], [381, "    .up_drp_wr (),\n"], [382, "    .up_drp_addr (),\n"], [383, "    .up_drp_wdata (),\n"], [384, "    .up_drp_rdata (32'd0),\n"], [385, "    .up_drp_ready (1'd0),\n"], [386, "    .up_drp_locked (1'd1),\n"], [387, "    .up_usr_chanmax_out (),\n"], [388, "    .up_usr_chanmax_in (8'd3),\n"], [389, "    .up_adc_gpio_in (32'd0),\n"], [390, "    .up_adc_gpio_out (),\n"], [391, "    .up_rstn (up_rstn),\n"], [392, "    .up_clk (up_clk),\n"], [393, "    .up_wreq (up_wreq),\n"], [394, "    .up_waddr (up_waddr),\n"], [395, "    .up_wdata (up_wdata),\n"], [396, "    .up_wack (up_wack_s[4]),\n"], [397, "    .up_rreq (up_rreq),\n"], [398, "    .up_raddr (up_raddr),\n"], [399, "    .up_rdata (up_rdata_s[4]),\n"], [400, "    .up_rack (up_rack_s[4]));\n"], [402, "  assign adc_single_lane = adc_num_lanes[0];\n"], [404, "end\n"]], "Add": [[134, "  generate\n"], [134, "  if (ENABLED == 0) begin : core_disabled\n"], [134, "    assign adc_rst = 1'b0;\n"], [134, "    assign adc_single_lane = 1'b0;\n"], [134, "    assign adc_sdr_ddr_n = 1'b0;\n"], [134, "    assign adc_symb_op = 1'b0;\n"], [134, "    assign adc_symb_8_16b = 1'b0;\n"], [134, "    assign up_adc_r1_mode = 1'b0;\n"], [134, "    assign adc_valid = 1'b0;\n"], [134, "    assign adc_enable_i0 = 1'b0;\n"], [134, "    assign adc_data_i0 = 16'b0;\n"], [134, "    assign adc_enable_q0 = 1'b0;\n"], [134, "    assign adc_data_q0 = 16'b0;\n"], [134, "    assign adc_enable_i1 = 1'b0;\n"], [134, "    assign adc_data_i1 = 16'b0;\n"], [134, "    assign adc_enable_q1 = 1'b0;\n"], [134, "    assign adc_data_q1 = 16'b0;\n"], [134, "    always @(*) begin\n"], [134, "      up_wack = 1'b0;\n"], [134, "      up_rdata = 32'b0;\n"], [134, "      up_rack = 1'b0;\n"], [134, "    end\n"], [185, "  end else begin : core_enabled\n"], [185, "    localparam  CONFIG =  (CMOS_LVDS_N * 128) +\n"], [185, "                          (MODE_R1 * 16) +\n"], [185, "                          (DATAFORMAT_DISABLE * 4) +\n"], [185, "                          (DCFILTER_DISABLE * 2) +\n"], [185, "                          (IQCORRECTION_DISABLE * 1);\n"], [185, "    reg               up_status_pn_err = 'd0;\n"], [185, "    reg               up_status_pn_oos = 'd0;\n"], [185, "    reg               up_status_or = 'd0;\n"], [185, "    wire    [ 15:0]   adc_data_iq_i0_s;\n"], [185, "    wire    [ 15:0]   adc_data_iq_q0_s;\n"], [185, "    wire    [ 15:0]   adc_data_iq_i1_s;\n"], [185, "    wire    [ 15:0]   adc_data_iq_q1_s;\n"], [185, "    wire    [  4:0]   adc_num_lanes;\n"], [185, "    wire    [  3:0]   up_adc_pn_err_s;\n"], [185, "    wire    [  3:0]   up_adc_pn_oos_s;\n"], [185, "    wire    [  3:0]   up_adc_or_s;\n"], [185, "    wire    [  4:0]   up_wack_s;\n"], [185, "    wire    [  4:0]   up_rack_s;\n"], [185, "    wire    [ 31:0]   up_rdata_s[0:4];\n"], [185, "    wire              adc_valid_out_i0;\n"], [185, "    wire              adc_valid_out_i1;\n"], [185, "    always @(negedge up_rstn or posedge up_clk) begin\n"], [185, "      if (up_rstn == 0) begin\n"], [185, "        up_status_pn_err <= 'd0;\n"], [185, "        up_status_pn_oos <= 'd0;\n"], [185, "        up_status_or <= 'd0;\n"], [185, "        up_wack <= 'd0;\n"], [185, "        up_rack <= 'd0;\n"], [185, "        up_rdata <= 'd0;\n"], [185, "      end else begin\n"], [185, "        up_status_pn_err <= up_adc_r1_mode ? | up_adc_pn_err_s[1:0] : | up_adc_pn_err_s[3:0];\n"], [185, "        up_status_pn_oos <= up_adc_r1_mode ? | up_adc_pn_oos_s[1:0] : | up_adc_pn_oos_s[3:0];\n"], [185, "        up_status_or <= | up_adc_or_s;\n"], [185, "        up_wack <= | up_wack_s;\n"], [185, "        up_rack <= | up_rack_s;\n"], [185, "        up_rdata <= up_rdata_s[0] | up_rdata_s[1] | up_rdata_s[2] |\n"], [185, "                    up_rdata_s[3] | up_rdata_s[4];\n"], [185, "      end\n"]]}}