Source Block: hdl/library/axi_ad5766/axi_ad5766.v@161:234@HdlStmIf
  assign sdo_data = sdo_mem[spi_sdo_rd_addr];
  assign sync_ready = 1'b1;

  assign sdi_data_ready = 1'b0;

  generate if (ASYNC_SPI_CLK) begin

    /*
     * The synchronization circuit takes care that there are no glitches on the
     * ctrl_enabled signal. ctrl_do_enable is asserted whenever ctrl_enable is
     * asserted, but only deasserted once the signal has been synchronized back from
     * the SPI domain. This makes sure that we can't end up in a state where the
     * enable signal in the SPI domain is asserted, but neither enable nor enabled
     * is asserted in the control domain.
     */

    reg ctrl_do_enable = 1'b0;
    wire ctrl_is_enabled;
    reg spi_enabled = 1'b0;

    always @(posedge ctrl_clk) begin
        if (ctrl_enable == 1'b1) begin
                ctrl_do_enable <= 1'b1;
        end else if (ctrl_is_enabled == 1'b1) begin
                ctrl_do_enable <= 1'b0;
        end
    end

    assign ctrl_enabled = ctrl_is_enabled | ctrl_do_enable;

    always @(posedge spi_clk) begin
        spi_enabled <= spi_enable_s | spi_active;
    end

    sync_bits # (
        .NUM_OF_BITS(1),
        .ASYNC_CLK(1)
    ) i_sync_enable (
        .in_bits(ctrl_do_enable),
        .out_clk(spi_clk),
        .out_resetn(1'b1),
        .out_bits(spi_enable_s)
    );

    sync_bits # (
        .NUM_OF_BITS(1),
        .ASYNC_CLK(1)
    ) i_sync_enabled (
        .in_bits(spi_enabled),
        .out_clk(ctrl_clk),
        .out_resetn(1'b1),
        .out_bits(ctrl_is_enabled)
    );

    sync_bits # (
        .NUM_OF_BITS(1),
        .ASYNC_CLK(1)
    ) i_sync_mem_reset (
        .in_bits(ctrl_mem_reset),
        .out_clk(spi_clk),
        .out_resetn(1'b1),
        .out_bits(spi_mem_reset_s)
    );

  end else begin
    assign spi_enable_s = ctrl_enable;
    assign ctrl_enabled = spi_enable_s | spi_active;
    assign spi_mem_reset_s = ctrl_mem_reset;
  end endgenerate

  assign spi_cmd_rd_addr_next = spi_cmd_rd_addr + 1;

  always @(posedge spi_clk) begin
    if (spi_resetn == 1'b0) begin

Diff Content:
- 195     sync_bits # (
- 196         .NUM_OF_BITS(1),
- 197         .ASYNC_CLK(1)
- 199         .in_bits(ctrl_do_enable),
- 200         .out_clk(spi_clk),
- 201         .out_resetn(1'b1),
- 202         .out_bits(spi_enable_s)
- 203     );
- 205     sync_bits # (
- 206         .NUM_OF_BITS(1),
- 207         .ASYNC_CLK(1)
- 209         .in_bits(spi_enabled),
- 210         .out_clk(ctrl_clk),
- 211         .out_resetn(1'b1),
- 212         .out_bits(ctrl_is_enabled)
- 213     );
- 215     sync_bits # (
- 216         .NUM_OF_BITS(1),
- 217         .ASYNC_CLK(1)
- 219         .in_bits(ctrl_mem_reset),
- 220         .out_clk(spi_clk),
- 221         .out_resetn(1'b1),
- 222         .out_bits(spi_mem_reset_s)
- 223     );
+ 197     sync_bits #(
+ 197       .NUM_OF_BITS(1),
+ 197       .ASYNC_CLK(1)
+ 207       .in_bits(ctrl_do_enable),
+ 207       .out_clk(spi_clk),
+ 207       .out_resetn(1'b1),
+ 207       .out_bits(spi_enable_s));
+ 207     sync_bits #(
+ 207       .NUM_OF_BITS(1),
+ 207       .ASYNC_CLK(1)
+ 217       .in_bits(spi_enabled),
+ 217       .out_clk(ctrl_clk),
+ 217       .out_resetn(1'b1),
+ 217       .out_bits(ctrl_is_enabled));
+ 217     sync_bits #(
+ 217       .NUM_OF_BITS(1),
+ 217       .ASYNC_CLK(1)
+ 223       .in_bits(ctrl_mem_reset),
+ 223       .out_clk(spi_clk),
+ 223       .out_resetn(1'b1),
+ 223       .out_bits(spi_mem_reset_s));

Clone Blocks:
Clone Blocks 1:
hdl/library/spi_engine/spi_engine_offload/spi_engine_offload.v@182:244

assign status_sync_data = sync_data;
assign status_sync_valid = sync_valid;
assign sync_ready = status_sync_ready;

generate if (ASYNC_SPI_CLK) begin

/*
 * The synchronization circuit takes care that there are no glitches on the
 * ctrl_enabled signal. ctrl_do_enable is asserted whenever ctrl_enable is
 * asserted, but only deasserted once the signal has been synchronized back from
 * the SPI domain. This makes sure that we can't end up in a state where the
 * enable signal in the SPI domain is asserted, but neither enable nor enabled
 * is asserted in the control domain.
 */

reg ctrl_do_enable = 1'b0;
wire ctrl_is_enabled;
reg spi_enabled = 1'b0;

always @(posedge ctrl_clk) begin
  if (ctrl_enable == 1'b1) begin
    ctrl_do_enable <= 1'b1;
  end else if (ctrl_is_enabled == 1'b1) begin
    ctrl_do_enable <= 1'b0;
  end
end

assign ctrl_enabled = ctrl_is_enabled | ctrl_do_enable;

always @(posedge spi_clk) begin
  spi_enabled <= spi_enable | spi_active;
end

sync_bits # (
    .NUM_OF_BITS(1),
    .ASYNC_CLK(1)
) i_sync_enable (
    .in_bits(ctrl_do_enable),
    .out_clk(spi_clk),
    .out_resetn(1'b1),
    .out_bits(spi_enable)
);

sync_bits # (
    .NUM_OF_BITS(1),
    .ASYNC_CLK(1)
) i_sync_enabled (
    .in_bits(spi_enabled),
    .out_clk(ctrl_clk),
    .out_resetn(1'b1),
    .out_bits(ctrl_is_enabled)
);

end else begin
assign spi_enable = ctrl_enable;
assign ctrl_enabled = spi_enable | spi_active;
end endgenerate

assign spi_cmd_rd_addr_next = spi_cmd_rd_addr + 1;

wire trigger_s;
sync_bits #(

