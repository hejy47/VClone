{"Source Block": ["hdl/library/jesd204/jesd204_common/jesd204_frame_align_replace.v@155:245@HdlStmFor", "assign saved_data = {data, data_d1, data_d2[(DATA_PATH_WIDTH*8)-1:(DATA_PATH_WIDTH-4)*8]};\nassign saved_char_is_align = {char_is_align, char_is_align_d1, char_is_align_d2[DATA_PATH_WIDTH-1:DATA_PATH_WIDTH-4]};\n\ngenvar ii;\ngenerate\nfor (ii = 0; ii < DATA_PATH_WIDTH; ii = ii + 1) begin: gen_replace_byte\n  assign prev_data_1[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+3+ii)*8 +: 8];\n  assign prev_data_2[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+2+ii)*8 +: 8];\n  assign prev_data_3[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+1+ii)*8 +: 8];\n  assign prev_prev_data_1[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+2+ii)*8 +: 8];\n  assign prev_prev_data_2[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+ii)*8 +: 8];\n  assign prev_prev_data_3[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-2+ii)*8 +: 8];\n  assign prev_char_is_align_1[ii] = saved_char_is_align[(DATA_PATH_WIDTH+3+ii)];\n  assign prev_char_is_align_2[ii] = saved_char_is_align[(DATA_PATH_WIDTH+2+ii)];\n  assign prev_char_is_align_3[ii] = saved_char_is_align[(DATA_PATH_WIDTH+1+ii)];\n\n  if(DATA_PATH_WIDTH == 8) begin : gen_dp_8\n    assign prev_data_4[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+ii)*8 +: 8];\n    assign prev_data_6[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-2+ii)*8 +: 8];\n    assign prev_prev_data_4[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-4+ii)*8 +: 8];\n    assign prev_prev_data_6[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-8+ii)*8 +: 8];\n    assign prev_char_is_align_4[ii] = saved_char_is_align[(DATA_PATH_WIDTH+ii)];\n    assign prev_char_is_align_6[ii] = saved_char_is_align[(DATA_PATH_WIDTH-2+ii)];\n  end else begin\n    assign prev_data_4[ii*8 +:8] = 'bX;\n    assign prev_data_6[ii*8 +:8] = 'bX;\n    assign prev_prev_data_4[ii*8 +:8] = 'bX;\n    assign prev_prev_data_6[ii*8 +:8] = 'bX;\n    assign prev_char_is_align_4[ii] = 'bX;\n    assign prev_char_is_align_6[ii] = 'bX;\n  end\n\n  always @(*) begin\n    case(cfg_octets_per_frame)\n      0:\n        begin\n          prev_data[ii*8 +:8] = prev_data_1[ii*8 +:8];\n          prev_prev_data[ii*8 +:8] = prev_prev_data_1[ii*8 +:8];\n          prev_char_is_align[ii] = prev_char_is_align_1[ii];\n        end\n      1:\n        begin\n          prev_data[ii*8 +:8] = prev_data_2[ii*8 +:8];\n          prev_prev_data[ii*8 +:8] = prev_prev_data_2[ii*8 +:8];\n          prev_char_is_align[ii] = prev_char_is_align_2[ii];\n        end\n      2:\n        begin\n          prev_data[ii*8 +:8] = prev_data_3[ii*8 +:8];\n          prev_prev_data[ii*8 +:8] = prev_prev_data_3[ii*8 +:8];\n          prev_char_is_align[ii] = prev_char_is_align_3[ii];\n        end\n      3:\n        begin\n          prev_data[ii*8 +:8] = prev_data_4[ii*8 +:8];\n          prev_prev_data[ii*8 +:8] = prev_prev_data_4[ii*8 +:8];\n          prev_char_is_align[ii] = prev_char_is_align_4[ii];\n        end\n      5:\n        begin\n          prev_data[ii*8 +:8] = prev_data_6[ii*8 +:8];\n          prev_prev_data[ii*8 +:8] = prev_prev_data_6[ii*8 +:8];\n          prev_char_is_align[ii] = prev_char_is_align_6[ii];\n        end\n      default:\n        begin\n          prev_data[ii*8 +:8] = 'bX;\n          prev_prev_data[ii*8 +:8] = 'bX;\n          prev_char_is_align[ii] = 1'bX;\n        end\n    endcase\n  end\n\n  if(IS_RX) begin : gen_rx\n    // RX\n    assign char_is_align[ii] = !reset && (rx_char_is_a[ii] | rx_char_is_f[ii]);\n    assign data_replaced[ii*8 +: 8] = char_is_align[ii] ? data_prev_eof[ii*8 +: 8] : data[ii*8 +: 8];\n    assign data_prev_eof[ii*8 +: 8] = single_eof ? data_prev_eof_single : prev_char_is_align[ii] ? data_prev_prev_eof[ii*8 +: 8] : prev_data[ii*8 +: 8];\n    assign data_prev_prev_eof[ii*8 +: 8] = prev_prev_data[ii*8 +: 8];\n  end else begin : gen_tx\n    // TX\n    assign data_prev_eof[ii*8 +: 8] = single_eof ? data_prev_eof_single : prev_data[ii*8 +: 8];\n    assign char_is_align[ii] = !reset && (tx_eomf[ii] || (eof[ii] && !(single_eof ? char_is_align_prev_single : prev_char_is_align[ii]))) && (data[ii*8 +: 8] == data_prev_eof[ii*8 +: 8]);\n    assign data_replaced[ii*8 +: 8] = char_is_align[ii] ? (tx_eomf[ii] ? 8'h7c : 8'hfc) : data[ii*8 +: 8];\n  end\nend\nendgenerate\n\nassign data_out = (cfg_disable_char_replacement || !cfg_disable_scrambler || ENABLED==0) ? data : data_replaced;\nassign charisk_out = (IS_RX || !cfg_disable_scrambler || cfg_disable_char_replacement || ENABLED==0) ? 'b0 : char_is_align;\n\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[160, "for (ii = 0; ii < DATA_PATH_WIDTH; ii = ii + 1) begin: gen_replace_byte\n"], [161, "  assign prev_data_1[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+3+ii)*8 +: 8];\n"], [162, "  assign prev_data_2[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+2+ii)*8 +: 8];\n"], [163, "  assign prev_data_3[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+1+ii)*8 +: 8];\n"], [164, "  assign prev_prev_data_1[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+2+ii)*8 +: 8];\n"], [165, "  assign prev_prev_data_2[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+ii)*8 +: 8];\n"], [166, "  assign prev_prev_data_3[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-2+ii)*8 +: 8];\n"], [167, "  assign prev_char_is_align_1[ii] = saved_char_is_align[(DATA_PATH_WIDTH+3+ii)];\n"], [168, "  assign prev_char_is_align_2[ii] = saved_char_is_align[(DATA_PATH_WIDTH+2+ii)];\n"], [169, "  assign prev_char_is_align_3[ii] = saved_char_is_align[(DATA_PATH_WIDTH+1+ii)];\n"], [171, "  if(DATA_PATH_WIDTH == 8) begin : gen_dp_8\n"], [172, "    assign prev_data_4[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+ii)*8 +: 8];\n"], [173, "    assign prev_data_6[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-2+ii)*8 +: 8];\n"], [174, "    assign prev_prev_data_4[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-4+ii)*8 +: 8];\n"], [175, "    assign prev_prev_data_6[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-8+ii)*8 +: 8];\n"], [176, "    assign prev_char_is_align_4[ii] = saved_char_is_align[(DATA_PATH_WIDTH+ii)];\n"], [177, "    assign prev_char_is_align_6[ii] = saved_char_is_align[(DATA_PATH_WIDTH-2+ii)];\n"], [178, "  end else begin\n"], [179, "    assign prev_data_4[ii*8 +:8] = 'bX;\n"], [180, "    assign prev_data_6[ii*8 +:8] = 'bX;\n"], [181, "    assign prev_prev_data_4[ii*8 +:8] = 'bX;\n"], [182, "    assign prev_prev_data_6[ii*8 +:8] = 'bX;\n"], [183, "    assign prev_char_is_align_4[ii] = 'bX;\n"], [184, "    assign prev_char_is_align_6[ii] = 'bX;\n"], [187, "  always @(*) begin\n"], [188, "    case(cfg_octets_per_frame)\n"], [189, "      0:\n"], [190, "        begin\n"], [191, "          prev_data[ii*8 +:8] = prev_data_1[ii*8 +:8];\n"], [192, "          prev_prev_data[ii*8 +:8] = prev_prev_data_1[ii*8 +:8];\n"], [193, "          prev_char_is_align[ii] = prev_char_is_align_1[ii];\n"], [194, "        end\n"], [195, "      1:\n"], [196, "        begin\n"], [197, "          prev_data[ii*8 +:8] = prev_data_2[ii*8 +:8];\n"], [198, "          prev_prev_data[ii*8 +:8] = prev_prev_data_2[ii*8 +:8];\n"], [199, "          prev_char_is_align[ii] = prev_char_is_align_2[ii];\n"], [200, "        end\n"], [201, "      2:\n"], [202, "        begin\n"], [203, "          prev_data[ii*8 +:8] = prev_data_3[ii*8 +:8];\n"], [204, "          prev_prev_data[ii*8 +:8] = prev_prev_data_3[ii*8 +:8];\n"], [205, "          prev_char_is_align[ii] = prev_char_is_align_3[ii];\n"], [206, "        end\n"], [207, "      3:\n"], [208, "        begin\n"], [209, "          prev_data[ii*8 +:8] = prev_data_4[ii*8 +:8];\n"], [210, "          prev_prev_data[ii*8 +:8] = prev_prev_data_4[ii*8 +:8];\n"], [211, "          prev_char_is_align[ii] = prev_char_is_align_4[ii];\n"], [212, "        end\n"], [213, "      5:\n"], [214, "        begin\n"], [215, "          prev_data[ii*8 +:8] = prev_data_6[ii*8 +:8];\n"], [216, "          prev_prev_data[ii*8 +:8] = prev_prev_data_6[ii*8 +:8];\n"], [217, "          prev_char_is_align[ii] = prev_char_is_align_6[ii];\n"], [218, "        end\n"], [219, "      default:\n"], [220, "        begin\n"], [221, "          prev_data[ii*8 +:8] = 'bX;\n"], [222, "          prev_prev_data[ii*8 +:8] = 'bX;\n"], [223, "          prev_char_is_align[ii] = 1'bX;\n"], [224, "        end\n"], [225, "    endcase\n"], [228, "  if(IS_RX) begin : gen_rx\n"], [230, "    assign char_is_align[ii] = !reset && (rx_char_is_a[ii] | rx_char_is_f[ii]);\n"], [231, "    assign data_replaced[ii*8 +: 8] = char_is_align[ii] ? data_prev_eof[ii*8 +: 8] : data[ii*8 +: 8];\n"], [232, "    assign data_prev_eof[ii*8 +: 8] = single_eof ? data_prev_eof_single : prev_char_is_align[ii] ? data_prev_prev_eof[ii*8 +: 8] : prev_data[ii*8 +: 8];\n"], [233, "    assign data_prev_prev_eof[ii*8 +: 8] = prev_prev_data[ii*8 +: 8];\n"], [234, "  end else begin : gen_tx\n"], [236, "    assign data_prev_eof[ii*8 +: 8] = single_eof ? data_prev_eof_single : prev_data[ii*8 +: 8];\n"], [237, "    assign char_is_align[ii] = !reset && (tx_eomf[ii] || (eof[ii] && !(single_eof ? char_is_align_prev_single : prev_char_is_align[ii]))) && (data[ii*8 +: 8] == data_prev_eof[ii*8 +: 8]);\n"], [238, "    assign data_replaced[ii*8 +: 8] = char_is_align[ii] ? (tx_eomf[ii] ? 8'h7c : 8'hfc) : data[ii*8 +: 8];\n"], [240, "end\n"]], "Add": [[184, "  always @(posedge clk) begin\n"], [184, "    if(reset) begin\n"], [184, "      data_prev_eof_single <= 'b0;\n"], [184, "    end else begin\n"], [184, "      if(|eof && (!IS_RX || !(|char_is_align))) begin\n"], [184, "        data_prev_eof_single <= data_prev_eof_single_int;\n"], [184, "      end\n"], [184, "    end\n"], [225, "  always @(posedge clk) begin\n"], [225, "    if(reset) begin\n"], [225, "      char_is_align_prev_single <= 'b0;\n"], [225, "    end else begin\n"], [225, "      if(|eof) begin\n"], [225, "        char_is_align_prev_single <= |char_is_align;\n"], [225, "      end\n"], [225, "    end\n"], [238, "  assign saved_data = {data, data_d1, data_d2[(DATA_PATH_WIDTH*8)-1:(DATA_PATH_WIDTH-4)*8]};\n"], [238, "  assign saved_char_is_align = {char_is_align, char_is_align_d1, char_is_align_d2[DATA_PATH_WIDTH-1:DATA_PATH_WIDTH-4]};\n"], [238, "  genvar ii;\n"], [238, "  generate\n"], [238, "  for (ii = 0; ii < DATA_PATH_WIDTH; ii = ii + 1) begin: gen_replace_byte\n"], [238, "    assign prev_data_1[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+3+ii)*8 +: 8];\n"], [238, "    assign prev_data_2[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+2+ii)*8 +: 8];\n"], [238, "    assign prev_data_3[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+1+ii)*8 +: 8];\n"], [238, "    assign prev_prev_data_1[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+2+ii)*8 +: 8];\n"], [238, "    assign prev_prev_data_2[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+ii)*8 +: 8];\n"], [238, "    assign prev_prev_data_3[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-2+ii)*8 +: 8];\n"], [238, "    assign prev_char_is_align_1[ii] = saved_char_is_align[(DATA_PATH_WIDTH+3+ii)];\n"], [238, "    assign prev_char_is_align_2[ii] = saved_char_is_align[(DATA_PATH_WIDTH+2+ii)];\n"], [238, "    assign prev_char_is_align_3[ii] = saved_char_is_align[(DATA_PATH_WIDTH+1+ii)];\n"], [238, "    if(DATA_PATH_WIDTH == 8) begin : gen_dp_8\n"], [238, "      assign prev_data_4[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH+ii)*8 +: 8];\n"], [238, "      assign prev_data_6[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-2+ii)*8 +: 8];\n"], [238, "      assign prev_prev_data_4[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-4+ii)*8 +: 8];\n"], [238, "      assign prev_prev_data_6[ii*8 +:8] = saved_data[(DATA_PATH_WIDTH-8+ii)*8 +: 8];\n"], [238, "      assign prev_char_is_align_4[ii] = saved_char_is_align[(DATA_PATH_WIDTH+ii)];\n"], [238, "      assign prev_char_is_align_6[ii] = saved_char_is_align[(DATA_PATH_WIDTH-2+ii)];\n"], [238, "    end else begin\n"], [238, "      assign prev_data_4[ii*8 +:8] = 'bX;\n"], [238, "      assign prev_data_6[ii*8 +:8] = 'bX;\n"], [238, "      assign prev_prev_data_4[ii*8 +:8] = 'bX;\n"], [238, "      assign prev_prev_data_6[ii*8 +:8] = 'bX;\n"], [238, "      assign prev_char_is_align_4[ii] = 'bX;\n"], [238, "      assign prev_char_is_align_6[ii] = 'bX;\n"], [238, "    end\n"], [238, "    always @(*) begin\n"], [238, "      case(cfg_octets_per_frame)\n"], [238, "        0:\n"], [238, "          begin\n"], [238, "            prev_data[ii*8 +:8] = prev_data_1[ii*8 +:8];\n"], [238, "            prev_prev_data[ii*8 +:8] = prev_prev_data_1[ii*8 +:8];\n"], [238, "            prev_char_is_align[ii] = prev_char_is_align_1[ii];\n"], [238, "          end\n"], [238, "        1:\n"], [238, "          begin\n"], [238, "            prev_data[ii*8 +:8] = prev_data_2[ii*8 +:8];\n"], [238, "            prev_prev_data[ii*8 +:8] = prev_prev_data_2[ii*8 +:8];\n"], [238, "            prev_char_is_align[ii] = prev_char_is_align_2[ii];\n"], [238, "          end\n"], [238, "        2:\n"], [238, "          begin\n"], [238, "            prev_data[ii*8 +:8] = prev_data_3[ii*8 +:8];\n"], [238, "            prev_prev_data[ii*8 +:8] = prev_prev_data_3[ii*8 +:8];\n"], [238, "            prev_char_is_align[ii] = prev_char_is_align_3[ii];\n"], [238, "          end\n"], [238, "        3:\n"], [238, "          begin\n"], [238, "            prev_data[ii*8 +:8] = prev_data_4[ii*8 +:8];\n"], [238, "            prev_prev_data[ii*8 +:8] = prev_prev_data_4[ii*8 +:8];\n"], [238, "            prev_char_is_align[ii] = prev_char_is_align_4[ii];\n"], [238, "          end\n"], [238, "        5:\n"], [238, "          begin\n"], [238, "            prev_data[ii*8 +:8] = prev_data_6[ii*8 +:8];\n"], [238, "            prev_prev_data[ii*8 +:8] = prev_prev_data_6[ii*8 +:8];\n"], [238, "            prev_char_is_align[ii] = prev_char_is_align_6[ii];\n"], [238, "          end\n"], [238, "        default:\n"], [238, "          begin\n"], [238, "            prev_data[ii*8 +:8] = 'bX;\n"], [238, "            prev_prev_data[ii*8 +:8] = 'bX;\n"], [238, "            prev_char_is_align[ii] = 1'bX;\n"], [238, "          end\n"], [238, "      endcase\n"], [238, "    end\n"], [238, "    if(IS_RX) begin : gen_rx\n"], [238, "      assign char_is_align[ii] = !reset && (rx_char_is_a[ii] | rx_char_is_f[ii]);\n"], [238, "      assign data_replaced[ii*8 +: 8] = char_is_align[ii] ? data_prev_eof[ii*8 +: 8] : data[ii*8 +: 8];\n"], [238, "      assign data_prev_eof[ii*8 +: 8] = single_eof ? data_prev_eof_single : prev_char_is_align[ii] ? data_prev_prev_eof[ii*8 +: 8] : prev_data[ii*8 +: 8];\n"], [238, "      assign data_prev_prev_eof[ii*8 +: 8] = prev_prev_data[ii*8 +: 8];\n"], [238, "    end else begin : gen_tx\n"], [238, "      assign data_prev_eof[ii*8 +: 8] = single_eof ? data_prev_eof_single : prev_data[ii*8 +: 8];\n"], [238, "      assign char_is_align[ii] = !reset && (tx_eomf[ii] || (eof[ii] && !(single_eof ? char_is_align_prev_single : prev_char_is_align[ii]))) && (data[ii*8 +: 8] == data_prev_eof[ii*8 +: 8]);\n"], [238, "      assign data_replaced[ii*8 +: 8] = char_is_align[ii] ? (tx_eomf[ii] ? 8'h7c : 8'hfc) : data[ii*8 +: 8];\n"], [238, "    end\n"]]}}