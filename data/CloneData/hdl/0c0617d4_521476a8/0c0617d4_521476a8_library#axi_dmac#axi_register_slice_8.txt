Source Block: hdl/library/axi_dmac/axi_register_slice.v@99:138@HdlStmIf
assign fwd_valid_s = bwd_valid_s;
assign fwd_ready_s = m_axi_ready;
end
endgenerate

generate if (BACKWARD_REGISTERED == 1) begin

reg bwd_ready = 1'b1;
reg [DATA_WIDTH-1:0] bwd_data = 'h00;

assign bwd_valid_s = ~bwd_ready | s_axi_valid;
assign bwd_data_s = bwd_ready ? s_axi_data : bwd_data;
assign bwd_ready_s = bwd_ready;

always @(posedge clk) begin
  if (bwd_ready)
    bwd_data <= s_axi_data;
end

always @(posedge clk) begin
  if (resetn == 1'b0) begin
    bwd_ready <= 1'b1;
  end else begin
    if (fwd_ready_s)
      bwd_ready <= 1'b1;
    else if (s_axi_valid)
      bwd_ready <= 1'b0;
  end
end

end else begin
assign bwd_valid_s = s_axi_valid;
assign bwd_data_s = s_axi_data;
assign bwd_ready_s = fwd_ready_s;
end endgenerate

assign m_axi_data = fwd_data_s;
assign m_axi_valid = fwd_valid_s;
assign s_axi_ready = bwd_ready_s;


Diff Content:
- 104 generate if (BACKWARD_REGISTERED == 1) begin
- 106 reg bwd_ready = 1'b1;
- 107 reg [DATA_WIDTH-1:0] bwd_data = 'h00;
- 109 assign bwd_valid_s = ~bwd_ready | s_axi_valid;
- 110 assign bwd_data_s = bwd_ready ? s_axi_data : bwd_data;
- 111 assign bwd_ready_s = bwd_ready;
- 113 always @(posedge clk) begin
- 114   if (bwd_ready)
- 115     bwd_data <= s_axi_data;
- 116 end
- 118 always @(posedge clk) begin
- 119   if (resetn == 1'b0) begin
- 120     bwd_ready <= 1'b1;
- 122     if (fwd_ready_s)
- 123       bwd_ready <= 1'b1;
- 124     else if (s_axi_valid)
- 125       bwd_ready <= 1'b0;
- 126   end
- 127 end
- 129 end else begin
- 130 assign bwd_valid_s = s_axi_valid;
- 131 assign bwd_data_s = s_axi_data;
- 132 assign bwd_ready_s = fwd_ready_s;
- 133 end endgenerate
+ 120   endgenerate
+ 120   generate if (BACKWARD_REGISTERED == 1) begin
+ 120     reg bwd_ready = 1'b1;
+ 120     reg [DATA_WIDTH-1:0] bwd_data = 'h00;
+ 120     assign bwd_valid_s = ~bwd_ready | s_axi_valid;
+ 120     assign bwd_data_s = bwd_ready ? s_axi_data : bwd_data;
+ 120     assign bwd_ready_s = bwd_ready;
+ 120     always @(posedge clk) begin
+ 120       if (bwd_ready)
+ 120         bwd_data <= s_axi_data;
+ 120     end
+ 120     always @(posedge clk) begin
+ 120       if (resetn == 1'b0) begin
+ 120         bwd_ready <= 1'b1;
+ 120       end else begin
+ 120         if (fwd_ready_s)
+ 120           bwd_ready <= 1'b1;
+ 120         else if (s_axi_valid)
+ 120           bwd_ready <= 1'b0;
+ 120       end
+ 120     end

Clone Blocks:
Clone Blocks 1:
hdl/library/axi_dmac/axi_register_slice.v@67:106
wire bwd_ready_s;
wire [DATA_WIDTH-1:0] fwd_data_s;
wire fwd_valid_s;
wire fwd_ready_s;

generate if (FORWARD_REGISTERED == 1) begin

reg fwd_valid = 1'b0;
reg [DATA_WIDTH-1:0] fwd_data = 'h00;

assign fwd_ready_s = ~fwd_valid | m_axi_ready;
assign fwd_valid_s = fwd_valid;
assign fwd_data_s = fwd_data;

always @(posedge clk) begin
  if (~fwd_valid | m_axi_ready)
    fwd_data <= bwd_data_s;
end

always @(posedge clk) begin
  if (resetn == 1'b0) begin
    fwd_valid <= 1'b0;
  end else begin
    if (bwd_valid_s)
      fwd_valid <= 1'b1;
    else if (m_axi_ready)
      fwd_valid <= 1'b0;
  end
end

end else begin
assign fwd_data_s = bwd_data_s;
assign fwd_valid_s = bwd_valid_s;
assign fwd_ready_s = m_axi_ready;
end
endgenerate

generate if (BACKWARD_REGISTERED == 1) begin

reg bwd_ready = 1'b1;

