{"Source Block": ["hdl/library/axi_dmac/src_axi_mm.v@203:213@HdlStmAssign", "\n/*\n * We won't be receiving data before we've requested it and we won't request\n * data unless there is room in the store-and-forward memory.\n */\nassign m_axi_rready = 1'b1;\n\n/*\n * We need to complete all bursts for which an address has been put onto the\n * AXI-MM interface.\n */\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[208, "assign m_axi_rready = 1'b1;\n"]], "Add": [[208, "  splitter #(\n"], [208, "    .NUM_M(3)\n"], [208, "  ) i_req_splitter (\n"], [208, "    .clk(m_axi_aclk),\n"], [208, "    .resetn(m_axi_aresetn),\n"], [208, "    .s_valid(req_valid),\n"], [208, "    .s_ready(req_ready),\n"], [208, "    .m_valid({\n"], [208, "      bl_valid,\n"], [208, "      bl_valid_ag,\n"], [208, "      req_valid_ag}),\n"], [208, "    .m_ready({\n"], [208, "      bl_ready,\n"], [208, "      bl_ready_ag,\n"], [208, "      req_ready_ag}));\n"], [208, "  address_generator #(\n"], [208, "    .ID_WIDTH(ID_WIDTH),\n"], [208, "    .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH),\n"], [208, "    .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH),\n"], [208, "    .DMA_DATA_WIDTH(DMA_DATA_WIDTH),\n"], [208, "    .LENGTH_WIDTH(AXI_LENGTH_WIDTH),\n"], [208, "    .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH)\n"], [208, "  ) i_addr_gen (\n"], [208, "    .clk(m_axi_aclk),\n"], [208, "    .resetn(m_axi_aresetn),\n"], [208, "    .enable(enable),\n"], [208, "    .enabled(address_enabled),\n"], [208, "    .request_id(request_id),\n"], [208, "    .id(address_id),\n"], [208, "    .req_valid(req_valid_ag),\n"], [208, "    .req_ready(req_ready_ag),\n"], [208, "    .req_address(req_address),\n"], [208, "    .bl_valid(bl_valid_ag),\n"], [208, "    .bl_ready(bl_ready_ag),\n"], [208, "    .measured_last_burst_length(req_last_burst_length),\n"], [208, "    .eot(address_eot),\n"], [208, "    .addr_ready(m_axi_arready),\n"], [208, "    .addr_valid(m_axi_arvalid),\n"], [208, "    .addr(m_axi_araddr),\n"], [208, "    .len(m_axi_arlen),\n"], [208, "    .size(m_axi_arsize),\n"], [208, "    .burst(m_axi_arburst),\n"], [208, "    .prot(m_axi_arprot),\n"], [208, "    .cache(m_axi_arcache));\n"], [208, "  assign fifo_valid = m_axi_rvalid;\n"], [208, "  assign fifo_data = m_axi_rdata;\n"], [208, "  assign fifo_last = m_axi_rlast;\n"], [208, "  /*\n"], [208, "   * There is a requirement that data_id <= address_id (modulo 2**ID_WIDTH).  We\n"], [208, "   * know that we will never receive data before we have requested it so there is\n"], [208, "   * an implicit dependency between data_id and address_id and no need to\n"], [208, "   * explicitly track it.\n"], [208, "   */\n"], [208, "  always @(posedge m_axi_aclk) begin\n"], [208, "    if (m_axi_aresetn == 1'b0) begin\n"], [208, "      id <= 'h00;\n"], [208, "    end else if (m_axi_rvalid == 1'b1 && m_axi_rlast == 1'b1) begin\n"], [208, "      id <= inc_id(id);\n"], [208, "    end\n"], [208, "  end\n"]]}}