{"Source Block": ["hdl/library/axi_adrv9001/axi_adrv9001_tx.v@107:427@HdlStmIf", "  input       [ 13:0]     up_raddr,\n  output  reg [ 31:0]     up_rdata,\n  output  reg             up_rack\n);\ngenerate\nif (ENABLED == 0) begin : core_disabled\n\n  assign dac_rst = 1'b0;\n  assign dac_data_valid_A = 1'b0;\n  assign dac_data_i_A = 16'b0;\n  assign dac_data_q_A = 16'b0;\n  assign dac_data_valid_B = 1'b0;\n  assign dac_data_i_B = 16'b0;\n  assign dac_data_q_B = 16'b0;\n  assign dac_single_lane = 1'b0;\n  assign dac_sdr_ddr_n = 1'b0;\n  assign dac_symb_op = 1'b0;\n  assign dac_symb_8_16b = 1'b0;\n  assign up_dac_r1_mode = 1'b0;\n  assign dac_sync_out = 1'b0;\n  assign dac_valid = 1'b0;\n  assign dac_enable_i0 = 1'b0;\n  assign dac_enable_q0 = 1'b0;\n  assign dac_enable_i1 = 1'b0;\n  assign dac_enable_q1 = 1'b0;\n\n  always @(*) begin\n    up_wack = 1'b0;\n    up_rdata = 32'b0;\n    up_rack = 1'b0;\n  end\n\nend else begin : core_enabled\n\n  // configuration settings\n\n  localparam  CONFIG =  (USE_RX_CLK_FOR_TX * 1024) +\n                        (CMOS_LVDS_N * 128) +\n                        (MODE_R1 * 16) +\n                        (DDS_DISABLE * 64) +\n                        (IQCORRECTION_DISABLE * 1);\n\n  // internal registers\n\n  reg               dac_data_sync = 'd0;\n  reg     [15:0]    dac_rate_cnt = 'd0;\n  reg               dac_valid_int = 'd0;\n\n  // internal signals\n\n  wire              dac_data_sync_s;\n  wire    [ 15:0]   dac_data_iq_i0_s;\n  wire    [ 15:0]   dac_data_iq_q0_s;\n  wire    [ 15:0]   dac_data_iq_i1_s;\n  wire    [ 15:0]   dac_data_iq_q1_s;\n  wire              dac_dds_format_s;\n  wire    [ 15:0]   dac_datarate_s;\n  wire      [4:0]   dac_num_lanes;\n  wire    [  4:0]   up_wack_s;\n  wire    [  4:0]   up_rack_s;\n  wire    [ 31:0]   up_rdata_s[0:4];\n\n  // master/slave\n\n  assign dac_data_sync_s = (EXT_SYNC == 0) ? dac_sync_out : dac_sync_in;\n\n  always @(posedge dac_clk) begin\n    dac_data_sync <= dac_data_sync_s;\n  end\n\n  // rate counters and data sync signals\n\n  always @(posedge dac_clk) begin\n    if (dac_rst == 1'b1) begin\n      dac_rate_cnt <= 16'b0;\n    end else begin\n      if ((dac_data_sync == 1'b1) || (dac_rate_cnt == 16'd0)) begin\n        dac_rate_cnt <= dac_datarate_s;\n      end else begin\n        dac_rate_cnt <= dac_rate_cnt - 1'b1;\n      end\n    end\n  end\n\n  // dma interface\n\n  assign dac_data_valid_A = dac_valid_int;\n  assign dac_data_valid_B = dac_valid_int;\n\n  always @(posedge dac_clk) begin\n    if (dac_rst == 1'b1) begin\n      dac_valid_int <= 1'b0;\n    end else begin\n      dac_valid_int <= (dac_rate_cnt == 16'd0) ? tdd_tx_valid : 1'b0;\n    end\n  end\n\n  // processor read interface\n\n  always @(negedge up_rstn or posedge up_clk) begin\n    if (up_rstn == 0) begin\n      up_wack <= 'd0;\n      up_rack <= 'd0;\n      up_rdata <= 'd0;\n    end else begin\n      up_wack <= | up_wack_s;\n      up_rack <= | up_rack_s;\n      up_rdata <= up_rdata_s[0] | up_rdata_s[1] | up_rdata_s[2] |\n                  up_rdata_s[3] | up_rdata_s[4];\n    end\n  end\n\n  // dac channel 0\n\n  axi_adrv9001_tx_channel #(\n    .CHANNEL_ID (0),\n    .COMMON_ID (CHANNEL_BASE_ADDR),\n    .Q_OR_I_N (0),\n    .DISABLE (DISABLE),\n    .DDS_DISABLE (DDS_DISABLE),\n    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n    .DAC_DDS_TYPE (DAC_DDS_TYPE),\n    .DAC_DDS_CORDIC_DW (DAC_DDS_CORDIC_DW),\n    .DAC_DDS_CORDIC_PHASE_DW (DAC_DDS_CORDIC_PHASE_DW))\n  i_tx_channel_0 (\n    .dac_clk (dac_clk),\n    .dac_rst (dac_rst),\n    .dac_data_in_req (dac_valid),\n    .dac_data_in (dac_data_i0),\n    .dac_data_out_req (dac_data_valid_A),\n    .dac_data_out (dac_data_i_A[15:0]),\n    .dac_data_iq_in (dac_data_iq_q0_s),\n    .dac_data_iq_out (dac_data_iq_i0_s),\n    .dac_enable (dac_enable_i0),\n    .dac_data_sync (dac_data_sync),\n    .dac_dds_format (dac_dds_format_s),\n    .up_rstn (up_rstn),\n    .up_clk (up_clk),\n    .up_wreq (up_wreq),\n    .up_waddr (up_waddr),\n    .up_wdata (up_wdata),\n    .up_wack (up_wack_s[0]),\n    .up_rreq (up_rreq),\n    .up_raddr (up_raddr),\n    .up_rdata (up_rdata_s[0]),\n    .up_rack (up_rack_s[0]));\n\n  // dac channel 1\n\n  axi_adrv9001_tx_channel #(\n    .CHANNEL_ID (1),\n    .COMMON_ID (CHANNEL_BASE_ADDR),\n    .Q_OR_I_N (1),\n    .DISABLE (DISABLE),\n    .DDS_DISABLE (DDS_DISABLE),\n    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n    .DAC_DDS_TYPE (DAC_DDS_TYPE),\n    .DAC_DDS_CORDIC_DW (DAC_DDS_CORDIC_DW),\n    .DAC_DDS_CORDIC_PHASE_DW (DAC_DDS_CORDIC_PHASE_DW))\n  i_tx_channel_1 (\n    .dac_clk (dac_clk),\n    .dac_rst (dac_rst),\n    .dac_data_in_req (),\n    .dac_data_in (dac_data_q0),\n    .dac_data_out_req (dac_data_valid_A),\n    .dac_data_out (dac_data_q_A[15:0]),\n    .dac_data_iq_in (dac_data_iq_i0_s),\n    .dac_data_iq_out (dac_data_iq_q0_s),\n    .dac_enable (dac_enable_q0),\n    .dac_data_sync (dac_data_sync),\n    .dac_dds_format (dac_dds_format_s),\n    .up_rstn (up_rstn),\n    .up_clk (up_clk),\n    .up_wreq (up_wreq),\n    .up_waddr (up_waddr),\n    .up_wdata (up_wdata),\n    .up_wack (up_wack_s[1]),\n    .up_rreq (up_rreq),\n    .up_raddr (up_raddr),\n    .up_rdata (up_rdata_s[1]),\n    .up_rack (up_rack_s[1]));\n\n  // dac channel 2 - disabled in 1R1T mode\n\n  axi_adrv9001_tx_channel #(\n    .CHANNEL_ID (2),\n    .COMMON_ID (CHANNEL_BASE_ADDR),\n    .Q_OR_I_N (0),\n    .DISABLE (MODE_R1),\n    .DDS_DISABLE (DDS_DISABLE),\n    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n    .DAC_DDS_TYPE (DAC_DDS_TYPE),\n    .DAC_DDS_CORDIC_DW (DAC_DDS_CORDIC_DW),\n    .DAC_DDS_CORDIC_PHASE_DW (DAC_DDS_CORDIC_PHASE_DW))\n  i_tx_channel_2 (\n    .dac_clk (dac_clk),\n    .dac_rst (dac_rst),\n    .dac_data_in_req (),\n    .dac_data_in (dac_data_i1),\n    .dac_data_out_req (dac_data_valid_B),\n    .dac_data_out (dac_data_i_B[15:0]),\n    .dac_data_iq_in (dac_data_iq_q1_s),\n    .dac_data_iq_out (dac_data_iq_i1_s),\n    .dac_enable (dac_enable_i1),\n    .dac_data_sync (dac_data_sync),\n    .dac_dds_format (dac_dds_format_s),\n    .up_rstn (up_rstn),\n    .up_clk (up_clk),\n    .up_wreq (up_wreq),\n    .up_waddr (up_waddr),\n    .up_wdata (up_wdata),\n    .up_wack (up_wack_s[2]),\n    .up_rreq (up_rreq),\n    .up_raddr (up_raddr),\n    .up_rdata (up_rdata_s[2]),\n    .up_rack (up_rack_s[2]));\n\n  // dac channel 3 - disabled in 1R1T mode\n\n  axi_adrv9001_tx_channel #(\n    .CHANNEL_ID (3),\n    .COMMON_ID (CHANNEL_BASE_ADDR),\n    .Q_OR_I_N (1),\n    .DISABLE (MODE_R1),\n    .DDS_DISABLE (DDS_DISABLE),\n    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n    .DAC_DDS_TYPE (DAC_DDS_TYPE),\n    .DAC_DDS_CORDIC_DW (DAC_DDS_CORDIC_DW),\n    .DAC_DDS_CORDIC_PHASE_DW (DAC_DDS_CORDIC_PHASE_DW))\n  i_tx_channel_3 (\n    .dac_clk (dac_clk),\n    .dac_rst (dac_rst),\n    .dac_data_in_req (),\n    .dac_data_in (dac_data_q1),\n    .dac_data_out_req (dac_data_valid_B),\n    .dac_data_out (dac_data_q_B[15:0]),\n    .dac_data_iq_in (dac_data_iq_i1_s),\n    .dac_data_iq_out (dac_data_iq_q1_s),\n    .dac_enable (dac_enable_q1),\n    .dac_data_sync (dac_data_sync),\n    .dac_dds_format (dac_dds_format_s),\n    .up_rstn (up_rstn),\n    .up_clk (up_clk),\n    .up_wreq (up_wreq),\n    .up_waddr (up_waddr),\n    .up_wdata (up_wdata),\n    .up_wack (up_wack_s[3]),\n    .up_rreq (up_rreq),\n    .up_raddr (up_raddr),\n    .up_rdata (up_rdata_s[3]),\n    .up_rack (up_rack_s[3]));\n\n  // dac common processor interface\n\n  up_dac_common #(\n    .ID (ID),\n    .FPGA_TECHNOLOGY (FPGA_TECHNOLOGY),\n    .FPGA_FAMILY (FPGA_FAMILY),\n    .SPEED_GRADE (SPEED_GRADE),\n    .DEV_PACKAGE (DEV_PACKAGE),\n    .CONFIG(CONFIG),\n    .CLK_EDGE_SEL(0),\n    .COMMON_ID(COMMON_BASE_ADDR),\n    .DRP_DISABLE(1),\n    .USERPORTS_DISABLE(1),\n    .GPIO_DISABLE(1))\n  i_up_dac_common (\n    .mmcm_rst (),\n    .dac_clk (dac_clk),\n    .dac_rst (dac_rst),\n    .dac_num_lanes (dac_num_lanes),\n    .dac_sdr_ddr_n (dac_sdr_ddr_n),\n    .dac_symb_op (dac_symb_op),\n    .dac_symb_8_16b (dac_symb_8_16b),\n    .dac_sync (dac_sync_out),\n    .dac_ext_sync_arm (dac_ext_sync_arm),\n    .dac_frame (),\n    .dac_clksel (),\n    .dac_par_type (),\n    .dac_par_enb (),\n    .dac_r1_mode (),\n    .up_dac_r1_mode (up_dac_r1_mode),\n    .dac_datafmt (dac_dds_format_s),\n    .dac_datarate (dac_datarate_s),\n    .dac_status (1'b1),\n    .dac_status_unf (dac_dunf),\n    .dac_clk_ratio (dac_clk_ratio),\n    .up_dac_ce (),\n    .up_pps_rcounter(32'h0),\n    .up_pps_status(1'b0),\n    .up_pps_irq_mask(),\n    .up_drp_sel (),\n    .up_drp_wr (),\n    .up_drp_addr (),\n    .up_drp_wdata (),\n    .up_drp_rdata (32'd0),\n    .up_drp_ready (1'd0),\n    .up_drp_locked (1'd1),\n    .up_usr_chanmax (),\n    .dac_usr_chanmax (8'd3),\n    .up_dac_gpio_in (32'd0),\n    .up_dac_gpio_out (),\n    .up_rstn (up_rstn),\n    .up_clk (up_clk),\n    .up_wreq (up_wreq),\n    .up_waddr (up_waddr),\n    .up_wdata (up_wdata),\n    .up_wack (up_wack_s[4]),\n    .up_rreq (up_rreq),\n    .up_raddr (up_raddr),\n    .up_rdata (up_rdata_s[4]),\n    .up_rack (up_rack_s[4]));\n\n  assign dac_single_lane = dac_num_lanes[0];\n\nend\nendgenerate\n\nendmodule\n\n// ***************************************************************************\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[112, "if (ENABLED == 0) begin : core_disabled\n"], [114, "  assign dac_rst = 1'b0;\n"], [115, "  assign dac_data_valid_A = 1'b0;\n"], [116, "  assign dac_data_i_A = 16'b0;\n"], [117, "  assign dac_data_q_A = 16'b0;\n"], [118, "  assign dac_data_valid_B = 1'b0;\n"], [119, "  assign dac_data_i_B = 16'b0;\n"], [120, "  assign dac_data_q_B = 16'b0;\n"], [121, "  assign dac_single_lane = 1'b0;\n"], [122, "  assign dac_sdr_ddr_n = 1'b0;\n"], [123, "  assign dac_symb_op = 1'b0;\n"], [124, "  assign dac_symb_8_16b = 1'b0;\n"], [125, "  assign up_dac_r1_mode = 1'b0;\n"], [126, "  assign dac_sync_out = 1'b0;\n"], [127, "  assign dac_valid = 1'b0;\n"], [128, "  assign dac_enable_i0 = 1'b0;\n"], [129, "  assign dac_enable_q0 = 1'b0;\n"], [130, "  assign dac_enable_i1 = 1'b0;\n"], [131, "  assign dac_enable_q1 = 1'b0;\n"], [133, "  always @(*) begin\n"], [134, "    up_wack = 1'b0;\n"], [135, "    up_rdata = 32'b0;\n"], [136, "    up_rack = 1'b0;\n"], [137, "  end\n"], [139, "end else begin : core_enabled\n"], [143, "  localparam  CONFIG =  (USE_RX_CLK_FOR_TX * 1024) +\n"], [144, "                        (CMOS_LVDS_N * 128) +\n"], [145, "                        (MODE_R1 * 16) +\n"], [146, "                        (DDS_DISABLE * 64) +\n"], [147, "                        (IQCORRECTION_DISABLE * 1);\n"], [151, "  reg               dac_data_sync = 'd0;\n"], [152, "  reg     [15:0]    dac_rate_cnt = 'd0;\n"], [153, "  reg               dac_valid_int = 'd0;\n"], [157, "  wire              dac_data_sync_s;\n"], [158, "  wire    [ 15:0]   dac_data_iq_i0_s;\n"], [159, "  wire    [ 15:0]   dac_data_iq_q0_s;\n"], [160, "  wire    [ 15:0]   dac_data_iq_i1_s;\n"], [161, "  wire    [ 15:0]   dac_data_iq_q1_s;\n"], [162, "  wire              dac_dds_format_s;\n"], [163, "  wire    [ 15:0]   dac_datarate_s;\n"], [164, "  wire      [4:0]   dac_num_lanes;\n"], [165, "  wire    [  4:0]   up_wack_s;\n"], [166, "  wire    [  4:0]   up_rack_s;\n"], [167, "  wire    [ 31:0]   up_rdata_s[0:4];\n"], [171, "  assign dac_data_sync_s = (EXT_SYNC == 0) ? dac_sync_out : dac_sync_in;\n"], [173, "  always @(posedge dac_clk) begin\n"], [174, "    dac_data_sync <= dac_data_sync_s;\n"], [175, "  end\n"], [179, "  always @(posedge dac_clk) begin\n"], [180, "    if (dac_rst == 1'b1) begin\n"], [181, "      dac_rate_cnt <= 16'b0;\n"], [182, "    end else begin\n"], [183, "      if ((dac_data_sync == 1'b1) || (dac_rate_cnt == 16'd0)) begin\n"], [184, "        dac_rate_cnt <= dac_datarate_s;\n"], [186, "        dac_rate_cnt <= dac_rate_cnt - 1'b1;\n"], [189, "  end\n"], [193, "  assign dac_data_valid_A = dac_valid_int;\n"], [194, "  assign dac_data_valid_B = dac_valid_int;\n"], [196, "  always @(posedge dac_clk) begin\n"], [197, "    if (dac_rst == 1'b1) begin\n"], [198, "      dac_valid_int <= 1'b0;\n"], [199, "    end else begin\n"], [200, "      dac_valid_int <= (dac_rate_cnt == 16'd0) ? tdd_tx_valid : 1'b0;\n"], [202, "  end\n"], [206, "  always @(negedge up_rstn or posedge up_clk) begin\n"], [207, "    if (up_rstn == 0) begin\n"], [208, "      up_wack <= 'd0;\n"], [209, "      up_rack <= 'd0;\n"], [210, "      up_rdata <= 'd0;\n"], [211, "    end else begin\n"], [212, "      up_wack <= | up_wack_s;\n"], [213, "      up_rack <= | up_rack_s;\n"], [214, "      up_rdata <= up_rdata_s[0] | up_rdata_s[1] | up_rdata_s[2] |\n"], [215, "                  up_rdata_s[3] | up_rdata_s[4];\n"], [217, "  end\n"], [221, "  axi_adrv9001_tx_channel #(\n"], [222, "    .CHANNEL_ID (0),\n"], [223, "    .COMMON_ID (CHANNEL_BASE_ADDR),\n"], [224, "    .Q_OR_I_N (0),\n"], [225, "    .DISABLE (DISABLE),\n"], [226, "    .DDS_DISABLE (DDS_DISABLE),\n"], [227, "    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n"], [228, "    .DAC_DDS_TYPE (DAC_DDS_TYPE),\n"], [229, "    .DAC_DDS_CORDIC_DW (DAC_DDS_CORDIC_DW),\n"], [230, "    .DAC_DDS_CORDIC_PHASE_DW (DAC_DDS_CORDIC_PHASE_DW))\n"], [231, "  i_tx_channel_0 (\n"], [232, "    .dac_clk (dac_clk),\n"], [233, "    .dac_rst (dac_rst),\n"], [234, "    .dac_data_in_req (dac_valid),\n"], [235, "    .dac_data_in (dac_data_i0),\n"], [236, "    .dac_data_out_req (dac_data_valid_A),\n"], [237, "    .dac_data_out (dac_data_i_A[15:0]),\n"], [238, "    .dac_data_iq_in (dac_data_iq_q0_s),\n"], [239, "    .dac_data_iq_out (dac_data_iq_i0_s),\n"], [240, "    .dac_enable (dac_enable_i0),\n"], [241, "    .dac_data_sync (dac_data_sync),\n"], [242, "    .dac_dds_format (dac_dds_format_s),\n"], [243, "    .up_rstn (up_rstn),\n"], [244, "    .up_clk (up_clk),\n"], [245, "    .up_wreq (up_wreq),\n"], [246, "    .up_waddr (up_waddr),\n"], [247, "    .up_wdata (up_wdata),\n"], [248, "    .up_wack (up_wack_s[0]),\n"], [249, "    .up_rreq (up_rreq),\n"], [250, "    .up_raddr (up_raddr),\n"], [251, "    .up_rdata (up_rdata_s[0]),\n"], [252, "    .up_rack (up_rack_s[0]));\n"], [256, "  axi_adrv9001_tx_channel #(\n"], [257, "    .CHANNEL_ID (1),\n"], [258, "    .COMMON_ID (CHANNEL_BASE_ADDR),\n"], [259, "    .Q_OR_I_N (1),\n"], [260, "    .DISABLE (DISABLE),\n"], [261, "    .DDS_DISABLE (DDS_DISABLE),\n"], [262, "    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n"], [263, "    .DAC_DDS_TYPE (DAC_DDS_TYPE),\n"], [264, "    .DAC_DDS_CORDIC_DW (DAC_DDS_CORDIC_DW),\n"], [265, "    .DAC_DDS_CORDIC_PHASE_DW (DAC_DDS_CORDIC_PHASE_DW))\n"], [266, "  i_tx_channel_1 (\n"], [267, "    .dac_clk (dac_clk),\n"], [268, "    .dac_rst (dac_rst),\n"], [269, "    .dac_data_in_req (),\n"], [270, "    .dac_data_in (dac_data_q0),\n"], [271, "    .dac_data_out_req (dac_data_valid_A),\n"], [272, "    .dac_data_out (dac_data_q_A[15:0]),\n"], [273, "    .dac_data_iq_in (dac_data_iq_i0_s),\n"], [274, "    .dac_data_iq_out (dac_data_iq_q0_s),\n"], [275, "    .dac_enable (dac_enable_q0),\n"], [276, "    .dac_data_sync (dac_data_sync),\n"], [277, "    .dac_dds_format (dac_dds_format_s),\n"], [278, "    .up_rstn (up_rstn),\n"], [279, "    .up_clk (up_clk),\n"], [280, "    .up_wreq (up_wreq),\n"], [281, "    .up_waddr (up_waddr),\n"], [282, "    .up_wdata (up_wdata),\n"], [283, "    .up_wack (up_wack_s[1]),\n"], [284, "    .up_rreq (up_rreq),\n"], [285, "    .up_raddr (up_raddr),\n"], [286, "    .up_rdata (up_rdata_s[1]),\n"], [287, "    .up_rack (up_rack_s[1]));\n"], [291, "  axi_adrv9001_tx_channel #(\n"], [292, "    .CHANNEL_ID (2),\n"], [293, "    .COMMON_ID (CHANNEL_BASE_ADDR),\n"], [294, "    .Q_OR_I_N (0),\n"], [295, "    .DISABLE (MODE_R1),\n"], [296, "    .DDS_DISABLE (DDS_DISABLE),\n"], [297, "    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n"], [298, "    .DAC_DDS_TYPE (DAC_DDS_TYPE),\n"], [299, "    .DAC_DDS_CORDIC_DW (DAC_DDS_CORDIC_DW),\n"], [300, "    .DAC_DDS_CORDIC_PHASE_DW (DAC_DDS_CORDIC_PHASE_DW))\n"], [301, "  i_tx_channel_2 (\n"], [302, "    .dac_clk (dac_clk),\n"], [303, "    .dac_rst (dac_rst),\n"], [304, "    .dac_data_in_req (),\n"], [305, "    .dac_data_in (dac_data_i1),\n"], [306, "    .dac_data_out_req (dac_data_valid_B),\n"], [307, "    .dac_data_out (dac_data_i_B[15:0]),\n"], [308, "    .dac_data_iq_in (dac_data_iq_q1_s),\n"], [309, "    .dac_data_iq_out (dac_data_iq_i1_s),\n"], [310, "    .dac_enable (dac_enable_i1),\n"], [311, "    .dac_data_sync (dac_data_sync),\n"], [312, "    .dac_dds_format (dac_dds_format_s),\n"], [313, "    .up_rstn (up_rstn),\n"], [314, "    .up_clk (up_clk),\n"], [315, "    .up_wreq (up_wreq),\n"], [316, "    .up_waddr (up_waddr),\n"], [317, "    .up_wdata (up_wdata),\n"], [318, "    .up_wack (up_wack_s[2]),\n"], [319, "    .up_rreq (up_rreq),\n"], [320, "    .up_raddr (up_raddr),\n"], [321, "    .up_rdata (up_rdata_s[2]),\n"], [322, "    .up_rack (up_rack_s[2]));\n"], [326, "  axi_adrv9001_tx_channel #(\n"], [327, "    .CHANNEL_ID (3),\n"], [328, "    .COMMON_ID (CHANNEL_BASE_ADDR),\n"], [329, "    .Q_OR_I_N (1),\n"], [330, "    .DISABLE (MODE_R1),\n"], [331, "    .DDS_DISABLE (DDS_DISABLE),\n"], [332, "    .IQCORRECTION_DISABLE (IQCORRECTION_DISABLE),\n"], [333, "    .DAC_DDS_TYPE (DAC_DDS_TYPE),\n"], [334, "    .DAC_DDS_CORDIC_DW (DAC_DDS_CORDIC_DW),\n"], [335, "    .DAC_DDS_CORDIC_PHASE_DW (DAC_DDS_CORDIC_PHASE_DW))\n"], [336, "  i_tx_channel_3 (\n"], [337, "    .dac_clk (dac_clk),\n"], [338, "    .dac_rst (dac_rst),\n"], [339, "    .dac_data_in_req (),\n"], [340, "    .dac_data_in (dac_data_q1),\n"], [341, "    .dac_data_out_req (dac_data_valid_B),\n"], [342, "    .dac_data_out (dac_data_q_B[15:0]),\n"], [343, "    .dac_data_iq_in (dac_data_iq_i1_s),\n"], [344, "    .dac_data_iq_out (dac_data_iq_q1_s),\n"], [345, "    .dac_enable (dac_enable_q1),\n"], [346, "    .dac_data_sync (dac_data_sync),\n"], [347, "    .dac_dds_format (dac_dds_format_s),\n"], [348, "    .up_rstn (up_rstn),\n"], [349, "    .up_clk (up_clk),\n"], [350, "    .up_wreq (up_wreq),\n"], [351, "    .up_waddr (up_waddr),\n"], [352, "    .up_wdata (up_wdata),\n"], [353, "    .up_wack (up_wack_s[3]),\n"], [354, "    .up_rreq (up_rreq),\n"], [355, "    .up_raddr (up_raddr),\n"], [356, "    .up_rdata (up_rdata_s[3]),\n"], [357, "    .up_rack (up_rack_s[3]));\n"], [361, "  up_dac_common #(\n"], [362, "    .ID (ID),\n"], [363, "    .FPGA_TECHNOLOGY (FPGA_TECHNOLOGY),\n"], [364, "    .FPGA_FAMILY (FPGA_FAMILY),\n"], [365, "    .SPEED_GRADE (SPEED_GRADE),\n"], [366, "    .DEV_PACKAGE (DEV_PACKAGE),\n"], [367, "    .CONFIG(CONFIG),\n"], [368, "    .CLK_EDGE_SEL(0),\n"], [369, "    .COMMON_ID(COMMON_BASE_ADDR),\n"], [370, "    .DRP_DISABLE(1),\n"], [371, "    .USERPORTS_DISABLE(1),\n"], [372, "    .GPIO_DISABLE(1))\n"], [373, "  i_up_dac_common (\n"], [374, "    .mmcm_rst (),\n"], [375, "    .dac_clk (dac_clk),\n"], [376, "    .dac_rst (dac_rst),\n"], [377, "    .dac_num_lanes (dac_num_lanes),\n"], [378, "    .dac_sdr_ddr_n (dac_sdr_ddr_n),\n"], [379, "    .dac_symb_op (dac_symb_op),\n"], [380, "    .dac_symb_8_16b (dac_symb_8_16b),\n"], [381, "    .dac_sync (dac_sync_out),\n"], [382, "    .dac_ext_sync_arm (dac_ext_sync_arm),\n"], [383, "    .dac_frame (),\n"], [384, "    .dac_clksel (),\n"], [385, "    .dac_par_type (),\n"], [386, "    .dac_par_enb (),\n"], [387, "    .dac_r1_mode (),\n"], [388, "    .up_dac_r1_mode (up_dac_r1_mode),\n"], [389, "    .dac_datafmt (dac_dds_format_s),\n"], [390, "    .dac_datarate (dac_datarate_s),\n"], [391, "    .dac_status (1'b1),\n"], [392, "    .dac_status_unf (dac_dunf),\n"], [393, "    .dac_clk_ratio (dac_clk_ratio),\n"], [394, "    .up_dac_ce (),\n"], [395, "    .up_pps_rcounter(32'h0),\n"], [396, "    .up_pps_status(1'b0),\n"], [397, "    .up_pps_irq_mask(),\n"], [398, "    .up_drp_sel (),\n"], [399, "    .up_drp_wr (),\n"], [400, "    .up_drp_addr (),\n"], [401, "    .up_drp_wdata (),\n"], [402, "    .up_drp_rdata (32'd0),\n"], [403, "    .up_drp_ready (1'd0),\n"], [404, "    .up_drp_locked (1'd1),\n"], [405, "    .up_usr_chanmax (),\n"], [406, "    .dac_usr_chanmax (8'd3),\n"], [407, "    .up_dac_gpio_in (32'd0),\n"], [408, "    .up_dac_gpio_out (),\n"], [409, "    .up_rstn (up_rstn),\n"], [410, "    .up_clk (up_clk),\n"], [411, "    .up_wreq (up_wreq),\n"], [412, "    .up_waddr (up_waddr),\n"], [413, "    .up_wdata (up_wdata),\n"], [414, "    .up_wack (up_wack_s[4]),\n"], [415, "    .up_rreq (up_rreq),\n"], [416, "    .up_raddr (up_raddr),\n"], [417, "    .up_rdata (up_rdata_s[4]),\n"], [418, "    .up_rack (up_rack_s[4]));\n"], [420, "  assign dac_single_lane = dac_num_lanes[0];\n"], [422, "end\n"]], "Add": [[139, "  generate\n"], [139, "  if (ENABLED == 0) begin : core_disabled\n"], [139, "    assign dac_rst = 1'b0;\n"], [139, "    assign dac_data_valid_A = 1'b0;\n"], [139, "    assign dac_data_i_A = 16'b0;\n"], [139, "    assign dac_data_q_A = 16'b0;\n"], [139, "    assign dac_data_valid_B = 1'b0;\n"], [139, "    assign dac_data_i_B = 16'b0;\n"], [139, "    assign dac_data_q_B = 16'b0;\n"], [139, "    assign dac_single_lane = 1'b0;\n"], [139, "    assign dac_sdr_ddr_n = 1'b0;\n"], [139, "    assign dac_symb_op = 1'b0;\n"], [139, "    assign dac_symb_8_16b = 1'b0;\n"], [139, "    assign up_dac_r1_mode = 1'b0;\n"], [139, "    assign dac_sync_out = 1'b0;\n"], [139, "    assign dac_valid = 1'b0;\n"], [139, "    assign dac_enable_i0 = 1'b0;\n"], [139, "    assign dac_enable_q0 = 1'b0;\n"], [139, "    assign dac_enable_i1 = 1'b0;\n"], [139, "    assign dac_enable_q1 = 1'b0;\n"], [139, "    always @(*) begin\n"], [139, "      up_wack = 1'b0;\n"], [139, "      up_rdata = 32'b0;\n"], [139, "      up_rack = 1'b0;\n"], [139, "    end\n"], [139, "  end else begin : core_enabled\n"], [147, "    localparam  CONFIG =  (USE_RX_CLK_FOR_TX * 1024) +\n"], [147, "                          (CMOS_LVDS_N * 128) +\n"], [147, "                          (MODE_R1 * 16) +\n"], [147, "                          (DDS_DISABLE * 64) +\n"], [147, "                          (IQCORRECTION_DISABLE * 1);\n"], [153, "    reg               dac_data_sync = 'd0;\n"], [153, "    reg     [15:0]    dac_rate_cnt = 'd0;\n"], [153, "    reg               dac_valid_int = 'd0;\n"], [167, "    wire              dac_data_sync_s;\n"], [167, "    wire    [ 15:0]   dac_data_iq_i0_s;\n"], [167, "    wire    [ 15:0]   dac_data_iq_q0_s;\n"], [167, "    wire    [ 15:0]   dac_data_iq_i1_s;\n"], [167, "    wire    [ 15:0]   dac_data_iq_q1_s;\n"], [167, "    wire              dac_dds_format_s;\n"], [167, "    wire    [ 15:0]   dac_datarate_s;\n"], [167, "    wire      [4:0]   dac_num_lanes;\n"], [167, "    wire    [  4:0]   up_wack_s;\n"], [167, "    wire    [  4:0]   up_rack_s;\n"], [167, "    wire    [ 31:0]   up_rdata_s[0:4];\n"], [175, "    assign dac_data_sync_s = (EXT_SYNC == 0) ? dac_sync_out : dac_sync_in;\n"], [175, "    always @(posedge dac_clk) begin\n"], [175, "      dac_data_sync <= dac_data_sync_s;\n"], [175, "    end\n"], [184, "    always @(posedge dac_clk) begin\n"], [184, "      if (dac_rst == 1'b1) begin\n"], [184, "        dac_rate_cnt <= 16'b0;\n"], [186, "        if ((dac_data_sync == 1'b1) || (dac_rate_cnt == 16'd0)) begin\n"], [186, "          dac_rate_cnt <= dac_datarate_s;\n"], [186, "        end else begin\n"], [186, "          dac_rate_cnt <= dac_rate_cnt - 1'b1;\n"], [186, "        end\n"], [194, "    assign dac_data_valid_A = dac_valid_int;\n"], [194, "    assign dac_data_valid_B = dac_valid_int;\n"], [200, "    always @(posedge dac_clk) begin\n"], [200, "      if (dac_rst == 1'b1) begin\n"], [200, "        dac_valid_int <= 1'b0;\n"], [200, "      end else begin\n"], [200, "        dac_valid_int <= (dac_rate_cnt == 16'd0) ? tdd_tx_valid : 1'b0;\n"], [200, "      end\n"], [215, "    always @(negedge up_rstn or posedge up_clk) begin\n"], [215, "      if (up_rstn == 0) begin\n"], [215, "        up_wack <= 'd0;\n"], [215, "        up_rack <= 'd0;\n"], [215, "        up_rdata <= 'd0;\n"], [215, "      end else begin\n"], [215, "        up_wack <= | up_wack_s;\n"], [215, "        up_rack <= | up_rack_s;\n"], [215, "        up_rdata <= up_rdata_s[0] | up_rdata_s[1] | up_rdata_s[2] |\n"], [215, "                    up_rdata_s[3] | up_rdata_s[4];\n"], [215, "      end\n"]]}}