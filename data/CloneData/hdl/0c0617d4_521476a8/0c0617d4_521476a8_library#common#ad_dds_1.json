{"Source Block": ["hdl/library/common/ad_dds.v@77:167@HdlStmIf", "  end\n\n  genvar i;\n  generate\n\n    if (DISABLE == 1) begin\n      assign dac_dds_data_s = {(DDS_DW*CLK_RATIO-1){1'b0}};\n    end else begin\n\n      // enable dds\n\n      reg  [PHASE_DW-1:0]  dac_dds_phase_0[1:CLK_RATIO];\n      reg  [PHASE_DW-1:0]  dac_dds_phase_1[1:CLK_RATIO];\n      reg  [PHASE_DW-1:0]  dac_dds_phase_0_m[1:CLK_RATIO];\n      reg  [PHASE_DW-1:0]  dac_dds_phase_1_m[1:CLK_RATIO];\n      reg  [PHASE_DW-1:0]  dac_dds_incr_0 = 'd0;\n      reg  [PHASE_DW-1:0]  dac_dds_incr_1 = 'd0;\n      reg  [CLK_RATIO :1]  sync_min_pulse_m = 'd0;\n\n      // For scenarios where the synchronization signal comes from an external\n      // source and it is high for a longer period of time, the phase\n      // accumulator stages must be reset, in order to avoid a noise like\n      // signal caused by sending all the summed outputs of each DDS stage.\n      // There is a minimum synchronization pulse width of n clock cycles,\n      // that is required to synchronize all phase accumulator stages.\n      // Where n is equal to the CLK_RATIO.\n      always @(posedge clk) begin\n        dac_data_sync_m <= dac_data_sync;\n        sync_min_pulse_m[1] <= dac_data_sync_m & !dac_data_sync |\n                               sync_min_pulse_m[1] & !sync_min_pulse_m[CLK_RATIO];\n      end\n\n      for (i=1; i < CLK_RATIO; i=i+1) begin: sync_delay\n        always @(posedge clk) begin\n          sync_min_pulse_m[i+1] <= sync_min_pulse_m[i];\n        end\n      end\n\n      always @(posedge clk) begin\n        dac_dds_incr_0 <= tone_1_freq_word * CLK_RATIO;\n        dac_dds_incr_1 <= tone_2_freq_word * CLK_RATIO;\n      end\n\n      // phase accumulator\n      for (i=1; i <= CLK_RATIO; i=i+1) begin: dds_phase\n        always @(posedge clk) begin\n          if (dac_data_sync == 1'b1) begin\n            dac_dds_phase_0[i] <= 'd0;\n            dac_dds_phase_1[i] <= 'd0;\n          end else if (sync_min_pulse_m[1] == 1'b1) begin\n            if (i == 1) begin\n              dac_dds_phase_0[1] <= tone_1_init_offset;\n              dac_dds_phase_1[1] <= tone_2_init_offset;\n            end else if (CLK_RATIO > 1)begin\n              dac_dds_phase_0[i] <= dac_dds_phase_0[i-1] + tone_1_freq_word;\n              dac_dds_phase_1[i] <= dac_dds_phase_1[i-1] + tone_2_freq_word;\n            end\n          end else if (dac_valid == 1'b1) begin\n            dac_dds_phase_0[i] <= dac_dds_phase_0[i] + dac_dds_incr_0;\n            dac_dds_phase_1[i] <= dac_dds_phase_1[i] + dac_dds_incr_1;\n          end\n\n          if (dac_data_sync == 1'b1 || sync_min_pulse_m[1]) begin\n            dac_dds_phase_0_m[i] <= 'd0;\n            dac_dds_phase_1_m[i] <= 'd0;\n          end else begin\n            dac_dds_phase_0_m[i] <= dac_dds_phase_0[i];\n            dac_dds_phase_1_m[i] <= dac_dds_phase_1[i];\n          end\n        end\n\n        // phase to amplitude convertor\n         ad_dds_2 #(\n           .DDS_DW (DDS_DW),\n           .PHASE_DW (PHASE_DW),\n           .DDS_TYPE (DDS_TYPE),\n           .CORDIC_DW (CORDIC_DW),\n           .CORDIC_PHASE_DW (CORDIC_PHASE_DW))\n         i_dds_2 (\n          .clk (clk),\n          .dds_format (dac_dds_format),\n          .dds_phase_0 (dac_dds_phase_0_m[i]),\n          .dds_scale_0 (tone_1_scale),\n          .dds_phase_1 (dac_dds_phase_1_m[i]),\n          .dds_scale_1 (tone_2_scale),\n          .dds_data (dac_dds_data_s[(DDS_DW*i)-1:DDS_DW*(i-1)]));\n      end\n    end\n  endgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[149, "         ad_dds_2 #(\n"], [150, "           .DDS_DW (DDS_DW),\n"], [151, "           .PHASE_DW (PHASE_DW),\n"], [152, "           .DDS_TYPE (DDS_TYPE),\n"], [153, "           .CORDIC_DW (CORDIC_DW),\n"], [154, "           .CORDIC_PHASE_DW (CORDIC_PHASE_DW))\n"], [155, "         i_dds_2 (\n"]], "Add": [[155, "        ad_dds_2 #(\n"], [155, "          .DDS_DW (DDS_DW),\n"], [155, "          .PHASE_DW (PHASE_DW),\n"], [155, "          .DDS_TYPE (DDS_TYPE),\n"], [155, "          .CORDIC_DW (CORDIC_DW),\n"], [155, "          .CORDIC_PHASE_DW (CORDIC_PHASE_DW)\n"], [155, "        ) i_dds_2 (\n"]]}}