{"Source Block": ["hdl/library/jesd204/ad_ip_jesd204_tpl_dac/ad_ip_jesd204_tpl_dac_core.v@150:225@HdlStmFor", "  // Gate input data \n  assign dac_ddata_int = dac_sync_armed ? {LINK_DATA_WIDTH{1'b0}} : dac_ddata;\n\n  generate\n  genvar i;\n  for (i = 0; i < NUM_CHANNELS; i = i + 1) begin: g_channel\n\n    // Find the pair of the current channel for I/Q channels\n    // Assuming even channels are I, odd channels are Q\n    // Assuming channel count is even other case do not pair channels\n    localparam IQ_PAIR_CH_INDEX = (NUM_CHANNELS%2) ? i :\n                                  (i%2) ? i-1 : i+1;\n\n    if (XBAR_ENABLE == 1) begin\n\n      // NUM_CHANNELS : 1  mux\n      ad_mux #(\n        .CH_W (DAC_CDW),\n        .CH_CNT (NUM_CHANNELS),\n        .EN_REG (1)\n      ) channel_mux (\n        .clk (clk),\n        .data_in (dac_ddata_int),\n        .ch_sel (dac_src_chan_sel[8*i+:8]),\n        .data_out (dac_ddata_muxed[DAC_CDW*i+:DAC_CDW])\n      );\n\n    end else begin\n      assign dac_ddata_muxed[DAC_CDW*i+:DAC_CDW] = dac_ddata_int[DAC_CDW*i+:DAC_CDW];\n    end\n\n    ad_ip_jesd204_tpl_dac_channel #(\n      .DATA_PATH_WIDTH (DATA_PATH_WIDTH),\n      .CONVERTER_RESOLUTION (CONVERTER_RESOLUTION),\n      .DATAPATH_DISABLE (DATAPATH_DISABLE),\n      .BITS_PER_SAMPLE (BITS_PER_SAMPLE),\n      .DDS_TYPE (DDS_TYPE),\n      .DDS_CORDIC_DW (DDS_CORDIC_DW),\n      .DDS_CORDIC_PHASE_DW (DDS_CORDIC_PHASE_DW),\n      .IQCORRECTION_DISABLE(IQCORRECTION_DISABLE),\n      .Q_OR_I_N(i%2)\n    ) i_channel (\n      .clk (clk),\n      .dac_enable (enable[i]),\n      .dac_data (dac_data_s[DAC_CDW*i+:DAC_CDW]),\n      .dma_data (dac_ddata_muxed[DAC_CDW*i+:DAC_CDW]),\n\n      .pn7_data (pn7_data),\n      .pn15_data (pn15_data),\n\n      .dac_data_sync (dac_sync_int),\n      .dac_dds_format (dac_dds_format),\n\n      .dac_data_sel (dac_data_sel[4*i+:4]),\n      .dac_mask_enable (dac_mask_enable[i]),\n\n      .dac_dds_scale_0 (dac_dds_scale_0[16*i+:16]),\n      .dac_dds_init_0 (dac_dds_init_0[16*i+:16]),\n      .dac_dds_incr_0 (dac_dds_incr_0[16*i+:16]),\n      .dac_dds_scale_1 (dac_dds_scale_1[16*i+:16]),\n      .dac_dds_init_1 (dac_dds_init_1[16*i+:16]),\n      .dac_dds_incr_1 (dac_dds_incr_1[16*i+:16]),\n\n      .dac_pat_data_0 (dac_pat_data_0[16*i+:16]),\n      .dac_pat_data_1 (dac_pat_data_1[16*i+:16]),\n\n      .dac_iqcor_enb (dac_iqcor_enb[i]),\n      .dac_iqcor_coeff_1 (dac_iqcor_coeff_1[16*i+:16]),\n      .dac_iqcor_coeff_2 (dac_iqcor_coeff_2[16*i+:16]),\n      .dac_iqcor_data_in (dac_ddata_muxed[DAC_CDW*IQ_PAIR_CH_INDEX+:DAC_CDW])\n\n    );\n  end\n  endgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[174, "        .data_out (dac_ddata_muxed[DAC_CDW*i+:DAC_CDW])\n"], [175, "      );\n"], [219, "      .dac_iqcor_data_in (dac_ddata_muxed[DAC_CDW*IQ_PAIR_CH_INDEX+:DAC_CDW])\n"], [221, "    );\n"]], "Add": [[175, "        .data_out (dac_ddata_muxed[DAC_CDW*i+:DAC_CDW]));\n"], [221, "      .dac_iqcor_data_in (dac_ddata_muxed[DAC_CDW*IQ_PAIR_CH_INDEX+:DAC_CDW]));\n"]]}}