Source Block: hdl/library/util_cic/cic_comb.v@93:130@HdlStmFor
end

generate
genvar i, j;

for (j = 0; j < NUM_STAGES; j = j + 1) begin
  localparam k = NUM_STAGES - j - 1;
  localparam H = DATA_WIDTH - STAGE_WIDTH * j - 1;
  localparam L = k == 0 ? 0 : DATA_WIDTH - STAGE_WIDTH * (j+1);

  assign mask[H:L] = {{H-L{1'b1}},k != 0 ? enable[k] : 1'b1};

  for (i = L; i <= H; i = i + 1) begin: shift_r
    always @(posedge clk) begin
      if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin
        if (SEQ > 1) begin
          storage[i] <= {storage[i][SEQ-2:0],data_in_seq[i]};
        end else begin
          storage[i] <= data_in_seq[i];
        end
      end
    end

    assign storage_out[i] = storage[i][SEQ-1];

  end

  always @(posedge clk) begin
    if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin
      state[H:L] <= diff[H:L];
    end
  end
end

endgenerate

assign data_out = state;


Diff Content:
- 98 for (j = 0; j < NUM_STAGES; j = j + 1) begin
- 99   localparam k = NUM_STAGES - j - 1;
- 100   localparam H = DATA_WIDTH - STAGE_WIDTH * j - 1;
- 101   localparam L = k == 0 ? 0 : DATA_WIDTH - STAGE_WIDTH * (j+1);
- 103   assign mask[H:L] = {{H-L{1'b1}},k != 0 ? enable[k] : 1'b1};
- 105   for (i = L; i <= H; i = i + 1) begin: shift_r
- 106     always @(posedge clk) begin
- 107       if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin
- 108         if (SEQ > 1) begin
- 109           storage[i] <= {storage[i][SEQ-2:0],data_in_seq[i]};
- 110         end else begin
- 111           storage[i] <= data_in_seq[i];
- 114     end
- 116     assign storage_out[i] = storage[i][SEQ-1];
- 118   end
- 120   always @(posedge clk) begin
- 121     if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin
- 122       state[H:L] <= diff[H:L];
- 125 end
+ 101   for (j = 0; j < NUM_STAGES; j = j + 1) begin
+ 101     localparam k = NUM_STAGES - j - 1;
+ 101     localparam H = DATA_WIDTH - STAGE_WIDTH * j - 1;
+ 101     localparam L = k == 0 ? 0 : DATA_WIDTH - STAGE_WIDTH * (j+1);
+ 103     assign mask[H:L] = {{H-L{1'b1}},k != 0 ? enable[k] : 1'b1};
+ 111     for (i = L; i <= H; i = i + 1) begin: shift_r
+ 111       always @(posedge clk) begin
+ 111         if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin
+ 111           if (SEQ > 1) begin
+ 111             storage[i] <= {storage[i][SEQ-2:0],data_in_seq[i]};
+ 111           end else begin
+ 111             storage[i] <= data_in_seq[i];
+ 111           end
+ 116       assign storage_out[i] = storage[i][SEQ-1];
+ 118     end
+ 122     always @(posedge clk) begin
+ 122       if (enable[k] == 1'b1 && (ce == 1'b1 || active == 1'b1)) begin
+ 122         state[H:L] <= diff[H:L];
+ 122       end

Clone Blocks:
