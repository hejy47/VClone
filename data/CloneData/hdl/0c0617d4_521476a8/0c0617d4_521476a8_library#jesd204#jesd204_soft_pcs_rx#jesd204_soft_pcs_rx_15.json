{"Source Block": ["hdl/library/jesd204/jesd204_soft_pcs_rx/jesd204_soft_pcs_rx.v@100:157@HdlStmFor", "end else begin\n  assign patternalign_en_s = patternalign_en;\n  assign data_s = data;\nend\n\nfor (lane = 0; lane < NUM_LANES; lane = lane + 1) begin: gen_lane\n\n  jesd204_pattern_align #(\n    .DATA_PATH_WIDTH(DATA_PATH_WIDTH)\n  ) i_pattern_align (\n    .clk(clk),\n    .reset(reset),\n\n    .patternalign_en(patternalign_en_s),\n    .in_data(data_s[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH]),\n    .out_data(data_aligned[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH])\n  );\n\n  assign disparity_chain[lane][0] = disparity[lane];\n\n  always @(posedge clk) begin\n    if (reset == 1'b1) begin\n      disparity[lane] <= 1'b0;\n    end else begin\n      disparity[lane] <= disparity_chain[lane][DATA_PATH_WIDTH];\n    end\n  end\n\n  for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_dpw\n    localparam j = DATA_PATH_WIDTH * lane + i;\n    wire [9:0] in_char;\n    if (REGISTER_INPUTS > 1) begin\n      reg [9:0] in_char_r = 10'b0;\n      always @(posedge clk) begin\n        in_char_r <= INVERT_INPUTS ? ~data_aligned[j*10+:10] :\n                                      data_aligned[j*10+:10];\n      end\n      assign in_char = in_char_r;\n    end else begin\n      assign in_char = INVERT_INPUTS ? ~data_aligned[j*10+:10] :\n                                        data_aligned[j*10+:10];\n    end\n\n    jesd204_8b10b_decoder i_dec (\n      .in_char(in_char),\n      .out_char(char_s[j*8+:8]),\n      .out_charisk(charisk_s[j]),\n      .out_notintable(notintable_s[j]),\n      .out_disperr(disperr_s[j]),\n\n      .in_disparity(disparity_chain[lane][i]),\n      .out_disparity(disparity_chain[lane][i+1])\n    );\n  end\nend\nendgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[105, "for (lane = 0; lane < NUM_LANES; lane = lane + 1) begin: gen_lane\n"], [107, "  jesd204_pattern_align #(\n"], [108, "    .DATA_PATH_WIDTH(DATA_PATH_WIDTH)\n"], [109, "  ) i_pattern_align (\n"], [110, "    .clk(clk),\n"], [111, "    .reset(reset),\n"], [113, "    .patternalign_en(patternalign_en_s),\n"], [114, "    .in_data(data_s[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH]),\n"], [115, "    .out_data(data_aligned[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH])\n"], [116, "  );\n"], [118, "  assign disparity_chain[lane][0] = disparity[lane];\n"], [120, "  always @(posedge clk) begin\n"], [121, "    if (reset == 1'b1) begin\n"], [122, "      disparity[lane] <= 1'b0;\n"], [123, "    end else begin\n"], [124, "      disparity[lane] <= disparity_chain[lane][DATA_PATH_WIDTH];\n"], [125, "    end\n"], [126, "  end\n"], [128, "  for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_dpw\n"], [129, "    localparam j = DATA_PATH_WIDTH * lane + i;\n"], [130, "    wire [9:0] in_char;\n"], [131, "    if (REGISTER_INPUTS > 1) begin\n"], [132, "      reg [9:0] in_char_r = 10'b0;\n"], [133, "      always @(posedge clk) begin\n"], [134, "        in_char_r <= INVERT_INPUTS ? ~data_aligned[j*10+:10] :\n"], [135, "                                      data_aligned[j*10+:10];\n"], [137, "      assign in_char = in_char_r;\n"], [138, "    end else begin\n"], [139, "      assign in_char = INVERT_INPUTS ? ~data_aligned[j*10+:10] :\n"], [140, "                                        data_aligned[j*10+:10];\n"], [143, "    jesd204_8b10b_decoder i_dec (\n"], [144, "      .in_char(in_char),\n"], [145, "      .out_char(char_s[j*8+:8]),\n"], [146, "      .out_charisk(charisk_s[j]),\n"], [147, "      .out_notintable(notintable_s[j]),\n"], [148, "      .out_disperr(disperr_s[j]),\n"], [150, "      .in_disparity(disparity_chain[lane][i]),\n"], [151, "      .out_disparity(disparity_chain[lane][i+1])\n"], [152, "    );\n"], [154, "end\n"]], "Add": [[105, "  generate\n"], [105, "  genvar lane;\n"], [105, "  genvar i;\n"], [105, "  if (REGISTER_INPUTS > 0) begin\n"], [105, "    reg                                     patternalign_en_r;\n"], [105, "    reg [NUM_LANES*DATA_PATH_WIDTH*10-1:0]  data_r;\n"], [105, "    always @(posedge clk) begin\n"], [105, "      patternalign_en_r <= patternalign_en;\n"], [105, "      data_r  <= data;\n"], [105, "    end\n"], [105, "    assign patternalign_en_s = patternalign_en_r;\n"], [105, "    assign data_s = data_r;\n"], [105, "  end else begin\n"], [105, "    assign patternalign_en_s = patternalign_en;\n"], [105, "    assign data_s = data;\n"], [105, "  end\n"], [111, "  for (lane = 0; lane < NUM_LANES; lane = lane + 1) begin: gen_lane\n"], [116, "    jesd204_pattern_align #(\n"], [116, "      .DATA_PATH_WIDTH(DATA_PATH_WIDTH)\n"], [116, "    ) i_pattern_align (\n"], [116, "      .clk(clk),\n"], [116, "      .reset(reset),\n"], [118, "      .patternalign_en(patternalign_en_s),\n"], [118, "      .in_data(data_s[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH]),\n"], [118, "      .out_data(data_aligned[LANE_DATA_WIDTH*lane+:LANE_DATA_WIDTH]));\n"], [126, "    assign disparity_chain[lane][0] = disparity[lane];\n"], [135, "    always @(posedge clk) begin\n"], [135, "      if (reset == 1'b1) begin\n"], [135, "        disparity[lane] <= 1'b0;\n"], [135, "      end else begin\n"], [135, "        disparity[lane] <= disparity_chain[lane][DATA_PATH_WIDTH];\n"], [148, "    for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_dpw\n"], [148, "      localparam j = DATA_PATH_WIDTH * lane + i;\n"], [148, "      wire [9:0] in_char;\n"], [148, "      if (REGISTER_INPUTS > 1) begin\n"], [148, "        reg [9:0] in_char_r = 10'b0;\n"], [148, "        always @(posedge clk) begin\n"], [148, "          in_char_r <= INVERT_INPUTS ? ~data_aligned[j*10+:10] :\n"], [148, "                                        data_aligned[j*10+:10];\n"], [148, "        end\n"], [148, "        assign in_char = in_char_r;\n"], [148, "      end else begin\n"], [148, "        assign in_char = INVERT_INPUTS ? ~data_aligned[j*10+:10] :\n"], [148, "                                          data_aligned[j*10+:10];\n"], [148, "      end\n"], [152, "      jesd204_8b10b_decoder i_dec (\n"], [152, "        .in_char(in_char),\n"], [152, "        .out_char(char_s[j*8+:8]),\n"], [152, "        .out_charisk(charisk_s[j]),\n"], [152, "        .out_notintable(notintable_s[j]),\n"], [152, "        .out_disperr(disperr_s[j]),\n"], [152, "        .in_disparity(disparity_chain[lane][i]),\n"], [152, "        .out_disparity(disparity_chain[lane][i+1]));\n"], [152, "    end\n"]]}}