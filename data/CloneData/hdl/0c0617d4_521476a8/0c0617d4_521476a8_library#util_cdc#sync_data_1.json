{"Source Block": ["hdl/library/util_cdc/sync_data.v@44:97@HdlStmIf", "  input out_clk,\n  output reg [NUM_OF_BITS-1:0] out_data\n);\n\ngenerate\nif (ASYNC_CLK == 1) begin\n\nwire out_toggle;\nwire in_toggle;\n\nreg out_toggle_d1 = 1'b0;\nreg in_toggle_d1 = 1'b0;\n\nreg [NUM_OF_BITS-1:0] cdc_hold;\n\nsync_bits i_sync_out (\n  .in_bits(in_toggle_d1),\n  .out_clk(out_clk),\n  .out_resetn(1'b1),\n  .out_bits(out_toggle)\n);\n\nsync_bits i_sync_in (\n  .in_bits(out_toggle_d1),\n  .out_clk(in_clk),\n  .out_resetn(1'b1),\n  .out_bits(in_toggle)\n);\n\nwire in_load = in_toggle == in_toggle_d1;\nwire out_load = out_toggle ^ out_toggle_d1;\n\nalways @(posedge in_clk) begin\n  if (in_load == 1'b1) begin\n    cdc_hold <= in_data;\n    in_toggle_d1 <= ~in_toggle_d1;\n  end\nend\n\nalways @(posedge out_clk) begin\n  if (out_load == 1'b1) begin\n    out_data <= cdc_hold;\n  end\n  out_toggle_d1 <= out_toggle;\nend\n\nend else begin\n  always @(*) begin\n    out_data <= in_data;\n  end\nend\nendgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[49, "if (ASYNC_CLK == 1) begin\n"], [51, "wire out_toggle;\n"], [52, "wire in_toggle;\n"], [54, "reg out_toggle_d1 = 1'b0;\n"], [55, "reg in_toggle_d1 = 1'b0;\n"], [57, "reg [NUM_OF_BITS-1:0] cdc_hold;\n"], [59, "sync_bits i_sync_out (\n"], [60, "  .in_bits(in_toggle_d1),\n"], [61, "  .out_clk(out_clk),\n"], [62, "  .out_resetn(1'b1),\n"], [63, "  .out_bits(out_toggle)\n"], [64, ");\n"], [66, "sync_bits i_sync_in (\n"], [67, "  .in_bits(out_toggle_d1),\n"], [68, "  .out_clk(in_clk),\n"], [69, "  .out_resetn(1'b1),\n"], [70, "  .out_bits(in_toggle)\n"], [71, ");\n"], [73, "wire in_load = in_toggle == in_toggle_d1;\n"], [74, "wire out_load = out_toggle ^ out_toggle_d1;\n"], [76, "always @(posedge in_clk) begin\n"], [77, "  if (in_load == 1'b1) begin\n"], [78, "    cdc_hold <= in_data;\n"], [79, "    in_toggle_d1 <= ~in_toggle_d1;\n"], [81, "end\n"], [83, "always @(posedge out_clk) begin\n"], [84, "  if (out_load == 1'b1) begin\n"], [85, "    out_data <= cdc_hold;\n"], [87, "  out_toggle_d1 <= out_toggle;\n"], [88, "end\n"], [90, "end else begin\n"], [91, "  always @(*) begin\n"], [92, "    out_data <= in_data;\n"], [94, "end\n"]], "Add": [[49, "  generate\n"], [49, "  if (ASYNC_CLK == 1) begin\n"], [52, "  wire out_toggle;\n"], [52, "  wire in_toggle;\n"], [55, "  reg out_toggle_d1 = 1'b0;\n"], [55, "  reg in_toggle_d1 = 1'b0;\n"], [57, "  reg [NUM_OF_BITS-1:0] cdc_hold;\n"], [64, "  sync_bits i_sync_out (\n"], [64, "    .in_bits(in_toggle_d1),\n"], [64, "    .out_clk(out_clk),\n"], [64, "    .out_resetn(1'b1),\n"], [64, "    .out_bits(out_toggle));\n"], [71, "  sync_bits i_sync_in (\n"], [71, "    .in_bits(out_toggle_d1),\n"], [71, "    .out_clk(in_clk),\n"], [71, "    .out_resetn(1'b1),\n"], [71, "    .out_bits(in_toggle));\n"], [74, "  wire in_load = in_toggle == in_toggle_d1;\n"], [74, "  wire out_load = out_toggle ^ out_toggle_d1;\n"], [79, "  always @(posedge in_clk) begin\n"], [79, "    if (in_load == 1'b1) begin\n"], [79, "      cdc_hold <= in_data;\n"], [79, "      in_toggle_d1 <= ~in_toggle_d1;\n"], [79, "    end\n"], [85, "  always @(posedge out_clk) begin\n"], [85, "    if (out_load == 1'b1) begin\n"], [85, "      out_data <= cdc_hold;\n"], [85, "    end\n"], [85, "    out_toggle_d1 <= out_toggle;\n"], [92, "  end else begin\n"], [92, "    always @(*) begin\n"], [92, "      out_data <= in_data;\n"], [92, "    end\n"]]}}