{"Source Block": ["hdl/library/spi_engine/spi_engine_execution/spi_engine_execution.v@386:398@HdlStmProcess", "// the SDI line can be delayed with 1, 2 or 3 SPI core clock cycle.\n// Taking the fact that in high SCLK frequencies the pre-scaler most likely will\n// be set to 0, to reduce the core clock's speed, this delay will mean that SDI will\n// be latched at one of the next consecutive SCLK edge.\n\nalways @(posedge clk) begin\n  trigger_rx_d <= {trigger_rx_d, trigger_rx};\nend\n\nassign trigger_rx_s = trigger_rx_d[SDI_DELAY+1];\n\n// Load the serial data into SDI shift register(s), then link it to the output\n// register of the module\n"], "Clone Blocks": [["hdl/library/spi_engine/spi_engine_execution/spi_engine_execution.v@390:400", "\nalways @(posedge clk) begin\n  trigger_rx_d <= {trigger_rx_d, trigger_rx};\nend\n\nassign trigger_rx_s = trigger_rx_d[SDI_DELAY+1];\n\n// Load the serial data into SDI shift register(s), then link it to the output\n// register of the module\n// NOTE: ECHO_SCLK mode can be used when the SCLK line is looped back to the FPGA\n// through an other level shifter, in order to remove the round-trip timing delays\n"]], "Diff Content": {"Delete": [[391, "always @(posedge clk) begin\n"], [392, "  trigger_rx_d <= {trigger_rx_d, trigger_rx};\n"], [393, "end\n"]], "Add": [[393, "  always @(posedge clk) begin\n"], [393, "    if (transfer_active == 1'b1 || wait_for_io == 1'b1)\n"], [393, "    begin\n"], [393, "      sdo_t_int <= ~sdo_enabled;\n"], [393, "    end else begin\n"], [393, "      sdo_t_int <= 1'b1;\n"], [393, "    end\n"], [393, "  end\n"]]}}