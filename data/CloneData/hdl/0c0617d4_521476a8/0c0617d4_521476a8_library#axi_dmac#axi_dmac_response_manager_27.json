{"Source Block": ["hdl/library/axi_dmac/axi_dmac_response_manager.v@144:161@HdlStmProcess", "    req_response_partial <= response_dest_partial;\n    req_response_dest_data_burst_length <= response_dest_data_burst_length;\n  end\nend\n\nalways @(posedge req_clk)\nbegin\n  if (req_resetn == 1'b0) begin\n    response_dest_ready <= 1'b1;\n  end else begin\n    response_dest_ready <= (nx_state == STATE_IDLE);\n  end\nend\n\nassign response_eot = (state == STATE_WRITE_RESPR) ? req_eot : 1'b1;\nassign response_partial = (state == STATE_WRITE_RESPR) ? req_response_partial : 1'b0;\n\nalways @(posedge req_clk)\n"], "Clone Blocks": [["hdl/library/axi_dmac/axi_dmac_response_manager.v@156:177", "end\n\nassign response_eot = (state == STATE_WRITE_RESPR) ? req_eot : 1'b1;\nassign response_partial = (state == STATE_WRITE_RESPR) ? req_response_partial : 1'b0;\n\nalways @(posedge req_clk)\nbegin\n  if (req_resetn == 1'b0) begin\n    response_valid <= 1'b0;\n  end else begin\n    if (nx_state == STATE_WRITE_RESPR || nx_state == STATE_WRITE_ZRCMPL) begin\n      response_valid <= 1'b1;\n    end else if (response_ready == 1'b1) begin\n      response_valid <= 1'b0;\n    end\n  end\nend\n\nalways @(posedge req_clk)\nbegin\n  if (state == STATE_ZERO_COMPL) begin\n    measured_burst_length <= {BYTES_PER_BURST_WIDTH{1'b1}};\n"], ["hdl/library/axi_dmac/axi_dmac_response_manager.v@135:152", "                response_dest_resp_eot}),\n  .m_axis_level(),\n  .m_axis_empty()\n);\n\nalways @(posedge req_clk)\nbegin\n  if (response_dest_valid & response_dest_ready) begin\n    req_eot <= response_dest_resp_eot;\n    req_response_partial <= response_dest_partial;\n    req_response_dest_data_burst_length <= response_dest_data_burst_length;\n  end\nend\n\nalways @(posedge req_clk)\nbegin\n  if (req_resetn == 1'b0) begin\n    response_dest_ready <= 1'b1;\n"]], "Diff Content": {"Delete": [[149, "always @(posedge req_clk)\n"], [150, "begin\n"], [151, "  if (req_resetn == 1'b0) begin\n"], [152, "    response_dest_ready <= 1'b1;\n"], [153, "  end else begin\n"], [154, "    response_dest_ready <= (nx_state == STATE_IDLE);\n"], [156, "end\n"]], "Add": [[154, "  always @(posedge req_clk)\n"], [154, "  begin\n"], [154, "    if (req_resetn == 1'b0) begin\n"], [154, "      response_dest_ready <= 1'b1;\n"], [154, "    end else begin\n"], [154, "      response_dest_ready <= (nx_state == STATE_IDLE);\n"], [154, "    end\n"]]}}