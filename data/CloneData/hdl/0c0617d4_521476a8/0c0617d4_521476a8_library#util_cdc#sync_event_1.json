{"Source Block": ["hdl/library/util_cdc/sync_event.v@44:120@HdlStmIf", "  input out_clk,\n  output reg [NUM_OF_EVENTS-1:0] out_event\n);\n\ngenerate\nif (ASYNC_CLK == 1) begin\n\nwire out_toggle;\nwire in_toggle;\n\nreg out_toggle_d1 = 1'b0;\nreg in_toggle_d1 = 1'b0;\n\nsync_bits i_sync_out (\n  .in_bits(in_toggle_d1),\n  .out_clk(out_clk),\n  .out_resetn(1'b1),\n  .out_bits(out_toggle)\n);\n\nsync_bits i_sync_in (\n  .in_bits(out_toggle_d1),\n  .out_clk(in_clk),\n  .out_resetn(1'b1),\n  .out_bits(in_toggle)\n);\n\nwire in_ready = in_toggle == in_toggle_d1;\nwire load_out = out_toggle ^ out_toggle_d1;\n\nreg [NUM_OF_EVENTS-1:0] in_event_sticky = 'h00;\nwire [NUM_OF_EVENTS-1:0] pending_events = in_event_sticky | in_event;\nwire [NUM_OF_EVENTS-1:0] out_event_s;\n\nalways @(posedge in_clk) begin\n  if (in_ready == 1'b1) begin\n    in_event_sticky <= {NUM_OF_EVENTS{1'b0}};\n    if (|pending_events == 1'b1) begin\n      in_toggle_d1 <= ~in_toggle_d1;\n    end\n  end else begin\n    in_event_sticky <= pending_events;\n  end\nend\n\nif (NUM_OF_EVENTS > 1) begin\n  reg [NUM_OF_EVENTS-1:0] cdc_hold = 'h00;\n\n  always @(posedge in_clk) begin\n    if (in_ready == 1'b1) begin\n      cdc_hold <= pending_events;\n    end\n  end\n\n  assign out_event_s = cdc_hold;\nend else begin\n  // When there is only one event, we know that it is set.\n  assign out_event_s = 1'b1;\nend\n\nalways @(posedge out_clk) begin\n  if (load_out == 1'b1) begin\n    out_event <= out_event_s;\n  end else begin\n    out_event <= {NUM_OF_EVENTS{1'b0}};\n  end\n  out_toggle_d1 <= out_toggle;\nend\n\nend else begin\n  always @(*) begin\n    out_event <= in_event;\n  end\nend\nendgenerate\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[49, "if (ASYNC_CLK == 1) begin\n"], [51, "wire out_toggle;\n"], [52, "wire in_toggle;\n"], [54, "reg out_toggle_d1 = 1'b0;\n"], [55, "reg in_toggle_d1 = 1'b0;\n"], [57, "sync_bits i_sync_out (\n"], [58, "  .in_bits(in_toggle_d1),\n"], [59, "  .out_clk(out_clk),\n"], [60, "  .out_resetn(1'b1),\n"], [61, "  .out_bits(out_toggle)\n"], [62, ");\n"], [64, "sync_bits i_sync_in (\n"], [65, "  .in_bits(out_toggle_d1),\n"], [66, "  .out_clk(in_clk),\n"], [67, "  .out_resetn(1'b1),\n"], [68, "  .out_bits(in_toggle)\n"], [69, ");\n"], [71, "wire in_ready = in_toggle == in_toggle_d1;\n"], [72, "wire load_out = out_toggle ^ out_toggle_d1;\n"], [74, "reg [NUM_OF_EVENTS-1:0] in_event_sticky = 'h00;\n"], [75, "wire [NUM_OF_EVENTS-1:0] pending_events = in_event_sticky | in_event;\n"], [76, "wire [NUM_OF_EVENTS-1:0] out_event_s;\n"], [78, "always @(posedge in_clk) begin\n"], [79, "  if (in_ready == 1'b1) begin\n"], [80, "    in_event_sticky <= {NUM_OF_EVENTS{1'b0}};\n"], [81, "    if (|pending_events == 1'b1) begin\n"], [82, "      in_toggle_d1 <= ~in_toggle_d1;\n"], [83, "    end\n"], [84, "  end else begin\n"], [85, "    in_event_sticky <= pending_events;\n"], [86, "  end\n"], [87, "end\n"], [89, "if (NUM_OF_EVENTS > 1) begin\n"], [90, "  reg [NUM_OF_EVENTS-1:0] cdc_hold = 'h00;\n"], [94, "      cdc_hold <= pending_events;\n"], [98, "  assign out_event_s = cdc_hold;\n"], [99, "end else begin\n"], [101, "  assign out_event_s = 1'b1;\n"], [102, "end\n"], [104, "always @(posedge out_clk) begin\n"], [105, "  if (load_out == 1'b1) begin\n"], [106, "    out_event <= out_event_s;\n"], [108, "    out_event <= {NUM_OF_EVENTS{1'b0}};\n"], [110, "  out_toggle_d1 <= out_toggle;\n"], [111, "end\n"], [113, "end else begin\n"], [114, "  always @(*) begin\n"], [115, "    out_event <= in_event;\n"], [117, "end\n"]], "Add": [[49, "  generate\n"], [49, "  if (ASYNC_CLK == 1) begin\n"], [52, "  wire out_toggle;\n"], [52, "  wire in_toggle;\n"], [55, "  reg out_toggle_d1 = 1'b0;\n"], [55, "  reg in_toggle_d1 = 1'b0;\n"], [72, "  sync_bits i_sync_out (\n"], [72, "    .in_bits(in_toggle_d1),\n"], [72, "    .out_clk(out_clk),\n"], [72, "    .out_resetn(1'b1),\n"], [72, "    .out_bits(out_toggle));\n"], [76, "  sync_bits i_sync_in (\n"], [76, "    .in_bits(out_toggle_d1),\n"], [76, "    .out_clk(in_clk),\n"], [76, "    .out_resetn(1'b1),\n"], [76, "    .out_bits(in_toggle));\n"], [87, "  wire in_ready = in_toggle == in_toggle_d1;\n"], [87, "  wire load_out = out_toggle ^ out_toggle_d1;\n"], [90, "  reg [NUM_OF_EVENTS-1:0] in_event_sticky = 'h00;\n"], [90, "  wire [NUM_OF_EVENTS-1:0] pending_events = in_event_sticky | in_event;\n"], [90, "  wire [NUM_OF_EVENTS-1:0] out_event_s;\n"], [94, "      in_event_sticky <= {NUM_OF_EVENTS{1'b0}};\n"], [94, "      if (|pending_events == 1'b1) begin\n"], [94, "        in_toggle_d1 <= ~in_toggle_d1;\n"], [94, "      end\n"], [94, "    end else begin\n"], [94, "      in_event_sticky <= pending_events;\n"], [102, "  if (NUM_OF_EVENTS > 1) begin\n"], [102, "    reg [NUM_OF_EVENTS-1:0] cdc_hold = 'h00;\n"], [106, "    always @(posedge in_clk) begin\n"], [106, "      if (in_ready == 1'b1) begin\n"], [106, "        cdc_hold <= pending_events;\n"], [106, "      end\n"], [106, "    end\n"], [106, "    assign out_event_s = cdc_hold;\n"], [108, "    assign out_event_s = 1'b1;\n"], [115, "  always @(posedge out_clk) begin\n"], [115, "    if (load_out == 1'b1) begin\n"], [115, "      out_event <= out_event_s;\n"], [115, "    end else begin\n"], [115, "      out_event <= {NUM_OF_EVENTS{1'b0}};\n"], [115, "    end\n"], [115, "    out_toggle_d1 <= out_toggle;\n"], [115, "  end\n"], [115, "  end else begin\n"], [115, "    always @(*) begin\n"], [115, "      out_event <= in_event;\n"], [115, "    end\n"]]}}