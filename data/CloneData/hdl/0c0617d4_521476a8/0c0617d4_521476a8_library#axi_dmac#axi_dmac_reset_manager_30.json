{"Source Block": ["hdl/library/axi_dmac/axi_dmac_reset_manager.v@215:260@HdlStmFor", "assign reset_sync_chain[0] = reset_async_chain[3];\n\ngenerate\ngenvar i;\n\nfor (i = 0; i < 3; i = i + 1) begin: reset_gen\n\n  if (GEN_ASYNC_RESET[i] == 1'b1) begin\n\n    reg [3:0] reset_async = 4'b1111;\n    reg [1:0] reset_sync = 2'b11;\n    reg reset_sync_in = 1'b1;\n\n    always @(posedge reset_chain_clks[i] or posedge reset_sync_chain[i]) begin\n      if (reset_sync_chain[i] == 1'b1) begin\n        reset_sync_in <= 1'b1;\n      end else begin\n        reset_sync_in <= reset_async[0];\n      end\n    end\n\n    always @(posedge reset_chain_clks[i] or posedge do_reset) begin\n      if (do_reset == 1'b1) begin\n        reset_async <= 4'b1111;\n      end else begin\n        reset_async <= {reset_async_chain[i], reset_async[3:1]};\n      end\n    end\n\n    always @(posedge reset_chain_clks[i]) begin\n      reset_sync <= {reset_sync_in,reset_sync[1]};\n    end\n\n    assign reset_async_chain[i+1] = reset_async[0];\n    assign reset_sync_chain[i+1] = reset_sync[0];\n\n  end else begin\n    assign reset_async_chain[i+1] = reset_async_chain[i];\n    assign reset_sync_chain[i+1] = reset_sync_chain[i];\n  end\nend\n\nendgenerate\n\n/* De-assertions in the opposite direction of the data flow: dest, src, request */\nassign dest_resetn = ~reset_sync_chain[1];\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[220, "for (i = 0; i < 3; i = i + 1) begin: reset_gen\n"], [222, "  if (GEN_ASYNC_RESET[i] == 1'b1) begin\n"], [224, "    reg [3:0] reset_async = 4'b1111;\n"], [225, "    reg [1:0] reset_sync = 2'b11;\n"], [226, "    reg reset_sync_in = 1'b1;\n"], [228, "    always @(posedge reset_chain_clks[i] or posedge reset_sync_chain[i]) begin\n"], [229, "      if (reset_sync_chain[i] == 1'b1) begin\n"], [230, "        reset_sync_in <= 1'b1;\n"], [231, "      end else begin\n"], [232, "        reset_sync_in <= reset_async[0];\n"], [234, "    end\n"], [236, "    always @(posedge reset_chain_clks[i] or posedge do_reset) begin\n"], [237, "      if (do_reset == 1'b1) begin\n"], [238, "        reset_async <= 4'b1111;\n"], [239, "      end else begin\n"], [240, "        reset_async <= {reset_async_chain[i], reset_async[3:1]};\n"], [242, "    end\n"], [244, "    always @(posedge reset_chain_clks[i]) begin\n"], [245, "      reset_sync <= {reset_sync_in,reset_sync[1]};\n"], [246, "    end\n"], [248, "    assign reset_async_chain[i+1] = reset_async[0];\n"], [249, "    assign reset_sync_chain[i+1] = reset_sync[0];\n"], [251, "  end else begin\n"], [252, "    assign reset_async_chain[i+1] = reset_async_chain[i];\n"], [253, "    assign reset_sync_chain[i+1] = reset_sync_chain[i];\n"], [255, "end\n"]], "Add": [[220, "  for (i = 0; i < 3; i = i + 1) begin: reset_gen\n"], [222, "    if (GEN_ASYNC_RESET[i] == 1'b1) begin\n"], [226, "      reg [3:0] reset_async = 4'b1111;\n"], [226, "      reg [1:0] reset_sync = 2'b11;\n"], [226, "      reg reset_sync_in = 1'b1;\n"], [232, "      always @(posedge reset_chain_clks[i] or posedge reset_sync_chain[i]) begin\n"], [232, "        if (reset_sync_chain[i] == 1'b1) begin\n"], [232, "          reset_sync_in <= 1'b1;\n"], [232, "        end else begin\n"], [232, "          reset_sync_in <= reset_async[0];\n"], [232, "        end\n"], [240, "      always @(posedge reset_chain_clks[i] or posedge do_reset) begin\n"], [240, "        if (do_reset == 1'b1) begin\n"], [240, "          reset_async <= 4'b1111;\n"], [240, "        end else begin\n"], [240, "          reset_async <= {reset_async_chain[i], reset_async[3:1]};\n"], [240, "        end\n"], [246, "      always @(posedge reset_chain_clks[i]) begin\n"], [246, "        reset_sync <= {reset_sync_in,reset_sync[1]};\n"], [246, "      end\n"], [249, "      assign reset_async_chain[i+1] = reset_async[0];\n"], [249, "      assign reset_sync_chain[i+1] = reset_sync[0];\n"], [253, "    end else begin\n"], [253, "      assign reset_async_chain[i+1] = reset_async_chain[i];\n"], [253, "      assign reset_sync_chain[i+1] = reset_sync_chain[i];\n"], [253, "    end\n"]]}}