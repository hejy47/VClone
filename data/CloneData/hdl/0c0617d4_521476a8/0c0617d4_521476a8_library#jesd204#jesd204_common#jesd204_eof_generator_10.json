{"Source Block": ["hdl/library/jesd204/jesd204_common/jesd204_eof_generator.v@129:154@HdlStmProcess", "endfunction\n\ninteger i;\n\n/* Only 1, 2 and multiples of 4 are supported atm */\nalways @(posedge clk) begin\n  if (reset == 1'b1) begin\n    sof <= {DATA_PATH_WIDTH{1'b0}};\n    eof <= {DATA_PATH_WIDTH{1'b0}};\n  end else begin\n    sof <= {{DATA_PATH_WIDTH-1{1'b0}},beat_counter_sof};\n    eof <= {beat_counter_eof,{DATA_PATH_WIDTH-1{1'b0}}};\n\n    if (small_octets_per_frame == 1'b1) begin\n      for (i = 1; i < DATA_PATH_WIDTH; i = i + 1) begin\n        if (cfg_octets_per_frame[ffs(i)] != 1'b1) begin\n          sof[i] <= 1'b1;\n          eof[DATA_PATH_WIDTH-1-i] <= 1'b1;\n        end\n      end\n    end else begin\n    end\n  end\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[134, "always @(posedge clk) begin\n"], [135, "  if (reset == 1'b1) begin\n"], [136, "    sof <= {DATA_PATH_WIDTH{1'b0}};\n"], [137, "    eof <= {DATA_PATH_WIDTH{1'b0}};\n"], [139, "    sof <= {{DATA_PATH_WIDTH-1{1'b0}},beat_counter_sof};\n"], [140, "    eof <= {beat_counter_eof,{DATA_PATH_WIDTH-1{1'b0}}};\n"], [142, "    if (small_octets_per_frame == 1'b1) begin\n"], [143, "      for (i = 1; i < DATA_PATH_WIDTH; i = i + 1) begin\n"], [144, "        if (cfg_octets_per_frame[ffs(i)] != 1'b1) begin\n"], [145, "          sof[i] <= 1'b1;\n"], [146, "          eof[DATA_PATH_WIDTH-1-i] <= 1'b1;\n"], [149, "    end else begin\n"], [152, "end\n"]], "Add": [[137, "  generate\n"], [137, "  if (CW > DPW_LOG2) begin\n"], [137, "    reg [CW-DPW_LOG2-1:0] beat_counter = 'h00;\n"], [137, "    wire [CW-DPW_LOG2-1:0] cfg_beats_per_frame = cfg_octets_per_frame[CW-1:DPW_LOG2];\n"], [137, "    assign beat_counter_sof = beat_counter == 'h00;\n"], [137, "    assign beat_counter_eof = beat_counter == cfg_beats_per_frame;\n"], [137, "    assign small_octets_per_frame = cfg_beats_per_frame == 'h00;\n"], [137, "    always @(posedge clk) begin\n"], [137, "      if (reset == 1'b1) begin\n"], [137, "        beat_counter <= 'h00;\n"], [137, "      end else if (beat_counter_eof == 1'b1) begin\n"], [137, "        beat_counter <= 'h00;\n"], [137, "      end else begin\n"], [137, "        beat_counter <= beat_counter + 1'b1;\n"], [137, "      end\n"], [137, "    end\n"], [146, "    assign beat_counter_sof = 1'b1;\n"], [146, "    assign beat_counter_eof = 1'b1;\n"], [146, "    assign small_octets_per_frame = 1'b1;\n"], [146, "  end\n"], [146, "  endgenerate\n"], [146, "  function [1:0] ffs;\n"], [146, "  input [2:0] x;\n"], [146, "  begin\n"], [146, "    case (x)\n"], [146, "    1: ffs = 0;\n"], [146, "    2: ffs = 1;\n"], [146, "    3: ffs = 0;\n"], [146, "    4: ffs = 2;\n"], [146, "    5: ffs = 0;\n"], [146, "    6: ffs = 1;\n"], [146, "    7: ffs = 0;\n"], [146, "    default: ffs = 0;\n"], [146, "    endcase\n"], [146, "  end\n"], [146, "  endfunction\n"], [146, "  integer i;\n"], [146, "  /* Only 1, 2 and multiples of 4 are supported atm */\n"], [146, "  always @(posedge clk) begin\n"], [146, "    if (reset == 1'b1) begin\n"], [146, "      sof <= {DATA_PATH_WIDTH{1'b0}};\n"], [146, "      eof <= {DATA_PATH_WIDTH{1'b0}};\n"], [146, "    end else begin\n"], [146, "      sof <= {{DATA_PATH_WIDTH-1{1'b0}},beat_counter_sof};\n"], [146, "      eof <= {beat_counter_eof,{DATA_PATH_WIDTH-1{1'b0}}};\n"], [146, "      if (small_octets_per_frame == 1'b1) begin\n"], [146, "        for (i = 1; i < DATA_PATH_WIDTH; i = i + 1) begin\n"], [146, "          if (cfg_octets_per_frame[ffs(i)] != 1'b1) begin\n"], [146, "            sof[i] <= 1'b1;\n"], [146, "            eof[DATA_PATH_WIDTH-1-i] <= 1'b1;\n"], [146, "          end\n"], [147, "      end else begin\n"]]}}