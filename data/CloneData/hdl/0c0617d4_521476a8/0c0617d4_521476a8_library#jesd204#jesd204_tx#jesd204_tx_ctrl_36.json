{"Source Block": ["hdl/library/jesd204/jesd204_tx/jesd204_tx_ctrl.v@195:244@HdlStmProcess", " * #3 {lane_,}cgs_enable, tx_ready update\n *\n * One multi-frame should at least be 3 clock cycles (TBD 64-bit data path)\n */\n\nalways @(posedge clk) begin\n  if (sync_request == 1'b1 || reset == 1'b1) begin\n    cgs_enable <= 1'b1;\n    lane_cgs_enable <= {NUM_LANES{1'b1}};\n    tx_ready <= 1'b0;\n    ilas_reset <= 1'b1;\n    ilas_data_reset <= 1'b1;\n\n    if (sync_request_received == 1'b0) begin\n      status_state <= STATE_WAIT;\n    end else begin\n      status_state <= STATE_CGS;\n    end\n  end else if (sync_request_received == 1'b1) begin\n    if (lmfc_edge == 1'b1 && last_ilas_mframe == 1'b1) begin\n      ilas_reset <= 1'b1;\n      status_state <= STATE_DATA;\n    end else if (lmfc_edge_d1 == 1'b1 && (cfg_continuous_ilas == 1'b1 ||\n      cgs_enable == 1'b1)) begin\n      ilas_reset <= 1'b0;\n      status_state <= STATE_ILAS;\n    end\n\n    if (lmfc_edge_d1 == 1'b1) begin\n      if (last_ilas_mframe == 1'b1 && cfg_continuous_ilas == 1'b0) begin\n        ilas_data_reset <= 1'b1;\n      end else if (cgs_enable == 1'b1) begin\n        ilas_data_reset <= 1'b0;\n      end\n    end\n\n    if (lmfc_edge_d2 == 1'b1) begin\n      lane_cgs_enable <= cfg_lanes_disable;\n      cgs_enable <= 1'b0;\n      if (last_ilas_mframe == 1'b1 && cfg_continuous_ilas == 1'b0) begin\n        tx_ready <= 1'b1;\n      end\n    end\n  end\nend\n\nassign tx_next_mf_ready = sync_request_received & last_ilas_mframe & ~cfg_continuous_ilas;\nassign tx_ready_nx = tx_ready | (tx_next_mf_ready & lmfc_edge_d2);\n\nalways @(posedge clk) begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[200, "always @(posedge clk) begin\n"], [201, "  if (sync_request == 1'b1 || reset == 1'b1) begin\n"], [202, "    cgs_enable <= 1'b1;\n"], [203, "    lane_cgs_enable <= {NUM_LANES{1'b1}};\n"], [204, "    tx_ready <= 1'b0;\n"], [205, "    ilas_reset <= 1'b1;\n"], [206, "    ilas_data_reset <= 1'b1;\n"], [208, "    if (sync_request_received == 1'b0) begin\n"], [209, "      status_state <= STATE_WAIT;\n"], [211, "      status_state <= STATE_CGS;\n"], [213, "  end else if (sync_request_received == 1'b1) begin\n"], [214, "    if (lmfc_edge == 1'b1 && last_ilas_mframe == 1'b1) begin\n"], [216, "      status_state <= STATE_DATA;\n"], [217, "    end else if (lmfc_edge_d1 == 1'b1 && (cfg_continuous_ilas == 1'b1 ||\n"], [218, "      cgs_enable == 1'b1)) begin\n"], [219, "      ilas_reset <= 1'b0;\n"], [220, "      status_state <= STATE_ILAS;\n"], [221, "    end\n"], [223, "    if (lmfc_edge_d1 == 1'b1) begin\n"], [224, "      if (last_ilas_mframe == 1'b1 && cfg_continuous_ilas == 1'b0) begin\n"], [225, "        ilas_data_reset <= 1'b1;\n"], [226, "      end else if (cgs_enable == 1'b1) begin\n"], [227, "        ilas_data_reset <= 1'b0;\n"], [229, "    end\n"], [231, "    if (lmfc_edge_d2 == 1'b1) begin\n"], [232, "      lane_cgs_enable <= cfg_lanes_disable;\n"], [233, "      cgs_enable <= 1'b0;\n"], [234, "      if (last_ilas_mframe == 1'b1 && cfg_continuous_ilas == 1'b0) begin\n"], [235, "        tx_ready <= 1'b1;\n"], [239, "end\n"]], "Add": [[209, "  always @(*) begin\n"], [209, "    if (sync_request == 1'b1 || reset == 1'b1) begin\n"], [209, "      eof_reset = 1'b1;\n"], [209, "    end else if (lmfc_edge == 1'b1 && sync_request_received == 1'b1) begin\n"], [209, "      eof_reset = 1'b0;\n"], [211, "      eof_reset = eof_reset_d;\n"], [214, "  end\n"], [214, "  always @(posedge clk) begin\n"], [214, "    eof_reset_d <= eof_reset;\n"], [214, "  end\n"], [214, "  localparam STATE_WAIT = 2'b00;\n"], [214, "  localparam STATE_CGS = 2'b01;\n"], [214, "  localparam STATE_ILAS = 2'b10;\n"], [214, "  localparam STATE_DATA = 2'b11;\n"], [214, "  /* Timeline\n"], [214, "   *\n"], [214, "   * #1 lmfc_edge == 1, ilas_reset update\n"], [214, "   * #3 {lane_,}cgs_enable, tx_ready update\n"], [214, "   *\n"], [214, "   * One multi-frame should at least be 3 clock cycles (TBD 64-bit data path)\n"], [214, "   */\n"], [214, "  always @(posedge clk) begin\n"], [214, "    if (sync_request == 1'b1 || reset == 1'b1) begin\n"], [214, "      cgs_enable <= 1'b1;\n"], [214, "      lane_cgs_enable <= {NUM_LANES{1'b1}};\n"], [214, "      tx_ready <= 1'b0;\n"], [221, "      ilas_data_reset <= 1'b1;\n"], [227, "      if (sync_request_received == 1'b0) begin\n"], [227, "        status_state <= STATE_WAIT;\n"], [227, "      end else begin\n"], [227, "        status_state <= STATE_CGS;\n"], [227, "      end\n"], [227, "    end else if (sync_request_received == 1'b1) begin\n"], [227, "      if (lmfc_edge == 1'b1 && last_ilas_mframe == 1'b1) begin\n"], [227, "        ilas_reset <= 1'b1;\n"], [227, "        status_state <= STATE_DATA;\n"], [227, "      end else if (lmfc_edge_d1 == 1'b1 && (cfg_continuous_ilas == 1'b1 ||\n"], [227, "        cgs_enable == 1'b1)) begin\n"], [227, "        ilas_reset <= 1'b0;\n"], [227, "        status_state <= STATE_ILAS;\n"], [227, "      end\n"], [227, "      if (lmfc_edge_d1 == 1'b1) begin\n"], [227, "        if (last_ilas_mframe == 1'b1 && cfg_continuous_ilas == 1'b0) begin\n"], [227, "          ilas_data_reset <= 1'b1;\n"], [227, "        end else if (cgs_enable == 1'b1) begin\n"], [227, "          ilas_data_reset <= 1'b0;\n"], [227, "        end\n"], [235, "      if (lmfc_edge_d2 == 1'b1) begin\n"], [235, "        lane_cgs_enable <= cfg_lanes_disable;\n"], [235, "        cgs_enable <= 1'b0;\n"], [235, "        if (last_ilas_mframe == 1'b1 && cfg_continuous_ilas == 1'b0) begin\n"], [235, "          tx_ready <= 1'b1;\n"], [235, "        end\n"]]}}