{"Source Block": ["hdl/library/cordic_demod/cordic_demod.v@150:205@HdlStmProcess", "    shift_counter <= shift_counter - 1'b1;\n  end\n  endcase\nend\n\nalways @(posedge clk)\nbegin\n  case(state)\n  STATE_IDLE:\n    if (s_axis_valid == 1'b1) begin\n      step_counter <= 'h00;\n      phase <= {1'b0,s_axis_data[61:32]};\n      step_counter <= 'h00;\n      case (s_axis_data[63:62])\n      2'b00: begin\n        i <= {s_axis_data[31],s_axis_data[31:0]};\n        q <= 'h00;\n      end\n      2'b01: begin\n        i <= 'h00;\n        q <= ~{s_axis_data[31],s_axis_data[31:0]};\n      end\n      2'b10: begin\n        i <= ~{s_axis_data[31],s_axis_data[31:0]};\n        q <= 'h00;\n      end\n      2'b11: begin\n        i <= 'h00;\n        q <= {s_axis_data[31],s_axis_data[31:0]};\n      end\n      endcase\n    end\n  STATE_SHIFT_LOAD: begin\n    i_shift <= i;\n    q_shift <= q;\n  end\n  STATE_SHIFT: begin\n    i_shift <= {i_shift[32],i_shift[32:1]};\n    q_shift <= {q_shift[32],q_shift[32:1]};\n  end\n  STATE_ADD: begin\n    if (phase[30] == 1'b0) begin\n      i <= i + q_shift;\n      q <= q - i_shift;\n      phase <= phase - angle[step_counter];\n    end else begin\n      i <= i - q_shift;\n      q <= q + i_shift;\n      phase <= phase + angle[step_counter];\n    end\n    step_counter <= step_counter + 1'b1;\n  end\n  endcase\nend\n\nendmodule\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[155, "always @(posedge clk)\n"], [156, "begin\n"], [157, "  case(state)\n"], [158, "  STATE_IDLE:\n"], [159, "    if (s_axis_valid == 1'b1) begin\n"], [160, "      step_counter <= 'h00;\n"], [161, "      phase <= {1'b0,s_axis_data[61:32]};\n"], [162, "      step_counter <= 'h00;\n"], [163, "      case (s_axis_data[63:62])\n"], [164, "      2'b00: begin\n"], [165, "        i <= {s_axis_data[31],s_axis_data[31:0]};\n"], [166, "        q <= 'h00;\n"], [167, "      end\n"], [168, "      2'b01: begin\n"], [169, "        i <= 'h00;\n"], [170, "        q <= ~{s_axis_data[31],s_axis_data[31:0]};\n"], [171, "      end\n"], [172, "      2'b10: begin\n"], [173, "        i <= ~{s_axis_data[31],s_axis_data[31:0]};\n"], [174, "        q <= 'h00;\n"], [175, "      end\n"], [176, "      2'b11: begin\n"], [177, "        i <= 'h00;\n"], [178, "        q <= {s_axis_data[31],s_axis_data[31:0]};\n"], [180, "      endcase\n"], [182, "  STATE_SHIFT_LOAD: begin\n"], [183, "    i_shift <= i;\n"], [184, "    q_shift <= q;\n"], [185, "  end\n"], [186, "  STATE_SHIFT: begin\n"], [187, "    i_shift <= {i_shift[32],i_shift[32:1]};\n"], [188, "    q_shift <= {q_shift[32],q_shift[32:1]};\n"], [189, "  end\n"], [190, "  STATE_ADD: begin\n"], [191, "    if (phase[30] == 1'b0) begin\n"], [192, "      i <= i + q_shift;\n"], [193, "      q <= q - i_shift;\n"], [194, "      phase <= phase - angle[step_counter];\n"], [195, "    end else begin\n"], [196, "      i <= i - q_shift;\n"], [197, "      q <= q + i_shift;\n"], [198, "      phase <= phase + angle[step_counter];\n"], [200, "    step_counter <= step_counter + 1'b1;\n"], [202, "  endcase\n"], [203, "end\n"]], "Add": [[178, "  always @(posedge clk)\n"], [178, "  begin\n"], [178, "    case(state)\n"], [178, "    STATE_IDLE:\n"], [178, "      if (s_axis_valid == 1'b1) begin\n"], [178, "        step_counter <= 'h00;\n"], [178, "        phase <= {1'b0,s_axis_data[61:32]};\n"], [178, "        step_counter <= 'h00;\n"], [178, "        case (s_axis_data[63:62])\n"], [178, "        2'b00: begin\n"], [178, "          i <= {s_axis_data[31],s_axis_data[31:0]};\n"], [178, "          q <= 'h00;\n"], [178, "        end\n"], [178, "        2'b01: begin\n"], [178, "          i <= 'h00;\n"], [178, "          q <= ~{s_axis_data[31],s_axis_data[31:0]};\n"], [178, "        end\n"], [178, "        2'b10: begin\n"], [178, "          i <= ~{s_axis_data[31],s_axis_data[31:0]};\n"], [178, "          q <= 'h00;\n"], [178, "        end\n"], [178, "        2'b11: begin\n"], [178, "          i <= 'h00;\n"], [178, "          q <= {s_axis_data[31],s_axis_data[31:0]};\n"], [178, "        end\n"], [178, "        endcase\n"], [180, "    STATE_SHIFT_LOAD: begin\n"], [180, "      i_shift <= i;\n"], [180, "      q_shift <= q;\n"], [198, "    STATE_SHIFT: begin\n"], [198, "      i_shift <= {i_shift[32],i_shift[32:1]};\n"], [198, "      q_shift <= {q_shift[32],q_shift[32:1]};\n"], [200, "    STATE_ADD: begin\n"], [200, "      if (phase[30] == 1'b0) begin\n"], [200, "        i <= i + q_shift;\n"], [200, "        q <= q - i_shift;\n"], [200, "        phase <= phase - angle[step_counter];\n"], [200, "      end else begin\n"], [200, "        i <= i - q_shift;\n"], [200, "        q <= q + i_shift;\n"], [200, "        phase <= phase + angle[step_counter];\n"], [200, "      end\n"], [200, "      step_counter <= step_counter + 1'b1;\n"], [200, "    end\n"], [200, "    endcase\n"]]}}