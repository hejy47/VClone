Source Block: hdl/library/util_pack/util_pack_common/pack_interconnect.v@71:131@HdlStmFor
    localparam z = 2**MUX_ORDER;
    localparam w = PORT_DATA_WIDTH;
    localparam NUM_SWITCHES = NUM_PORTS / z;

    /* Do perfect shuffle, either in forward or reverse direction */
    for (i = 0; i < NUM_STAGES; i = i + 1) begin: gen_stages
      /* Pack network are in the opposite direction */
      localparam ctrl_stage = PACK ? NUM_STAGES - i - 1 : i;
      wire [TOTAL_DATA_WIDTH-1:0] shuffle_in;
      wire [TOTAL_DATA_WIDTH-1:0] shuffle_out;
      wire [TOTAL_DATA_WIDTH-1:0] mux_in;
      wire [TOTAL_DATA_WIDTH-1:0] mux_out;

      /* Unpack uses forward shuffle and pack a reverse shuffle */
      ad_perfect_shuffle #(
        .NUM_GROUPS (PACK ? NUM_SWITCHES : z),
        .WORDS_PER_GROUP (PACK ? z : NUM_SWITCHES),
        .WORD_WIDTH (w)
      ) i_shuffle (
        .data_in (shuffle_in),
        .data_out (shuffle_out)
      );

      for (j = 0; j < NUM_PORTS; j = j + 1) begin: gen_ports
        localparam ctrl_base = (ctrl_stage * NUM_PORTS + j) * MUX_ORDER;
        localparam sel_base = j & ~(z-1); /* base increments in 2**MUX_ORDER steps */

        /*
         * To be able to better share MUX control signals and reduce overall
         * resource consumption the control signal gets rotated by the offset of
         * MUX in a switch.
         *
         * E.g. a control signal of 0 for the first MUX means that the first
         * input should be selected. A control signal of 0 for the second switch
         * means that the second input will be used. To implement this (j % z)
         * is added to the control signal when selecting the input bits. This
         * addition does not result in additional resources being used. It just
         * results in a different look-up table.
         */

        wire [MUX_ORDER-1:0] sel = ctrl[ctrl_base+:MUX_ORDER];// + j % z;
        assign mux_out[j*w+:w] = mux_in[(sel_base+sel)*w+:w];
      end

      /*
       * Pack is MUX followed by shuffle.
       * Unpack is shuffle followed by MUX.
       */
      if (PACK) begin
        assign mux_in = interconnect[i];
        assign shuffle_in = mux_out;
        assign interconnect[i+1] = shuffle_out;
      end else begin
        assign shuffle_in = interconnect[i];
        assign mux_in = shuffle_out;
        assign interconnect[i+1] = mux_out;
      end
  end
  endgenerate

endmodule

Diff Content:
- 77       /* Pack network are in the opposite direction */
- 84       /* Unpack uses forward shuffle and pack a reverse shuffle */
- 91         .data_out (shuffle_out)
- 92       );
- 96         localparam sel_base = j & ~(z-1); /* base increments in 2**MUX_ORDER steps */
+ 92         .data_out (shuffle_out));
+ 96         localparam sel_base = j & ~(z-1); // base increments in 2**MUX_ORDER steps

Clone Blocks:
