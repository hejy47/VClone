Source Block: hdl/library/axi_dmac/request_arb.v@333:491@HdlStmIf
begin
  eot_mem_dest[source_id] <= source_eot;
end


generate if (DMA_TYPE_DEST == DMA_TYPE_MM_AXI) begin

wire                                  dest_bl_valid;
wire                                  dest_bl_ready;
wire [BEATS_PER_BURST_WIDTH_DEST-1:0] dest_burst_length;
wire [BEATS_PER_BURST_WIDTH_SRC-1:0] dest_src_burst_length;

assign dest_clk = m_dest_axi_aclk;
assign dest_ext_resetn = m_dest_axi_aresetn;

wire [ID_WIDTH-1:0] dest_address_id;
wire dest_address_eot = eot_mem_dest[dest_address_id];
wire dest_response_eot = eot_mem_dest[dest_response_id];

assign dbg_dest_address_id = dest_address_id;
assign dbg_dest_data_id = dest_data_response_id;

assign dest_data_request_id = dest_address_id;

dest_axi_mm #(
  .ID_WIDTH(ID_WIDTH),
  .DMA_DATA_WIDTH(DMA_DATA_WIDTH_DEST),
  .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),
  .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST),
  .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_DEST),
  .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST),
  .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),
  .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST),
  .CACHE_COHERENT(CACHE_COHERENT_DEST)
) i_dest_dma_mm (
  .m_axi_aclk(m_dest_axi_aclk),
  .m_axi_aresetn(dest_resetn),

  .enable(dest_enable),
  .enabled(dest_enabled),

  .req_valid(dest_req_valid),
  .req_ready(dest_req_ready),
  .req_address(dest_req_dest_address),

  .bl_valid(dest_bl_valid),
  .bl_ready(dest_bl_ready),
  .measured_last_burst_length(dest_burst_length),

  .response_valid(dest_response_valid),
  .response_ready(dest_response_ready),
  .response_resp(dest_response_resp),
  .response_resp_eot(dest_response_resp_eot),
  .response_resp_partial(dest_response_partial),
  .response_data_burst_length(dest_response_data_burst_length),

  .request_id(dest_request_id),
  .response_id(dest_response_id),

  .address_id(dest_address_id),

  .address_eot(dest_address_eot),
  .response_eot(dest_response_eot),

  .fifo_valid(dest_valid),
  .fifo_ready(dest_ready),
  .fifo_data(dest_data),
  .fifo_strb(dest_strb),
  .fifo_last(dest_last),

  .dest_burst_info_length(dest_burst_info_length),
  .dest_burst_info_partial(dest_burst_info_partial),
  .dest_burst_info_id(dest_burst_info_id),
  .dest_burst_info_write(dest_burst_info_write),

  .m_axi_awready(m_axi_awready),
  .m_axi_awvalid(m_axi_awvalid),
  .m_axi_awaddr(m_axi_awaddr),
  .m_axi_awlen(m_axi_awlen),
  .m_axi_awsize(m_axi_awsize),
  .m_axi_awburst(m_axi_awburst),
  .m_axi_awprot(m_axi_awprot),
  .m_axi_awcache(m_axi_awcache),
  .m_axi_wready(m_axi_wready),
  .m_axi_wvalid(m_axi_wvalid),
  .m_axi_wdata(m_axi_wdata),
  .m_axi_wstrb(m_axi_wstrb),
  .m_axi_wlast(m_axi_wlast),

  .m_axi_bvalid(m_axi_bvalid),
  .m_axi_bresp(m_axi_bresp),
  .m_axi_bready(m_axi_bready)
);

util_axis_fifo #(
  .DATA_WIDTH(BEATS_PER_BURST_WIDTH_SRC),
  .ADDRESS_WIDTH(0),
  .ASYNC_CLK(ASYNC_CLK_SRC_DEST)
) i_src_dest_bl_fifo (
  .s_axis_aclk(src_clk),
  .s_axis_aresetn(src_resetn),
  .s_axis_valid(src_bl_valid),
  .s_axis_ready(src_bl_ready),
  .s_axis_full(),
  .s_axis_data(src_burst_length),
  .s_axis_room(),

  .m_axis_aclk(dest_clk),
  .m_axis_aresetn(dest_resetn),
  .m_axis_valid(dest_bl_valid),
  .m_axis_ready(dest_bl_ready),
  .m_axis_data(dest_src_burst_length),
  .m_axis_level(),
  .m_axis_empty()
);

// Adapt burst length from source width to destination width by either
// truncation or completion with ones.
if (BEATS_PER_BURST_WIDTH_SRC == BEATS_PER_BURST_WIDTH_DEST) begin
assign dest_burst_length = dest_src_burst_length;
end

if (BEATS_PER_BURST_WIDTH_SRC < BEATS_PER_BURST_WIDTH_DEST) begin
assign dest_burst_length = {dest_src_burst_length,
                           {BEATS_PER_BURST_WIDTH_DEST - BEATS_PER_BURST_WIDTH_SRC{1'b1}}};
end

if (BEATS_PER_BURST_WIDTH_SRC > BEATS_PER_BURST_WIDTH_DEST) begin
assign dest_burst_length = dest_src_burst_length[BEATS_PER_BURST_WIDTH_SRC-1 -: BEATS_PER_BURST_WIDTH_DEST];
end

end else begin

assign m_axi_awvalid = 1'b0;
assign m_axi_awaddr = 'h00;
assign m_axi_awlen = 'h00;
assign m_axi_awsize = 'h00;
assign m_axi_awburst = 'h00;
assign m_axi_awprot = 'h00;
assign m_axi_awcache = 'h00;

assign m_axi_wvalid = 1'b0;
assign m_axi_wdata = 'h00;
assign m_axi_wstrb = 'h00;
assign m_axi_wlast = 1'b0;

assign m_axi_bready = 1'b0;

assign src_bl_ready = 1'b1;

assign dest_response_partial = 1'b0;
assign dest_response_data_burst_length = 'h0;

end

if (DMA_TYPE_DEST == DMA_TYPE_STREAM_AXI) begin

assign dest_clk = m_axis_aclk;
assign dest_ext_resetn = 1'b1;

Diff Content:
- 338 generate if (DMA_TYPE_DEST == DMA_TYPE_MM_AXI) begin
- 340 wire                                  dest_bl_valid;
- 341 wire                                  dest_bl_ready;
- 342 wire [BEATS_PER_BURST_WIDTH_DEST-1:0] dest_burst_length;
- 343 wire [BEATS_PER_BURST_WIDTH_SRC-1:0] dest_src_burst_length;
- 345 assign dest_clk = m_dest_axi_aclk;
- 346 assign dest_ext_resetn = m_dest_axi_aresetn;
- 348 wire [ID_WIDTH-1:0] dest_address_id;
- 349 wire dest_address_eot = eot_mem_dest[dest_address_id];
- 350 wire dest_response_eot = eot_mem_dest[dest_response_id];
- 352 assign dbg_dest_address_id = dest_address_id;
- 353 assign dbg_dest_data_id = dest_data_response_id;
- 355 assign dest_data_request_id = dest_address_id;
- 357 dest_axi_mm #(
- 358   .ID_WIDTH(ID_WIDTH),
- 359   .DMA_DATA_WIDTH(DMA_DATA_WIDTH_DEST),
- 360   .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),
- 361   .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST),
- 362   .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_DEST),
- 363   .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST),
- 364   .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),
- 365   .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST),
- 366   .CACHE_COHERENT(CACHE_COHERENT_DEST)
- 367 ) i_dest_dma_mm (
- 368   .m_axi_aclk(m_dest_axi_aclk),
- 369   .m_axi_aresetn(dest_resetn),
- 371   .enable(dest_enable),
- 372   .enabled(dest_enabled),
- 374   .req_valid(dest_req_valid),
- 375   .req_ready(dest_req_ready),
- 376   .req_address(dest_req_dest_address),
- 378   .bl_valid(dest_bl_valid),
- 379   .bl_ready(dest_bl_ready),
- 380   .measured_last_burst_length(dest_burst_length),
- 382   .response_valid(dest_response_valid),
- 383   .response_ready(dest_response_ready),
- 384   .response_resp(dest_response_resp),
- 385   .response_resp_eot(dest_response_resp_eot),
- 386   .response_resp_partial(dest_response_partial),
- 387   .response_data_burst_length(dest_response_data_burst_length),
- 389   .request_id(dest_request_id),
- 390   .response_id(dest_response_id),
- 392   .address_id(dest_address_id),
- 394   .address_eot(dest_address_eot),
- 395   .response_eot(dest_response_eot),
- 397   .fifo_valid(dest_valid),
- 398   .fifo_ready(dest_ready),
- 399   .fifo_data(dest_data),
- 400   .fifo_strb(dest_strb),
- 401   .fifo_last(dest_last),
- 403   .dest_burst_info_length(dest_burst_info_length),
- 404   .dest_burst_info_partial(dest_burst_info_partial),
- 405   .dest_burst_info_id(dest_burst_info_id),
- 406   .dest_burst_info_write(dest_burst_info_write),
- 408   .m_axi_awready(m_axi_awready),
- 409   .m_axi_awvalid(m_axi_awvalid),
- 410   .m_axi_awaddr(m_axi_awaddr),
- 411   .m_axi_awlen(m_axi_awlen),
- 412   .m_axi_awsize(m_axi_awsize),
- 413   .m_axi_awburst(m_axi_awburst),
- 414   .m_axi_awprot(m_axi_awprot),
- 415   .m_axi_awcache(m_axi_awcache),
- 416   .m_axi_wready(m_axi_wready),
- 417   .m_axi_wvalid(m_axi_wvalid),
- 418   .m_axi_wdata(m_axi_wdata),
- 419   .m_axi_wstrb(m_axi_wstrb),
- 420   .m_axi_wlast(m_axi_wlast),
- 422   .m_axi_bvalid(m_axi_bvalid),
- 423   .m_axi_bresp(m_axi_bresp),
- 424   .m_axi_bready(m_axi_bready)
- 425 );
- 427 util_axis_fifo #(
- 428   .DATA_WIDTH(BEATS_PER_BURST_WIDTH_SRC),
- 429   .ADDRESS_WIDTH(0),
- 430   .ASYNC_CLK(ASYNC_CLK_SRC_DEST)
- 431 ) i_src_dest_bl_fifo (
- 432   .s_axis_aclk(src_clk),
- 433   .s_axis_aresetn(src_resetn),
- 434   .s_axis_valid(src_bl_valid),
- 435   .s_axis_ready(src_bl_ready),
- 436   .s_axis_full(),
- 437   .s_axis_data(src_burst_length),
- 438   .s_axis_room(),
- 440   .m_axis_aclk(dest_clk),
- 441   .m_axis_aresetn(dest_resetn),
- 442   .m_axis_valid(dest_bl_valid),
- 443   .m_axis_ready(dest_bl_ready),
- 444   .m_axis_data(dest_src_burst_length),
- 445   .m_axis_level(),
- 446   .m_axis_empty()
- 447 );
- 451 if (BEATS_PER_BURST_WIDTH_SRC == BEATS_PER_BURST_WIDTH_DEST) begin
- 452 assign dest_burst_length = dest_src_burst_length;
- 453 end
- 455 if (BEATS_PER_BURST_WIDTH_SRC < BEATS_PER_BURST_WIDTH_DEST) begin
- 456 assign dest_burst_length = {dest_src_burst_length,
- 457                            {BEATS_PER_BURST_WIDTH_DEST - BEATS_PER_BURST_WIDTH_SRC{1'b1}}};
- 458 end
- 460 if (BEATS_PER_BURST_WIDTH_SRC > BEATS_PER_BURST_WIDTH_DEST) begin
- 461 assign dest_burst_length = dest_src_burst_length[BEATS_PER_BURST_WIDTH_SRC-1 -: BEATS_PER_BURST_WIDTH_DEST];
- 462 end
- 464 end else begin
- 466 assign m_axi_awvalid = 1'b0;
- 467 assign m_axi_awaddr = 'h00;
- 468 assign m_axi_awlen = 'h00;
- 469 assign m_axi_awsize = 'h00;
- 470 assign m_axi_awburst = 'h00;
- 471 assign m_axi_awprot = 'h00;
- 472 assign m_axi_awcache = 'h00;
- 474 assign m_axi_wvalid = 1'b0;
- 475 assign m_axi_wdata = 'h00;
- 476 assign m_axi_wstrb = 'h00;
- 477 assign m_axi_wlast = 1'b0;
- 479 assign m_axi_bready = 1'b0;
- 481 assign src_bl_ready = 1'b1;
- 483 assign dest_response_partial = 1'b0;
- 484 assign dest_response_data_burst_length = 'h0;
- 486 end
+ 464   localparam DMA_TYPE_MM_AXI = 0;
+ 464   localparam DMA_TYPE_STREAM_AXI = 1;
+ 464   localparam DMA_TYPE_FIFO = 2;
+ 464   localparam DMA_ADDRESS_WIDTH_DEST = DMA_AXI_ADDR_WIDTH - BYTES_PER_BEAT_WIDTH_DEST;
+ 464   localparam DMA_ADDRESS_WIDTH_SRC = DMA_AXI_ADDR_WIDTH - BYTES_PER_BEAT_WIDTH_SRC;
+ 464   localparam BEATS_PER_BURST_WIDTH_SRC = BYTES_PER_BURST_WIDTH - BYTES_PER_BEAT_WIDTH_SRC;
+ 464   localparam BEATS_PER_BURST_WIDTH_DEST = BYTES_PER_BURST_WIDTH - BYTES_PER_BEAT_WIDTH_DEST;
+ 464   localparam BURSTS_PER_TRANSFER_WIDTH = DMA_LENGTH_WIDTH - BYTES_PER_BURST_WIDTH;
+ 464   reg eot_mem_src[0:2**ID_WIDTH-1];
+ 464   reg eot_mem_dest[0:2**ID_WIDTH-1];
+ 464   wire request_eot;
+ 464   wire source_eot;
+ 464   wire [ID_WIDTH-1:0] request_id;
+ 464   wire [ID_WIDTH-1:0] source_id;
+ 464   wire [ID_WIDTH-1:0] response_id;
+ 464   wire enabled_src;
+ 464   wire enabled_dest;
+ 464   wire req_gen_valid;
+ 464   wire req_gen_ready;
+ 464   wire src_dest_valid;
+ 464   wire src_dest_ready;
+ 464   wire req_src_valid;
+ 464   wire req_src_ready;
+ 464   wire dest_req_valid;
+ 464   wire dest_req_ready;
+ 464   wire [DMA_ADDRESS_WIDTH_DEST-1:0] dest_req_dest_address;
+ 464   wire dest_req_xlast;
+ 464   wire dest_response_valid;
+ 464   wire dest_response_ready;
+ 464   wire [1:0] dest_response_resp;
+ 464   wire dest_response_resp_eot;
+ 464   wire [BYTES_PER_BURST_WIDTH-1:0] dest_response_data_burst_length;
+ 464   wire dest_response_partial;
+ 464   wire [ID_WIDTH-1:0] dest_request_id;
+ 464   wire [ID_WIDTH-1:0] dest_data_request_id;
+ 464   wire [ID_WIDTH-1:0] dest_data_response_id;
+ 464   wire [ID_WIDTH-1:0] dest_response_id;
+ 464   wire dest_valid;
+ 464   wire dest_ready;
+ 464   wire [DMA_DATA_WIDTH_DEST-1:0] dest_data;
+ 464   wire [DMA_DATA_WIDTH_DEST/8-1:0] dest_strb;
+ 464   wire dest_last;
+ 464   wire dest_fifo_valid;
+ 464   wire dest_fifo_ready;
+ 464   wire [DMA_DATA_WIDTH_DEST-1:0] dest_fifo_data;
+ 464   wire [DMA_DATA_WIDTH_DEST/8-1:0] dest_fifo_strb;
+ 464   wire dest_fifo_last;
+ 464   wire src_req_valid;
+ 464   wire src_req_ready;
+ 464   wire [DMA_ADDRESS_WIDTH_DEST-1:0] src_req_dest_address;
+ 464   wire [DMA_ADDRESS_WIDTH_SRC-1:0] src_req_src_address;
+ 464   wire [BEATS_PER_BURST_WIDTH_SRC-1:0] src_req_last_burst_length;
+ 464   wire [BYTES_PER_BEAT_WIDTH_SRC-1:0] src_req_last_beat_bytes;
+ 464   wire src_req_sync_transfer_start;
+ 464   wire src_req_xlast;
+ 464   reg [DMA_ADDRESS_WIDTH_DEST-1:0] src_req_dest_address_cur = 'h0;
+ 464   reg src_req_xlast_cur = 1'b0;
+ 464   /* TODO
+ 464   wire src_response_valid;
+ 464   wire src_response_ready;
+ 464   wire src_response_empty;
+ 464   wire [1:0] src_response_resp;
+ 464   */
+ 464   wire [ID_WIDTH-1:0] src_request_id;
+ 464   reg [ID_WIDTH-1:0] src_throttled_request_id;
+ 464   wire [ID_WIDTH-1:0] src_data_request_id;
+ 464   wire [ID_WIDTH-1:0] src_response_id;
+ 464   wire src_valid;
+ 464   wire [DMA_DATA_WIDTH_SRC-1:0] src_data;
+ 464   wire [BYTES_PER_BEAT_WIDTH_SRC-1:0] src_valid_bytes;
+ 464   wire src_last;
+ 464   wire src_partial_burst;
+ 464   wire block_descr_to_dst;
+ 464   wire src_fifo_valid;
+ 464   wire [DMA_DATA_WIDTH_SRC-1:0] src_fifo_data;
+ 464   wire [BYTES_PER_BEAT_WIDTH_SRC-1:0] src_fifo_valid_bytes;
+ 464   wire src_fifo_last;
+ 464   wire src_fifo_partial_burst;
+ 464   wire                                 src_bl_valid;
+ 464   wire                                 src_bl_ready;
+ 464   wire [BEATS_PER_BURST_WIDTH_SRC-1:0] src_burst_length;
+ 464   wire [BYTES_PER_BURST_WIDTH-1:0] dest_burst_info_length;
+ 464   wire                             dest_burst_info_partial;
+ 464   wire [ID_WIDTH-1:0] dest_burst_info_id;
+ 464   wire                dest_burst_info_write;
+ 464   reg src_dest_valid_hs = 1'b0;
+ 464   wire src_dest_valid_hs_masked;
+ 464   wire src_dest_ready_hs;
+ 464   wire req_rewind_req_valid;
+ 464   wire req_rewind_req_ready;
+ 464   wire [ID_WIDTH+3-1:0] req_rewind_req_data;
+ 464   wire completion_req_valid;
+ 464   wire completion_req_ready;
+ 464   wire completion_req_last;
+ 464   wire [1:0] completion_transfer_id;
+ 464   wire rewind_req_valid;
+ 464   wire rewind_req_ready;
+ 464   wire [ID_WIDTH+3-1:0] rewind_req_data;
+ 464   reg src_throttler_enabled = 1'b1;
+ 464   wire src_throttler_enable;
+ 464   wire rewind_state;
+ 464   /* Unused for now
+ 464   wire response_src_valid;
+ 464   wire response_src_ready = 1'b1;
+ 464   wire [1:0] response_src_resp;
+ 464   */
+ 464   assign dbg_dest_request_id = dest_request_id;
+ 464   assign dbg_dest_response_id = dest_response_id;
+ 464   assign dbg_src_request_id = src_request_id;
+ 464   assign dbg_src_response_id = src_response_id;
+ 464   always @(posedge req_clk)
+ 464   begin
+ 464     eot_mem_src[request_id] <= request_eot;
+ 464   end
+ 472   always @(posedge src_clk)
+ 472   begin
+ 472     eot_mem_dest[source_id] <= source_eot;
+ 472   end
+ 477   generate if (DMA_TYPE_DEST == DMA_TYPE_MM_AXI) begin
+ 477   wire                                  dest_bl_valid;
+ 477   wire                                  dest_bl_ready;
+ 477   wire [BEATS_PER_BURST_WIDTH_DEST-1:0] dest_burst_length;
+ 477   wire [BEATS_PER_BURST_WIDTH_SRC-1:0] dest_src_burst_length;
+ 477   assign dest_clk = m_dest_axi_aclk;
+ 477   assign dest_ext_resetn = m_dest_axi_aresetn;
+ 477   wire [ID_WIDTH-1:0] dest_address_id;
+ 477   wire dest_address_eot = eot_mem_dest[dest_address_id];
+ 477   wire dest_response_eot = eot_mem_dest[dest_response_id];
+ 477   assign dbg_dest_address_id = dest_address_id;
+ 477   assign dbg_dest_data_id = dest_data_response_id;
+ 477   assign dest_data_request_id = dest_address_id;
+ 477   dest_axi_mm #(
+ 477     .ID_WIDTH(ID_WIDTH),
+ 477     .DMA_DATA_WIDTH(DMA_DATA_WIDTH_DEST),
+ 477     .DMA_ADDR_WIDTH(DMA_AXI_ADDR_WIDTH),
+ 477     .BEATS_PER_BURST_WIDTH(BEATS_PER_BURST_WIDTH_DEST),
+ 477     .BYTES_PER_BEAT_WIDTH(BYTES_PER_BEAT_WIDTH_DEST),
+ 477     .MAX_BYTES_PER_BURST(MAX_BYTES_PER_BURST),
+ 477     .BYTES_PER_BURST_WIDTH(BYTES_PER_BURST_WIDTH),
+ 477     .AXI_LENGTH_WIDTH(AXI_LENGTH_WIDTH_DEST),
+ 477     .CACHE_COHERENT(CACHE_COHERENT_DEST)
+ 477   ) i_dest_dma_mm (
+ 477     .m_axi_aclk(m_dest_axi_aclk),
+ 477     .m_axi_aresetn(dest_resetn),
+ 477     .enable(dest_enable),
+ 477     .enabled(dest_enabled),
+ 477     .req_valid(dest_req_valid),
+ 477     .req_ready(dest_req_ready),
+ 477     .req_address(dest_req_dest_address),
+ 477     .bl_valid(dest_bl_valid),
+ 477     .bl_ready(dest_bl_ready),
+ 477     .measured_last_burst_length(dest_burst_length),
+ 477     .response_valid(dest_response_valid),
+ 477     .response_ready(dest_response_ready),
+ 477     .response_resp(dest_response_resp),
+ 477     .response_resp_eot(dest_response_resp_eot),
+ 477     .response_resp_partial(dest_response_partial),
+ 477     .response_data_burst_length(dest_response_data_burst_length),
+ 477     .request_id(dest_request_id),
+ 477     .response_id(dest_response_id),
+ 477     .address_id(dest_address_id),
+ 477     .address_eot(dest_address_eot),
+ 477     .response_eot(dest_response_eot),
+ 477     .fifo_valid(dest_valid),
+ 477     .fifo_ready(dest_ready),
+ 477     .fifo_data(dest_data),
+ 477     .fifo_strb(dest_strb),
+ 477     .fifo_last(dest_last),
+ 477     .dest_burst_info_length(dest_burst_info_length),
+ 477     .dest_burst_info_partial(dest_burst_info_partial),
+ 477     .dest_burst_info_id(dest_burst_info_id),
+ 477     .dest_burst_info_write(dest_burst_info_write),
+ 477     .m_axi_awready(m_axi_awready),
+ 477     .m_axi_awvalid(m_axi_awvalid),
+ 477     .m_axi_awaddr(m_axi_awaddr),
+ 477     .m_axi_awlen(m_axi_awlen),
+ 477     .m_axi_awsize(m_axi_awsize),
+ 477     .m_axi_awburst(m_axi_awburst),
+ 477     .m_axi_awprot(m_axi_awprot),
+ 477     .m_axi_awcache(m_axi_awcache),
+ 477     .m_axi_wready(m_axi_wready),
+ 477     .m_axi_wvalid(m_axi_wvalid),
+ 477     .m_axi_wdata(m_axi_wdata),
+ 477     .m_axi_wstrb(m_axi_wstrb),
+ 477     .m_axi_wlast(m_axi_wlast),
+ 477     .m_axi_bvalid(m_axi_bvalid),
+ 477     .m_axi_bresp(m_axi_bresp),
+ 477     .m_axi_bready(m_axi_bready));
+ 477   util_axis_fifo #(
+ 477     .DATA_WIDTH(BEATS_PER_BURST_WIDTH_SRC),
+ 477     .ADDRESS_WIDTH(0),
+ 477     .ASYNC_CLK(ASYNC_CLK_SRC_DEST)
+ 477   ) i_src_dest_bl_fifo (
+ 477     .s_axis_aclk(src_clk),
+ 477     .s_axis_aresetn(src_resetn),
+ 477     .s_axis_valid(src_bl_valid),
+ 477     .s_axis_ready(src_bl_ready),
+ 477     .s_axis_full(),
+ 477     .s_axis_data(src_burst_length),
+ 477     .s_axis_room(),
+ 477     .m_axis_aclk(dest_clk),
+ 477     .m_axis_aresetn(dest_resetn),
+ 477     .m_axis_valid(dest_bl_valid),
+ 477     .m_axis_ready(dest_bl_ready),
+ 477     .m_axis_data(dest_src_burst_length),
+ 477     .m_axis_level(),
+ 477     .m_axis_empty());
+ 477   if (BEATS_PER_BURST_WIDTH_SRC == BEATS_PER_BURST_WIDTH_DEST) begin
+ 477   assign dest_burst_length = dest_src_burst_length;
+ 477   end
+ 479   if (BEATS_PER_BURST_WIDTH_SRC < BEATS_PER_BURST_WIDTH_DEST) begin
+ 479   assign dest_burst_length = {dest_src_burst_length,
+ 479                              {BEATS_PER_BURST_WIDTH_DEST - BEATS_PER_BURST_WIDTH_SRC{1'b1}}};
+ 479   end
+ 481   if (BEATS_PER_BURST_WIDTH_SRC > BEATS_PER_BURST_WIDTH_DEST) begin
+ 481   assign dest_burst_length = dest_src_burst_length[BEATS_PER_BURST_WIDTH_SRC-1 -: BEATS_PER_BURST_WIDTH_DEST];
+ 481   end
+ 484   end else begin
+ 486   assign m_axi_awvalid = 1'b0;
+ 486   assign m_axi_awaddr = 'h00;
+ 486   assign m_axi_awlen = 'h00;
+ 486   assign m_axi_awsize = 'h00;
+ 486   assign m_axi_awburst = 'h00;
+ 486   assign m_axi_awprot = 'h00;
+ 486   assign m_axi_awcache = 'h00;

Clone Blocks:
