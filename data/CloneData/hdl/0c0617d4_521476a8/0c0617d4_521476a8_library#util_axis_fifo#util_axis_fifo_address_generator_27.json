{"Source Block": ["hdl/library/util_axis_fifo/util_axis_fifo_address_generator.v@185:192@HdlStmAssign", "\nwire [ADDRESS_WIDTH:0] m_axis_fifo_fill = m_axis_waddr_reg - m_axis_raddr_reg;\nassign m_axis_empty = m_axis_fifo_fill == 0;\nassign m_axis_almost_empty = (m_axis_fifo_fill < ALMOST_EMPTY_THRESHOLD);\nassign m_axis_valid = ~m_axis_empty;\nassign m_axis_level = m_axis_fifo_fill;\n\nendmodule\n"], "Clone Blocks": [["hdl/library/util_axis_fifo/util_axis_fifo_address_generator.v@182:192", "// m_axis_valid - FIFO has a valid output data, if it's not empty\n//\n//------------------------------------------------------------------------------\n\nwire [ADDRESS_WIDTH:0] m_axis_fifo_fill = m_axis_waddr_reg - m_axis_raddr_reg;\nassign m_axis_empty = m_axis_fifo_fill == 0;\nassign m_axis_almost_empty = (m_axis_fifo_fill < ALMOST_EMPTY_THRESHOLD);\nassign m_axis_valid = ~m_axis_empty;\nassign m_axis_level = m_axis_fifo_fill;\n\nendmodule\n"], ["hdl/library/util_axis_fifo/util_axis_fifo_address_generator.v@183:192", "//\n//------------------------------------------------------------------------------\n\nwire [ADDRESS_WIDTH:0] m_axis_fifo_fill = m_axis_waddr_reg - m_axis_raddr_reg;\nassign m_axis_empty = m_axis_fifo_fill == 0;\nassign m_axis_almost_empty = (m_axis_fifo_fill < ALMOST_EMPTY_THRESHOLD);\nassign m_axis_valid = ~m_axis_empty;\nassign m_axis_level = m_axis_fifo_fill;\n\nendmodule\n"], ["hdl/library/util_axis_fifo/util_axis_fifo_address_generator.v@184:192", "//------------------------------------------------------------------------------\n\nwire [ADDRESS_WIDTH:0] m_axis_fifo_fill = m_axis_waddr_reg - m_axis_raddr_reg;\nassign m_axis_empty = m_axis_fifo_fill == 0;\nassign m_axis_almost_empty = (m_axis_fifo_fill < ALMOST_EMPTY_THRESHOLD);\nassign m_axis_valid = ~m_axis_empty;\nassign m_axis_level = m_axis_fifo_fill;\n\nendmodule\n"], ["hdl/library/util_axis_fifo/util_axis_fifo_address_generator.v@181:191", "// m_axis_empty - FIFO is empty if read pointer equal to write pointer\n// m_axis_valid - FIFO has a valid output data, if it's not empty\n//\n//------------------------------------------------------------------------------\n\nwire [ADDRESS_WIDTH:0] m_axis_fifo_fill = m_axis_waddr_reg - m_axis_raddr_reg;\nassign m_axis_empty = m_axis_fifo_fill == 0;\nassign m_axis_almost_empty = (m_axis_fifo_fill < ALMOST_EMPTY_THRESHOLD);\nassign m_axis_valid = ~m_axis_empty;\nassign m_axis_level = m_axis_fifo_fill;\n\n"]], "Diff Content": {"Delete": [[190, "assign m_axis_level = m_axis_fifo_fill;\n"]], "Add": [[190, "  localparam FIFO_DEPTH = {ADDRESS_WIDTH{1'b1}};\n"], [190, "  reg [ADDRESS_WIDTH:0] s_axis_waddr_reg = 'h0;\n"], [190, "  reg [ADDRESS_WIDTH:0] m_axis_raddr_reg = 'h0;\n"], [190, "  wire [ADDRESS_WIDTH:0] s_axis_raddr_reg;\n"], [190, "  wire [ADDRESS_WIDTH:0] m_axis_waddr_reg;\n"], [190, "  wire s_axis_write_s;\n"], [190, "  wire s_axis_ready_s;\n"], [190, "  wire m_axis_read_s;\n"], [190, "  wire m_axis_valid_s;\n"], [190, "  wire [ADDRESS_WIDTH-1:0] m_axis_level_s;\n"], [190, "  assign s_axis_write_s = s_axis_ready && s_axis_valid && ~s_axis_full;\n"], [190, "  always @(posedge s_axis_aclk)\n"], [190, "  begin\n"], [190, "    if (!s_axis_aresetn)\n"], [190, "      s_axis_waddr_reg <= 'h0;\n"], [190, "    else\n"], [190, "      if (s_axis_write_s)\n"], [190, "        s_axis_waddr_reg <= s_axis_waddr_reg + 1'b1;\n"], [190, "  end\n"], [190, "  assign m_axis_read_s = m_axis_ready && m_axis_valid && ~m_axis_empty;\n"], [190, "  always @(posedge m_axis_aclk)\n"], [190, "  begin\n"], [190, "    if (!m_axis_aresetn)\n"], [190, "      m_axis_raddr_reg <= 'h0;\n"], [190, "    else\n"], [190, "      if (m_axis_read_s)\n"], [190, "        m_axis_raddr_reg <= m_axis_raddr_reg + 1'b1;\n"], [190, "  end\n"], [190, "  assign s_axis_waddr = s_axis_waddr_reg[ADDRESS_WIDTH-1:0];\n"], [190, "  assign m_axis_raddr = m_axis_raddr_reg[ADDRESS_WIDTH-1:0];\n"], [190, "  generate if (ASYNC_CLK == 1) begin : g_async_clock\n"], [190, "    sync_gray #(\n"], [190, "      .DATA_WIDTH(ADDRESS_WIDTH + 1)\n"], [190, "    ) i_waddr_sync_gray (\n"], [190, "      .in_clk(s_axis_aclk),\n"], [190, "      .in_resetn(s_axis_aresetn),\n"], [190, "      .out_clk(m_axis_aclk),\n"], [190, "      .out_resetn(m_axis_aresetn),\n"], [190, "      .in_count(s_axis_waddr_reg),\n"], [190, "      .out_count(m_axis_waddr_reg));\n"], [190, "    sync_gray #(\n"], [190, "      .DATA_WIDTH(ADDRESS_WIDTH + 1)\n"], [190, "    ) i_raddr_sync_gray (\n"], [190, "      .in_clk(m_axis_aclk),\n"], [190, "      .in_resetn(m_axis_aresetn),\n"], [190, "      .out_clk(s_axis_aclk),\n"], [190, "      .out_resetn(s_axis_aresetn),\n"], [190, "      .in_count(m_axis_raddr_reg),\n"], [190, "      .out_count(s_axis_raddr_reg));\n"], [190, "  end else begin\n"], [190, "    assign m_axis_waddr_reg = s_axis_waddr_reg;\n"], [190, "    assign s_axis_raddr_reg = m_axis_raddr_reg;\n"], [190, "  end\n"], [190, "  endgenerate\n"], [190, "  wire [ADDRESS_WIDTH:0] s_axis_fifo_fill = s_axis_waddr_reg - s_axis_raddr_reg;\n"], [190, "  assign s_axis_full = (s_axis_fifo_fill == {ADDRESS_WIDTH{1'b1}});\n"], [190, "  assign s_axis_almost_full = s_axis_fifo_fill > {1'b0, ~ALMOST_FULL_THRESHOLD};\n"], [190, "  assign s_axis_ready = ~s_axis_full;\n"], [190, "  assign s_axis_room = ~s_axis_fifo_fill;\n"], [190, "  wire [ADDRESS_WIDTH:0] m_axis_fifo_fill = m_axis_waddr_reg - m_axis_raddr_reg;\n"], [190, "  assign m_axis_empty = m_axis_fifo_fill == 0;\n"], [190, "  assign m_axis_almost_empty = (m_axis_fifo_fill < ALMOST_EMPTY_THRESHOLD);\n"], [190, "  assign m_axis_valid = ~m_axis_empty;\n"], [190, "  assign m_axis_level = m_axis_fifo_fill;\n"]]}}