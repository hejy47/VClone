{"Source Block": ["hdl/library/util_upack/util_upack_dsf.v@132:209@HdlStmIf", "  endgenerate\n\n  // data store & forward\n\n  generate\n  if (P_CNT > CH_OCNT) begin\n\n  assign dac_samples_int_s =  (dac_dsf_valid == 1'b1) ? (dac_samples_int + CH_DCNT) :\n            ((dac_samples_int >= CH_OCNT) ? (dac_samples_int - CH_OCNT) : dac_samples_int);\n\n\n  always @(posedge dac_clk) begin\n    dac_dmx_valid <= dac_valid & dac_dmx_enable;\n    if (dac_samples_int_s < CH_OCNT) begin\n      dac_dsf_valid <= dac_valid & dac_dmx_enable;\n    end else begin\n      dac_dsf_valid <= 1'b0;\n    end\n    if (dac_samples_int_s == 0) begin\n      dac_dsf_sync <= dac_valid & dac_dmx_enable;\n    end else begin\n      dac_dsf_sync <= 1'b0;\n    end\n    if (dac_dmx_valid == 1'b1) begin\n      dac_samples_int <= dac_samples_int_s;\n    end\n  end\n\n  assign dac_data_s[(E_WIDTH-1):P_WIDTH] = 'd0;\n  assign dac_data_s[(P_WIDTH-1):0] = dac_data;\n\n  assign dac_data_int_0_s[(E_WIDTH-1):(E_WIDTH-P_WIDTH)] = dac_data;\n  assign dac_data_int_0_s[((E_WIDTH-P_WIDTH)-1):0] =\n            dac_data_int[(M_WIDTH-1):(M_WIDTH-(E_WIDTH-P_WIDTH))];\n\n  assign dac_data_int_1_s[(E_WIDTH-1):(E_WIDTH-(M_WIDTH-O_WIDTH))] =\n            dac_data_int[((M_WIDTH-O_WIDTH)-1):0];\n  assign dac_data_int_1_s[((E_WIDTH-(M_WIDTH-O_WIDTH))-1):0] = 'd0;\n\n  always @(posedge dac_clk) begin\n    dac_dmx_valid_d <= dac_dmx_valid;\n    dac_dsf_valid_d <= dac_dsf_valid;\n    dac_samples_int_d <= dac_samples_int;\n    if (dac_dsf_valid_d == 1'b1) begin\n      dac_data_int <= dac_data_int_0_s[(E_WIDTH-1):(E_WIDTH-M_WIDTH)];\n    end else if (dac_dmx_valid_d == 1'b1) begin\n      dac_data_int <= dac_data_int_1_s[(E_WIDTH-1):(E_WIDTH-M_WIDTH)];\n    end\n  end\n\n  always @(posedge dac_clk) begin\n    if (dac_dmx_valid_d == 1'b1) begin\n      case (dac_samples_int_d)\n        3'b111: dac_dsf_data_int <= { dac_data_s[((CH_DW*1)-1):0],\n                                      dac_data_int[((CH_DW*8)-1):(CH_DW*1)]};\n        3'b110: dac_dsf_data_int <= { dac_data_s[((CH_DW*2)-1):0],\n                                      dac_data_int[((CH_DW*8)-1):(CH_DW*2)]};\n        3'b101: dac_dsf_data_int <= { dac_data_s[((CH_DW*3)-1):0],\n                                      dac_data_int[((CH_DW*8)-1):(CH_DW*3)]};\n        3'b100: dac_dsf_data_int <= { dac_data_s[((CH_DW*4)-1):0],\n                                      dac_data_int[((CH_DW*8)-1):(CH_DW*4)]};\n        3'b011: dac_dsf_data_int <= { dac_data_s[((CH_DW*5)-1):0],\n                                      dac_data_int[((CH_DW*8)-1):(CH_DW*5)]};\n        3'b010: dac_dsf_data_int <= { dac_data_s[((CH_DW*6)-1):0],\n                                      dac_data_int[((CH_DW*8)-1):(CH_DW*6)]};\n        3'b001: dac_dsf_data_int <= { dac_data_s[((CH_DW*7)-1):0],\n                                      dac_data_int[((CH_DW*8)-1):(CH_DW*7)]};\n        3'b000: dac_dsf_data_int <= dac_data_s;\n        default: dac_dsf_data_int <= 'd0;\n      endcase\n    end\n  end\n  end\n  endgenerate\n\n  genvar n;\n  generate\n  if (P_CNT > CH_OCNT) begin\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[168, "            dac_data_int[((M_WIDTH-O_WIDTH)-1):0];\n"]], "Add": [[168, "            dac_data_int[(M_WIDTH-1):O_WIDTH];\n"]]}}