Source Block: hdl/library/util_upack/util_upack_dsf.v@132:209@HdlStmIf
  endgenerate

  // data store & forward

  generate
  if (P_CNT > CH_OCNT) begin

  assign dac_samples_int_s =  (dac_dsf_valid == 1'b1) ? (dac_samples_int + CH_DCNT) :
            ((dac_samples_int >= CH_OCNT) ? (dac_samples_int - CH_OCNT) : dac_samples_int);


  always @(posedge dac_clk) begin
    dac_dmx_valid <= dac_valid & dac_dmx_enable;
    if (dac_samples_int_s < CH_OCNT) begin
      dac_dsf_valid <= dac_valid & dac_dmx_enable;
    end else begin
      dac_dsf_valid <= 1'b0;
    end
    if (dac_samples_int_s == 0) begin
      dac_dsf_sync <= dac_valid & dac_dmx_enable;
    end else begin
      dac_dsf_sync <= 1'b0;
    end
    if (dac_dmx_valid == 1'b1) begin
      dac_samples_int <= dac_samples_int_s;
    end
  end

  assign dac_data_s[(E_WIDTH-1):P_WIDTH] = 'd0;
  assign dac_data_s[(P_WIDTH-1):0] = dac_data;

  assign dac_data_int_0_s[(E_WIDTH-1):(E_WIDTH-P_WIDTH)] = dac_data;
  assign dac_data_int_0_s[((E_WIDTH-P_WIDTH)-1):0] =
            dac_data_int[(M_WIDTH-1):(M_WIDTH-(E_WIDTH-P_WIDTH))];

  assign dac_data_int_1_s[(E_WIDTH-1):(E_WIDTH-(M_WIDTH-O_WIDTH))] =
            dac_data_int[((M_WIDTH-O_WIDTH)-1):0];
  assign dac_data_int_1_s[((E_WIDTH-(M_WIDTH-O_WIDTH))-1):0] = 'd0;

  always @(posedge dac_clk) begin
    dac_dmx_valid_d <= dac_dmx_valid;
    dac_dsf_valid_d <= dac_dsf_valid;
    dac_samples_int_d <= dac_samples_int;
    if (dac_dsf_valid_d == 1'b1) begin
      dac_data_int <= dac_data_int_0_s[(E_WIDTH-1):(E_WIDTH-M_WIDTH)];
    end else if (dac_dmx_valid_d == 1'b1) begin
      dac_data_int <= dac_data_int_1_s[(E_WIDTH-1):(E_WIDTH-M_WIDTH)];
    end
  end

  always @(posedge dac_clk) begin
    if (dac_dmx_valid_d == 1'b1) begin
      case (dac_samples_int_d)
        3'b111: dac_dsf_data_int <= { dac_data_s[((CH_DW*1)-1):0],
                                      dac_data_int[((CH_DW*8)-1):(CH_DW*1)]};
        3'b110: dac_dsf_data_int <= { dac_data_s[((CH_DW*2)-1):0],
                                      dac_data_int[((CH_DW*8)-1):(CH_DW*2)]};
        3'b101: dac_dsf_data_int <= { dac_data_s[((CH_DW*3)-1):0],
                                      dac_data_int[((CH_DW*8)-1):(CH_DW*3)]};
        3'b100: dac_dsf_data_int <= { dac_data_s[((CH_DW*4)-1):0],
                                      dac_data_int[((CH_DW*8)-1):(CH_DW*4)]};
        3'b011: dac_dsf_data_int <= { dac_data_s[((CH_DW*5)-1):0],
                                      dac_data_int[((CH_DW*8)-1):(CH_DW*5)]};
        3'b010: dac_dsf_data_int <= { dac_data_s[((CH_DW*6)-1):0],
                                      dac_data_int[((CH_DW*8)-1):(CH_DW*6)]};
        3'b001: dac_dsf_data_int <= { dac_data_s[((CH_DW*7)-1):0],
                                      dac_data_int[((CH_DW*8)-1):(CH_DW*7)]};
        3'b000: dac_dsf_data_int <= dac_data_s;
        default: dac_dsf_data_int <= 'd0;
      endcase
    end
  end
  end
  endgenerate

  genvar n;
  generate
  if (P_CNT > CH_OCNT) begin

Diff Content:
- 168             dac_data_int[((M_WIDTH-O_WIDTH)-1):0];
+ 168             dac_data_int[(M_WIDTH-1):O_WIDTH];

Clone Blocks:
