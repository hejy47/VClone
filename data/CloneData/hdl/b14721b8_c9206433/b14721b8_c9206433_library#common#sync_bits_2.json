{"Source Block": ["hdl/library/common/sync_bits.v@56:66@HdlIdDef", "// Whether input and output clocks are asynchronous, if 0 the synchronizer will\n// be bypassed and the output signal equals the input signal.\nparameter CLK_ASYNC = 1;\n\nreg [NUM_BITS-1:0] out_m1 = 'h0;\nreg [NUM_BITS-1:0] out_m2 = 'h0;\n\nalways @(posedge out_clk)\nbegin\n\tif (out_resetn == 1'b0) begin\n\t\tout_m1 <= 'b0;\n"], "Clone Blocks": [["hdl/library/common/sync_bits.v@58:76", "parameter CLK_ASYNC = 1;\n\nreg [NUM_BITS-1:0] out_m1 = 'h0;\nreg [NUM_BITS-1:0] out_m2 = 'h0;\n\nalways @(posedge out_clk)\nbegin\n\tif (out_resetn == 1'b0) begin\n\t\tout_m1 <= 'b0;\n\t\tout_m2 <= 'b0;\n\tend else begin\n\t\tout_m1 <= in;\n\t    out_m2 <= out_m1;\t\n\tend\nend\n\nassign out = CLK_ASYNC ? out_m2 : in;\n\nendmodule\n"], ["hdl/library/common/sync_bits.v@55:65", "parameter NUM_BITS = 1;\n// Whether input and output clocks are asynchronous, if 0 the synchronizer will\n// be bypassed and the output signal equals the input signal.\nparameter CLK_ASYNC = 1;\n\nreg [NUM_BITS-1:0] out_m1 = 'h0;\nreg [NUM_BITS-1:0] out_m2 = 'h0;\n\nalways @(posedge out_clk)\nbegin\n\tif (out_resetn == 1'b0) begin\n"]], "Diff Content": {"Delete": [[61, "reg [NUM_BITS-1:0] out_m2 = 'h0;\n"]], "Add": [[61, "reg [NUM_BITS-1:0] cdc_sync_stage1 = 'h0;\n"], [61, "reg [NUM_BITS-1:0] cdc_sync_stage2 = 'h0;\n"]]}}