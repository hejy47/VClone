{"Source Block": ["hdl/library/common/ad_dds_1.v@64:106@HdlStmIf", "  assign zeros = 0;\n\n  // sine\n\n  generate\n    if (DDS_TYPE == DDS_CORDIC_TYPE) begin\n\n      // the cordic module input angle width must be equal with it's width\n      wire    [CORDIC_DW-1:0] angle_s;\n\n      if (CORDIC_DW >= 16) begin\n        assign angle_s = {angle,zeros[CORDIC_DW-16:0]};\n        assign sine16_s = sine_s[CORDIC_DW-1:CORDIC_DW-16];\n      end else begin\n        assign angle_s = angle[15:16-CORDIC_DW];\n        assign sine16_s = {sine_s,zeros[15-CORDIC_DW:0]};\n      end\n\n      ad_dds_sine_cordic #(\n        .CORDIC_DW(CORDIC_DW),\n        .DELAY_DW(1))\n      i_dds_sine (\n        .clk (clk),\n        .angle (angle_s),\n        .sine (sine_s),\n        .ddata_in (1'b0),\n        .ddata_out ());\n\n    end else begin\n\n      assign sine16_s = sine_s;\n      ad_dds_sine i_dds_sine (\n        .clk (clk),\n        .angle (angle),\n        .sine (sine_s),\n        .ddata_in (1'b0),\n        .ddata_out ());\n    end\n  endgenerate\n\n  // scale for a 16 bit sine generator\n\n  ad_mul #(.DELAY_DATA_WIDTH(1)) i_dds_scale (\n"], "Clone Blocks": [], "Diff Content": {"Delete": [[72, "      wire    [CORDIC_DW-1:0] angle_s;\n"], [78, "        assign angle_s = angle[15:16-CORDIC_DW];\n"], [87, "        .angle (angle_s),\n"]], "Add": [[72, "      wire    [CORDIC_DW:0] angle_s;\n"], [78, "        assign angle_s = {angle[15:16-CORDIC_DW],1'b0};\n"], [87, "        .angle (angle_s[CORDIC_DW:1]),\n"]]}}